{"version":3,"file":"static/webpack/2.811e5c193b3266c4acc3.hot-update.js","sources":["webpack:///./components/threejs-render/CanvasicalSmoke.jsx"],"sourcesContent":["import React, {\n    useRef,\n    useMemo,\n    useEffect\n} from \"react\";\nimport * as THREE from \"three\";\nimport {\n    Canvas,\n    extend as extendThree,\n    useFrame,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\n\n// Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\nimport { EffectComposer } from \"./resources/postprocessing/EffectComposer\";\nimport { RenderPass } from \"./resources/postprocessing/RenderPass\";\nimport { GlitchPass } from \"./resources/postprocessing/GlitchPass\";\nextendThree({ EffectComposer, RenderPass, GlitchPass });\n\n\n// Cast the lighting\nconst Lighting = () => {\n    const { mouse } = useThree();\n    const light = useRef();\n    \n    useFrame(() => {\n        light.current.position.set( mouse.x / 20, -mouse.y / 20, 60 )\n    });\n\n    return (\n        <>\n            <directionalLight\n                ref={light} \n                intensity={1.2}  \n                color=\"#fefefe\" \n            /> \n           \n        </>\n    );\n};\n\n// The canvas houses this function, the scene. Scene is where the elements come together.\nconst SmokePuff = ({ geometry, material }) => {\n    let smokePuffRef = useRef();\n    let factor = 1 + Math.random() * 2;  // ~ 1-3\n    let xFactor = -250 + Math.random() * 350;  // -250 - 250\n    let yFactor = -150 + Math.random() * 175;  // -150 - 75\n    let zFactor = 10 + Math.random() * 10;  //  10 - 20\n    \n    const getRandomArbitrary = (min, max) => Math.random() * (max - min) + min;\n    let randomFactor = getRandomArbitrary(1.1, 2);\n    \n    useFrame(({ clock }) => {\n        let slowRotation = ((clock.elapsedTime * (0.017)) * randomFactor) + xFactor;  // starts at ~0.0001 + xFactor and goes slow\n        let slowGrowth = (Math.tanh(clock.elapsedTime / 18) + 3);\n\n        smokePuffRef.current.rotation.z = slowRotation * -1;\n        smokePuffRef.current.scale.set(slowGrowth, slowGrowth, 2);\n        smokePuffRef.current.position.set(\n            xFactor * factor,\n            yFactor * factor,\n            zFactor\n        );\n    });\n    return <mesh  ref={smokePuffRef} material={material} geometry={geometry} />;\n}\n\nconst GenerateSmoke = () => {\n    const [ geometryRef, geometry ] = useResource();\n    const [ materialRef, material ] = useResource();\n    const url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n    const texture = useMemo(() => new THREE.TextureLoader().load(url), [url]);\n\n    return (\n        <>\n            <planeGeometry \n                ref={geometryRef} \n                attach=\"geometry\"   \n                args={[200, 200]}\n            />\n\n            <meshLambertMaterial \n                ref={materialRef}\n                attach=\"material\" \n                color=\"#eeeeee\"\n                opacity={0.75}\n                transparent\n            >\n                <primitive attach=\"map\" object={texture} />\n            </meshLambertMaterial>\n\n            {geometry && new Array(20).fill().map((_, index) => {\n                return (\n                    <SmokePuff\n                        key={index}\n                        material={material}\n                        geometry={geometry}\n                    />\n                )\n            })}\n        </>\n    );\n}\n\n// This is the canvas. It's the lowest level element in the three/webGl chain\nconst CanvasicalSmoke = props => {\n    const { canvas } = props;\n\n    return (\n        <>\n            <Canvas\n                className=\"container block__three-container\"\n                style={{ position: \"fixed\", width: \"100vw\", height: \"100%\", overflow: \"hidden\" }}\n                camera={{\n                    fov: 75,\n                    aspect: 0.5,\n                    near: 1,\n                    far: 10000,\n                    position: [0, 0, 400]\n                }}\n            >\n                {canvas.load ? (\n                    <>\n                        <Lighting />\n                        <GenerateSmoke />\n                    </>\n                ) : null}\n            </Canvas>\n            \n        </>\n    );\n};\n\nexport default CanvasicalSmoke;\n\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAKA;AACA;AASA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AADA;AAIA;AAGA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAVA;AACA;AACA;AAmBA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AANA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAtBA;AACA;AAwBA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AApBA;AANA;AACA;AACA;AAoCA;AAAA;AAGA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAnBA;AACA;AA2BA;;;;A","sourceRoot":""}