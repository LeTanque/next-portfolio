{"version":3,"file":"static/webpack/static/development/pages/skills.js.1d4530075c2059dcb674.hot-update.js","sources":["webpack:///./components/threejs-render/CanvasicalSmoke.jsx"],"sourcesContent":["import React, {\n    useCallback,\n    useEffect,\n    useRef,\n    useState,\n    useMemo\n} from \"react\";\nimport * as THREE from \"three\";\nimport {\n    Canvas,\n    extend as extendThree,\n    useFrame,\n    useLoader,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\n\n// Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\nimport { EffectComposer } from \"./resources/postprocessing/EffectComposer\";\nimport { RenderPass } from \"./resources/postprocessing/RenderPass\";\nimport { GlitchPass } from \"./resources/postprocessing/GlitchPass\";\nextendThree({ EffectComposer, RenderPass, GlitchPass });\n\n// import TextLoop from \"../TextLoop\";\n\n\n// Cast the lighting\nconst Lighting = () => {\n    const { mouse } = useThree();\n    const light = useRef();\n    \n    useFrame(() => {\n        light.current.position.set( mouse.x / 20, -mouse.y / 20, 0 )\n    });\n\n    return (\n        <>\n            <directionalLight\n                position={[ -2, 0, 30 ]}  intensity={0.5}  color=\"#ffffff\" \n            />\n            <pointLight \n                ref={light} distance={50} intensity={1.5} color=\"#ffffff\" \n            />\n        </>\n    );\n};\n\n// The canvas houses this function, the scene. Scene is where the elements come together.\nfunction SmokePuff({ geometry, material, particleArray }) {\n    let smokePuffRef = useRef();\n    let tenToHundred = Math.random() * 100; // 10 - 99.99\n    let speed = 0.01 + Math.random() / 200; // 0.1 - 0.19\n    let factor = 20 + Math.random() * 100;  // ~ 20-30\n    let xFactor = -50 + Math.random() * 100;  // -50 - 50\n    let yFactor = -50 + Math.random() * 100;  // -50 - 50\n    let zFactor = 10 + Math.random() * 10;  //  10 - 20\n\n    const getRandomArbitrary = (min, max) => Math.random() * (max - min) + min;\n    let randomFactor = getRandomArbitrary(2, 3);\n    \n    useFrame(({ clock }) => {\n        tenToHundred += speed; // tenToHundred = tenToHundred + speed, plus it sets a unique new version of t.\n        let delta = clock.getDelta();  // Change in clock. Something like 0.0001 - 0.0099\n        const cosWave = Math.cos(tenToHundred);  // a cosign wave\n        let slowAndSteady = (clock.elapsedTime * (delta + 0.017)) * randomFactor;  // starts at ~0.0001 and slowly increases\n\n        smokePuffRef.current.scale.set(cosWave, cosWave, cosWave);\n        smokePuffRef.current.rotation.z = slowAndSteady; \n        smokePuffRef.current.position.set(\n            xFactor +\n                Math.cos((tenToHundred/ 30) * factor) + (Math.sin(tenToHundred* 1) * factor) / 10,\n            yFactor +\n                Math.sin((tenToHundred/ 20) * factor) + (Math.cos(tenToHundred* 2) * factor) / 10,\n            zFactor\n            // zFactor +\n            //     Math.cos((tenToHundred/ 10) * factor) + (Math.sin(tenToHundred* 3) * factor) / 20\n        );\n    });\n\n    return <mesh  ref={smokePuffRef} material={material} geometry={geometry}  />;\n}\n\nconst GenerateSmoke = ({ particleArray }) => {\n    const [geometryRef, geometry] = useResource();\n    const [materialRef, material] = useResource();\n    const url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n    const texture = useMemo(() => new THREE.TextureLoader().load(url), [url]);\n    \n    return (\n        <>\n            <Lighting />\n\n            <planeGeometry \n                ref={geometryRef} \n                attach=\"geometry\"   \n                args={[200, 200]} \n            />\n            <meshLambertMaterial \n                ref={materialRef}\n                attach=\"material\" \n                color=\"#ccbbee\"\n                transparent\n            >\n                <primitive attach=\"map\" object={texture} />\n            </meshLambertMaterial>\n\n            {geometry && new Array(3).fill().map((_, index) => (\n                <SmokePuff\n                    key={index}\n                    material={material}\n                    geometry={geometry}\n                    particleArray={particleArray}\n                />\n            ))}\n        </>\n    );\n}\n\n\n// This is the canvas. It's the lowest level element in the three/webGl chain\nconst CanvasicalSmoke = () => {\n    const particleCount = 3;\n    const particleArray = [{ id: 0, x: 0, y: 0, z: 2 }];\n\n    useEffect(() => {\n        if (particleArray.length === particleCount) {\n            return null;\n        } else {\n            for (let i = 0; i <= particleCount; i++) {\n                particleArray.push({\n                    id: particleArray[i].id + 1,\n                    x: particleArray[i].x + 1,\n                    y: particleArray[i].y + 1,\n                    z: 2\n                });\n            }\n        }\n    }, [particleArray]);\n\n    return (\n        <>\n            <Canvas\n                className=\"container block__three-container\"\n                camera={{\n                    fov: 75,\n                    aspect: 0.5,\n                    near: 1,\n                    far: 10000,\n                    position: [0, 0, 300]\n                }}\n            >\n                <GenerateSmoke particleArray={particleArray} />\n            </Canvas>\n\n            {/* <TextLoop  /> */}\n        </>\n    );\n};\n\nexport default CanvasicalSmoke;\n\n// // Creates a fullscreen colored plane\n// const Plane = () => {\n//     return (\n//         <mesh >\n//             <planeGeometry  attach=\"geometry\"  args={[ 32, 32, 32, 32 ]} />\n//             <meshPhysicalMaterial  attach=\"material\"  color=\"#ffffff\"  />\n//         </mesh>\n//     )\n// }\n\n// // A light bar\n// const LightBar = () => {\n//     // const lightBar = useRef();\n\n//     return (\n//         <>\n//             <mesh\n//                 // ref={lightBar}\n//             >\n//                 <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n//                 <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n//             </mesh>\n//         </>\n//     )\n// }\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAOA;AACA;AAUA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AADA;AAIA;AAGA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAbA;AACA;AACA;AAmBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAOA;AAPA;AARA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAnBA;AANA;AACA;AACA;AAoCA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAZA;AAeA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA/BA;AACA;AAsCA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}