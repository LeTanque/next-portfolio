{"ast":null,"code":"var _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef, useState, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { Canvas, extend as extendThree, useFrame, useLoader, useResource, useThree } from \"react-three-fiber\"; // Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\n\nimport { EffectComposer } from \"./resources/postprocessing/EffectComposer\";\nimport { RenderPass } from \"./resources/postprocessing/RenderPass\";\nimport { GlitchPass } from \"./resources/postprocessing/GlitchPass\";\nextendThree({\n  EffectComposer,\n  RenderPass,\n  GlitchPass\n}); // import TextLoop from \"../TextLoop\";\n// const DEFAULT_LAYER = 0;\n// const OCCLUSION_LAYER = 1;\n// Cast the lighting\n\nconst Lighting = () => {\n  const {\n    mouse\n  } = useThree();\n  const light = useRef();\n  useFrame(() => light.current.position.set(mouse.current[0] / 20, -mouse.current[1] / 20, 0));\n  return __jsx(React.Fragment, null, __jsx(\"directionalLight\", {\n    color: \"#ffffff\",\n    intensity: 0.5,\n    position: [-2, 0, 30],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }), __jsx(\"pointLight\", {\n    ref: light,\n    distance: 50,\n    intensity: 1.5,\n    color: \"white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), __jsx(\"spotLight\", {\n    intensity: 0.5,\n    position: [10, 10, 40],\n    penumbra: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }));\n}; // The canvas houses this function, the scene. Scene is where the elements come together.\n\n\nfunction SmokePuff({\n  geometry,\n  material\n}) {\n  let ref = useRef();\n  let t = Math.random() * 100;\n  let speed = 0.01 + Math.random() / 200;\n  let factor = 20 + Math.random() * 100;\n  let xFactor = -50 + Math.random() * 100;\n  let yFactor = -50 + Math.random() * 100;\n  let zFactor = -30 + Math.random() * 60;\n  useFrame(() => {\n    t += speed;\n    const s = Math.cos(t);\n    ref.current.scale.set(s, s, s);\n    ref.current.rotation.set(s * 5, s * 5, s * 5);\n    ref.current.position.set(xFactor + Math.cos(t / 30 * factor) + Math.sin(t * 1) * factor / 10, yFactor + Math.sin(t / 20 * factor) + Math.cos(t * 2) * factor / 10, zFactor + Math.cos(t / 10 * factor) + Math.sin(t * 3) * factor / 20);\n  });\n  return __jsx(\"mesh\", {\n    ref: ref,\n    material: material,\n    geometry: geometry,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  });\n}\n\nconst GenerateSmoke = () => {\n  const [geometryRef, geometry] = useResource();\n  const [materialRef, material] = useResource();\n  const url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n  const texture = useMemo(() => new THREE.TextureLoader().load(url), [url]);\n  return __jsx(React.Fragment, null, __jsx(\"planeGeometry\", {\n    ref: geometryRef,\n    attach: \"geometry\",\n    args: [200, 200],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }), __jsx(\"meshLambertMaterial\", {\n    ref: materialRef,\n    attach: \"material\",\n    color: \"#ccbbee\",\n    transparent: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, __jsx(\"primitive\", {\n    attach: \"map\",\n    object: texture,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  })), geometry && new Array(2000).fill().map((_, index) => __jsx(SmokePuff, {\n    key: index,\n    material: material,\n    geometry: geometry,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  })));\n}; // This is the canvas. It's the lowest level element in the three/webGl chain\n\n\nconst CanvasicalSmoke = () => {\n  const particleCount = 3;\n  const particleArray = [{\n    id: 0,\n    x: 0,\n    y: 0,\n    z: 2\n  }];\n  useEffect(() => {\n    if (particleArray.length === particleCount) {\n      return null;\n    } else {\n      for (let i = 0; i <= particleCount; i++) {\n        particleArray.push({\n          id: particleArray[i].id + 1,\n          x: particleArray[i].x + 1,\n          y: particleArray[i].y + 1,\n          z: 2\n        });\n      }\n    }\n  }, [particleArray]);\n  return __jsx(React.Fragment, null, __jsx(Canvas, {\n    className: \"container block__three-container\",\n    camera: {\n      fov: 75,\n      aspect: 0.5,\n      near: 1,\n      far: 10000,\n      position: [0, 0, 300]\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, __jsx(Lighting, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }), __jsx(GenerateSmoke, {\n    particleArray: particleArray,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  })));\n};\n\nexport default CanvasicalSmoke; // // Creates a fullscreen colored plane\n// const Plane = () => {\n//     return (\n//         <mesh >\n//             <planeGeometry  attach=\"geometry\"  args={[ 32, 32, 32, 32 ]} />\n//             <meshPhysicalMaterial  attach=\"material\"  color=\"#ffffff\"  />\n//         </mesh>\n//     )\n// }\n// // A light bar\n// const LightBar = () => {\n//     // const lightBar = useRef();\n//     return (\n//         <>\n//             <mesh\n//                 // ref={lightBar}\n//             >\n//                 <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n//                 <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n//             </mesh>\n//         </>\n//     )\n// }","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx"],"names":["React","useCallback","useEffect","useRef","useState","useMemo","THREE","Canvas","extend","extendThree","useFrame","useLoader","useResource","useThree","EffectComposer","RenderPass","GlitchPass","Lighting","mouse","light","current","position","set","SmokePuff","geometry","material","ref","t","Math","random","speed","factor","xFactor","yFactor","zFactor","s","cos","scale","rotation","sin","GenerateSmoke","geometryRef","materialRef","url","texture","TextureLoader","load","Array","fill","map","_","index","CanvasicalSmoke","particleCount","particleArray","id","x","y","z","length","i","push","fov","aspect","near","far"],"mappings":"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","sourcesContent":["import React, {\n    useCallback,\n    useEffect,\n    useRef,\n    useState,\n    useMemo\n} from \"react\";\nimport * as THREE from \"three\";\nimport {\n    Canvas,\n    extend as extendThree,\n    useFrame,\n    useLoader,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\n\n// Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\nimport { EffectComposer } from \"./resources/postprocessing/EffectComposer\";\nimport { RenderPass } from \"./resources/postprocessing/RenderPass\";\nimport { GlitchPass } from \"./resources/postprocessing/GlitchPass\";\nextendThree({ EffectComposer, RenderPass, GlitchPass });\n\n// import TextLoop from \"../TextLoop\";\n\n// const DEFAULT_LAYER = 0;\n// const OCCLUSION_LAYER = 1;\n\n// Cast the lighting\nconst Lighting = () => {\n    const { mouse } = useThree();\n    const light = useRef();\n    useFrame(() => light.current.position.set( mouse.current[0] / 20, -mouse.current[1] / 20, 0 ));\n    return (\n        <>\n            <directionalLight\n                color=\"#ffffff\"\n                intensity={0.5}\n                position={[-2, 0, 30]}\n            />\n            <pointLight\n                ref={light}\n                distance={50}\n                intensity={1.5}\n                color=\"white\"\n            />\n            <spotLight intensity={0.5} position={[10, 10, 40]} penumbra={1} />\n        </>\n    );\n};\n\n// The canvas houses this function, the scene. Scene is where the elements come together.\nfunction SmokePuff({ geometry, material }) {\n    let ref = useRef();\n    let t = Math.random() * 100;\n    let speed = 0.01 + Math.random() / 200;\n    let factor = 20 + Math.random() * 100;\n    let xFactor = -50 + Math.random() * 100;\n    let yFactor = -50 + Math.random() * 100;\n    let zFactor = -30 + Math.random() * 60;\n    \n\n    useFrame(() => {\n        t += speed;\n        const s = Math.cos(t);\n        ref.current.scale.set(s, s, s);\n        ref.current.rotation.set(s * 5, s * 5, s * 5);\n        ref.current.position.set(\n            xFactor +\n                Math.cos((t / 30) * factor) +\n                (Math.sin(t * 1) * factor) / 10,\n            yFactor +\n                Math.sin((t / 20) * factor) +\n                (Math.cos(t * 2) * factor) / 10,\n            zFactor +\n                Math.cos((t / 10) * factor) +\n                (Math.sin(t * 3) * factor) / 20\n        );\n    });\n\n    return <mesh ref={ref} material={material} geometry={geometry} />;\n}\n\nconst GenerateSmoke = () => {\n    const [geometryRef, geometry] = useResource();\n    const [materialRef, material] = useResource();\n    const url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n    const texture = useMemo(() => new THREE.TextureLoader().load(url), [url]);\n    \n\n    return (\n        <>\n            <planeGeometry \n                ref={geometryRef} \n                attach=\"geometry\"   \n                args={[200, 200]} \n            />\n\n            <meshLambertMaterial \n                ref={materialRef}\n                attach=\"material\" \n                color=\"#ccbbee\"\n                transparent\n            >\n                <primitive attach=\"map\" object={texture} />\n            </ meshLambertMaterial>\n\n            {geometry && new Array(2000).fill().map((_, index) => (\n                <SmokePuff\n                    key={index}\n                    material={material}\n                    geometry={geometry}\n                />\n            ))}\n        </>\n    );\n}\n\n\n// This is the canvas. It's the lowest level element in the three/webGl chain\nconst CanvasicalSmoke = () => {\n    const particleCount = 3;\n    const particleArray = [{ id: 0, x: 0, y: 0, z: 2 }];\n\n    useEffect(() => {\n        if (particleArray.length === particleCount) {\n            return null;\n        } else {\n            for (let i = 0; i <= particleCount; i++) {\n                particleArray.push({\n                    id: particleArray[i].id + 1,\n                    x: particleArray[i].x + 1,\n                    y: particleArray[i].y + 1,\n                    z: 2\n                });\n            }\n        }\n    }, [particleArray]);\n\n    return (\n        <>\n            <Canvas\n                className=\"container block__three-container\"\n                camera={{\n                    fov: 75,\n                    aspect: 0.5,\n                    near: 1,\n                    far: 10000,\n                    position: [0, 0, 300]\n                }}\n            >\n                <Lighting />\n                <GenerateSmoke particleArray={particleArray} />\n            </Canvas>\n\n            {/* <TextLoop  /> */}\n        </>\n    );\n};\n\nexport default CanvasicalSmoke;\n\n// // Creates a fullscreen colored plane\n// const Plane = () => {\n//     return (\n//         <mesh >\n//             <planeGeometry  attach=\"geometry\"  args={[ 32, 32, 32, 32 ]} />\n//             <meshPhysicalMaterial  attach=\"material\"  color=\"#ffffff\"  />\n//         </mesh>\n//     )\n// }\n\n// // A light bar\n// const LightBar = () => {\n//     // const lightBar = useRef();\n\n//     return (\n//         <>\n//             <mesh\n//                 // ref={lightBar}\n//             >\n//                 <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n//                 <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n//             </mesh>\n//         </>\n//     )\n// }\n"]},"metadata":{},"sourceType":"module"}