{"ast":null,"code":"import _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport { DataTexture, FloatType, Math as _Math, Mesh, OrthographicCamera, PlaneBufferGeometry, RGBFormat, Scene, ShaderMaterial, UniformsUtils } from \"three/src/Three\";\nimport { DigitalGlitch } from \"../shaders/DigitalGlitch.js\";\nimport { Pass } from \"./Pass.js\";\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nvar GlitchPass = function (dt_size) {\n  Pass.call(this);\n  if (DigitalGlitch === undefined) console.error(\"THREE.GlitchPass relies on THREE.DigitalGlitch\");\n  var shader = DigitalGlitch;\n  this.uniforms = UniformsUtils.clone(shader.uniforms);\n  if (dt_size === undefined) dt_size = 64;\n  this.uniforms[\"tDisp\"].value = this.generateHeightmap(dt_size);\n  this.material = new ShaderMaterial({\n    uniforms: this.uniforms,\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader\n  });\n  this.camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  this.scene = new Scene();\n  this.quad = new Mesh(new PlaneBufferGeometry(2, 2), null);\n  this.quad.frustumCulled = false; // Avoid getting clipped\n\n  this.scene.add(this.quad);\n  this.factor = 0;\n};\n\nGlitchPass.prototype = _Object$assign(_Object$create(Pass.prototype), {\n  constructor: GlitchPass,\n  render: function (renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    const factor = Math.max(0, this.factor);\n    this.uniforms[\"tDiffuse\"].value = readBuffer.texture;\n    this.uniforms[\"seed\"].value = Math.random() * factor; //default seeding\n\n    this.uniforms[\"byp\"].value = 0;\n\n    if (factor) {\n      this.uniforms[\"amount\"].value = Math.random() / 90 * factor;\n      this.uniforms[\"angle\"].value = _Math.randFloat(-Math.PI, Math.PI) * factor;\n      this.uniforms[\"distortion_x\"].value = _Math.randFloat(0, 1) * factor;\n      this.uniforms[\"distortion_y\"].value = _Math.randFloat(0, 1) * factor;\n      this.uniforms[\"seed_x\"].value = _Math.randFloat(-0.3, 0.3) * factor;\n      this.uniforms[\"seed_y\"].value = _Math.randFloat(-0.3, 0.3) * factor;\n    } else this.uniforms[\"byp\"].value = 1;\n\n    this.quad.material = this.material;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      renderer.render(this.scene, this.camera);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      renderer.render(this.scene, this.camera);\n    }\n  },\n  generateHeightmap: function (dt_size) {\n    var data_arr = new Float32Array(dt_size * dt_size * 3);\n    var length = dt_size * dt_size;\n\n    for (var i = 0; i < length; i++) {\n      var val = _Math.randFloat(0, 1);\n\n      data_arr[i * 3 + 0] = val;\n      data_arr[i * 3 + 1] = val;\n      data_arr[i * 3 + 2] = val;\n    }\n\n    var texture = new DataTexture(data_arr, dt_size, dt_size, RGBFormat, FloatType);\n    texture.needsUpdate = true;\n    return texture;\n  }\n});\nexport { GlitchPass };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/resources/postprocessing/GlitchPass.js"],"names":["DataTexture","FloatType","Math","_Math","Mesh","OrthographicCamera","PlaneBufferGeometry","RGBFormat","Scene","ShaderMaterial","UniformsUtils","DigitalGlitch","Pass","GlitchPass","dt_size","call","undefined","console","error","shader","uniforms","clone","value","generateHeightmap","material","vertexShader","fragmentShader","camera","scene","quad","frustumCulled","add","factor","prototype","constructor","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","max","texture","random","randFloat","PI","renderToScreen","setRenderTarget","clear","data_arr","Float32Array","length","i","val","needsUpdate"],"mappings":";;AAAA,SACIA,WADJ,EAEIC,SAFJ,EAGIC,IAAI,IAAIC,KAHZ,EAIIC,IAJJ,EAKIC,kBALJ,EAMIC,mBANJ,EAOIC,SAPJ,EAQIC,KARJ,EASIC,cATJ,EAUIC,aAVJ,QAWO,iBAXP;AAYA,SAASC,aAAT,QAA8B,6BAA9B;AACA,SAASC,IAAT,QAAqB,WAArB;AACA;;;;AAIA,IAAIC,UAAU,GAAG,UAASC,OAAT,EAAkB;AAC/BF,EAAAA,IAAI,CAACG,IAAL,CAAU,IAAV;AACA,MAAIJ,aAAa,KAAKK,SAAtB,EACIC,OAAO,CAACC,KAAR,CAAc,gDAAd;AACJ,MAAIC,MAAM,GAAGR,aAAb;AACA,OAAKS,QAAL,GAAgBV,aAAa,CAACW,KAAd,CAAoBF,MAAM,CAACC,QAA3B,CAAhB;AACA,MAAIN,OAAO,KAAKE,SAAhB,EAA2BF,OAAO,GAAG,EAAV;AAC3B,OAAKM,QAAL,CAAc,OAAd,EAAuBE,KAAvB,GAA+B,KAAKC,iBAAL,CAAuBT,OAAvB,CAA/B;AACA,OAAKU,QAAL,GAAgB,IAAIf,cAAJ,CAAmB;AAC/BW,IAAAA,QAAQ,EAAE,KAAKA,QADgB;AAE/BK,IAAAA,YAAY,EAAEN,MAAM,CAACM,YAFU;AAG/BC,IAAAA,cAAc,EAAEP,MAAM,CAACO;AAHQ,GAAnB,CAAhB;AAKA,OAAKC,MAAL,GAAc,IAAItB,kBAAJ,CAAuB,CAAC,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiC,CAAC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,CAAd;AACA,OAAKuB,KAAL,GAAa,IAAIpB,KAAJ,EAAb;AACA,OAAKqB,IAAL,GAAY,IAAIzB,IAAJ,CAAS,IAAIE,mBAAJ,CAAwB,CAAxB,EAA2B,CAA3B,CAAT,EAAwC,IAAxC,CAAZ;AACA,OAAKuB,IAAL,CAAUC,aAAV,GAA0B,KAA1B,CAhB+B,CAgBE;;AACjC,OAAKF,KAAL,CAAWG,GAAX,CAAe,KAAKF,IAApB;AACA,OAAKG,MAAL,GAAc,CAAd;AACH,CAnBD;;AAqBAnB,UAAU,CAACoB,SAAX,GAAuB,eAAc,eAAcrB,IAAI,CAACqB,SAAnB,CAAd,EAA6C;AAChEC,EAAAA,WAAW,EAAErB,UADmD;AAGhEsB,EAAAA,MAAM,EAAE,UAASC,QAAT,EAAmBC,WAAnB,EAAgCC,UAAhC,EAA4CC,SAA5C,EAAuDC,UAAvD,EAAmE;AACvE,UAAMR,MAAM,GAAG9B,IAAI,CAACuC,GAAL,CAAS,CAAT,EAAY,KAAKT,MAAjB,CAAf;AACA,SAAKZ,QAAL,CAAc,UAAd,EAA0BE,KAA1B,GAAkCgB,UAAU,CAACI,OAA7C;AACA,SAAKtB,QAAL,CAAc,MAAd,EAAsBE,KAAtB,GAA8BpB,IAAI,CAACyC,MAAL,KAAgBX,MAA9C,CAHuE,CAGjB;;AACtD,SAAKZ,QAAL,CAAc,KAAd,EAAqBE,KAArB,GAA6B,CAA7B;;AACA,QAAIU,MAAJ,EAAY;AACR,WAAKZ,QAAL,CAAc,QAAd,EAAwBE,KAAxB,GAAiCpB,IAAI,CAACyC,MAAL,KAAgB,EAAjB,GAAuBX,MAAvD;AACA,WAAKZ,QAAL,CAAc,OAAd,EAAuBE,KAAvB,GACInB,KAAK,CAACyC,SAAN,CAAgB,CAAC1C,IAAI,CAAC2C,EAAtB,EAA0B3C,IAAI,CAAC2C,EAA/B,IAAqCb,MADzC;AAEA,WAAKZ,QAAL,CAAc,cAAd,EAA8BE,KAA9B,GACInB,KAAK,CAACyC,SAAN,CAAgB,CAAhB,EAAmB,CAAnB,IAAwBZ,MAD5B;AAEA,WAAKZ,QAAL,CAAc,cAAd,EAA8BE,KAA9B,GACInB,KAAK,CAACyC,SAAN,CAAgB,CAAhB,EAAmB,CAAnB,IAAwBZ,MAD5B;AAEA,WAAKZ,QAAL,CAAc,QAAd,EAAwBE,KAAxB,GAAgCnB,KAAK,CAACyC,SAAN,CAAgB,CAAC,GAAjB,EAAsB,GAAtB,IAA6BZ,MAA7D;AACA,WAAKZ,QAAL,CAAc,QAAd,EAAwBE,KAAxB,GAAgCnB,KAAK,CAACyC,SAAN,CAAgB,CAAC,GAAjB,EAAsB,GAAtB,IAA6BZ,MAA7D;AACH,KAVD,MAUO,KAAKZ,QAAL,CAAc,KAAd,EAAqBE,KAArB,GAA6B,CAA7B;;AACP,SAAKO,IAAL,CAAUL,QAAV,GAAqB,KAAKA,QAA1B;;AACA,QAAI,KAAKsB,cAAT,EAAyB;AACrBV,MAAAA,QAAQ,CAACW,eAAT,CAAyB,IAAzB;AACAX,MAAAA,QAAQ,CAACD,MAAT,CAAgB,KAAKP,KAArB,EAA4B,KAAKD,MAAjC;AACH,KAHD,MAGO;AACHS,MAAAA,QAAQ,CAACW,eAAT,CAAyBV,WAAzB;AACA,UAAI,KAAKW,KAAT,EAAgBZ,QAAQ,CAACY,KAAT;AAChBZ,MAAAA,QAAQ,CAACD,MAAT,CAAgB,KAAKP,KAArB,EAA4B,KAAKD,MAAjC;AACH;AACJ,GA5B+D;AA8BhEJ,EAAAA,iBAAiB,EAAE,UAAST,OAAT,EAAkB;AACjC,QAAImC,QAAQ,GAAG,IAAIC,YAAJ,CAAiBpC,OAAO,GAAGA,OAAV,GAAoB,CAArC,CAAf;AACA,QAAIqC,MAAM,GAAGrC,OAAO,GAAGA,OAAvB;;AAEA,SAAK,IAAIsC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAApB,EAA4BC,CAAC,EAA7B,EAAiC;AAC7B,UAAIC,GAAG,GAAGlD,KAAK,CAACyC,SAAN,CAAgB,CAAhB,EAAmB,CAAnB,CAAV;;AACAK,MAAAA,QAAQ,CAACG,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAR,GAAsBC,GAAtB;AACAJ,MAAAA,QAAQ,CAACG,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAR,GAAsBC,GAAtB;AACAJ,MAAAA,QAAQ,CAACG,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAR,GAAsBC,GAAtB;AACH;;AAED,QAAIX,OAAO,GAAG,IAAI1C,WAAJ,CACViD,QADU,EAEVnC,OAFU,EAGVA,OAHU,EAIVP,SAJU,EAKVN,SALU,CAAd;AAOAyC,IAAAA,OAAO,CAACY,WAAR,GAAsB,IAAtB;AACA,WAAOZ,OAAP;AACH;AAlD+D,CAA7C,CAAvB;AAqDA,SAAS7B,UAAT","sourcesContent":["import {\n    DataTexture,\n    FloatType,\n    Math as _Math,\n    Mesh,\n    OrthographicCamera,\n    PlaneBufferGeometry,\n    RGBFormat,\n    Scene,\n    ShaderMaterial,\n    UniformsUtils\n} from \"three/src/Three\";\nimport { DigitalGlitch } from \"../shaders/DigitalGlitch.js\";\nimport { Pass } from \"./Pass.js\";\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nvar GlitchPass = function(dt_size) {\n    Pass.call(this);\n    if (DigitalGlitch === undefined)\n        console.error(\"THREE.GlitchPass relies on THREE.DigitalGlitch\");\n    var shader = DigitalGlitch;\n    this.uniforms = UniformsUtils.clone(shader.uniforms);\n    if (dt_size === undefined) dt_size = 64;\n    this.uniforms[\"tDisp\"].value = this.generateHeightmap(dt_size);\n    this.material = new ShaderMaterial({\n        uniforms: this.uniforms,\n        vertexShader: shader.vertexShader,\n        fragmentShader: shader.fragmentShader\n    });\n    this.camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    this.scene = new Scene();\n    this.quad = new Mesh(new PlaneBufferGeometry(2, 2), null);\n    this.quad.frustumCulled = false; // Avoid getting clipped\n    this.scene.add(this.quad);\n    this.factor = 0;\n};\n\nGlitchPass.prototype = Object.assign(Object.create(Pass.prototype), {\n    constructor: GlitchPass,\n\n    render: function(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n        const factor = Math.max(0, this.factor);\n        this.uniforms[\"tDiffuse\"].value = readBuffer.texture;\n        this.uniforms[\"seed\"].value = Math.random() * factor; //default seeding\n        this.uniforms[\"byp\"].value = 0;\n        if (factor) {\n            this.uniforms[\"amount\"].value = (Math.random() / 90) * factor;\n            this.uniforms[\"angle\"].value =\n                _Math.randFloat(-Math.PI, Math.PI) * factor;\n            this.uniforms[\"distortion_x\"].value =\n                _Math.randFloat(0, 1) * factor;\n            this.uniforms[\"distortion_y\"].value =\n                _Math.randFloat(0, 1) * factor;\n            this.uniforms[\"seed_x\"].value = _Math.randFloat(-0.3, 0.3) * factor;\n            this.uniforms[\"seed_y\"].value = _Math.randFloat(-0.3, 0.3) * factor;\n        } else this.uniforms[\"byp\"].value = 1;\n        this.quad.material = this.material;\n        if (this.renderToScreen) {\n            renderer.setRenderTarget(null);\n            renderer.render(this.scene, this.camera);\n        } else {\n            renderer.setRenderTarget(writeBuffer);\n            if (this.clear) renderer.clear();\n            renderer.render(this.scene, this.camera);\n        }\n    },\n\n    generateHeightmap: function(dt_size) {\n        var data_arr = new Float32Array(dt_size * dt_size * 3);\n        var length = dt_size * dt_size;\n\n        for (var i = 0; i < length; i++) {\n            var val = _Math.randFloat(0, 1);\n            data_arr[i * 3 + 0] = val;\n            data_arr[i * 3 + 1] = val;\n            data_arr[i * 3 + 2] = val;\n        }\n\n        var texture = new DataTexture(\n            data_arr,\n            dt_size,\n            dt_size,\n            RGBFormat,\n            FloatType\n        );\n        texture.needsUpdate = true;\n        return texture;\n    }\n});\n\nexport { GlitchPass };\n"]},"metadata":{},"sourceType":"module"}