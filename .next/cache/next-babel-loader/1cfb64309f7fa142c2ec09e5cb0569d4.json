{"ast":null,"code":"var _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/SmokeContainerReal.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRef } from \"react\";\nimport * as THREE from 'three';\nimport { Canvas, useFrame, extend, useResource // useLoader,\n// useThree,\n} from \"react-three-fiber\";\nimport * as resources from './resources/index';\nextend(resources);\nimport TextLoop from \"../TextLoop\"; // This component creates a fullscreen colored plane \n\nconst Background = ({\n  color\n}) => {\n  const {\n    viewport\n  } = useThree();\n  return __jsx(\"mesh\", {\n    scale: [viewport.width, viewport.height, 1],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, __jsx(\"planeGeometry\", {\n    attach: \"geometry\",\n    args: [1, 1],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }), __jsx(a.meshBasicMaterial, {\n    attach: \"material\",\n    color: color,\n    depthTest: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }));\n}; // // This component loads an image and projects it onto a plane\n// function Image({ url, opacity, scale, ...props }) {\n//     const texture = useMemo(() => new THREE.TextureLoader().load(url), [url])\n//     const [hovered, setHover] = useState(false)\n//     const hover = useCallback(() => setHover(true), [])\n//     const unhover = useCallback(() => setHover(false), [])\n//     const { factor } = useSpring({ factor: hovered ? 1.1 : 1 })\n//     return (\n//         <a.mesh {...props} onHover={hover} onUnhover={unhover} scale={factor.interpolate(f => [scale * f, scale * f, 1])}>\n//             <planeBufferGeometry attach=\"geometry\" args={[5, 5]} />\n//             <a.meshLambertMaterial attach=\"material\" transparent opacity={opacity}>\n//                 <primitive attach=\"map\" object={texture} />\n//             </a.meshLambertMaterial>\n//         </a.mesh>\n//     )\n// }\n\n\nconst Thing = props => {\n  const {\n    vertices\n  } = props;\n  const [geometryRef, geometry] = useResource();\n  const ref = useRef(); // console.log('geometryRef AND geometry --> ', geometryRef, geometry);\n\n  useFrame(() => {\n    return ref.current.rotation.x = ref.current.rotation.y += 0.01;\n  }); // useFrame(() => (console.log('ref.current --> ', ref.current)))\n\n  return __jsx(\"group\", {\n    ref: ref,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, __jsx(\"line\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, __jsx(\"geometry\", {\n    attach: \"geometry\",\n    vertices: vertices.map(v => new THREE.Vector3(...v)),\n    onUpdate: self => self.verticesNeedUpdate = true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), __jsx(\"lineBasicMaterial\", {\n    attach: \"material\",\n    color: \"#ff0000\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  })), __jsx(\"mesh\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, __jsx(\"octahedronGeometry\", {\n    attach: \"geometry\",\n    args: [10000, 10000],\n    parameters: {\n      a: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), __jsx(\"meshBasicMaterial\", {\n    attach: \"material\",\n    color: \"peachpuff\",\n    opacity: 0.5,\n    transparent: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  })));\n}; // This component maintains the scene \n\n\nconst Scene = ({\n  top,\n  mouse\n}) => {\n  const {\n    size\n  } = useThree();\n  const scrollMax = size.height * 4.5;\n  return __jsx(React.Fragment, null, __jsx(a.spotLight, {\n    intensity: 1.2,\n    color: \"white\",\n    position: mouse.interpolate((x, y) => [x / 100, -y / 100, 6.5]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }), __jsx(Background, {\n    color: top.interpolate([0, scrollMax * 0.25, scrollMax * 0.8, scrollMax], ['#27282F', '#247BA0', '#70C1B3', '#f8f3f1']),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }), __jsx(Thing, {\n    vertices: [[-1, 0, 0], [0, 1, 0], [1, 0, 0], [0, -1, 0], [-1, 0, 0]],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }), __jsx(TextLoop, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }));\n}; // Main container\n\n\nconst SmokeContainerReal = () => {\n  return __jsx(\"div\", {\n    className: \"container block__three-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, __jsx(Canvas, {\n    style: {\n      background: 'radial-gradient(at 50% 70%, #200f20 40%, #090b1f 80%, #050523 100%)'\n    },\n    camera: {\n      fov: 75,\n      position: [0, 0, 60]\n    } // children                      // Either a function child (which receives state) or regular children\n    // gl                            // Props that go into the default webGL-renderer\n    // camera                        // Props that go into the default camera\n    // raycaster                     // Props that go into the default raycaster\n    // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n    // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n    // gl2 = false                   // Enables webgl2\n    // concurrent = false            // Enables React concurrent mode\n    // resize = undefined            // Resize config, see react-use-measure's options\n    // orthographic = false          // Creates an orthographic camera if true\n    // noEvents = false              // Switch off raytracing and event support\n    // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n    // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n    // updateDefaultCamera = true    // Adjusts default camera on size changes\n    // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n    // onPointerMissed \n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, __jsx(\"rectAreaLight\", {\n    intensity: 3,\n    position: [0, 10, -10],\n    width: 30,\n    height: 30,\n    onUpdate: self => self.lookAt(new THREE.Vector3(0, 0, 0)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }), __jsx(Scene, {\n    top: top,\n    mouse: mouse,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  })));\n};\n\nexport default SmokeContainerReal;","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/SmokeContainerReal.jsx"],"names":["extend","Background","color","viewport","useThree","Thing","props","vertices","useResource","ref","useRef","useFrame","v","THREE","self","a","Scene","mouse","size","scrollMax","x","top","SmokeContainerReal","background","fov","position"],"mappings":"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","sourcesContent":["import { useRef } from \"react\";\nimport * as THREE from 'three';\nimport {\n    Canvas,\n    useFrame,\n    extend,\n    useResource,\n    // useLoader,\n    // useThree,\n} from \"react-three-fiber\";\nimport * as resources from './resources/index';\nextend(resources);\n\nimport TextLoop from \"../TextLoop\";\n\n\n\n\n\n\n// This component creates a fullscreen colored plane \nconst Background = ({ color }) => {\n    const { viewport } = useThree();\n\n    return (\n        <mesh scale={[viewport.width, viewport.height, 1]}>\n            <planeGeometry attach=\"geometry\" args={[1, 1]} />\n            <a.meshBasicMaterial attach=\"material\" color={color} depthTest={false} />\n        </mesh>\n    )\n}\n\n\n\n// // This component loads an image and projects it onto a plane\n// function Image({ url, opacity, scale, ...props }) {\n//     const texture = useMemo(() => new THREE.TextureLoader().load(url), [url])\n//     const [hovered, setHover] = useState(false)\n//     const hover = useCallback(() => setHover(true), [])\n//     const unhover = useCallback(() => setHover(false), [])\n//     const { factor } = useSpring({ factor: hovered ? 1.1 : 1 })\n//     return (\n//         <a.mesh {...props} onHover={hover} onUnhover={unhover} scale={factor.interpolate(f => [scale * f, scale * f, 1])}>\n//             <planeBufferGeometry attach=\"geometry\" args={[5, 5]} />\n//             <a.meshLambertMaterial attach=\"material\" transparent opacity={opacity}>\n//                 <primitive attach=\"map\" object={texture} />\n//             </a.meshLambertMaterial>\n//         </a.mesh>\n//     )\n// }\n\n\n\n\n\n\nconst Thing = props => {\n    const { vertices } = props;\n    const [ geometryRef, geometry ] = useResource();\n    const ref = useRef();\n\n    // console.log('geometryRef AND geometry --> ', geometryRef, geometry);\n\n    useFrame(() => {\n        return ref.current.rotation.x = ref.current.rotation.y += 0.01\n    })\n\n    // useFrame(() => (console.log('ref.current --> ', ref.current)))\n    \n    return (\n        <group \n            ref={ref}\n        >\n            <line>\n                <geometry \n                    attach=\"geometry\"\n                    vertices={vertices.map( v => new THREE.Vector3(...v) )}\n                    onUpdate={self => (self.verticesNeedUpdate = true)}\n                />\n                <lineBasicMaterial   attach=\"material\"  color=\"#ff0000\" />\n            </line>\n                \n            <mesh       // a mesh combines material with geometry\n                // onClick={click => console.log('click --> ', click)}\n                // onHover={hover => console.log('hover --> ', hover)}\n            >\n                <octahedronGeometry \n                    attach=\"geometry\"  \n                    args={[10000, 10000]}\n                    parameters={{ a: 0 }}\n                />\n                <meshBasicMaterial  \n                    attach=\"material\"  \n                    color=\"peachpuff\" \n                    opacity={0.5} \n                    transparent={true} \n                />\n            </mesh>\n        </group>\n    )\n}\n\n\n// This component maintains the scene \nconst Scene = ({ top, mouse }) => {\n    const { size } = useThree();\n    const scrollMax = size.height * 4.5;\n\n    return (\n        <>\n            <a.spotLight intensity={1.2} color=\"white\" position={mouse.interpolate((x, y) => [x / 100, -y / 100, 6.5])} />\n            {/* <Effects factor={top.interpolate([0, 150], [1, 0])} /> */}\n            <Background color={top.interpolate([0, scrollMax * 0.25, scrollMax * 0.8, scrollMax], ['#27282F', '#247BA0', '#70C1B3', '#f8f3f1'])} />\n\n            <Thing   vertices={[ [ -1,0,0 ], [ 0,1,0 ], [ 1,0,0 ], [ 0,-1,0 ], [ -1,0,0 ] ]}  />\n\n            <TextLoop  />\n\n            {/* <Stars position={top.interpolate(top => [0, -1 + top / 20, 0])} />\n            <Images top={top} mouse={mouse} scrollMax={scrollMax} />\n            <Text opacity={top.interpolate([0, 200], [1, 0])} position={top.interpolate(top => [0, -1 + top / 200, 0])}>\n                lorem\n            </Text>\n            <Text position={top.interpolate(top => [0, -20 + ((top * 10) / scrollMax) * 2, 0])} color=\"black\" fontSize={150}>\n                Ipsum\n            </Text> */}\n        </>\n    )\n}\n\n// Main container\nconst SmokeContainerReal = () => {\n\n    return (\n        <div  className=\"container block__three-container\" >\n            <Canvas\n                style={{ background: 'radial-gradient(at 50% 70%, #200f20 40%, #090b1f 80%, #050523 100%)' }}\n                camera={{ fov: 75, position: [0, 0, 60] }} \n                // children                      // Either a function child (which receives state) or regular children\n                // gl                            // Props that go into the default webGL-renderer\n                // camera                        // Props that go into the default camera\n                // raycaster                     // Props that go into the default raycaster\n                // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n                // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n                // gl2 = false                   // Enables webgl2\n                // concurrent = false            // Enables React concurrent mode\n                // resize = undefined            // Resize config, see react-use-measure's options\n                // orthographic = false          // Creates an orthographic camera if true\n                // noEvents = false              // Switch off raytracing and event support\n                // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n                // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n                // updateDefaultCamera = true    // Adjusts default camera on size changes\n                // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n                // onPointerMissed \n            >   \n                <rectAreaLight\n                    intensity={3}\n                    position={[0, 10, -10]}\n                    width={30}\n                    height={30}\n                    onUpdate={self => self.lookAt(new THREE.Vector3(0, 0, 0))}\n                />\n\n                <Scene top={top} mouse={mouse} />\n\n            </Canvas> \n        </div>\n    );\n}\n\nexport default SmokeContainerReal;"]},"metadata":{},"sourceType":"module"}