{"ast":null,"code":"import _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\n\n/**\n * @author Kaleb Murphy\n * @author Mugen87 / https://github.com/Mugen87\n */\nimport { Geometry } from '../core/Geometry.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Vector3 } from '../math/Vector3.js'; // RingGeometry\n\nfunction RingGeometry(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength) {\n  Geometry.call(this);\n  this.type = 'RingGeometry';\n  this.parameters = {\n    innerRadius: innerRadius,\n    outerRadius: outerRadius,\n    thetaSegments: thetaSegments,\n    phiSegments: phiSegments,\n    thetaStart: thetaStart,\n    thetaLength: thetaLength\n  };\n  this.fromBufferGeometry(new RingBufferGeometry(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength));\n  this.mergeVertices();\n}\n\nRingGeometry.prototype = _Object$create(Geometry.prototype);\nRingGeometry.prototype.constructor = RingGeometry; // RingBufferGeometry\n\nfunction RingBufferGeometry(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength) {\n  BufferGeometry.call(this);\n  this.type = 'RingBufferGeometry';\n  this.parameters = {\n    innerRadius: innerRadius,\n    outerRadius: outerRadius,\n    thetaSegments: thetaSegments,\n    phiSegments: phiSegments,\n    thetaStart: thetaStart,\n    thetaLength: thetaLength\n  };\n  innerRadius = innerRadius || 0.5;\n  outerRadius = outerRadius || 1;\n  thetaStart = thetaStart !== undefined ? thetaStart : 0;\n  thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n  thetaSegments = thetaSegments !== undefined ? Math.max(3, thetaSegments) : 8;\n  phiSegments = phiSegments !== undefined ? Math.max(1, phiSegments) : 1; // buffers\n\n  var indices = [];\n  var vertices = [];\n  var normals = [];\n  var uvs = []; // some helper variables\n\n  var segment;\n  var radius = innerRadius;\n  var radiusStep = (outerRadius - innerRadius) / phiSegments;\n  var vertex = new Vector3();\n  var uv = new Vector2();\n  var j, i; // generate vertices, normals and uvs\n\n  for (j = 0; j <= phiSegments; j++) {\n    for (i = 0; i <= thetaSegments; i++) {\n      // values are generate from the inside of the ring to the outside\n      segment = thetaStart + i / thetaSegments * thetaLength; // vertex\n\n      vertex.x = radius * Math.cos(segment);\n      vertex.y = radius * Math.sin(segment);\n      vertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n      normals.push(0, 0, 1); // uv\n\n      uv.x = (vertex.x / outerRadius + 1) / 2;\n      uv.y = (vertex.y / outerRadius + 1) / 2;\n      uvs.push(uv.x, uv.y);\n    } // increase the radius for next row of vertices\n\n\n    radius += radiusStep;\n  } // indices\n\n\n  for (j = 0; j < phiSegments; j++) {\n    var thetaSegmentLevel = j * (thetaSegments + 1);\n\n    for (i = 0; i < thetaSegments; i++) {\n      segment = i + thetaSegmentLevel;\n      var a = segment;\n      var b = segment + thetaSegments + 1;\n      var c = segment + thetaSegments + 2;\n      var d = segment + 1; // faces\n\n      indices.push(a, b, d);\n      indices.push(b, c, d);\n    }\n  } // build geometry\n\n\n  this.setIndex(indices);\n  this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n  this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n  this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n}\n\nRingBufferGeometry.prototype = _Object$create(BufferGeometry.prototype);\nRingBufferGeometry.prototype.constructor = RingBufferGeometry;\nexport { RingGeometry, RingBufferGeometry };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/geometries/RingGeometry.js"],"names":["Geometry","BufferGeometry","Float32BufferAttribute","Vector2","Vector3","RingGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","thetaStart","thetaLength","call","type","parameters","fromBufferGeometry","RingBufferGeometry","mergeVertices","prototype","constructor","undefined","Math","PI","max","indices","vertices","normals","uvs","segment","radius","radiusStep","vertex","uv","j","i","x","cos","y","sin","push","z","thetaSegmentLevel","a","b","c","d","setIndex","setAttribute"],"mappings":"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","sourcesContent":["/**\n * @author Kaleb Murphy\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nimport { Geometry } from '../core/Geometry.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Vector3 } from '../math/Vector3.js';\n\n// RingGeometry\n\nfunction RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'RingGeometry';\n\n\tthis.parameters = {\n\t\tinnerRadius: innerRadius,\n\t\touterRadius: outerRadius,\n\t\tthetaSegments: thetaSegments,\n\t\tphiSegments: phiSegments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tthis.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\n\tthis.mergeVertices();\n\n}\n\nRingGeometry.prototype = Object.create( Geometry.prototype );\nRingGeometry.prototype.constructor = RingGeometry;\n\n// RingBufferGeometry\n\nfunction RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'RingBufferGeometry';\n\n\tthis.parameters = {\n\t\tinnerRadius: innerRadius,\n\t\touterRadius: outerRadius,\n\t\tthetaSegments: thetaSegments,\n\t\tphiSegments: phiSegments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tinnerRadius = innerRadius || 0.5;\n\touterRadius = outerRadius || 1;\n\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// some helper variables\n\n\tvar segment;\n\tvar radius = innerRadius;\n\tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\tvar vertex = new Vector3();\n\tvar uv = new Vector2();\n\tvar j, i;\n\n\t// generate vertices, normals and uvs\n\n\tfor ( j = 0; j <= phiSegments; j ++ ) {\n\n\t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\n\n\t\t\t// values are generate from the inside of the ring to the outside\n\n\t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t// uv\n\n\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t}\n\n\t\t// increase the radius for next row of vertices\n\n\t\tradius += radiusStep;\n\n\t}\n\n\t// indices\n\n\tfor ( j = 0; j < phiSegments; j ++ ) {\n\n\t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n\t\tfor ( i = 0; i < thetaSegments; i ++ ) {\n\n\t\t\tsegment = i + thetaSegmentLevel;\n\n\t\t\tvar a = segment;\n\t\t\tvar b = segment + thetaSegments + 1;\n\t\t\tvar c = segment + thetaSegments + 2;\n\t\t\tvar d = segment + 1;\n\n\t\t\t// faces\n\n\t\t\tindices.push( a, b, d );\n\t\t\tindices.push( b, c, d );\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n}\n\nRingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nRingBufferGeometry.prototype.constructor = RingBufferGeometry;\n\n\nexport { RingGeometry, RingBufferGeometry };\n"]},"metadata":{},"sourceType":"module"}