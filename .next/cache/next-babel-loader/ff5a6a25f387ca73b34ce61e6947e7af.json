{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/Canvasical.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef } from \"react\";\nimport * as THREE from 'three';\nimport { Canvas, extend as extendThree, useFrame, useLoader, useResource, useThree } from \"react-three-fiber\"; // Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\n\nimport { EffectComposer } from './resources/postprocessing/EffectComposer';\nimport { RenderPass } from './resources/postprocessing/RenderPass';\nimport { GlitchPass } from './resources/postprocessing/GlitchPass';\nextendThree({\n  EffectComposer: EffectComposer,\n  RenderPass: RenderPass,\n  GlitchPass: GlitchPass\n});\nimport TextLoop from \"../TextLoop\"; // Creates a fullscreen colored plane\n\nvar Background = function Background(_ref) {\n  var color = _ref.color;\n\n  var _useThree = useThree(),\n      viewport = _useThree.viewport;\n\n  return __jsx(\"mesh\", {\n    scale: [viewport.width, viewport.height, 1],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, __jsx(\"planeGeometry\", {\n    attach: \"geometry\",\n    args: [1, 1],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }), __jsx(\"meshBasicMaterial\", {\n    attach: \"material\",\n    color: color,\n    depthTest: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }));\n}; // The canvas houses this function, the scene. Scene is where the elements come together.\n\n\nvar Scene = function Scene() {\n  var _useResource = useResource(),\n      _useResource2 = _slicedToArray(_useResource, 2),\n      geometryRef = _useResource2[0],\n      geometry = _useResource2[1];\n\n  var _useResource3 = useResource(),\n      _useResource4 = _slicedToArray(_useResource3, 2),\n      materialRef = _useResource4[0],\n      material = _useResource4[1];\n\n  var ref = useRef();\n  return __jsx(\"group\", {\n    ref: ref,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, __jsx(Background, {\n    color: \"#131313\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), __jsx(\"pointLight\", {\n    color: \"#ffffff\",\n    intensity: 1.3,\n    position: [50, 50, 50],\n    distance: 50,\n    decay: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), __jsx(\"meshLambertMaterial\", {\n    ref: materialRef,\n    color: \"0x00dddd\",\n    transparent: true,\n    opacity: 0.75 // map={smokeTexture}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), __jsx(\"mesh\", {\n    ref: ref,\n    userData: {\n      test: 'hello'\n    },\n    position: [1, 2, 3],\n    rotation: [0, 0, 0],\n    onClick: function onClick(e) {\n      return console.log('click');\n    },\n    onPointerOver: function onPointerOver(e) {\n      return console.log('hover');\n    },\n    onPointerOut: function onPointerOut(e) {\n      return console.log('unhover');\n    },\n    visible: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, __jsx(\"planeGeometry\", {\n    attach: \"geometry\",\n    args: [10000, 10000],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), __jsx(\"meshNormalMaterial\", {\n    attach: \"material\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  })));\n}; // This is the canvas. It's the lowest level element in the three/webGl chain\n\n\nvar Canvasical = function Canvasical() {\n  return __jsx(\"div\", {\n    className: \"container block__three-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, __jsx(Canvas // style={{ background: 'radial-gradient(at 50% 70%, #200f20 40%, #090b1f 80%, #050523 100%)' }}\n  , {\n    camera: {\n      fov: 75,\n      position: [0, 0, 50]\n    } // children                      // Either a function child (which receives state) or regular children\n    // gl                            // Props that go into the default webGL-renderer\n    // camera                        // Props that go into the default camera\n    // raycaster                     // Props that go into the default raycaster\n    // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n    // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n    // gl2 = false                   // Enables webgl2\n    // concurrent = false            // Enables React concurrent mode\n    // resize = undefined            // Resize config, see react-use-measure's options\n    // orthographic = false          // Creates an orthographic camera if true\n    // noEvents = false              // Switch off raytracing and event support\n    // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n    // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n    // updateDefaultCamera = true    // Adjusts default camera on size changes\n    // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n    // onPointerMissed \n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, __jsx(Scene, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  })), __jsx(TextLoop, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }));\n};\n\nexport default Canvasical;","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/Canvasical.jsx"],"names":["extend","extendThree","EffectComposer","RenderPass","GlitchPass","Background","color","viewport","useThree","Scene","geometryRef","geometry","useResource","materialRef","material","ref","useRef","test","console","Canvasical","fov","position"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef } from \"react\";\nimport * as THREE from 'three';\nimport {\n    Canvas,\n    extend as extendThree,\n    useFrame,\n    useLoader,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\n\n// Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\nimport { EffectComposer } from './resources/postprocessing/EffectComposer'\nimport { RenderPass } from './resources/postprocessing/RenderPass'\nimport { GlitchPass } from './resources/postprocessing/GlitchPass'\nextendThree({ EffectComposer, RenderPass, GlitchPass });\n\nimport TextLoop from \"../TextLoop\";\n\n\n\n\n\n// Creates a fullscreen colored plane\nconst Background = ({ color }) => {\n    const { viewport } = useThree();\n\n    return (\n        <mesh scale={[viewport.width, viewport.height, 1]}>\n            <planeGeometry attach=\"geometry\" args={[1, 1]} />\n            <meshBasicMaterial attach=\"material\" color={color}  depthTest={false} />\n        </mesh>\n    )\n}\n\n\n\n\n\n\n// The canvas houses this function, the scene. Scene is where the elements come together.\nconst Scene = () => {\n    const [geometryRef, geometry] = useResource();\n    const [materialRef, material] = useResource();\n    const ref = useRef();\n    \n\n\n    return (\n        <group ref={ref}>\n\n            <Background  color=\"#131313\" />\n\n            <pointLight\n                color=\"#ffffff\"\n                intensity={1.3} \n                position={[50, 50, 50]} \n                distance={50}\n                decay={2}\n            />\n\n            \n            <meshLambertMaterial \n                ref={materialRef}\n                color=\"0x00dddd\"\n                transparent={true}\n                opacity={0.75}\n                // map={smokeTexture}\n            /> \n\n            <mesh \n                ref={ref}\n                userData={{ test: 'hello' }} \n                position={[1, 2, 3]} \n                rotation={[0, 0, 0]}\n                onClick={e => console.log('click')}\n                onPointerOver={e => console.log('hover')}\n                onPointerOut={e => console.log('unhover')}\n                visible \n            >\n                <planeGeometry \n                    attach=\"geometry\" \n                    args={[10000, 10000]} \n                />\n                <meshNormalMaterial attach=\"material\" />\n            </mesh>\n            \n            \n        </group>\n    )\n}\n\n\n// This is the canvas. It's the lowest level element in the three/webGl chain\nconst Canvasical = () => {\n\n\n    return (\n        <div className=\"container block__three-container\" >\n            \n            <Canvas\n                // style={{ background: 'radial-gradient(at 50% 70%, #200f20 40%, #090b1f 80%, #050523 100%)' }}\n                camera={{ fov: 75, position: [0, 0, 50] }} \n                // children                      // Either a function child (which receives state) or regular children\n                // gl                            // Props that go into the default webGL-renderer\n                // camera                        // Props that go into the default camera\n                // raycaster                     // Props that go into the default raycaster\n                // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n                // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n                // gl2 = false                   // Enables webgl2\n                // concurrent = false            // Enables React concurrent mode\n                // resize = undefined            // Resize config, see react-use-measure's options\n                // orthographic = false          // Creates an orthographic camera if true\n                // noEvents = false              // Switch off raytracing and event support\n                // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n                // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n                // updateDefaultCamera = true    // Adjusts default camera on size changes\n                // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n                // onPointerMissed \n            >\n\n                <Scene />\n\n            </Canvas> \n           \n            <TextLoop  />\n\n        </div>\n    );\n}\n\nexport default Canvasical;\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}