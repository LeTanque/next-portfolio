{"ast":null,"code":"var _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/SmokeContainer.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef } from \"react\";\nimport { extend, Canvas, useFrame, useResource, useThree } from \"react-three-fiber\";\nimport * as resources from './resources/index';\nextend(resources);\nimport TextLoop from \"../TextLoop\";\n\nconst SmokeThing = () => {\n  const ref = useRef();\n  useFrame(() => ref.current.rotation.x = ref.current.rotation.y += 0.01);\n  return __jsx(\"mesh\", {\n    ref: ref,\n    onClick: e => console.log('click'),\n    onPointerOver: e => console.log('hover'),\n    onPointerOut: e => console.log('unhover'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, __jsx(\"planeGeometry\", {\n    attach: \"geometry\",\n    args: [10000, 10000],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }), __jsx(\"meshNormalMaterial\", {\n    attach: \"material\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }));\n};\n\nconst SmokeContainer = () => {\n  const {\n    gl,\n    // WebGL renderer \n    scene,\n    // Default scene\n    camera,\n    // Default camera\n    size,\n    // Bounds of the view (which stretches 100% and auto-adjusts)\n    viewport,\n    // Bounds of the viewport in 3d units + factor (size/viewport)\n    aspect,\n    // Aspect ratio (size.width / size.height)\n    mouse,\n    // Current 2D mouse coordinates\n    clock,\n    // THREE.Clock (useful for useFrame deltas)\n    invalidate,\n    // Invalidates a single frame (for <Canvas invalidateFrameloop />)\n    intersect,\n    // Calls onMouseMove handlers for objects underneath the cursor\n    setDefaultCamera // Sets the default camera\n\n  } = useThree(); // const mouse = useRef([0, 0]);\n  // const onMouseMove = useCallback(\n  //     ({ clientX: x, clientY: y }) =>\n  //     (mouse.current = [\n  //         x - window.innerWidth / 2,\n  //         y - window.innerHeight / 2\n  //     ]),\n  //     []\n  // );\n\n  const init = () => {\n    stats = new Stats();\n    clock = new THREE.Clock();\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 10000);\n    camera.position.z = 1000;\n    scene.add(camera);\n    geometry = new THREE.CubeGeometry(200, 200, 200);\n    material = new THREE.MeshLambertMaterial({\n      color: 0xaa6666,\n      wireframe: false\n    });\n    mesh = new THREE.Mesh(geometry, material); //scene.add( mesh );\n\n    cubeSineDriver = 0;\n    textGeo = new THREE.PlaneGeometry(300, 300);\n    THREE.ImageUtils.crossOrigin = \"\"; //Need this to pull in crossdomain images from AWS\n\n    textTexture = THREE.ImageUtils.loadTexture(\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/quickText.png\");\n    textMaterial = new THREE.MeshLambertMaterial({\n      color: 0x00ffff,\n      opacity: 1,\n      map: textTexture,\n      transparent: true,\n      blending: THREE.AdditiveBlending\n    });\n    text = new THREE.Mesh(textGeo, textMaterial);\n    text.position.z = 800;\n    scene.add(text);\n    light = new THREE.DirectionalLight(0xffffff, 0.5);\n    light.position.set(-1, 0, 1);\n    scene.add(light);\n    smokeTexture = THREE.ImageUtils.loadTexture(\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png\");\n    smokeMaterial = new THREE.MeshLambertMaterial({\n      color: 0x00dddd,\n      map: smokeTexture,\n      transparent: true\n    });\n    smokeGeo = new THREE.PlaneGeometry(300, 300);\n    smokeParticles = [];\n\n    for (p = 0; p < 150; p++) {\n      var particle = new THREE.Mesh(smokeGeo, smokeMaterial);\n      particle.position.set(Math.random() * 500 - 250, Math.random() * 500 - 250, Math.random() * 1000 - 100);\n      particle.rotation.z = Math.random() * 360;\n      scene.add(particle);\n      smokeParticles.push(particle);\n    }\n\n    document.body.appendChild(renderer.domElement);\n  };\n\n  const animate = () => {\n    // note: three.js includes requestAnimationFrame shim\n    stats.begin();\n    delta = clock.getDelta();\n    requestAnimationFrame(animate);\n    evolveSmoke();\n    render();\n    stats.end();\n  };\n\n  const evolveSmoke = () => {\n    var sp = smokeParticles.length;\n\n    while (sp--) {\n      smokeParticles[sp].rotation.z += delta * 0.2;\n    }\n  };\n\n  const render = () => {\n    mesh.rotation.x += 0.005;\n    mesh.rotation.y += 0.01;\n    cubeSineDriver += 0.01;\n    mesh.position.z = 100 + Math.sin(cubeSineDriver) * 500;\n    renderer.render(scene, camera);\n  };\n\n  return __jsx(\"div\", {\n    className: \"container block__three-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, __jsx(Canvas, {\n    camera: {\n      fov: 75,\n      position: [0, 0, 60]\n    } // children                      // Either a function child (which receives state) or regular children\n    // gl                            // Props that go into the default webGL-renderer\n    // camera                        // Props that go into the default camera\n    // raycaster                     // Props that go into the default raycaster\n    // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n    // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n    // gl2 = false                   // Enables webgl2\n    // concurrent = false            // Enables React concurrent mode\n    // resize = undefined            // Resize config, see react-use-measure's options\n    // orthographic = false          // Creates an orthographic camera if true\n    // noEvents = false              // Switch off raytracing and event support\n    // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n    // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n    // updateDefaultCamera = true    // Adjusts default camera on size changes\n    // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n    // onPointerMissed \n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, __jsx(SmokeThing, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  })), __jsx(TextLoop, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }));\n};\n\nexport default SmokeContainer;","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/SmokeContainer.jsx"],"names":["React","useCallback","useEffect","useRef","extend","Canvas","useFrame","useResource","useThree","resources","TextLoop","SmokeThing","ref","current","rotation","x","y","e","console","log","SmokeContainer","gl","scene","camera","size","viewport","aspect","mouse","clock","invalidate","intersect","setDefaultCamera","init","stats","Stats","THREE","Clock","renderer","WebGLRenderer","setSize","window","innerWidth","innerHeight","Scene","PerspectiveCamera","position","z","add","geometry","CubeGeometry","material","MeshLambertMaterial","color","wireframe","mesh","Mesh","cubeSineDriver","textGeo","PlaneGeometry","ImageUtils","crossOrigin","textTexture","loadTexture","textMaterial","opacity","map","transparent","blending","AdditiveBlending","text","light","DirectionalLight","set","smokeTexture","smokeMaterial","smokeGeo","smokeParticles","p","particle","Math","random","push","document","body","appendChild","domElement","animate","begin","delta","getDelta","requestAnimationFrame","evolveSmoke","render","end","sp","length","sin","fov"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef } from \"react\";\nimport {\n    extend,\n    Canvas,\n    useFrame,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\nimport * as resources from './resources/index';\nextend(resources);\n\n\nimport TextLoop from \"../TextLoop\";\n\n\n\n\n\n\nconst SmokeThing = () => {\n    const ref = useRef()\n\n    useFrame(() => (ref.current.rotation.x = ref.current.rotation.y += 0.01))\n\n    return (\n        <mesh\n            ref={ref}\n            onClick={e => console.log('click')}\n            onPointerOver={e => console.log('hover')}\n            onPointerOut={e => console.log('unhover')}\n        >\n            <planeGeometry \n                attach=\"geometry\" \n                args={[10000, 10000]} \n            />\n            <meshNormalMaterial attach=\"material\" />\n        </mesh>\n    )\n}\n\n\n\n\nconst SmokeContainer = () => {\n    const {\n        gl,                           // WebGL renderer \n        scene,                        // Default scene\n        camera,                       // Default camera\n        size,                         // Bounds of the view (which stretches 100% and auto-adjusts)\n        viewport,                     // Bounds of the viewport in 3d units + factor (size/viewport)\n        aspect,                       // Aspect ratio (size.width / size.height)\n        mouse,                        // Current 2D mouse coordinates\n        clock,                        // THREE.Clock (useful for useFrame deltas)\n        invalidate,                   // Invalidates a single frame (for <Canvas invalidateFrameloop />)\n        intersect,                    // Calls onMouseMove handlers for objects underneath the cursor\n        setDefaultCamera,             // Sets the default camera\n    } = useThree();\n\n \n\n\n    // const mouse = useRef([0, 0]);\n    // const onMouseMove = useCallback(\n    //     ({ clientX: x, clientY: y }) =>\n    //     (mouse.current = [\n    //         x - window.innerWidth / 2,\n    //         y - window.innerHeight / 2\n    //     ]),\n    //     []\n    // );\n\n \n    const init = () => {\n        stats = new Stats();\n\n\n        clock = new THREE.Clock();\n\n        renderer = new THREE.WebGLRenderer();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n\n        scene = new THREE.Scene();\n\n        camera = new THREE.PerspectiveCamera(\n            75,\n            window.innerWidth / window.innerHeight,\n            1,\n            10000\n        );\n        camera.position.z = 1000;\n        scene.add(camera);\n\n        geometry = new THREE.CubeGeometry(200, 200, 200);\n        material = new THREE.MeshLambertMaterial({\n            color: 0xaa6666,\n            wireframe: false\n        });\n        mesh = new THREE.Mesh(geometry, material);\n        //scene.add( mesh );\n        cubeSineDriver = 0;\n\n        textGeo = new THREE.PlaneGeometry(300, 300);\n        THREE.ImageUtils.crossOrigin = \"\"; //Need this to pull in crossdomain images from AWS\n        textTexture = THREE.ImageUtils.loadTexture(\n            \"https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/quickText.png\"\n        );\n        textMaterial = new THREE.MeshLambertMaterial({\n            color: 0x00ffff,\n            opacity: 1,\n            map: textTexture,\n            transparent: true,\n            blending: THREE.AdditiveBlending\n        });\n        text = new THREE.Mesh(textGeo, textMaterial);\n        text.position.z = 800;\n        scene.add(text);\n\n        light = new THREE.DirectionalLight(0xffffff, 0.5);\n        light.position.set(-1, 0, 1);\n        scene.add(light);\n\n        smokeTexture = THREE.ImageUtils.loadTexture(\n            \"https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png\"\n        );\n        smokeMaterial = new THREE.MeshLambertMaterial({\n            color: 0x00dddd,\n            map: smokeTexture,\n            transparent: true\n        });\n        smokeGeo = new THREE.PlaneGeometry(300, 300);\n        smokeParticles = [];\n\n        for (p = 0; p < 150; p++) {\n            var particle = new THREE.Mesh(smokeGeo, smokeMaterial);\n            particle.position.set(\n                Math.random() * 500 - 250,\n                Math.random() * 500 - 250,\n                Math.random() * 1000 - 100\n            );\n            particle.rotation.z = Math.random() * 360;\n            scene.add(particle);\n            smokeParticles.push(particle);\n        }\n\n        document.body.appendChild(renderer.domElement);\n    }\n\n    const animate = () => {\n        // note: three.js includes requestAnimationFrame shim\n        stats.begin();\n        delta = clock.getDelta();\n        requestAnimationFrame(animate);\n        evolveSmoke();\n        render();\n        stats.end();\n    }\n\n    const evolveSmoke = () => {\n        var sp = smokeParticles.length;\n        while (sp--) {\n            smokeParticles[sp].rotation.z += delta * 0.2;\n        }\n    }\n\n    const render = () => {\n        mesh.rotation.x += 0.005;\n        mesh.rotation.y += 0.01;\n        cubeSineDriver += 0.01;\n        mesh.position.z = 100 + Math.sin(cubeSineDriver) * 500;\n        renderer.render(scene, camera);\n    }\n\n    return (\n        <div \n            className=\"container block__three-container\" \n        >\n            \n            <Canvas\n                camera={{ fov: 75, position: [0, 0, 60] }} \n                // children                      // Either a function child (which receives state) or regular children\n                // gl                            // Props that go into the default webGL-renderer\n                // camera                        // Props that go into the default camera\n                // raycaster                     // Props that go into the default raycaster\n                // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n                // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n                // gl2 = false                   // Enables webgl2\n                // concurrent = false            // Enables React concurrent mode\n                // resize = undefined            // Resize config, see react-use-measure's options\n                // orthographic = false          // Creates an orthographic camera if true\n                // noEvents = false              // Switch off raytracing and event support\n                // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n                // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n                // updateDefaultCamera = true    // Adjusts default camera on size changes\n                // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n                // onPointerMissed \n            >   \n                \n                <SmokeThing />\n\n            </Canvas> \n           \n            <TextLoop  />\n\n        </div>\n    );\n}\n\nexport default SmokeContainer;\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}