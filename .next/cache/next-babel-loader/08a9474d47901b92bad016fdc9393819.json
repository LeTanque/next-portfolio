{"ast":null,"code":"var _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/ThreeContainer.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef } from \"react\";\nimport { render } from \"react-dom\";\nimport { applyProps, Canvas, useRender, useResource, useThree } from \"react-three-fiber\";\nimport * as resources from \"./resources/index\";\napplyProps(resources);\n\nfunction Particle({\n  geometry,\n  material\n}) {\n  let ref = useRef();\n  let t = Math.random() * 100;\n  let speed = 0.01 + Math.random() / 200;\n  let factor = 20 + Math.random() * 100;\n  let xFactor = -50 + Math.random() * 100;\n  let yFactor = -50 + Math.random() * 100;\n  let zFactor = -30 + Math.random() * 60;\n  useRender(() => {\n    t += speed;\n    const s = Math.cos(t);\n    ref.current.scale.set(s, s, s);\n    ref.current.rotation.set(s * 5, s * 5, s * 5);\n    ref.current.position.set(xFactor + Math.cos(t / 30 * factor) + Math.sin(t * 1) * factor / 10, yFactor + Math.sin(t / 20 * factor) + Math.cos(t * 2) * factor / 10, zFactor + Math.cos(t / 10 * factor) + Math.sin(t * 3) * factor / 20);\n  });\n  return __jsx(\"mesh\", {\n    ref: ref,\n    material: material,\n    geometry: geometry,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  });\n}\n\nfunction Swarm({\n  mouse\n}) {\n  const light = useRef();\n  const [geometryRef, geometry] = useResource();\n  const [materialRef, material] = useResource();\n  useRender(() => light.current.position.set(mouse.current[0] / 20, -mouse.current[1] / 20, 0));\n  return __jsx(React.Fragment, null, __jsx(\"pointLight\", {\n    ref: light,\n    distance: 50,\n    intensity: 1.5,\n    color: \"white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), __jsx(\"spotLight\", {\n    intensity: 0.5,\n    position: [10, 10, 40],\n    penumbra: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }), __jsx(\"mesh\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, __jsx(\"planeGeometry\", {\n    attach: \"geometry\",\n    args: [10000, 10000],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), __jsx(\"meshPhongMaterial\", {\n    attach: \"material\",\n    color: \"#575757\",\n    depthTest: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  })), __jsx(\"dodecahedronBufferGeometry\", {\n    ref: geometryRef,\n    args: [0.8, 0],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), __jsx(\"meshPhysicalMaterial\", {\n    ref: materialRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), geometry && new Array(2000).fill().map((_, index) => __jsx(Particle, {\n    key: index,\n    material: material,\n    geometry: geometry,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  })));\n}\n\nfunction Effect() {\n  const composer = useRef();\n  const {\n    scene,\n    gl,\n    size,\n    camera\n  } = useThree();\n  useEffect(() => void composer.current.setSize(size.width, size.height), [size]);\n  useRender(({\n    gl\n  }) => void (gl.autoClear = true, composer.current.render()), true);\n  return __jsx(\"effectComposer\", {\n    ref: composer,\n    args: [gl],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, __jsx(\"renderPass\", {\n    attachArray: \"passes\",\n    scene: scene,\n    camera: camera,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), __jsx(\"waterPass\", {\n    attachArray: \"passes\",\n    factor: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }), __jsx(\"afterimagePass\", {\n    attachArray: \"passes\",\n    factor: 0.7,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }), __jsx(\"shaderPass\", {\n    attachArray: \"passes\",\n    args: [resources.FXAAShader],\n    \"material-uniforms-resolution-value\": [1 / size.width, 1 / size.height],\n    renderToScreen: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }));\n}\n\nexport default function App() {\n  const mouse = useRef([0, 0]);\n  const onMouseMove = useCallback(({\n    clientX: x,\n    clientY: y\n  }) => mouse.current = [x - window.innerWidth / 2, y - window.innerHeight / 2], []);\n  return __jsx(\"div\", {\n    className: \"main\",\n    onMouseMove: onMouseMove,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, __jsx(Canvas, {\n    camera: {\n      fov: 75,\n      position: [0, 0, 50]\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, __jsx(Swarm, {\n    mouse: mouse,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }), __jsx(Effect, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  })), __jsx(\"a\", {\n    href: \"https://github.com/drcmda/react-three-fiber\",\n    className: \"top-left\",\n    children: \"React-three-fiber\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }), __jsx(\"a\", {\n    href: \"https://twitter.com/0xca0a\",\n    className: \"top-right\",\n    children: \"Twitter\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }), __jsx(\"a\", {\n    href: \"https://codesandbox.io/embed/387z7o2zrq\",\n    className: \"bottom-left\",\n    children: \"Code\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    className: \"header-major\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, \"LOREM\")));\n}\nrender(__jsx(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 151\n  },\n  __self: this\n}), document.getElementById(\"root\"));","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/ThreeContainer.jsx"],"names":["React","useCallback","useEffect","useRef","render","applyProps","Canvas","useRender","useResource","useThree","resources","Particle","geometry","material","ref","t","Math","random","speed","factor","xFactor","yFactor","zFactor","s","cos","current","scale","set","rotation","position","sin","Swarm","mouse","light","geometryRef","materialRef","Array","fill","map","_","index","Effect","composer","scene","gl","size","camera","setSize","width","height","autoClear","FXAAShader","App","onMouseMove","clientX","x","clientY","y","window","innerWidth","innerHeight","fov","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef } from \"react\";\nimport { render } from \"react-dom\";\nimport {\n    applyProps,\n    Canvas,\n    useRender,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\nimport * as resources from \"./resources/index\";\napplyProps(resources);\n\nfunction Particle({ geometry, material }) {\n    let ref = useRef();\n    let t = Math.random() * 100;\n    let speed = 0.01 + Math.random() / 200;\n    let factor = 20 + Math.random() * 100;\n    let xFactor = -50 + Math.random() * 100;\n    let yFactor = -50 + Math.random() * 100;\n    let zFactor = -30 + Math.random() * 60;\n    useRender(() => {\n        t += speed;\n        const s = Math.cos(t);\n        ref.current.scale.set(s, s, s);\n        ref.current.rotation.set(s * 5, s * 5, s * 5);\n        ref.current.position.set(\n            xFactor +\n                Math.cos((t / 30) * factor) +\n                (Math.sin(t * 1) * factor) / 10,\n            yFactor +\n                Math.sin((t / 20) * factor) +\n                (Math.cos(t * 2) * factor) / 10,\n            zFactor +\n                Math.cos((t / 10) * factor) +\n                (Math.sin(t * 3) * factor) / 20\n        );\n    });\n    return <mesh ref={ref} material={material} geometry={geometry} />;\n}\n\nfunction Swarm({ mouse }) {\n    const light = useRef();\n    const [geometryRef, geometry] = useResource();\n    const [materialRef, material] = useResource();\n    useRender(() =>\n        light.current.position.set(\n            mouse.current[0] / 20,\n            -mouse.current[1] / 20,\n            0\n        )\n    );\n    return (\n        <>\n            <pointLight\n                ref={light}\n                distance={50}\n                intensity={1.5}\n                color=\"white\"\n            />\n            <spotLight intensity={0.5} position={[10, 10, 40]} penumbra={1} />\n            <mesh>\n                <planeGeometry attach=\"geometry\" args={[10000, 10000]} />\n                <meshPhongMaterial\n                    attach=\"material\"\n                    color=\"#575757\"\n                    depthTest={false}\n                />\n            </mesh>\n            <dodecahedronBufferGeometry ref={geometryRef} args={[0.8, 0]} />\n            <meshPhysicalMaterial ref={materialRef} />\n            {geometry &&\n                new Array(2000)\n                    .fill()\n                    .map((_, index) => (\n                        <Particle\n                            key={index}\n                            material={material}\n                            geometry={geometry}\n                        />\n                    ))}\n        </>\n    );\n}\n\nfunction Effect() {\n    const composer = useRef();\n    const { scene, gl, size, camera } = useThree();\n    useEffect(() => void composer.current.setSize(size.width, size.height), [\n        size\n    ]);\n    useRender(\n        ({ gl }) => void ((gl.autoClear = true), composer.current.render()),\n        true\n    );\n    return (\n        <effectComposer ref={composer} args={[gl]}>\n            <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\n            <waterPass attachArray=\"passes\" factor={2} />\n            <afterimagePass attachArray=\"passes\" factor={0.7} />\n            <shaderPass\n                attachArray=\"passes\"\n                args={[resources.FXAAShader]}\n                material-uniforms-resolution-value={[\n                    1 / size.width,\n                    1 / size.height\n                ]}\n                renderToScreen\n            />\n        </effectComposer>\n    );\n}\n\nexport default function App() {\n    const mouse = useRef([0, 0]);\n    const onMouseMove = useCallback(\n        ({ clientX: x, clientY: y }) =>\n            (mouse.current = [\n                x - window.innerWidth / 2,\n                y - window.innerHeight / 2\n            ]),\n        []\n    );\n    return (\n        <div className=\"main\" onMouseMove={onMouseMove}>\n            <Canvas camera={{ fov: 75, position: [0, 0, 50] }}>\n                <Swarm mouse={mouse} />\n                <Effect />\n            </Canvas>\n            <a\n                href=\"https://github.com/drcmda/react-three-fiber\"\n                className=\"top-left\"\n                children=\"React-three-fiber\"\n            />\n            <a\n                href=\"https://twitter.com/0xca0a\"\n                className=\"top-right\"\n                children=\"Twitter\"\n            />\n            <a\n                href=\"https://codesandbox.io/embed/387z7o2zrq\"\n                className=\"bottom-left\"\n                children=\"Code\"\n            />\n            <div className=\"header-major\">\n                <span>LOREM</span>\n            </div>\n        </div>\n    );\n}\n\nrender(<App />, document.getElementById(\"root\"));\n"]},"metadata":{},"sourceType":"module"}