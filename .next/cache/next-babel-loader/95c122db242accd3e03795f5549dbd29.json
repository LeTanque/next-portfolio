{"ast":null,"code":"import _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Number$EPSILON from \"@babel/runtime-corejs2/core-js/number/epsilon\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://clara.io\n */\nimport { _Math } from './Math.js';\n\nfunction Quaternion(x, y, z, w) {\n  this._x = x || 0;\n  this._y = y || 0;\n  this._z = z || 0;\n  this._w = w !== undefined ? w : 1;\n}\n\n_Object$assign(Quaternion, {\n  slerp: function slerp(qa, qb, qm, t) {\n    return qm.copy(qa).slerp(qb, t);\n  },\n  slerpFlat: function slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {\n    // fuzz-free, array-based Quaternion SLERP operation\n    var x0 = src0[srcOffset0 + 0],\n        y0 = src0[srcOffset0 + 1],\n        z0 = src0[srcOffset0 + 2],\n        w0 = src0[srcOffset0 + 3],\n        x1 = src1[srcOffset1 + 0],\n        y1 = src1[srcOffset1 + 1],\n        z1 = src1[srcOffset1 + 2],\n        w1 = src1[srcOffset1 + 3];\n\n    if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {\n      var s = 1 - t,\n          cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n          dir = cos >= 0 ? 1 : -1,\n          sqrSin = 1 - cos * cos; // Skip the Slerp for tiny steps to avoid numeric problems:\n\n      if (sqrSin > _Number$EPSILON) {\n        var sin = Math.sqrt(sqrSin),\n            len = Math.atan2(sin, cos * dir);\n        s = Math.sin(s * len) / sin;\n        t = Math.sin(t * len) / sin;\n      }\n\n      var tDir = t * dir;\n      x0 = x0 * s + x1 * tDir;\n      y0 = y0 * s + y1 * tDir;\n      z0 = z0 * s + z1 * tDir;\n      w0 = w0 * s + w1 * tDir; // Normalize in case we just did a lerp:\n\n      if (s === 1 - t) {\n        var f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);\n        x0 *= f;\n        y0 *= f;\n        z0 *= f;\n        w0 *= f;\n      }\n    }\n\n    dst[dstOffset] = x0;\n    dst[dstOffset + 1] = y0;\n    dst[dstOffset + 2] = z0;\n    dst[dstOffset + 3] = w0;\n  }\n});\n\n_Object$defineProperties(Quaternion.prototype, {\n  x: {\n    get: function get() {\n      return this._x;\n    },\n    set: function set(value) {\n      this._x = value;\n\n      this._onChangeCallback();\n    }\n  },\n  y: {\n    get: function get() {\n      return this._y;\n    },\n    set: function set(value) {\n      this._y = value;\n\n      this._onChangeCallback();\n    }\n  },\n  z: {\n    get: function get() {\n      return this._z;\n    },\n    set: function set(value) {\n      this._z = value;\n\n      this._onChangeCallback();\n    }\n  },\n  w: {\n    get: function get() {\n      return this._w;\n    },\n    set: function set(value) {\n      this._w = value;\n\n      this._onChangeCallback();\n    }\n  }\n});\n\n_Object$assign(Quaternion.prototype, {\n  isQuaternion: true,\n  set: function set(x, y, z, w) {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._w = w;\n\n    this._onChangeCallback();\n\n    return this;\n  },\n  clone: function clone() {\n    return new this.constructor(this._x, this._y, this._z, this._w);\n  },\n  copy: function copy(quaternion) {\n    this._x = quaternion.x;\n    this._y = quaternion.y;\n    this._z = quaternion.z;\n    this._w = quaternion.w;\n\n    this._onChangeCallback();\n\n    return this;\n  },\n  setFromEuler: function setFromEuler(euler, update) {\n    if (!(euler && euler.isEuler)) {\n      throw new Error('THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.');\n    }\n\n    var x = euler._x,\n        y = euler._y,\n        z = euler._z,\n        order = euler.order; // http://www.mathworks.com/matlabcentral/fileexchange/\n    // \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n    //\tcontent/SpinCalc.m\n\n    var cos = Math.cos;\n    var sin = Math.sin;\n    var c1 = cos(x / 2);\n    var c2 = cos(y / 2);\n    var c3 = cos(z / 2);\n    var s1 = sin(x / 2);\n    var s2 = sin(y / 2);\n    var s3 = sin(z / 2);\n\n    if (order === 'XYZ') {\n      this._x = s1 * c2 * c3 + c1 * s2 * s3;\n      this._y = c1 * s2 * c3 - s1 * c2 * s3;\n      this._z = c1 * c2 * s3 + s1 * s2 * c3;\n      this._w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === 'YXZ') {\n      this._x = s1 * c2 * c3 + c1 * s2 * s3;\n      this._y = c1 * s2 * c3 - s1 * c2 * s3;\n      this._z = c1 * c2 * s3 - s1 * s2 * c3;\n      this._w = c1 * c2 * c3 + s1 * s2 * s3;\n    } else if (order === 'ZXY') {\n      this._x = s1 * c2 * c3 - c1 * s2 * s3;\n      this._y = c1 * s2 * c3 + s1 * c2 * s3;\n      this._z = c1 * c2 * s3 + s1 * s2 * c3;\n      this._w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === 'ZYX') {\n      this._x = s1 * c2 * c3 - c1 * s2 * s3;\n      this._y = c1 * s2 * c3 + s1 * c2 * s3;\n      this._z = c1 * c2 * s3 - s1 * s2 * c3;\n      this._w = c1 * c2 * c3 + s1 * s2 * s3;\n    } else if (order === 'YZX') {\n      this._x = s1 * c2 * c3 + c1 * s2 * s3;\n      this._y = c1 * s2 * c3 + s1 * c2 * s3;\n      this._z = c1 * c2 * s3 - s1 * s2 * c3;\n      this._w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === 'XZY') {\n      this._x = s1 * c2 * c3 - c1 * s2 * s3;\n      this._y = c1 * s2 * c3 - s1 * c2 * s3;\n      this._z = c1 * c2 * s3 + s1 * s2 * c3;\n      this._w = c1 * c2 * c3 + s1 * s2 * s3;\n    }\n\n    if (update !== false) this._onChangeCallback();\n    return this;\n  },\n  setFromAxisAngle: function setFromAxisAngle(axis, angle) {\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n    // assumes axis is normalized\n    var halfAngle = angle / 2,\n        s = Math.sin(halfAngle);\n    this._x = axis.x * s;\n    this._y = axis.y * s;\n    this._z = axis.z * s;\n    this._w = Math.cos(halfAngle);\n\n    this._onChangeCallback();\n\n    return this;\n  },\n  setFromRotationMatrix: function setFromRotationMatrix(m) {\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n    var te = m.elements,\n        m11 = te[0],\n        m12 = te[4],\n        m13 = te[8],\n        m21 = te[1],\n        m22 = te[5],\n        m23 = te[9],\n        m31 = te[2],\n        m32 = te[6],\n        m33 = te[10],\n        trace = m11 + m22 + m33,\n        s;\n\n    if (trace > 0) {\n      s = 0.5 / Math.sqrt(trace + 1.0);\n      this._w = 0.25 / s;\n      this._x = (m32 - m23) * s;\n      this._y = (m13 - m31) * s;\n      this._z = (m21 - m12) * s;\n    } else if (m11 > m22 && m11 > m33) {\n      s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n      this._w = (m32 - m23) / s;\n      this._x = 0.25 * s;\n      this._y = (m12 + m21) / s;\n      this._z = (m13 + m31) / s;\n    } else if (m22 > m33) {\n      s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n      this._w = (m13 - m31) / s;\n      this._x = (m12 + m21) / s;\n      this._y = 0.25 * s;\n      this._z = (m23 + m32) / s;\n    } else {\n      s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n      this._w = (m21 - m12) / s;\n      this._x = (m13 + m31) / s;\n      this._y = (m23 + m32) / s;\n      this._z = 0.25 * s;\n    }\n\n    this._onChangeCallback();\n\n    return this;\n  },\n  setFromUnitVectors: function setFromUnitVectors(vFrom, vTo) {\n    // assumes direction vectors vFrom and vTo are normalized\n    var EPS = 0.000001;\n    var r = vFrom.dot(vTo) + 1;\n\n    if (r < EPS) {\n      r = 0;\n\n      if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\n        this._x = -vFrom.y;\n        this._y = vFrom.x;\n        this._z = 0;\n        this._w = r;\n      } else {\n        this._x = 0;\n        this._y = -vFrom.z;\n        this._z = vFrom.y;\n        this._w = r;\n      }\n    } else {\n      // crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n      this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n      this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n      this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n      this._w = r;\n    }\n\n    return this.normalize();\n  },\n  angleTo: function angleTo(q) {\n    return 2 * Math.acos(Math.abs(_Math.clamp(this.dot(q), -1, 1)));\n  },\n  rotateTowards: function rotateTowards(q, step) {\n    var angle = this.angleTo(q);\n    if (angle === 0) return this;\n    var t = Math.min(1, step / angle);\n    this.slerp(q, t);\n    return this;\n  },\n  inverse: function inverse() {\n    // quaternion is assumed to have unit length\n    return this.conjugate();\n  },\n  conjugate: function conjugate() {\n    this._x *= -1;\n    this._y *= -1;\n    this._z *= -1;\n\n    this._onChangeCallback();\n\n    return this;\n  },\n  dot: function dot(v) {\n    return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n  },\n  lengthSq: function lengthSq() {\n    return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n  },\n  length: function length() {\n    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);\n  },\n  normalize: function normalize() {\n    var l = this.length();\n\n    if (l === 0) {\n      this._x = 0;\n      this._y = 0;\n      this._z = 0;\n      this._w = 1;\n    } else {\n      l = 1 / l;\n      this._x = this._x * l;\n      this._y = this._y * l;\n      this._z = this._z * l;\n      this._w = this._w * l;\n    }\n\n    this._onChangeCallback();\n\n    return this;\n  },\n  multiply: function multiply(q, p) {\n    if (p !== undefined) {\n      console.warn('THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.');\n      return this.multiplyQuaternions(q, p);\n    }\n\n    return this.multiplyQuaternions(this, q);\n  },\n  premultiply: function premultiply(q) {\n    return this.multiplyQuaternions(q, this);\n  },\n  multiplyQuaternions: function multiplyQuaternions(a, b) {\n    // from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n    var qax = a._x,\n        qay = a._y,\n        qaz = a._z,\n        qaw = a._w;\n    var qbx = b._x,\n        qby = b._y,\n        qbz = b._z,\n        qbw = b._w;\n    this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n    this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n    this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n    this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n    this._onChangeCallback();\n\n    return this;\n  },\n  slerp: function slerp(qb, t) {\n    if (t === 0) return this;\n    if (t === 1) return this.copy(qb);\n    var x = this._x,\n        y = this._y,\n        z = this._z,\n        w = this._w; // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n    var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n    if (cosHalfTheta < 0) {\n      this._w = -qb._w;\n      this._x = -qb._x;\n      this._y = -qb._y;\n      this._z = -qb._z;\n      cosHalfTheta = -cosHalfTheta;\n    } else {\n      this.copy(qb);\n    }\n\n    if (cosHalfTheta >= 1.0) {\n      this._w = w;\n      this._x = x;\n      this._y = y;\n      this._z = z;\n      return this;\n    }\n\n    var sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n    if (sqrSinHalfTheta <= _Number$EPSILON) {\n      var s = 1 - t;\n      this._w = s * w + t * this._w;\n      this._x = s * x + t * this._x;\n      this._y = s * y + t * this._y;\n      this._z = s * z + t * this._z;\n      this.normalize();\n\n      this._onChangeCallback();\n\n      return this;\n    }\n\n    var sinHalfTheta = Math.sqrt(sqrSinHalfTheta);\n    var halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);\n    var ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,\n        ratioB = Math.sin(t * halfTheta) / sinHalfTheta;\n    this._w = w * ratioA + this._w * ratioB;\n    this._x = x * ratioA + this._x * ratioB;\n    this._y = y * ratioA + this._y * ratioB;\n    this._z = z * ratioA + this._z * ratioB;\n\n    this._onChangeCallback();\n\n    return this;\n  },\n  equals: function equals(quaternion) {\n    return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;\n  },\n  fromArray: function fromArray(array, offset) {\n    if (offset === undefined) offset = 0;\n    this._x = array[offset];\n    this._y = array[offset + 1];\n    this._z = array[offset + 2];\n    this._w = array[offset + 3];\n\n    this._onChangeCallback();\n\n    return this;\n  },\n  toArray: function toArray(array, offset) {\n    if (array === undefined) array = [];\n    if (offset === undefined) offset = 0;\n    array[offset] = this._x;\n    array[offset + 1] = this._y;\n    array[offset + 2] = this._z;\n    array[offset + 3] = this._w;\n    return array;\n  },\n  _onChange: function _onChange(callback) {\n    this._onChangeCallback = callback;\n    return this;\n  },\n  _onChangeCallback: function _onChangeCallback() {}\n});\n\nexport { Quaternion };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/math/Quaternion.js"],"names":["_Math","Quaternion","x","y","z","w","_x","_y","_z","_w","undefined","slerp","qa","qb","qm","t","copy","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","s","cos","dir","sqrSin","sin","Math","sqrt","len","atan2","tDir","f","prototype","get","set","value","_onChangeCallback","isQuaternion","clone","constructor","quaternion","setFromEuler","euler","update","isEuler","Error","order","c1","c2","c3","s1","s2","s3","setFromAxisAngle","axis","angle","halfAngle","setFromRotationMatrix","m","te","elements","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","setFromUnitVectors","vFrom","vTo","EPS","r","dot","abs","normalize","angleTo","q","acos","clamp","rotateTowards","step","min","inverse","conjugate","v","lengthSq","length","l","multiply","p","console","warn","multiplyQuaternions","premultiply","a","b","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","equals","fromArray","array","offset","toArray","_onChange","callback"],"mappings":"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","sourcesContent":["/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://clara.io\n */\n\nimport { _Math } from './Math.js';\n\nfunction Quaternion( x, y, z, w ) {\n\n\tthis._x = x || 0;\n\tthis._y = y || 0;\n\tthis._z = z || 0;\n\tthis._w = ( w !== undefined ) ? w : 1;\n\n}\n\nObject.assign( Quaternion, {\n\n\tslerp: function ( qa, qb, qm, t ) {\n\n\t\treturn qm.copy( qa ).slerp( qb, t );\n\n\t},\n\n\tslerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\tvar x0 = src0[ srcOffset0 + 0 ],\n\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\tw0 = src0[ srcOffset0 + 3 ],\n\n\t\t\tx1 = src1[ srcOffset1 + 0 ],\n\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\tvar s = 1 - t,\n\n\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\n\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\tvar sin = Math.sqrt( sqrSin ),\n\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t}\n\n\t\t\tvar tDir = t * dir;\n\n\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t// Normalize in case we just did a lerp:\n\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\tx0 *= f;\n\t\t\t\ty0 *= f;\n\t\t\t\tz0 *= f;\n\t\t\t\tw0 *= f;\n\n\t\t\t}\n\n\t\t}\n\n\t\tdst[ dstOffset ] = x0;\n\t\tdst[ dstOffset + 1 ] = y0;\n\t\tdst[ dstOffset + 2 ] = z0;\n\t\tdst[ dstOffset + 3 ] = w0;\n\n\t}\n\n} );\n\nObject.defineProperties( Quaternion.prototype, {\n\n\tx: {\n\n\t\tget: function () {\n\n\t\t\treturn this._x;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._x = value;\n\t\t\tthis._onChangeCallback();\n\n\t\t}\n\n\t},\n\n\ty: {\n\n\t\tget: function () {\n\n\t\t\treturn this._y;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._y = value;\n\t\t\tthis._onChangeCallback();\n\n\t\t}\n\n\t},\n\n\tz: {\n\n\t\tget: function () {\n\n\t\t\treturn this._z;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._z = value;\n\t\t\tthis._onChangeCallback();\n\n\t\t}\n\n\t},\n\n\tw: {\n\n\t\tget: function () {\n\n\t\t\treturn this._w;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._w = value;\n\t\t\tthis._onChangeCallback();\n\n\t\t}\n\n\t}\n\n} );\n\nObject.assign( Quaternion.prototype, {\n\n\tisQuaternion: true,\n\n\tset: function ( x, y, z, w ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t},\n\n\tcopy: function ( quaternion ) {\n\n\t\tthis._x = quaternion.x;\n\t\tthis._y = quaternion.y;\n\t\tthis._z = quaternion.z;\n\t\tthis._w = quaternion.w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromEuler: function ( euler, update ) {\n\n\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\tvar x = euler._x, y = euler._y, z = euler._z, order = euler.order;\n\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t//\tcontent/SpinCalc.m\n\n\t\tvar cos = Math.cos;\n\t\tvar sin = Math.sin;\n\n\t\tvar c1 = cos( x / 2 );\n\t\tvar c2 = cos( y / 2 );\n\t\tvar c3 = cos( z / 2 );\n\n\t\tvar s1 = sin( x / 2 );\n\t\tvar s2 = sin( y / 2 );\n\t\tvar s3 = sin( z / 2 );\n\n\t\tif ( order === 'XYZ' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t} else if ( order === 'YZX' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( order === 'XZY' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t}\n\n\t\tif ( update !== false ) this._onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromAxisAngle: function ( axis, angle ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t// assumes axis is normalized\n\n\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\tthis._x = axis.x * s;\n\t\tthis._y = axis.y * s;\n\t\tthis._z = axis.z * s;\n\t\tthis._w = Math.cos( halfAngle );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromRotationMatrix: function ( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tvar te = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\ttrace = m11 + m22 + m33,\n\t\t\ts;\n\n\t\tif ( trace > 0 ) {\n\n\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\tthis._w = 0.25 / s;\n\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\tthis._x = 0.25 * s;\n\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t} else if ( m22 > m33 ) {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\tthis._y = 0.25 * s;\n\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t} else {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\tthis._z = 0.25 * s;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromUnitVectors: function ( vFrom, vTo ) {\n\n\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\tvar EPS = 0.000001;\n\n\t\tvar r = vFrom.dot( vTo ) + 1;\n\n\t\tif ( r < EPS ) {\n\n\t\t\tr = 0;\n\n\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\tthis._x = - vFrom.y;\n\t\t\t\tthis._y = vFrom.x;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = r;\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = - vFrom.z;\n\t\t\t\tthis._z = vFrom.y;\n\t\t\t\tthis._w = r;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\n\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\tthis._w = r;\n\n\t\t}\n\n\t\treturn this.normalize();\n\n\t},\n\n\tangleTo: function ( q ) {\n\n\t\treturn 2 * Math.acos( Math.abs( _Math.clamp( this.dot( q ), - 1, 1 ) ) );\n\n\t},\n\n\trotateTowards: function ( q, step ) {\n\n\t\tvar angle = this.angleTo( q );\n\n\t\tif ( angle === 0 ) return this;\n\n\t\tvar t = Math.min( 1, step / angle );\n\n\t\tthis.slerp( q, t );\n\n\t\treturn this;\n\n\t},\n\n\tinverse: function () {\n\n\t\t// quaternion is assumed to have unit length\n\n\t\treturn this.conjugate();\n\n\t},\n\n\tconjugate: function () {\n\n\t\tthis._x *= - 1;\n\t\tthis._y *= - 1;\n\t\tthis._z *= - 1;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t},\n\n\tnormalize: function () {\n\n\t\tvar l = this.length();\n\n\t\tif ( l === 0 ) {\n\n\t\t\tthis._x = 0;\n\t\t\tthis._y = 0;\n\t\t\tthis._z = 0;\n\t\t\tthis._w = 1;\n\n\t\t} else {\n\n\t\t\tl = 1 / l;\n\n\t\t\tthis._x = this._x * l;\n\t\t\tthis._y = this._y * l;\n\t\t\tthis._z = this._z * l;\n\t\t\tthis._w = this._w * l;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( q, p ) {\n\n\t\tif ( p !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\treturn this.multiplyQuaternions( q, p );\n\n\t\t}\n\n\t\treturn this.multiplyQuaternions( this, q );\n\n\t},\n\n\tpremultiply: function ( q ) {\n\n\t\treturn this.multiplyQuaternions( q, this );\n\n\t},\n\n\tmultiplyQuaternions: function ( a, b ) {\n\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tslerp: function ( qb, t ) {\n\n\t\tif ( t === 0 ) return this;\n\t\tif ( t === 1 ) return this.copy( qb );\n\n\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\tthis._w = - qb._w;\n\t\t\tthis._x = - qb._x;\n\t\t\tthis._y = - qb._y;\n\t\t\tthis._z = - qb._z;\n\n\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t} else {\n\n\t\t\tthis.copy( qb );\n\n\t\t}\n\n\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\tthis._w = w;\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\n\n\t\t\tvar s = 1 - t;\n\t\t\tthis._w = s * w + t * this._w;\n\t\t\tthis._x = s * x + t * this._x;\n\t\t\tthis._y = s * y + t * this._y;\n\t\t\tthis._z = s * z + t * this._z;\n\n\t\t\tthis.normalize();\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\n\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( quaternion ) {\n\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis._x = array[ offset ];\n\t\tthis._y = array[ offset + 1 ];\n\t\tthis._z = array[ offset + 2 ];\n\t\tthis._w = array[ offset + 3 ];\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._w;\n\n\t\treturn array;\n\n\t},\n\n\t_onChange: function ( callback ) {\n\n\t\tthis._onChangeCallback = callback;\n\n\t\treturn this;\n\n\t},\n\n\t_onChangeCallback: function () {}\n\n} );\n\n\nexport { Quaternion };\n"]},"metadata":{},"sourceType":"module"}