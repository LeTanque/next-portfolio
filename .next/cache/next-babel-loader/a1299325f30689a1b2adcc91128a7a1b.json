{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nvar _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/dnd-draglayer/Container.jsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { DropTarget } from 'react-dnd';\nimport ItemTypes from './ItemTypes';\nimport DraggableBox from './DraggableBox';\nimport snapToGrid from './snapToGrid';\nimport update from 'immutability-helper';\n\nclass Container extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      boxes: {\n        a: {\n          top: 20,\n          left: 80,\n          title: 'Drag me around'\n        },\n        b: {\n          top: 180,\n          left: 20,\n          title: 'Drag me too'\n        }\n      }\n    };\n  }\n\n  render() {\n    const {\n      connectDropTarget\n    } = this.props;\n    const {\n      boxes\n    } = this.state;\n    return connectDropTarget(__jsx(\"section\", {\n      className: \"section__drag-layer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, _Object$keys(boxes).map(key => this.renderBox(boxes[key], key))));\n  }\n\n  moveBox(id, left, top) {\n    this.setState(update(this.state, {\n      boxes: {\n        [id]: {\n          $merge: {\n            left,\n            top\n          }\n        }\n      }\n    }));\n  }\n\n  renderBox(item, key) {\n    return __jsx(DraggableBox, _extends({\n      key: key,\n      id: key\n    }, item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default DropTarget(ItemTypes.BOX, {\n  drop(props, monitor, component) {\n    if (!component) {\n      return;\n    }\n\n    const delta = monitor.getDifferenceFromInitialOffset();\n    const item = monitor.getItem();\n    let left = Math.round(item.left + delta.x);\n    let top = Math.round(item.top + delta.y);\n\n    if (props.snapToGrid) {\n      ;\n      [left, top] = snapToGrid(left, top);\n    }\n\n    component.moveBox(item.id, left, top);\n  }\n\n}, connect => ({\n  connectDropTarget: connect.dropTarget()\n}))(Container);","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/dnd-draglayer/Container.jsx"],"names":["React","DropTarget","ItemTypes","DraggableBox","snapToGrid","update","Container","PureComponent","constructor","arguments","state","boxes","a","top","left","title","b","render","connectDropTarget","props","map","key","renderBox","moveBox","id","setState","$merge","item","BOX","drop","monitor","component","delta","getDifferenceFromInitialOffset","getItem","Math","round","x","y","connect","dropTarget"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { DropTarget } from 'react-dnd'\nimport ItemTypes from './ItemTypes'\nimport DraggableBox from './DraggableBox'\nimport snapToGrid from './snapToGrid'\nimport update from 'immutability-helper';\n\n\n\nclass Container extends React.PureComponent {\n  constructor() {\n    super(...arguments)\n    this.state = {\n      boxes: {\n        a: { top: 20, left: 80, title: 'Drag me around' },\n        b: { top: 180, left: 20, title: 'Drag me too' },\n      },\n    }\n  }\n  render() {\n    const { connectDropTarget } = this.props\n    const { boxes } = this.state\n    \n    return connectDropTarget(\n      <section  className=\"section__drag-layer\" >\n        {Object.keys(boxes).map(key => this.renderBox(boxes[key], key))}\n      </section>,\n    )\n  }\n  moveBox(id, left, top) {\n    this.setState(\n      update(this.state, {\n        boxes: {\n          [id]: {\n            $merge: { left, top },\n          },\n        },\n      }),\n    )\n  }\n  renderBox(item, key) {\n    return <DraggableBox key={key} id={key} {...item} />\n  }\n}\n\nexport default DropTarget(\n  ItemTypes.BOX,\n  {\n    drop(props, monitor, component) {\n      if (!component) {\n        return\n      }\n      const delta = monitor.getDifferenceFromInitialOffset()\n      const item = monitor.getItem()\n      let left = Math.round(item.left + delta.x)\n      let top = Math.round(item.top + delta.y)\n      if (props.snapToGrid) {\n        ;[left, top] = snapToGrid(left, top)\n      }\n      component.moveBox(item.id, left, top)\n    },\n  },\n  connect => ({\n    connectDropTarget: connect.dropTarget(),\n  }),\n)(Container)\n"]},"metadata":{},"sourceType":"module"}