{"ast":null,"code":"import React, { useCallback, useEffect, useRef } from \"react\";\nimport { applyProps, Canvas, useRender, useResource, useThree } from \"react-three-fiber\";\nimport * as resources from \"./resources/index\";\nconsole.log('resources --> ', resources); // applyProps(resources);\n// const Particle = ({ geometry, material }) => {\n//     let ref = useRef();\n//     let t = Math.random() * 100;\n//     let speed = 0.01 + Math.random() / 200;\n//     let factor = 20 + Math.random() * 100;\n//     let xFactor = -50 + Math.random() * 100;\n//     let yFactor = -50 + Math.random() * 100;\n//     let zFactor = -30 + Math.random() * 60;\n//     useRender(() => {\n//         t += speed;\n//         const s = Math.cos(t);\n//         ref.current.scale.set(s, s, s);\n//         ref.current.rotation.set(s * 5, s * 5, s * 5);\n//         ref.current.position.set(\n//             xFactor +\n//                 Math.cos((t / 30) * factor) +\n//                 (Math.sin(t * 1) * factor) / 10,\n//             yFactor +\n//                 Math.sin((t / 20) * factor) +\n//                 (Math.cos(t * 2) * factor) / 10,\n//             zFactor +\n//                 Math.cos((t / 10) * factor) +\n//                 (Math.sin(t * 3) * factor) / 20\n//         );\n//     });\n//     return <mesh ref={ref} material={material} geometry={geometry} />;\n// }\n// const Swarm = ({ mouse }) => {\n//     const light = useRef();\n//     const [geometryRef, geometry] = useResource();\n//     const [materialRef, material] = useResource();\n//     useRender(() =>\n//         light.current.position.set(\n//             mouse.current[0] / 20,\n//             -mouse.current[1] / 20,\n//             0\n//         )\n//     );\n//     return (\n//         <>\n//             <pointLight\n//                 ref={light}\n//                 distance={50}\n//                 intensity={1.5}\n//                 color=\"white\"\n//             />\n//             <spotLight intensity={0.5} position={[10, 10, 40]} penumbra={1} />\n//             <mesh>\n//                 <planeGeometry attach=\"geometry\" args={[10000, 10000]} />\n//                 <meshPhongMaterial\n//                     attach=\"material\"\n//                     color=\"#575757\"\n//                     depthTest={false}\n//                 />\n//             </mesh>\n//             <dodecahedronBufferGeometry ref={geometryRef} args={[0.8, 0]} />\n//             <meshPhysicalMaterial ref={materialRef} />\n//             {geometry &&\n//                 new Array(2000)\n//                     .fill()\n//                     .map((_, index) => (\n//                         <Particle\n//                             key={index}\n//                             material={material}\n//                             geometry={geometry}\n//                         />\n//                     ))}\n//         </>\n//     );\n// }\n// const Effect = () => {\n//     const composer = useRef();\n//     const { scene, gl, size, camera } = useThree();\n//     useEffect(() => void composer.current.setSize(size.width, size.height), [\n//         size\n//     ]);\n//     useRender(\n//         ({ gl }) => void ((gl.autoClear = true), composer.current.render()),\n//         true\n//     );\n//     return (\n//         <effectComposer ref={composer} args={[gl]}>\n//             <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\n//             <waterPass attachArray=\"passes\" factor={2} />\n//             <afterimagePass attachArray=\"passes\" factor={0.7} />\n//             <shaderPass\n//                 attachArray=\"passes\"\n//                 args={[resources.FXAAShader]}\n//                 material-uniforms-resolution-value={[\n//                     1 / size.width,\n//                     1 / size.height\n//                 ]}\n//                 renderToScreen\n//             />\n//         </effectComposer>\n//     );\n// }\n// export default function ThreeContainer() {\n//     const mouse = useRef([0, 0]);\n//     const onMouseMove = useCallback(\n//         ({ clientX: x, clientY: y }) =>\n//             (mouse.current = [\n//                 x - window.innerWidth / 2,\n//                 y - window.innerHeight / 2\n//             ]),\n//         []\n//     );\n//     return (\n//         <div className=\"main\" onMouseMove={onMouseMove}>\n//             <Canvas camera={{ fov: 75, position: [0, 0, 50] }}>\n//                 <Swarm mouse={mouse} />\n//                 <Effect />\n//             </Canvas>\n//             <a\n//                 href=\"https://github.com/drcmda/react-three-fiber\"\n//                 className=\"top-left\"\n//                 children=\"React-three-fiber\"\n//             />\n//             <a\n//                 href=\"https://twitter.com/0xca0a\"\n//                 className=\"top-right\"\n//                 children=\"Twitter\"\n//             />\n//             <a\n//                 href=\"https://codesandbox.io/embed/387z7o2zrq\"\n//                 className=\"bottom-left\"\n//                 children=\"Code\"\n//             />\n//             <div className=\"header-major\">\n//                 <span>LOREM</span>\n//             </div>\n//         </div>\n//     );\n// }","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/ThreeContainer.jsx"],"names":["React","useCallback","useEffect","useRef","applyProps","Canvas","useRender","useResource","useThree","resources","console","log"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,MAAxC,QAAsD,OAAtD;AACA,SACIC,UADJ,EAEIC,MAFJ,EAGIC,SAHJ,EAIIC,WAJJ,EAKIC,QALJ,QAMO,mBANP;AAOA,OAAO,KAAKC,SAAZ,MAA2B,mBAA3B;AACAC,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BF,SAA9B,E,CACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useCallback, useEffect, useRef } from \"react\";\nimport {\n    applyProps,\n    Canvas,\n    useRender,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\nimport * as resources from \"./resources/index\";\nconsole.log('resources --> ', resources);\n// applyProps(resources);\n\n// const Particle = ({ geometry, material }) => {\n//     let ref = useRef();\n//     let t = Math.random() * 100;\n//     let speed = 0.01 + Math.random() / 200;\n//     let factor = 20 + Math.random() * 100;\n//     let xFactor = -50 + Math.random() * 100;\n//     let yFactor = -50 + Math.random() * 100;\n//     let zFactor = -30 + Math.random() * 60;\n//     useRender(() => {\n//         t += speed;\n//         const s = Math.cos(t);\n//         ref.current.scale.set(s, s, s);\n//         ref.current.rotation.set(s * 5, s * 5, s * 5);\n//         ref.current.position.set(\n//             xFactor +\n//                 Math.cos((t / 30) * factor) +\n//                 (Math.sin(t * 1) * factor) / 10,\n//             yFactor +\n//                 Math.sin((t / 20) * factor) +\n//                 (Math.cos(t * 2) * factor) / 10,\n//             zFactor +\n//                 Math.cos((t / 10) * factor) +\n//                 (Math.sin(t * 3) * factor) / 20\n//         );\n//     });\n//     return <mesh ref={ref} material={material} geometry={geometry} />;\n// }\n\n// const Swarm = ({ mouse }) => {\n//     const light = useRef();\n//     const [geometryRef, geometry] = useResource();\n//     const [materialRef, material] = useResource();\n//     useRender(() =>\n//         light.current.position.set(\n//             mouse.current[0] / 20,\n//             -mouse.current[1] / 20,\n//             0\n//         )\n//     );\n//     return (\n//         <>\n//             <pointLight\n//                 ref={light}\n//                 distance={50}\n//                 intensity={1.5}\n//                 color=\"white\"\n//             />\n//             <spotLight intensity={0.5} position={[10, 10, 40]} penumbra={1} />\n//             <mesh>\n//                 <planeGeometry attach=\"geometry\" args={[10000, 10000]} />\n//                 <meshPhongMaterial\n//                     attach=\"material\"\n//                     color=\"#575757\"\n//                     depthTest={false}\n//                 />\n//             </mesh>\n//             <dodecahedronBufferGeometry ref={geometryRef} args={[0.8, 0]} />\n//             <meshPhysicalMaterial ref={materialRef} />\n//             {geometry &&\n//                 new Array(2000)\n//                     .fill()\n//                     .map((_, index) => (\n//                         <Particle\n//                             key={index}\n//                             material={material}\n//                             geometry={geometry}\n//                         />\n//                     ))}\n//         </>\n//     );\n// }\n\n// const Effect = () => {\n//     const composer = useRef();\n//     const { scene, gl, size, camera } = useThree();\n//     useEffect(() => void composer.current.setSize(size.width, size.height), [\n//         size\n//     ]);\n//     useRender(\n//         ({ gl }) => void ((gl.autoClear = true), composer.current.render()),\n//         true\n//     );\n//     return (\n//         <effectComposer ref={composer} args={[gl]}>\n//             <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\n//             <waterPass attachArray=\"passes\" factor={2} />\n//             <afterimagePass attachArray=\"passes\" factor={0.7} />\n//             <shaderPass\n//                 attachArray=\"passes\"\n//                 args={[resources.FXAAShader]}\n//                 material-uniforms-resolution-value={[\n//                     1 / size.width,\n//                     1 / size.height\n//                 ]}\n//                 renderToScreen\n//             />\n//         </effectComposer>\n//     );\n// }\n\n// export default function ThreeContainer() {\n//     const mouse = useRef([0, 0]);\n//     const onMouseMove = useCallback(\n//         ({ clientX: x, clientY: y }) =>\n//             (mouse.current = [\n//                 x - window.innerWidth / 2,\n//                 y - window.innerHeight / 2\n//             ]),\n//         []\n//     );\n//     return (\n//         <div className=\"main\" onMouseMove={onMouseMove}>\n//             <Canvas camera={{ fov: 75, position: [0, 0, 50] }}>\n//                 <Swarm mouse={mouse} />\n//                 <Effect />\n//             </Canvas>\n//             <a\n//                 href=\"https://github.com/drcmda/react-three-fiber\"\n//                 className=\"top-left\"\n//                 children=\"React-three-fiber\"\n//             />\n//             <a\n//                 href=\"https://twitter.com/0xca0a\"\n//                 className=\"top-right\"\n//                 children=\"Twitter\"\n//             />\n//             <a\n//                 href=\"https://codesandbox.io/embed/387z7o2zrq\"\n//                 className=\"bottom-left\"\n//                 children=\"Code\"\n//             />\n//             <div className=\"header-major\">\n//                 <span>LOREM</span>\n//             </div>\n//         </div>\n//     );\n// }\n\n\n"]},"metadata":{},"sourceType":"module"}