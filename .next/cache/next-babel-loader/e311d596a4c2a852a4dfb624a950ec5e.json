{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _Map from \"@babel/runtime-corejs2/core-js/map\";\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nimport { ArrayCamera } from '../../cameras/ArrayCamera.js';\nimport { EventDispatcher } from '../../core/EventDispatcher.js';\nimport { Group } from '../../objects/Group.js';\nimport { PerspectiveCamera } from '../../cameras/PerspectiveCamera.js';\nimport { Vector3 } from '../../math/Vector3.js';\nimport { Vector4 } from '../../math/Vector4.js';\nimport { WebGLAnimation } from '../webgl/WebGLAnimation.js';\n\nfunction WebXRManager(renderer, gl) {\n  var scope = this;\n  var session = null; // var framebufferScaleFactor = 1.0;\n\n  var referenceSpace = null;\n  var referenceSpaceType = 'local-floor';\n  var pose = null;\n  var controllers = [];\n  var inputSourcesMap = new _Map(); //\n\n  var cameraL = new PerspectiveCamera();\n  cameraL.layers.enable(1);\n  cameraL.viewport = new Vector4();\n  var cameraR = new PerspectiveCamera();\n  cameraR.layers.enable(2);\n  cameraR.viewport = new Vector4();\n  var cameraVR = new ArrayCamera([cameraL, cameraR]);\n  cameraVR.layers.enable(1);\n  cameraVR.layers.enable(2); //\n\n  this.enabled = false;\n  this.isPresenting = false;\n\n  this.getController = function (id) {\n    var controller = controllers[id];\n\n    if (controller === undefined) {\n      controller = new Group();\n      controller.matrixAutoUpdate = false;\n      controller.visible = false;\n      controllers[id] = controller;\n    }\n\n    return controller;\n  }; //\n\n\n  function onSessionEvent(event) {\n    var controller = inputSourcesMap.get(event.inputSource);\n\n    if (controller) {\n      controller.dispatchEvent({\n        type: event.type\n      });\n    }\n  }\n\n  function onSessionEnd() {\n    inputSourcesMap.forEach(function (controller, inputSource) {\n      controller.dispatchEvent({\n        type: 'disconnected',\n        data: inputSource\n      });\n      controller.visible = false;\n    });\n    inputSourcesMap.clear(); //\n\n    renderer.setFramebuffer(null);\n    renderer.setRenderTarget(renderer.getRenderTarget()); // Hack #15830\n\n    animation.stop();\n    scope.dispatchEvent({\n      type: 'sessionend'\n    });\n    scope.isPresenting = false;\n  }\n\n  function onRequestReferenceSpace(value) {\n    referenceSpace = value;\n    animation.setContext(session);\n    animation.start();\n    scope.dispatchEvent({\n      type: 'sessionstart'\n    });\n    scope.isPresenting = true;\n  }\n\n  this.setFramebufferScaleFactor = function ()\n  /* value */\n  {// framebufferScaleFactor = value;\n  };\n\n  this.setReferenceSpaceType = function (value) {\n    referenceSpaceType = value;\n  };\n\n  this.getReferenceSpace = function () {\n    return referenceSpace;\n  };\n\n  this.getSession = function () {\n    return session;\n  };\n\n  this.setSession = function (value) {\n    session = value;\n\n    if (session !== null) {\n      session.addEventListener('select', onSessionEvent);\n      session.addEventListener('selectstart', onSessionEvent);\n      session.addEventListener('selectend', onSessionEvent);\n      session.addEventListener('squeeze', onSessionEvent);\n      session.addEventListener('squeezestart', onSessionEvent);\n      session.addEventListener('squeezeend', onSessionEvent);\n      session.addEventListener('end', onSessionEnd);\n      var attributes = gl.getContextAttributes();\n      var layerInit = {\n        antialias: attributes.antialias,\n        alpha: attributes.alpha,\n        depth: attributes.depth,\n        stencil: attributes.stencil\n      }; // eslint-disable-next-line no-undef\n\n      var baseLayer = new XRWebGLLayer(session, gl, layerInit);\n      session.updateRenderState({\n        baseLayer: baseLayer\n      });\n      session.requestReferenceSpace(referenceSpaceType).then(onRequestReferenceSpace); //\n\n      session.addEventListener('inputsourceschange', updateInputSources);\n    }\n  };\n\n  function updateInputSources(event) {\n    var inputSources = session.inputSources; // Assign inputSources to available controllers\n\n    for (var i = 0; i < controllers.length; i++) {\n      inputSourcesMap.set(inputSources[i], controllers[i]);\n    } // Notify disconnected\n\n\n    for (var i = 0; i < event.removed.length; i++) {\n      var inputSource = event.removed[i];\n      var controller = inputSourcesMap.get(inputSource);\n\n      if (controller) {\n        controller.dispatchEvent({\n          type: 'disconnected',\n          data: inputSource\n        });\n        inputSourcesMap.delete(inputSource);\n      }\n    } // Notify connected\n\n\n    for (var i = 0; i < event.added.length; i++) {\n      var inputSource = event.added[i];\n      var controller = inputSourcesMap.get(inputSource);\n\n      if (controller) {\n        controller.dispatchEvent({\n          type: 'connected',\n          data: inputSource\n        });\n      }\n    }\n  } //\n\n\n  var cameraLPos = new Vector3();\n  var cameraRPos = new Vector3();\n  /**\n   * @author jsantell / https://www.jsantell.com/\n   *\n   * Assumes 2 cameras that are parallel and share an X-axis, and that\n   * the cameras' projection and world matrices have already been set.\n   * And that near and far planes are identical for both cameras.\n   * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n   */\n\n  function setProjectionFromUnion(camera, cameraL, cameraR) {\n    cameraLPos.setFromMatrixPosition(cameraL.matrixWorld);\n    cameraRPos.setFromMatrixPosition(cameraR.matrixWorld);\n    var ipd = cameraLPos.distanceTo(cameraRPos);\n    var projL = cameraL.projectionMatrix.elements;\n    var projR = cameraR.projectionMatrix.elements; // VR systems will have identical far and near planes, and\n    // most likely identical top and bottom frustum extents.\n    // Use the left camera for these values.\n\n    var near = projL[14] / (projL[10] - 1);\n    var far = projL[14] / (projL[10] + 1);\n    var topFov = (projL[9] + 1) / projL[5];\n    var bottomFov = (projL[9] - 1) / projL[5];\n    var leftFov = (projL[8] - 1) / projL[0];\n    var rightFov = (projR[8] + 1) / projR[0];\n    var left = near * leftFov;\n    var right = near * rightFov; // Calculate the new camera's position offset from the\n    // left camera. xOffset should be roughly half `ipd`.\n\n    var zOffset = ipd / (-leftFov + rightFov);\n    var xOffset = zOffset * -leftFov; // TODO: Better way to apply this offset?\n\n    cameraL.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);\n    camera.translateX(xOffset);\n    camera.translateZ(zOffset);\n    camera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);\n    camera.matrixWorldInverse.getInverse(camera.matrixWorld); // Find the union of the frustum values of the cameras and scale\n    // the values so that the near plane's position does not change in world space,\n    // although must now be relative to the new union camera.\n\n    var near2 = near + zOffset;\n    var far2 = far + zOffset;\n    var left2 = left - xOffset;\n    var right2 = right + (ipd - xOffset);\n    var top2 = topFov * far / far2 * near2;\n    var bottom2 = bottomFov * far / far2 * near2;\n    camera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);\n  }\n\n  function updateCamera(camera, parent) {\n    if (parent === null) {\n      camera.matrixWorld.copy(camera.matrix);\n    } else {\n      camera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);\n    }\n\n    camera.matrixWorldInverse.getInverse(camera.matrixWorld);\n  }\n\n  this.getCamera = function (camera) {\n    var parent = camera.parent;\n    var cameras = cameraVR.cameras;\n    updateCamera(cameraVR, parent);\n\n    for (var i = 0; i < cameras.length; i++) {\n      updateCamera(cameras[i], parent);\n    } // update camera and its children\n\n\n    camera.matrixWorld.copy(cameraVR.matrixWorld);\n    var children = camera.children;\n\n    for (var i = 0, l = children.length; i < l; i++) {\n      children[i].updateMatrixWorld(true);\n    }\n\n    setProjectionFromUnion(cameraVR, cameraL, cameraR);\n    return cameraVR;\n  }; // Animation Loop\n\n\n  var onAnimationFrameCallback = null;\n\n  function onAnimationFrame(time, frame) {\n    pose = frame.getViewerPose(referenceSpace);\n\n    if (pose !== null) {\n      var views = pose.views;\n      var baseLayer = session.renderState.baseLayer;\n      renderer.setFramebuffer(baseLayer.framebuffer);\n\n      for (var i = 0; i < views.length; i++) {\n        var view = views[i];\n        var viewport = baseLayer.getViewport(view);\n        var viewMatrix = view.transform.inverse.matrix;\n        var camera = cameraVR.cameras[i];\n        camera.matrix.fromArray(viewMatrix).getInverse(camera.matrix);\n        camera.projectionMatrix.fromArray(view.projectionMatrix);\n        camera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);\n\n        if (i === 0) {\n          cameraVR.matrix.copy(camera.matrix);\n        }\n      }\n    } //\n\n\n    var inputSources = session.inputSources;\n\n    for (var i = 0; i < controllers.length; i++) {\n      var controller = controllers[i];\n      var inputSource = inputSources[i];\n\n      if (inputSource) {\n        var inputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);\n\n        if (inputPose !== null) {\n          controller.matrix.fromArray(inputPose.transform.matrix);\n          controller.matrix.decompose(controller.position, controller.rotation, controller.scale);\n          controller.visible = true;\n          continue;\n        }\n      }\n\n      controller.visible = false;\n    }\n\n    if (onAnimationFrameCallback) onAnimationFrameCallback(time, frame);\n  }\n\n  var animation = new WebGLAnimation();\n  animation.setAnimationLoop(onAnimationFrame);\n\n  this.setAnimationLoop = function (callback) {\n    onAnimationFrameCallback = callback;\n  };\n\n  this.dispose = function () {};\n}\n\n_Object$assign(WebXRManager.prototype, EventDispatcher.prototype);\n\nexport { WebXRManager };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/renderers/webxr/WebXRManager.js"],"names":["ArrayCamera","EventDispatcher","Group","PerspectiveCamera","Vector3","Vector4","WebGLAnimation","WebXRManager","renderer","gl","scope","session","referenceSpace","referenceSpaceType","pose","controllers","inputSourcesMap","cameraL","layers","enable","viewport","cameraR","cameraVR","enabled","isPresenting","getController","id","controller","undefined","matrixAutoUpdate","visible","onSessionEvent","event","get","inputSource","dispatchEvent","type","onSessionEnd","forEach","data","clear","setFramebuffer","setRenderTarget","getRenderTarget","animation","stop","onRequestReferenceSpace","value","setContext","start","setFramebufferScaleFactor","setReferenceSpaceType","getReferenceSpace","getSession","setSession","addEventListener","attributes","getContextAttributes","layerInit","antialias","alpha","depth","stencil","baseLayer","XRWebGLLayer","updateRenderState","requestReferenceSpace","then","updateInputSources","inputSources","i","length","set","removed","delete","added","cameraLPos","cameraRPos","setProjectionFromUnion","camera","setFromMatrixPosition","matrixWorld","ipd","distanceTo","projL","projectionMatrix","elements","projR","near","far","topFov","bottomFov","leftFov","rightFov","left","right","zOffset","xOffset","decompose","position","quaternion","scale","translateX","translateZ","compose","matrixWorldInverse","getInverse","near2","far2","left2","right2","top2","bottom2","makePerspective","updateCamera","parent","copy","matrix","multiplyMatrices","getCamera","cameras","children","l","updateMatrixWorld","onAnimationFrameCallback","onAnimationFrame","time","frame","getViewerPose","views","renderState","framebuffer","view","getViewport","viewMatrix","transform","inverse","fromArray","x","y","width","height","inputPose","getPose","targetRaySpace","rotation","setAnimationLoop","callback","dispose","prototype"],"mappings":"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","sourcesContent":["/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nimport { ArrayCamera } from '../../cameras/ArrayCamera.js';\nimport { EventDispatcher } from '../../core/EventDispatcher.js';\nimport { Group } from '../../objects/Group.js';\nimport { PerspectiveCamera } from '../../cameras/PerspectiveCamera.js';\nimport { Vector3 } from '../../math/Vector3.js';\nimport { Vector4 } from '../../math/Vector4.js';\nimport { WebGLAnimation } from '../webgl/WebGLAnimation.js';\n\nfunction WebXRManager( renderer, gl ) {\n\n\tvar scope = this;\n\n\tvar session = null;\n\n\t// var framebufferScaleFactor = 1.0;\n\n\tvar referenceSpace = null;\n\tvar referenceSpaceType = 'local-floor';\n\n\tvar pose = null;\n\n\tvar controllers = [];\n\tvar inputSourcesMap = new Map();\n\n\t//\n\n\tvar cameraL = new PerspectiveCamera();\n\tcameraL.layers.enable( 1 );\n\tcameraL.viewport = new Vector4();\n\n\tvar cameraR = new PerspectiveCamera();\n\tcameraR.layers.enable( 2 );\n\tcameraR.viewport = new Vector4();\n\n\tvar cameraVR = new ArrayCamera( [ cameraL, cameraR ] );\n\tcameraVR.layers.enable( 1 );\n\tcameraVR.layers.enable( 2 );\n\n\t//\n\n\tthis.enabled = false;\n\n\tthis.isPresenting = false;\n\n\tthis.getController = function ( id ) {\n\n\t\tvar controller = controllers[ id ];\n\n\t\tif ( controller === undefined ) {\n\n\t\t\tcontroller = new Group();\n\t\t\tcontroller.matrixAutoUpdate = false;\n\t\t\tcontroller.visible = false;\n\n\t\t\tcontrollers[ id ] = controller;\n\n\t\t}\n\n\t\treturn controller;\n\n\t};\n\n\t//\n\n\tfunction onSessionEvent( event ) {\n\n\t\tvar controller = inputSourcesMap.get( event.inputSource );\n\n\t\tif ( controller ) {\n\n\t\t\tcontroller.dispatchEvent( { type: event.type } );\n\n\t\t}\n\n\t}\n\n\tfunction onSessionEnd() {\n\n\t\tinputSourcesMap.forEach( function ( controller, inputSource ) {\n\n\t\t\tcontroller.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\t\t\tcontroller.visible = false;\n\n\t\t} );\n\n\t\tinputSourcesMap.clear();\n\n\t\t//\n\n\t\trenderer.setFramebuffer( null );\n\t\trenderer.setRenderTarget( renderer.getRenderTarget() ); // Hack #15830\n\t\tanimation.stop();\n\n\t\tscope.dispatchEvent( { type: 'sessionend' } );\n\n\t\tscope.isPresenting = false;\n\n\t}\n\n\tfunction onRequestReferenceSpace( value ) {\n\n\t\treferenceSpace = value;\n\n\t\tanimation.setContext( session );\n\t\tanimation.start();\n\n\t\tscope.dispatchEvent( { type: 'sessionstart' } );\n\n\t\tscope.isPresenting = true;\n\n\t}\n\n\tthis.setFramebufferScaleFactor = function ( /* value */ ) {\n\n\t\t// framebufferScaleFactor = value;\n\n\t};\n\n\tthis.setReferenceSpaceType = function ( value ) {\n\n\t\treferenceSpaceType = value;\n\n\t};\n\n\tthis.getReferenceSpace = function () {\n\n\t\treturn referenceSpace;\n\n\t};\n\n\tthis.getSession = function () {\n\n\t\treturn session;\n\n\t};\n\n\tthis.setSession = function ( value ) {\n\n\t\tsession = value;\n\n\t\tif ( session !== null ) {\n\n\t\t\tsession.addEventListener( 'select', onSessionEvent );\n\t\t\tsession.addEventListener( 'selectstart', onSessionEvent );\n\t\t\tsession.addEventListener( 'selectend', onSessionEvent );\n\t\t\tsession.addEventListener( 'squeeze', onSessionEvent );\n\t\t\tsession.addEventListener( 'squeezestart', onSessionEvent );\n\t\t\tsession.addEventListener( 'squeezeend', onSessionEvent );\n\t\t\tsession.addEventListener( 'end', onSessionEnd );\n\n\t\t\tvar attributes = gl.getContextAttributes();\n\n\t\t\tvar layerInit = {\n\t\t\t\tantialias: attributes.antialias,\n\t\t\t\talpha: attributes.alpha,\n\t\t\t\tdepth: attributes.depth,\n\t\t\t\tstencil: attributes.stencil\n\t\t\t};\n\n\t\t\t// eslint-disable-next-line no-undef\n\t\t\tvar baseLayer = new XRWebGLLayer( session, gl, layerInit );\n\n\t\t\tsession.updateRenderState( { baseLayer: baseLayer } );\n\n\t\t\tsession.requestReferenceSpace( referenceSpaceType ).then( onRequestReferenceSpace );\n\n\t\t\t//\n\n\t\t\tsession.addEventListener( 'inputsourceschange', updateInputSources );\n\n\t\t}\n\n\t};\n\n\tfunction updateInputSources( event ) {\n\n\t\tvar inputSources = session.inputSources;\n\n\t\t// Assign inputSources to available controllers\n\n\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\n\n\t\t\tinputSourcesMap.set( inputSources[ i ], controllers[ i ] );\n\n\t\t}\n\n\t\t// Notify disconnected\n\n\t\tfor ( var i = 0; i < event.removed.length; i ++ ) {\n\n\t\t\tvar inputSource = event.removed[ i ];\n\t\t\tvar controller = inputSourcesMap.get( inputSource );\n\n\t\t\tif ( controller ) {\n\n\t\t\t\tcontroller.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\t\t\t\tinputSourcesMap.delete( inputSource );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Notify connected\n\n\t\tfor ( var i = 0; i < event.added.length; i ++ ) {\n\n\t\t\tvar inputSource = event.added[ i ];\n\t\t\tvar controller = inputSourcesMap.get( inputSource );\n\n\t\t\tif ( controller ) {\n\n\t\t\t\tcontroller.dispatchEvent( { type: 'connected', data: inputSource } );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t//\n\n\tvar cameraLPos = new Vector3();\n\tvar cameraRPos = new Vector3();\n\n\t/**\n\t * @author jsantell / https://www.jsantell.com/\n\t *\n\t * Assumes 2 cameras that are parallel and share an X-axis, and that\n\t * the cameras' projection and world matrices have already been set.\n\t * And that near and far planes are identical for both cameras.\n\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n\t */\n\tfunction setProjectionFromUnion( camera, cameraL, cameraR ) {\n\n\t\tcameraLPos.setFromMatrixPosition( cameraL.matrixWorld );\n\t\tcameraRPos.setFromMatrixPosition( cameraR.matrixWorld );\n\n\t\tvar ipd = cameraLPos.distanceTo( cameraRPos );\n\n\t\tvar projL = cameraL.projectionMatrix.elements;\n\t\tvar projR = cameraR.projectionMatrix.elements;\n\n\t\t// VR systems will have identical far and near planes, and\n\t\t// most likely identical top and bottom frustum extents.\n\t\t// Use the left camera for these values.\n\t\tvar near = projL[ 14 ] / ( projL[ 10 ] - 1 );\n\t\tvar far = projL[ 14 ] / ( projL[ 10 ] + 1 );\n\t\tvar topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];\n\t\tvar bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];\n\n\t\tvar leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];\n\t\tvar rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];\n\t\tvar left = near * leftFov;\n\t\tvar right = near * rightFov;\n\n\t\t// Calculate the new camera's position offset from the\n\t\t// left camera. xOffset should be roughly half `ipd`.\n\t\tvar zOffset = ipd / ( - leftFov + rightFov );\n\t\tvar xOffset = zOffset * - leftFov;\n\n\t\t// TODO: Better way to apply this offset?\n\t\tcameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );\n\t\tcamera.translateX( xOffset );\n\t\tcamera.translateZ( zOffset );\n\t\tcamera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t\t// Find the union of the frustum values of the cameras and scale\n\t\t// the values so that the near plane's position does not change in world space,\n\t\t// although must now be relative to the new union camera.\n\t\tvar near2 = near + zOffset;\n\t\tvar far2 = far + zOffset;\n\t\tvar left2 = left - xOffset;\n\t\tvar right2 = right + ( ipd - xOffset );\n\t\tvar top2 = topFov * far / far2 * near2;\n\t\tvar bottom2 = bottomFov * far / far2 * near2;\n\n\t\tcamera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );\n\n\t}\n\n\tfunction updateCamera( camera, parent ) {\n\n\t\tif ( parent === null ) {\n\n\t\t\tcamera.matrixWorld.copy( camera.matrix );\n\n\t\t} else {\n\n\t\t\tcamera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );\n\n\t\t}\n\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t}\n\n\tthis.getCamera = function ( camera ) {\n\n\t\tvar parent = camera.parent;\n\t\tvar cameras = cameraVR.cameras;\n\n\t\tupdateCamera( cameraVR, parent );\n\n\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\n\n\t\t\tupdateCamera( cameras[ i ], parent );\n\n\t\t}\n\n\t\t// update camera and its children\n\n\t\tcamera.matrixWorld.copy( cameraVR.matrixWorld );\n\n\t\tvar children = camera.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].updateMatrixWorld( true );\n\n\t\t}\n\n\t\tsetProjectionFromUnion( cameraVR, cameraL, cameraR );\n\n\t\treturn cameraVR;\n\n\t};\n\n\t// Animation Loop\n\n\tvar onAnimationFrameCallback = null;\n\n\tfunction onAnimationFrame( time, frame ) {\n\n\t\tpose = frame.getViewerPose( referenceSpace );\n\n\t\tif ( pose !== null ) {\n\n\t\t\tvar views = pose.views;\n\t\t\tvar baseLayer = session.renderState.baseLayer;\n\n\t\t\trenderer.setFramebuffer( baseLayer.framebuffer );\n\n\t\t\tfor ( var i = 0; i < views.length; i ++ ) {\n\n\t\t\t\tvar view = views[ i ];\n\t\t\t\tvar viewport = baseLayer.getViewport( view );\n\t\t\t\tvar viewMatrix = view.transform.inverse.matrix;\n\n\t\t\t\tvar camera = cameraVR.cameras[ i ];\n\t\t\t\tcamera.matrix.fromArray( viewMatrix ).getInverse( camera.matrix );\n\t\t\t\tcamera.projectionMatrix.fromArray( view.projectionMatrix );\n\t\t\t\tcamera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );\n\n\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\tcameraVR.matrix.copy( camera.matrix );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar inputSources = session.inputSources;\n\n\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\n\n\t\t\tvar controller = controllers[ i ];\n\n\t\t\tvar inputSource = inputSources[ i ];\n\n\t\t\tif ( inputSource ) {\n\n\t\t\t\tvar inputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );\n\n\t\t\t\tif ( inputPose !== null ) {\n\n\t\t\t\t\tcontroller.matrix.fromArray( inputPose.transform.matrix );\n\t\t\t\t\tcontroller.matrix.decompose( controller.position, controller.rotation, controller.scale );\n\t\t\t\t\tcontroller.visible = true;\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tcontroller.visible = false;\n\n\t\t}\n\n\t\tif ( onAnimationFrameCallback ) onAnimationFrameCallback( time, frame );\n\n\t}\n\n\tvar animation = new WebGLAnimation();\n\tanimation.setAnimationLoop( onAnimationFrame );\n\n\tthis.setAnimationLoop = function ( callback ) {\n\n\t\tonAnimationFrameCallback = callback;\n\n\t};\n\n\tthis.dispose = function () {};\n\n}\n\nObject.assign( WebXRManager.prototype, EventDispatcher.prototype );\n\nexport { WebXRManager };\n"]},"metadata":{},"sourceType":"module"}