{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/Canvasical.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef } from \"react\";\nimport * as THREE from 'three';\nimport { Canvas, extend as extendThree, useFrame, useLoader, useResource, useThree } from \"react-three-fiber\"; // Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\n\nimport { EffectComposer } from './resources/postprocessing/EffectComposer';\nimport { RenderPass } from './resources/postprocessing/RenderPass';\nimport { GlitchPass } from './resources/postprocessing/GlitchPass';\nextendThree({\n  EffectComposer: EffectComposer,\n  RenderPass: RenderPass,\n  GlitchPass: GlitchPass\n}); // import TextLoop from \"../TextLoop\";\n// // Creates a fullscreen colored plane\n// const Background = ({ color }) => {\n//     const { viewport } = useThree();\n//     return (\n//         <mesh scale={[viewport.width, viewport.height, 1]}>\n//             <planeGeometry attach=\"geometry\" args={[1, 1]} />\n//             <meshPhysicalMaterial attach=\"material\" color={color}  depthTest={false} />\n//         </mesh>\n//     )\n// }\n// The canvas houses this function, the scene. Scene is where the elements come together.\n\nvar Scene = function Scene() {\n  var ref = useRef();\n\n  var _useResource = useResource(),\n      _useResource2 = _slicedToArray(_useResource, 2),\n      geometryRef = _useResource2[0],\n      geometry = _useResource2[1];\n\n  var _useResource3 = useResource(),\n      _useResource4 = _slicedToArray(_useResource3, 2),\n      materialRef = _useResource4[0],\n      material = _useResource4[1];\n\n  useFrame(function () {\n    return ref.current.rotation.x = ref.current.rotation.y += 0.01;\n  }); // console.log('materialRef --> ', materialRef);\n  // console.log('material --> ', material);\n\n  console.log('ref --> ', ref.current);\n  return __jsx(React.Fragment, null, __jsx(\"group\", {\n    ref: ref,\n    scale: [1, 1, 1],\n    visible: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, __jsx(\"spotLight\", {\n    color: \"#edefea\",\n    intensity: 1.0,\n    position: [0, 0, 50],\n    distance: 0,\n    decay: 2,\n    angle: 0 // penumbra={1}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), __jsx(\"mesh\", {\n    userData: {\n      test: 'hello'\n    },\n    position: [1, 2, 3],\n    rotation: [0, 0, 0],\n    scale: [2.0, 2.0, 2.0] // radius={100}\n    // onClick={e => console.log('click')}\n    // onPointerOver={e => console.log('hover')}\n    // onPointerOut={e => console.log('unhover')}\n    ,\n    visible: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, __jsx(\"tetrahedronGeometry\", {\n    attach: \"geometry\",\n    detail: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }), __jsx(\"meshPhongMaterial\", {\n    attach: \"material\",\n    color: \"#ffffff\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }))));\n}; // This is the canvas. It's the lowest level element in the three/webGl chain\n\n\nvar Canvasical = function Canvasical() {\n  return __jsx(React.Fragment, null, __jsx(Canvas, {\n    className: \"container block__three-container\",\n    camera: {\n      fov: 75,\n      position: [0, 0, 50]\n    },\n    style: {\n      background: 'radial-gradient(at 50% 70%, #200f20 40%, #090b1f 80%, #050523 100%)'\n    } // children                      // Either a function child (which receives state) or regular children\n    // gl                            // Props that go into the default webGL-renderer\n    // camera                        // Props that go into the default camera\n    // raycaster                     // Props that go into the default raycaster\n    // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n    // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n    // gl2 = false                   // Enables webgl2\n    // concurrent = false            // Enables React concurrent mode\n    // resize = undefined            // Resize config, see react-use-measure's options\n    // orthographic = false          // Creates an orthographic camera if true\n    // noEvents = false              // Switch off raytracing and event support\n    // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n    // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n    // updateDefaultCamera = true    // Adjusts default camera on size changes\n    // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n    // onPointerMissed \n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, __jsx(Scene, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  })));\n};\n\nexport default Canvasical;","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/Canvasical.jsx"],"names":["React","useCallback","useEffect","useRef","THREE","Canvas","extend","extendThree","useFrame","useLoader","useResource","useThree","EffectComposer","RenderPass","GlitchPass","Scene","ref","geometryRef","geometry","materialRef","material","current","rotation","x","y","console","log","test","Canvasical","fov","position","background"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef } from \"react\";\nimport * as THREE from 'three';\nimport {\n    Canvas,\n    extend as extendThree,\n    useFrame,\n    useLoader,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\n\n// Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\nimport { EffectComposer } from './resources/postprocessing/EffectComposer';\nimport { RenderPass } from './resources/postprocessing/RenderPass';\nimport { GlitchPass } from './resources/postprocessing/GlitchPass';\nextendThree({ EffectComposer, RenderPass, GlitchPass });\n\n// import TextLoop from \"../TextLoop\";\n\n\n\n\n\n// // Creates a fullscreen colored plane\n// const Background = ({ color }) => {\n//     const { viewport } = useThree();\n\n//     return (\n//         <mesh scale={[viewport.width, viewport.height, 1]}>\n//             <planeGeometry attach=\"geometry\" args={[1, 1]} />\n//             <meshPhysicalMaterial attach=\"material\" color={color}  depthTest={false} />\n//         </mesh>\n//     )\n// }\n\n\n\n\n\n\n// The canvas houses this function, the scene. Scene is where the elements come together.\nconst Scene = () => {\n    const ref = useRef();\n    const [geometryRef, geometry] = useResource();\n    const [materialRef, material] = useResource();\n\n    useFrame(() => {\n        return ref.current.rotation.x = ref.current.rotation.y += 0.01\n    });\n    \n    // console.log('materialRef --> ', materialRef);\n    // console.log('material --> ', material);\n    console.log('ref --> ', ref.current);\n\n    return (\n        <>\n            <group \n                ref={ref}\n                scale={[ 1,1,1 ]}\n                visible\n            >\n                <spotLight\n                    color=\"#edefea\"\n                    intensity={1.0}\n                    position={[0, 0, 50]} \n                    distance={0}\n                    decay={2}\n                    angle={0}\n                    // penumbra={1}\n                />\n\n                {/* \n                <meshLambertMaterial \n                    ref={materialRef}\n                    color=\"#00aa33\"\n                    transparent={true}\n                    opacity={0.8}\n                    // map={smokeTexture}\n                />  */}\n                {/* <dodecahedronGeometry \n                    attach=\"geometry\" \n                    // args={[10000, 10000]} \n                    detail={1}\n                /> */}\n\n                <mesh \n                    userData={{ test: 'hello' }} \n                    position={[ 1, 2, 3 ]} \n                    rotation={[ 0, 0, 0 ]}\n                    scale={[ 2.0, 2.0, 2.0 ]}\n                    // radius={100}\n                    // onClick={e => console.log('click')}\n                    // onPointerOver={e => console.log('hover')}\n                    // onPointerOut={e => console.log('unhover')}\n                    visible \n                >\n                    <tetrahedronGeometry \n                        attach=\"geometry\" \n                        detail={1}\n                    />\n                    <meshPhongMaterial \n                        attach=\"material\" \n                        color=\"#ffffff\"\n                    />\n                </mesh>\n            </group>\n        </>\n    )\n}\n\n\n// This is the canvas. It's the lowest level element in the three/webGl chain\nconst Canvasical = () => {\n\n\n    return (\n        <>\n            <Canvas\n                className=\"container block__three-container\" \n                camera={{ fov: 75, position: [0, 0, 50] }} \n                style={{ background: 'radial-gradient(at 50% 70%, #200f20 40%, #090b1f 80%, #050523 100%)' }}\n                // children                      // Either a function child (which receives state) or regular children\n                // gl                            // Props that go into the default webGL-renderer\n                // camera                        // Props that go into the default camera\n                // raycaster                     // Props that go into the default raycaster\n                // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n                // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n                // gl2 = false                   // Enables webgl2\n                // concurrent = false            // Enables React concurrent mode\n                // resize = undefined            // Resize config, see react-use-measure's options\n                // orthographic = false          // Creates an orthographic camera if true\n                // noEvents = false              // Switch off raytracing and event support\n                // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n                // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n                // updateDefaultCamera = true    // Adjusts default camera on size changes\n                // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n                // onPointerMissed \n            >\n\n                <Scene />\n\n            </Canvas> \n           \n            {/* <TextLoop  /> */}\n\n        </>\n    );\n}\n\nexport default Canvasical;\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}