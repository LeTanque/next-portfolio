{"ast":null,"code":"var _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef, useState, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { Canvas, extend as extendThree, useFrame, useLoader, useResource, useThree } from \"react-three-fiber\"; // Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\n\nimport { EffectComposer } from \"./resources/postprocessing/EffectComposer\";\nimport { RenderPass } from \"./resources/postprocessing/RenderPass\";\nimport { GlitchPass } from \"./resources/postprocessing/GlitchPass\";\nextendThree({\n  EffectComposer,\n  RenderPass,\n  GlitchPass\n}); // import TextLoop from \"../TextLoop\";\n// const DEFAULT_LAYER = 0;\n// const OCCLUSION_LAYER = 1;\n// Cast the lighting\n\nconst Lighting = () => {\n  const {\n    mouse\n  } = useThree();\n  const light = useRef();\n  useFrame(() => {\n    light.current.position.set(mouse.current[0] / 20, -mouse.current[1] / 20, 0);\n  });\n  console.log('mouse --> ', mouse);\n  return __jsx(React.Fragment, null, __jsx(\"spotLight\", {\n    ref: light,\n    intensity: 0.5,\n    position: [10, 10, 40],\n    penumbra: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }));\n}; // The canvas houses this function, the scene. Scene is where the elements come together.\n\n\nfunction SmokePuff({\n  geometry,\n  material,\n  particleArray\n}) {\n  let ref = useRef();\n  let t = Math.random() * 100;\n  let speed = 0.01 + Math.random() / 200;\n  let factor = 20 + Math.random() * 100;\n  let xFactor = -50 + Math.random() * 100;\n  let yFactor = -50 + Math.random() * 100;\n  let zFactor = -30 + Math.random() * 60;\n  useFrame(() => {\n    t += speed;\n    const s = Math.cos(t);\n    ref.current.scale.set(s, s, s);\n    ref.current.rotation.set(s * 5, s * 5, s * 5);\n    ref.current.position.set(xFactor + Math.cos(t / 30 * factor) + Math.sin(t * 1) * factor / 10, yFactor + Math.sin(t / 20 * factor) + Math.cos(t * 2) * factor / 10, zFactor + Math.cos(t / 10 * factor) + Math.sin(t * 3) * factor / 20);\n  });\n  return __jsx(\"mesh\", {\n    ref: ref,\n    material: material,\n    geometry: geometry,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  });\n}\n\nconst GenerateSmoke = ({\n  particleArray\n}) => {\n  const [geometryRef, geometry] = useResource();\n  const [materialRef, material] = useResource();\n  const url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n  const texture = useMemo(() => new THREE.TextureLoader().load(url), [url]);\n  return __jsx(React.Fragment, null, __jsx(Lighting, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), __jsx(\"planeGeometry\", {\n    ref: geometryRef,\n    attach: \"geometry\",\n    args: [200, 200],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }), __jsx(\"meshLambertMaterial\", {\n    ref: materialRef,\n    attach: \"material\",\n    color: \"#ccbbee\",\n    transparent: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, __jsx(\"primitive\", {\n    attach: \"map\",\n    object: texture,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  })), geometry && new Array(3).fill().map((_, index) => __jsx(SmokePuff, {\n    key: index,\n    material: material,\n    geometry: geometry,\n    particleArray: particleArray,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  })));\n}; // This is the canvas. It's the lowest level element in the three/webGl chain\n\n\nconst CanvasicalSmoke = () => {\n  const particleCount = 3;\n  const particleArray = [{\n    id: 0,\n    x: 0,\n    y: 0,\n    z: 2\n  }];\n  useEffect(() => {\n    if (particleArray.length === particleCount) {\n      return null;\n    } else {\n      for (let i = 0; i <= particleCount; i++) {\n        particleArray.push({\n          id: particleArray[i].id + 1,\n          x: particleArray[i].x + 1,\n          y: particleArray[i].y + 1,\n          z: 2\n        });\n      }\n    }\n  }, [particleArray]);\n  return __jsx(React.Fragment, null, __jsx(Canvas, {\n    className: \"container block__three-container\",\n    camera: {\n      fov: 75,\n      aspect: 0.5,\n      near: 1,\n      far: 10000,\n      position: [0, 0, 300]\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, __jsx(GenerateSmoke, {\n    particleArray: particleArray,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  })));\n};\n\nexport default CanvasicalSmoke; // // Creates a fullscreen colored plane\n// const Plane = () => {\n//     return (\n//         <mesh >\n//             <planeGeometry  attach=\"geometry\"  args={[ 32, 32, 32, 32 ]} />\n//             <meshPhysicalMaterial  attach=\"material\"  color=\"#ffffff\"  />\n//         </mesh>\n//     )\n// }\n// // A light bar\n// const LightBar = () => {\n//     // const lightBar = useRef();\n//     return (\n//         <>\n//             <mesh\n//                 // ref={lightBar}\n//             >\n//                 <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n//                 <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n//             </mesh>\n//         </>\n//     )\n// }","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx"],"names":["extend","extendThree","GlitchPass","Lighting","mouse","useThree","light","useRef","useFrame","console","particleArray","ref","t","Math","speed","factor","xFactor","yFactor","zFactor","s","GenerateSmoke","useResource","url","texture","useMemo","THREE","geometry","CanvasicalSmoke","particleCount","id","x","y","z","useEffect","i","fov","aspect","near","far","position"],"mappings":"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","sourcesContent":["import React, {\n    useCallback,\n    useEffect,\n    useRef,\n    useState,\n    useMemo\n} from \"react\";\nimport * as THREE from \"three\";\nimport {\n    Canvas,\n    extend as extendThree,\n    useFrame,\n    useLoader,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\n\n// Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\nimport { EffectComposer } from \"./resources/postprocessing/EffectComposer\";\nimport { RenderPass } from \"./resources/postprocessing/RenderPass\";\nimport { GlitchPass } from \"./resources/postprocessing/GlitchPass\";\nextendThree({ EffectComposer, RenderPass, GlitchPass });\n\n// import TextLoop from \"../TextLoop\";\n\n// const DEFAULT_LAYER = 0;\n// const OCCLUSION_LAYER = 1;\n\n// Cast the lighting\nconst Lighting = () => {\n    const { mouse } = useThree();\n    const light = useRef();\n    \n    useFrame(() => {\n        light.current.position.set( mouse.current[0] / 20, -mouse.current[1] / 20, 0 )\n    });\n    \n    console.log('mouse --> ', mouse);\n    return (\n        <>\n            <spotLight \n                ref={light} intensity={0.5} position={[10, 10, 40]} penumbra={1} \n            />\n        </>\n    );\n};\n\n// The canvas houses this function, the scene. Scene is where the elements come together.\nfunction SmokePuff({ geometry, material, particleArray }) {\n    let ref = useRef();\n    let t = Math.random() * 100;\n    let speed = 0.01 + Math.random() / 200;\n    let factor = 20 + Math.random() * 100;\n    let xFactor = -50 + Math.random() * 100;\n    let yFactor = -50 + Math.random() * 100;\n    let zFactor = -30 + Math.random() * 60;\n    \n    useFrame(() => {\n        t += speed;\n        const s = Math.cos(t);\n        ref.current.scale.set(s, s, s);\n        ref.current.rotation.set(s * 5, s * 5, s * 5);\n        ref.current.position.set(\n            xFactor +\n                Math.cos((t / 30) * factor) +\n                (Math.sin(t * 1) * factor) / 10,\n            yFactor +\n                Math.sin((t / 20) * factor) +\n                (Math.cos(t * 2) * factor) / 10,\n            zFactor +\n                Math.cos((t / 10) * factor) +\n                (Math.sin(t * 3) * factor) / 20\n        );\n    });\n\n    return <mesh ref={ref} material={material} geometry={geometry} />;\n}\n\nconst GenerateSmoke = ({ particleArray }) => {\n    const [geometryRef, geometry] = useResource();\n    const [materialRef, material] = useResource();\n    const url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n    const texture = useMemo(() => new THREE.TextureLoader().load(url), [url]);\n    \n    return (\n        <>\n            <Lighting />\n            \n            <planeGeometry \n                ref={geometryRef} \n                attach=\"geometry\"   \n                args={[200, 200]} \n            />\n            <meshLambertMaterial \n                ref={materialRef}\n                attach=\"material\" \n                color=\"#ccbbee\"\n                transparent\n            >\n                <primitive attach=\"map\" object={texture} />\n            </meshLambertMaterial>\n\n            {geometry && new Array(3).fill().map((_, index) => (\n                <SmokePuff\n                    key={index}\n                    material={material}\n                    geometry={geometry}\n                    particleArray={particleArray}\n                />\n            ))}\n        </>\n    );\n}\n\n\n// This is the canvas. It's the lowest level element in the three/webGl chain\nconst CanvasicalSmoke = () => {\n    const particleCount = 3;\n    const particleArray = [{ id: 0, x: 0, y: 0, z: 2 }];\n\n    useEffect(() => {\n        if (particleArray.length === particleCount) {\n            return null;\n        } else {\n            for (let i = 0; i <= particleCount; i++) {\n                particleArray.push({\n                    id: particleArray[i].id + 1,\n                    x: particleArray[i].x + 1,\n                    y: particleArray[i].y + 1,\n                    z: 2\n                });\n            }\n        }\n    }, [particleArray]);\n\n    return (\n        <>\n            <Canvas\n                className=\"container block__three-container\"\n                camera={{\n                    fov: 75,\n                    aspect: 0.5,\n                    near: 1,\n                    far: 10000,\n                    position: [0, 0, 300]\n                }}\n            >\n                <GenerateSmoke particleArray={particleArray} />\n            </Canvas>\n\n            {/* <TextLoop  /> */}\n        </>\n    );\n};\n\nexport default CanvasicalSmoke;\n\n// // Creates a fullscreen colored plane\n// const Plane = () => {\n//     return (\n//         <mesh >\n//             <planeGeometry  attach=\"geometry\"  args={[ 32, 32, 32, 32 ]} />\n//             <meshPhysicalMaterial  attach=\"material\"  color=\"#ffffff\"  />\n//         </mesh>\n//     )\n// }\n\n// // A light bar\n// const LightBar = () => {\n//     // const lightBar = useRef();\n\n//     return (\n//         <>\n//             <mesh\n//                 // ref={lightBar}\n//             >\n//                 <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n//                 <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n//             </mesh>\n//         </>\n//     )\n// }\n"]},"metadata":{},"sourceType":"module"}