{"ast":null,"code":"var _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/Canvasical.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport * as THREE from 'three';\nimport { Canvas, extend as extendThree, useFrame, useLoader, useResource, useThree } from \"react-three-fiber\"; // Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\n\nimport { EffectComposer } from './resources/postprocessing/EffectComposer';\nimport { RenderPass } from './resources/postprocessing/RenderPass';\nimport { GlitchPass } from './resources/postprocessing/GlitchPass';\nextendThree({\n  EffectComposer: EffectComposer,\n  RenderPass: RenderPass,\n  GlitchPass: GlitchPass\n}); // import TextLoop from \"../TextLoop\";\n// // Creates a fullscreen colored plane\n// const Background = ({ color }) => {\n//     const { viewport } = useThree();\n//     return (\n//         <mesh scale={[viewport.width, viewport.height, 1]}>\n//             <planeGeometry attach=\"geometry\" args={[1, 1]} />\n//             <meshPhysicalMaterial attach=\"material\" color={color}  depthTest={false} />\n//         </mesh>\n//     )\n// }\n// The canvas houses this function, the scene. Scene is where the elements come together.\n\nvar Scene = function Scene(props) {\n  var _useThree = useThree(),\n      gl = _useThree.gl,\n      scene = _useThree.scene,\n      camera = _useThree.camera,\n      size = _useThree.size,\n      viewport = _useThree.viewport,\n      aspect = _useThree.aspect,\n      mouse = _useThree.mouse,\n      clock = _useThree.clock,\n      setDefaultCamera = _useThree.setDefaultCamera; // const { viewport } = props;\n\n\n  var ref = useRef(); // const [geometryRef, geometry] = useResource();\n  // const [materialRef, material] = useResource();\n\n  useFrame(function () {\n    return ref.current.rotation.x = ref.current.rotation.y += 0.01;\n  }); // console.log('materialRef --> ', materialRef);\n  // console.log('material --> ', material);\n\n  console.log('ref --> ', ref);\n  console.log('viewport --> ', size, scene);\n  return __jsx(React.Fragment, null, __jsx(\"group\", {\n    ref: ref,\n    scale: [1, 1, 1],\n    receiveShadow: true,\n    visible: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, __jsx(\"ambientLight\", {\n    color: \"#ffffff\",\n    intensity: 0.1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), __jsx(\"spotLight\", {\n    color: \"#ffffff\",\n    intensity: 1,\n    distance: 200,\n    angle: 1,\n    penumbra: 0,\n    decay: 2,\n    position: [15, 40, 35],\n    castShadow: true,\n    \"shadow-mapSize-width\": 600,\n    \"shadow-mapSize-height\": 600,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), __jsx(\"mesh\", {\n    userData: {\n      test: 'hello'\n    },\n    position: [1, 2, 3],\n    rotation: [0, 0, 0],\n    scale: [2.0, 2.0, 2.0],\n    receiveShadow: true // radius={100}\n    // onClick={e => console.log('click')}\n    // onPointerOver={e => console.log('hover')}\n    // onPointerOut={e => console.log('unhover')}\n    ,\n    visible: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, __jsx(\"tetrahedronGeometry\", {\n    attach: \"geometry\",\n    detail: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }), __jsx(\"meshPhongMaterial\", {\n    attach: \"material\",\n    color: \"#0077ff\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }))));\n}; // This is the canvas. It's the lowest level element in the three/webGl chain\n\n\nvar Canvasical = function Canvasical() {\n  var _useThree2 = useThree(),\n      gl = _useThree2.gl,\n      scene = _useThree2.scene,\n      camera = _useThree2.camera,\n      size = _useThree2.size,\n      viewport = _useThree2.viewport,\n      aspect = _useThree2.aspect,\n      mouse = _useThree2.mouse,\n      clock = _useThree2.clock,\n      setDefaultCamera = _useThree2.setDefaultCamera;\n\n  return __jsx(React.Fragment, null, __jsx(Canvas, {\n    className: \"container block__three-container\",\n    style: {\n      background: 'radial-gradient(at 50% 70%, #200f20 40%, #090b1f 80%, #050523 100%)'\n    },\n    camera: {\n      fov: 75,\n      position: [0, 0, 15]\n    },\n    shadowMap: true // children                      // Either a function child (which receives state) or regular children\n    // gl                            // Props that go into the default webGL-renderer\n    // camera                        // Props that go into the default camera\n    // raycaster                     // Props that go into the default raycaster\n    // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n    // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n    // gl2 = false                   // Enables webgl2\n    // concurrent = false            // Enables React concurrent mode\n    // resize = undefined            // Resize config, see react-use-measure's options\n    // orthographic = false          // Creates an orthographic camera if true\n    // noEvents = false              // Switch off raytracing and event support\n    // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n    // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n    // updateDefaultCamera = true    // Adjusts default camera on size changes\n    // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n    // onPointerMissed \n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, __jsx(Scene, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  })));\n};\n\nexport default Canvasical;","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/Canvasical.jsx"],"names":["extend","extendThree","EffectComposer","RenderPass","GlitchPass","Scene","gl","scene","camera","size","viewport","aspect","mouse","clock","setDefaultCamera","useThree","ref","useRef","useFrame","console","test","Canvasical","background","fov","position"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport * as THREE from 'three';\nimport {\n    Canvas,\n    extend as extendThree,\n    useFrame,\n    useLoader,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\n\n// Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\nimport { EffectComposer } from './resources/postprocessing/EffectComposer';\nimport { RenderPass } from './resources/postprocessing/RenderPass';\nimport { GlitchPass } from './resources/postprocessing/GlitchPass';\nextendThree({ EffectComposer, RenderPass, GlitchPass });\n\n// import TextLoop from \"../TextLoop\";\n\n\n\n\n\n// // Creates a fullscreen colored plane\n// const Background = ({ color }) => {\n//     const { viewport } = useThree();\n\n//     return (\n//         <mesh scale={[viewport.width, viewport.height, 1]}>\n//             <planeGeometry attach=\"geometry\" args={[1, 1]} />\n//             <meshPhysicalMaterial attach=\"material\" color={color}  depthTest={false} />\n//         </mesh>\n//     )\n// }\n\n\n\n\n\n\n// The canvas houses this function, the scene. Scene is where the elements come together.\nconst Scene = props => {\n    const {\n        gl,                           // WebGL renderer \n        scene,                        // Default scene\n        camera,                       // Default camera\n        size,                         // Bounds of the view (which stretches 100% and auto-adjusts)\n        viewport,                     // Bounds of the viewport in 3d units + factor (size/viewport)\n        aspect,                       // Aspect ratio (size.width / size.height)\n        mouse,                        // Current 2D mouse coordinates\n        clock,                        // THREE.Clock (useful for useFrame deltas)\n        setDefaultCamera,             // Sets the default camera\n    } = useThree();\n    // const { viewport } = props;\n    const ref = useRef();\n    // const [geometryRef, geometry] = useResource();\n    // const [materialRef, material] = useResource();\n    \n    useFrame(() => {\n        return ref.current.rotation.x = ref.current.rotation.y += 0.01\n    });\n    \n    // console.log('materialRef --> ', materialRef);\n    // console.log('material --> ', material);\n    console.log('ref --> ', ref);\n    console.log('viewport --> ', size, scene);\n\n    return (\n        <>\n            <group \n                ref={ref}\n                scale={[ 1,1,1 ]}\n                receiveShadow={true}\n                visible\n            >\n                <ambientLight\n                    color=\"#ffffff\"\n                    intensity={0.1}\n                />\n                <spotLight\n                    color=\"#ffffff\"\n                    intensity={1}\n                    distance={200}\n                    angle={1}\n                    penumbra={0}\n                    decay={2}\n                    position={[ 15, 40, 35 ]} \n                    castShadow={true}\n                    shadow-mapSize-width={600} \n                    shadow-mapSize-height={600}\n                />\n\n                {/* \n                <meshLambertMaterial \n                    ref={materialRef}\n                    color=\"#00aa33\"\n                    transparent={true}\n                    opacity={0.8}\n                    // map={smokeTexture}\n                />  */}\n                {/* <dodecahedronGeometry \n                    attach=\"geometry\" \n                    // args={[10000, 10000]} \n                    detail={1}\n                /> */}\n\n                <mesh \n                    userData={{ test: 'hello' }} \n                    position={[ 1, 2, 3 ]} \n                    rotation={[ 0, 0, 0 ]}\n                    scale={[ 2.0, 2.0, 2.0 ]}\n                    receiveShadow={true}\n                    // radius={100}\n                    // onClick={e => console.log('click')}\n                    // onPointerOver={e => console.log('hover')}\n                    // onPointerOut={e => console.log('unhover')}\n                    visible \n                >\n                    <tetrahedronGeometry \n                        attach=\"geometry\" \n                        detail={1}\n                    />\n                    <meshPhongMaterial \n                        attach=\"material\" \n                        color=\"#0077ff\"\n                    />\n                </mesh>\n            </group>\n        </>\n    )\n}\n\n\n// This is the canvas. It's the lowest level element in the three/webGl chain\nconst Canvasical = () => {\n    const {\n        gl,                           // WebGL renderer \n        scene,                        // Default scene\n        camera,                       // Default camera\n        size,                         // Bounds of the view (which stretches 100% and auto-adjusts)\n        viewport,                     // Bounds of the viewport in 3d units + factor (size/viewport)\n        aspect,                       // Aspect ratio (size.width / size.height)\n        mouse,                        // Current 2D mouse coordinates\n        clock,                        // THREE.Clock (useful for useFrame deltas)\n        setDefaultCamera,             // Sets the default camera\n    } = useThree();\n\n\n    return (\n        <>\n            <Canvas\n                className=\"container block__three-container\" \n                style={{ background: 'radial-gradient(at 50% 70%, #200f20 40%, #090b1f 80%, #050523 100%)' }}\n                camera={{ fov: 75, position: [ 0, 0, 15 ] }} \n                shadowMap={true}\n                // children                      // Either a function child (which receives state) or regular children\n                // gl                            // Props that go into the default webGL-renderer\n                // camera                        // Props that go into the default camera\n                // raycaster                     // Props that go into the default raycaster\n                // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n                // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n                // gl2 = false                   // Enables webgl2\n                // concurrent = false            // Enables React concurrent mode\n                // resize = undefined            // Resize config, see react-use-measure's options\n                // orthographic = false          // Creates an orthographic camera if true\n                // noEvents = false              // Switch off raytracing and event support\n                // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n                // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n                // updateDefaultCamera = true    // Adjusts default camera on size changes\n                // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n                // onPointerMissed \n            >\n\n                <Scene  />\n\n            </Canvas> \n           \n            {/* <TextLoop  /> */}\n\n        </>\n    );\n}\n\nexport default Canvasical;\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}