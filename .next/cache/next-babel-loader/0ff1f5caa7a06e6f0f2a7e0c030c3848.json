{"ast":null,"code":"var _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx\";\nvar __jsx = React.createElement;\nimport React, { // useCallback,\n// useEffect,\nuseRef // useState,\n, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { Canvas, extend as extendThree, useFrame // useLoader,\n, useResource, useThree } from \"react-three-fiber\"; // import { useSpring, a } from 'react-spring/three';\n// Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\n\nimport { EffectComposer } from \"./resources/postprocessing/EffectComposer\";\nimport { RenderPass } from \"./resources/postprocessing/RenderPass\";\nimport { GlitchPass } from \"./resources/postprocessing/GlitchPass\";\nextendThree({\n  EffectComposer,\n  RenderPass,\n  GlitchPass\n});\nimport TextLoop from \"../TextLoop\"; // Cast the lighting\n\nconst Lighting = () => {\n  const {\n    mouse\n  } = useThree();\n  const light = useRef(); // useFrame(() => {\n  //     light.current.position.set( mouse.x / 20, -mouse.y / 20, 50 )\n  // });\n\n  console.log('mouse.x / 20 --> ', mouse.x / 20);\n  console.log('light --> ', light);\n  return __jsx(React.Fragment, null, __jsx(\"pointLight\", {\n    ref: light,\n    distance: 50,\n    position: [-2, 0, 40],\n    intensity: 1.5,\n    color: \"#ffffff\",\n    decay: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }));\n}; // // This renders text via canvas and projects it as a sprite\n// const Text = ({ opacity, color = 'white', fontSize = 410 }) => {\n//     return (\n//         <a.sprite scale={[ 1, 1, 1 ]} >\n//             <a.spriteMaterial attach=\"material\" transparent opacity={opacity}>\n//                 <canvasTexture attach=\"map\"   premultiplyAlpha   />\n//             </a.spriteMaterial>\n//         </a.sprite>\n//     )\n// }\n// The canvas houses this function, the scene. Scene is where the elements come together.\n\n\nconst SmokePuff = ({\n  geometry,\n  material\n}) => {\n  let smokePuffRef = useRef(); // let tenToHundred = Math.random() * 100; // 10 - 99.99\n  // let speed = 0.01 + Math.random() / 200; // 0.1 - 0.19\n  // const cosWave = (Math.cos(tenToHundred) / 3) - 1.1;  // a cosign wave.  ~ 0.5 - 1.5\n\n  let factor = 1 + Math.random() * 2; // ~ 1-3\n\n  let xFactor = -100 + Math.random() * 200; // -100 - 100\n\n  let yFactor = -100 + Math.random() * 200; // -100 - 100\n\n  let zFactor = 10 + Math.random() * 10; //  10 - 20\n\n  const getRandomArbitrary = (min, max) => Math.random() * (max - min) + min;\n\n  let randomFactor = getRandomArbitrary(1.1, 2);\n  useFrame(({\n    clock\n  }) => {\n    // tenToHundred += speed; // tenToHundred = tenToHundred + speed, plus it sets a unique new version of tenToHundred.\n    // let delta = clock.getDelta();  // Change in clock. Something like 0.0001 - 0.0099\n    let slowRotation = clock.elapsedTime * 0.017 * randomFactor + xFactor; // starts at ~0.0001 + xFactor and goes slow\n\n    let slowGrowth = Math.tanh(clock.elapsedTime / 18) + 3;\n    smokePuffRef.current.scale.set(slowGrowth, slowGrowth, 2);\n    smokePuffRef.current.rotation.z = slowRotation;\n    smokePuffRef.current.position.set(xFactor * factor, yFactor * factor, zFactor);\n  });\n  return __jsx(\"mesh\", {\n    ref: smokePuffRef,\n    material: material,\n    geometry: geometry,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  });\n};\n\nconst GenerateSmoke = () => {\n  const [geometryRef, geometry] = useResource();\n  const [materialRef, material] = useResource();\n  const url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n  const texture = useMemo(() => new THREE.TextureLoader().load(url), [url]);\n  return __jsx(React.Fragment, null, __jsx(Lighting, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }), __jsx(\"planeGeometry\", {\n    ref: geometryRef,\n    attach: \"geometry\",\n    args: [200, 200],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }), __jsx(\"meshLambertMaterial\", {\n    ref: materialRef,\n    attach: \"material\",\n    color: \"#ffffff\",\n    transparent: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, __jsx(\"primitive\", {\n    attach: \"map\",\n    object: texture,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  })), geometry && new Array(33).fill().map((_, index) => __jsx(SmokePuff, {\n    key: index,\n    material: material,\n    geometry: geometry,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  })));\n}; // This is the canvas. It's the lowest level element in the three/webGl chain\n\n\nconst CanvasicalSmoke = () => {\n  return __jsx(React.Fragment, null, __jsx(Canvas, {\n    className: \"container block__three-container\",\n    camera: {\n      fov: 75,\n      aspect: 0.5,\n      near: 1,\n      far: 10000,\n      position: [0, 0, 600]\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, __jsx(GenerateSmoke, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  })), __jsx(TextLoop, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }));\n};\n\nexport default CanvasicalSmoke;","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx"],"names":["React","useRef","useMemo","THREE","Canvas","extend","extendThree","useFrame","useResource","useThree","EffectComposer","RenderPass","GlitchPass","TextLoop","Lighting","mouse","light","console","log","x","SmokePuff","geometry","material","smokePuffRef","factor","Math","random","xFactor","yFactor","zFactor","getRandomArbitrary","min","max","randomFactor","clock","slowRotation","elapsedTime","slowGrowth","tanh","current","scale","set","rotation","z","position","GenerateSmoke","geometryRef","materialRef","url","texture","TextureLoader","load","Array","fill","map","_","index","CanvasicalSmoke","fov","aspect","near","far"],"mappings":"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","sourcesContent":["import React, {\n    // useCallback,\n    // useEffect,\n    useRef,\n    // useState,\n    useMemo\n} from \"react\";\nimport * as THREE from \"three\";\nimport {\n    Canvas,\n    extend as extendThree,\n    useFrame,\n    // useLoader,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\n// import { useSpring, a } from 'react-spring/three';\n\n// Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\nimport { EffectComposer } from \"./resources/postprocessing/EffectComposer\";\nimport { RenderPass } from \"./resources/postprocessing/RenderPass\";\nimport { GlitchPass } from \"./resources/postprocessing/GlitchPass\";\nextendThree({ EffectComposer, RenderPass, GlitchPass });\n\nimport TextLoop from \"../TextLoop\";\n\n\n// Cast the lighting\nconst Lighting = () => {\n    const { mouse } = useThree();\n    const light = useRef();\n    \n    // useFrame(() => {\n    //     light.current.position.set( mouse.x / 20, -mouse.y / 20, 50 )\n        \n    // });\n\n    console.log('mouse.x / 20 --> ', mouse.x / 20);\n\n    console.log('light --> ', light);\n\n    return (\n        <>\n            <pointLight \n                ref={light}  distance={50} position={[ -2, 0, 40 ]}  intensity={1.5} color=\"#ffffff\" decay={2}\n            />\n            {/* <directionalLight\n                ref={light} position={[ -2, 0, 40 ]}  intensity={0.7}  color=\"#ff0000\" \n            /> */}\n        </>\n    );\n};\n\n// // This renders text via canvas and projects it as a sprite\n// const Text = ({ opacity, color = 'white', fontSize = 410 }) => {\n//     return (\n//         <a.sprite scale={[ 1, 1, 1 ]} >\n//             <a.spriteMaterial attach=\"material\" transparent opacity={opacity}>\n//                 <canvasTexture attach=\"map\"   premultiplyAlpha   />\n//             </a.spriteMaterial>\n//         </a.sprite>\n//     )\n// }\n\n// The canvas houses this function, the scene. Scene is where the elements come together.\nconst SmokePuff = ({ geometry, material }) => {\n    let smokePuffRef = useRef();\n    // let tenToHundred = Math.random() * 100; // 10 - 99.99\n    // let speed = 0.01 + Math.random() / 200; // 0.1 - 0.19\n    // const cosWave = (Math.cos(tenToHundred) / 3) - 1.1;  // a cosign wave.  ~ 0.5 - 1.5\n    let factor = 1 + Math.random() * 2;  // ~ 1-3\n    let xFactor = -100 + Math.random() * 200;  // -100 - 100\n    let yFactor = -100 + Math.random() * 200;  // -100 - 100\n    let zFactor = 10 + Math.random() * 10;  //  10 - 20\n    \n    const getRandomArbitrary = (min, max) => Math.random() * (max - min) + min;\n    let randomFactor = getRandomArbitrary(1.1, 2);\n    \n    useFrame(({ clock }) => {\n        // tenToHundred += speed; // tenToHundred = tenToHundred + speed, plus it sets a unique new version of tenToHundred.\n        // let delta = clock.getDelta();  // Change in clock. Something like 0.0001 - 0.0099\n        let slowRotation = ((clock.elapsedTime * (0.017)) * randomFactor) + xFactor;  // starts at ~0.0001 + xFactor and goes slow\n        let slowGrowth = (Math.tanh(clock.elapsedTime / 18) + 3);\n\n        smokePuffRef.current.scale.set(slowGrowth, slowGrowth, 2);\n        smokePuffRef.current.rotation.z = slowRotation;\n        smokePuffRef.current.position.set(\n            xFactor * factor,\n            yFactor * factor,\n            zFactor\n        );\n    });\n\n    return <mesh  ref={smokePuffRef} material={material} geometry={geometry}  />;\n}\n\nconst GenerateSmoke = () => {\n    const [ geometryRef, geometry ] = useResource();\n    const [ materialRef, material ] = useResource();\n    const url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n    const texture = useMemo(() => new THREE.TextureLoader().load(url), [url]);\n    \n    return (\n        <>\n            <Lighting />\n\n            <planeGeometry \n                ref={geometryRef} \n                attach=\"geometry\"   \n                args={[200, 200]} \n            />\n            <meshLambertMaterial \n                ref={materialRef}\n                attach=\"material\" \n                color=\"#ffffff\"\n                transparent\n            >\n                <primitive attach=\"map\" object={texture} />\n            </meshLambertMaterial>\n\n            {geometry && new Array(33).fill().map((_, index) => (\n                <SmokePuff\n                    key={index}\n                    material={material}\n                    geometry={geometry}\n\n                />\n            ))}\n        </>\n    );\n}\n\n// This is the canvas. It's the lowest level element in the three/webGl chain\nconst CanvasicalSmoke = () => {\n\n    return (\n        <>\n            <Canvas\n                className=\"container block__three-container\"\n                camera={{\n                    fov: 75,\n                    aspect: 0.5,\n                    near: 1,\n                    far: 10000,\n                    position: [0, 0, 600]\n                }}\n            >\n                <GenerateSmoke />\n                {/* <Text opacity={0.9}  color=\"black\" fontSize={150} ></Text> */}\n            </Canvas>\n            <TextLoop  />\n        </>\n    );\n};\n\nexport default CanvasicalSmoke;\n\n\n"]},"metadata":{},"sourceType":"module"}