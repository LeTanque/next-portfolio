{"ast":null,"code":"import _construct from \"@babel/runtime-corejs2/helpers/esm/construct\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/SmokeContainerReal.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRef } from \"react\";\nimport * as THREE from 'three';\nimport { Canvas, useFrame, extend, useResource // useLoader,\n// useThree,\n} from \"react-three-fiber\";\nimport * as resources from './resources/index';\nextend(resources);\nimport TextLoop from \"../TextLoop\"; // This component creates a fullscreen colored plane \n\nvar Background = function Background(_ref) {\n  var color = _ref.color;\n\n  var _useThree = useThree(),\n      viewport = _useThree.viewport;\n\n  return __jsx(\"mesh\", {\n    scale: [viewport.width, viewport.height, 1],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, __jsx(\"planeGeometry\", {\n    attach: \"geometry\",\n    args: [1, 1],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }), __jsx(a.meshBasicMaterial, {\n    attach: \"material\",\n    color: color,\n    depthTest: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }));\n}; // // This component loads an image and projects it onto a plane\n// function Image({ url, opacity, scale, ...props }) {\n//     const texture = useMemo(() => new THREE.TextureLoader().load(url), [url])\n//     const [hovered, setHover] = useState(false)\n//     const hover = useCallback(() => setHover(true), [])\n//     const unhover = useCallback(() => setHover(false), [])\n//     const { factor } = useSpring({ factor: hovered ? 1.1 : 1 })\n//     return (\n//         <a.mesh {...props} onHover={hover} onUnhover={unhover} scale={factor.interpolate(f => [scale * f, scale * f, 1])}>\n//             <planeBufferGeometry attach=\"geometry\" args={[5, 5]} />\n//             <a.meshLambertMaterial attach=\"material\" transparent opacity={opacity}>\n//                 <primitive attach=\"map\" object={texture} />\n//             </a.meshLambertMaterial>\n//         </a.mesh>\n//     )\n// }\n\n\nvar Thing = function Thing(props) {\n  var vertices = props.vertices;\n\n  var _useResource = useResource(),\n      _useResource2 = _slicedToArray(_useResource, 2),\n      geometryRef = _useResource2[0],\n      geometry = _useResource2[1];\n\n  var ref = useRef(); // console.log('geometryRef AND geometry --> ', geometryRef, geometry);\n\n  useFrame(function () {\n    return ref.current.rotation.x = ref.current.rotation.y += 0.01;\n  }); // useFrame(() => (console.log('ref.current --> ', ref.current)))\n\n  return __jsx(\"group\", {\n    ref: ref,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, __jsx(\"line\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, __jsx(\"geometry\", {\n    attach: \"geometry\",\n    vertices: vertices.map(function (v) {\n      return _construct(THREE.Vector3, _toConsumableArray(v));\n    }),\n    onUpdate: function onUpdate(self) {\n      return self.verticesNeedUpdate = true;\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), __jsx(\"lineBasicMaterial\", {\n    attach: \"material\",\n    color: \"#ff0000\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  })), __jsx(\"mesh\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, __jsx(\"octahedronGeometry\", {\n    attach: \"geometry\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), __jsx(\"meshBasicMaterial\", {\n    attach: \"material\",\n    color: \"peachpuff\",\n    opacity: 0.5,\n    transparent: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  })));\n}; // This component maintains the scene \n\n\nvar Scene = function Scene(_ref2) {\n  var top = _ref2.top,\n      mouse = _ref2.mouse;\n\n  var _useThree2 = useThree(),\n      size = _useThree2.size;\n\n  var scrollMax = size.height * 4.5;\n  return __jsx(React.Fragment, null, __jsx(a.spotLight, {\n    intensity: 1.2,\n    color: \"white\",\n    position: mouse.interpolate(function (x, y) {\n      return [x / 100, -y / 100, 6.5];\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }), __jsx(Effects, {\n    factor: top.interpolate([0, 150], [1, 0]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }), __jsx(Background, {\n    color: top.interpolate([0, scrollMax * 0.25, scrollMax * 0.8, scrollMax], ['#27282F', '#247BA0', '#70C1B3', '#f8f3f1']),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }), __jsx(Thing, {\n    vertices: [[-1, 0, 0], [0, 1, 0], [1, 0, 0], [0, -1, 0], [-1, 0, 0]],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }), __jsx(TextLoop, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }));\n}; // Main container\n\n\nvar SmokeContainerReal = function SmokeContainerReal() {\n  return __jsx(\"div\", {\n    className: \"container block__three-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, __jsx(Canvas, {\n    style: {\n      background: 'radial-gradient(at 50% 70%, #200f20 40%, #090b1f 80%, #050523 100%)'\n    },\n    camera: {\n      fov: 75,\n      position: [0, 0, 60]\n    } // children                      // Either a function child (which receives state) or regular children\n    // gl                            // Props that go into the default webGL-renderer\n    // camera                        // Props that go into the default camera\n    // raycaster                     // Props that go into the default raycaster\n    // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n    // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n    // gl2 = false                   // Enables webgl2\n    // concurrent = false            // Enables React concurrent mode\n    // resize = undefined            // Resize config, see react-use-measure's options\n    // orthographic = false          // Creates an orthographic camera if true\n    // noEvents = false              // Switch off raytracing and event support\n    // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n    // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n    // updateDefaultCamera = true    // Adjusts default camera on size changes\n    // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n    // onPointerMissed \n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, __jsx(\"rectAreaLight\", {\n    intensity: 3,\n    position: [0, 10, -10],\n    width: 30,\n    height: 30,\n    onUpdate: function onUpdate(self) {\n      return self.lookAt(new THREE.Vector3(0, 0, 0));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }), __jsx(Scene, {\n    top: top,\n    mouse: mouse,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  })));\n};\n\nexport default SmokeContainerReal;","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/SmokeContainerReal.jsx"],"names":["useRef","THREE","Canvas","useFrame","extend","useResource","resources","TextLoop","Background","color","useThree","viewport","width","height","Thing","props","vertices","geometryRef","geometry","ref","current","rotation","x","y","map","v","Vector3","self","verticesNeedUpdate","Scene","top","mouse","size","scrollMax","interpolate","SmokeContainerReal","background","fov","position","lookAt"],"mappings":"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","sourcesContent":["import { useRef } from \"react\";\nimport * as THREE from 'three';\nimport {\n    Canvas,\n    useFrame,\n    extend,\n    useResource,\n    // useLoader,\n    // useThree,\n} from \"react-three-fiber\";\nimport * as resources from './resources/index';\nextend(resources);\n\nimport TextLoop from \"../TextLoop\";\n\n\n\n\n\n\n// This component creates a fullscreen colored plane \nconst Background = ({ color }) => {\n    const { viewport } = useThree();\n\n    return (\n        <mesh scale={[viewport.width, viewport.height, 1]}>\n            <planeGeometry attach=\"geometry\" args={[1, 1]} />\n            <a.meshBasicMaterial attach=\"material\" color={color} depthTest={false} />\n        </mesh>\n    )\n}\n\n\n\n// // This component loads an image and projects it onto a plane\n// function Image({ url, opacity, scale, ...props }) {\n//     const texture = useMemo(() => new THREE.TextureLoader().load(url), [url])\n//     const [hovered, setHover] = useState(false)\n//     const hover = useCallback(() => setHover(true), [])\n//     const unhover = useCallback(() => setHover(false), [])\n//     const { factor } = useSpring({ factor: hovered ? 1.1 : 1 })\n//     return (\n//         <a.mesh {...props} onHover={hover} onUnhover={unhover} scale={factor.interpolate(f => [scale * f, scale * f, 1])}>\n//             <planeBufferGeometry attach=\"geometry\" args={[5, 5]} />\n//             <a.meshLambertMaterial attach=\"material\" transparent opacity={opacity}>\n//                 <primitive attach=\"map\" object={texture} />\n//             </a.meshLambertMaterial>\n//         </a.mesh>\n//     )\n// }\n\n\n\n\n\n\nconst Thing = props => {\n    const { vertices } = props;\n    const [ geometryRef, geometry ] = useResource();\n    const ref = useRef();\n\n    // console.log('geometryRef AND geometry --> ', geometryRef, geometry);\n\n    useFrame(() => {\n        return ref.current.rotation.x = ref.current.rotation.y += 0.01\n    })\n\n    // useFrame(() => (console.log('ref.current --> ', ref.current)))\n    \n    return (\n        <group \n            ref={ref}\n        >\n            <line>\n                <geometry \n                    attach=\"geometry\"\n                    vertices={vertices.map( v => new THREE.Vector3(...v) )}\n                    onUpdate={self => (self.verticesNeedUpdate = true)}\n                />\n                <lineBasicMaterial   attach=\"material\"  color=\"#ff0000\" />\n            </line>\n                \n            <mesh       // a mesh combines material with geometry\n                // onClick={click => console.log('click --> ', click)}\n                // onHover={hover => console.log('hover --> ', hover)}\n            >\n                <octahedronGeometry attach=\"geometry\"  />\n                <meshBasicMaterial  attach=\"material\"  color=\"peachpuff\" opacity={0.5} transparent={true} />\n            </mesh>\n        </group>\n    )\n}\n\n\n// This component maintains the scene \nconst Scene = ({ top, mouse }) => {\n    const { size } = useThree();\n    const scrollMax = size.height * 4.5;\n\n    return (\n        <>\n            <a.spotLight intensity={1.2} color=\"white\" position={mouse.interpolate((x, y) => [x / 100, -y / 100, 6.5])} />\n            <Effects factor={top.interpolate([0, 150], [1, 0])} />\n            <Background color={top.interpolate([0, scrollMax * 0.25, scrollMax * 0.8, scrollMax], ['#27282F', '#247BA0', '#70C1B3', '#f8f3f1'])} />\n\n            <Thing   vertices={[ [ -1,0,0 ], [ 0,1,0 ], [ 1,0,0 ], [ 0,-1,0 ], [ -1,0,0 ] ]}  />\n\n            <TextLoop  />\n\n            {/* <Stars position={top.interpolate(top => [0, -1 + top / 20, 0])} />\n            <Images top={top} mouse={mouse} scrollMax={scrollMax} />\n            <Text opacity={top.interpolate([0, 200], [1, 0])} position={top.interpolate(top => [0, -1 + top / 200, 0])}>\n                lorem\n            </Text>\n            <Text position={top.interpolate(top => [0, -20 + ((top * 10) / scrollMax) * 2, 0])} color=\"black\" fontSize={150}>\n                Ipsum\n            </Text> */}\n        </>\n    )\n}\n\n// Main container\nconst SmokeContainerReal = () => {\n\n    return (\n        <div  className=\"container block__three-container\" >\n            <Canvas\n                style={{ background: 'radial-gradient(at 50% 70%, #200f20 40%, #090b1f 80%, #050523 100%)' }}\n                camera={{ fov: 75, position: [0, 0, 60] }} \n                // children                      // Either a function child (which receives state) or regular children\n                // gl                            // Props that go into the default webGL-renderer\n                // camera                        // Props that go into the default camera\n                // raycaster                     // Props that go into the default raycaster\n                // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n                // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n                // gl2 = false                   // Enables webgl2\n                // concurrent = false            // Enables React concurrent mode\n                // resize = undefined            // Resize config, see react-use-measure's options\n                // orthographic = false          // Creates an orthographic camera if true\n                // noEvents = false              // Switch off raytracing and event support\n                // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n                // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n                // updateDefaultCamera = true    // Adjusts default camera on size changes\n                // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n                // onPointerMissed \n            >   \n                <rectAreaLight\n                    intensity={3}\n                    position={[0, 10, -10]}\n                    width={30}\n                    height={30}\n                    onUpdate={self => self.lookAt(new THREE.Vector3(0, 0, 0))}\n                />\n\n                <Scene top={top} mouse={mouse} />\n\n            </Canvas> \n        </div>\n    );\n}\n\nexport default SmokeContainerReal;"]},"metadata":{},"sourceType":"module"}