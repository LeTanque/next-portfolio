{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/dnd-draglayer/Container.jsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { DropTarget } from 'react-dnd';\nimport ItemTypes from './ItemTypes';\nimport DraggableBox from './DraggableBox';\nimport snapToGrid from './snapToGrid';\nimport update from 'immutability-helper';\n\nvar Container =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(Container, _React$PureComponent);\n\n  function Container() {\n    var _this;\n\n    _classCallCheck(this, Container);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Container).apply(this, arguments));\n    _this.state = {\n      boxes: {\n        a: {\n          top: 20,\n          left: 80,\n          title: 'Drag me around'\n        },\n        b: {\n          top: 180,\n          left: 20,\n          title: 'Drag me too'\n        }\n      }\n    };\n    return _this;\n  }\n\n  _createClass(Container, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var connectDropTarget = this.props.connectDropTarget;\n      var boxes = this.state.boxes;\n      return connectDropTarget(__jsx(\"section\", {\n        className: \"section__drag-layer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, _Object$keys(boxes).map(function (key) {\n        return _this2.renderBox(boxes[key], key);\n      })));\n    }\n  }, {\n    key: \"moveBox\",\n    value: function moveBox(id, left, top) {\n      this.setState(update(this.state, {\n        boxes: _defineProperty({}, id, {\n          $merge: {\n            left: left,\n            top: top\n          }\n        })\n      }));\n    }\n  }, {\n    key: \"renderBox\",\n    value: function renderBox(item, key) {\n      return __jsx(DraggableBox, _extends({\n        key: key,\n        id: key\n      }, item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Container;\n}(React.PureComponent);\n\nexport default DropTarget(ItemTypes.BOX, {\n  drop: function drop(props, monitor, component) {\n    if (!component) {\n      return;\n    }\n\n    var delta = monitor.getDifferenceFromInitialOffset();\n    var item = monitor.getItem();\n    var left = Math.round(item.left + delta.x);\n    var top = Math.round(item.top + delta.y);\n\n    if (props.snapToGrid) {\n      ;\n\n      var _snapToGrid = snapToGrid(left, top);\n\n      var _snapToGrid2 = _slicedToArray(_snapToGrid, 2);\n\n      left = _snapToGrid2[0];\n      top = _snapToGrid2[1];\n    }\n\n    component.moveBox(item.id, left, top);\n  }\n}, function (connect) {\n  return {\n    connectDropTarget: connect.dropTarget()\n  };\n})(Container);","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/dnd-draglayer/Container.jsx"],"names":["React","DropTarget","ItemTypes","DraggableBox","snapToGrid","update","Container","arguments","state","boxes","a","top","left","title","b","connectDropTarget","props","map","key","renderBox","id","setState","$merge","item","PureComponent","BOX","drop","monitor","component","delta","getDifferenceFromInitialOffset","getItem","Math","round","x","y","moveBox","connect","dropTarget"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { DropTarget } from 'react-dnd'\nimport ItemTypes from './ItemTypes'\nimport DraggableBox from './DraggableBox'\nimport snapToGrid from './snapToGrid'\nimport update from 'immutability-helper';\n\n\n\nclass Container extends React.PureComponent {\n  constructor() {\n    super(...arguments)\n    this.state = {\n      boxes: {\n        a: { top: 20, left: 80, title: 'Drag me around' },\n        b: { top: 180, left: 20, title: 'Drag me too' },\n      },\n    }\n  }\n  render() {\n    const { connectDropTarget } = this.props\n    const { boxes } = this.state\n    \n    return connectDropTarget(\n      <section  className=\"section__drag-layer\" >\n        {Object.keys(boxes).map(key => this.renderBox(boxes[key], key))}\n      </section>,\n    )\n  }\n  moveBox(id, left, top) {\n    this.setState(\n      update(this.state, {\n        boxes: {\n          [id]: {\n            $merge: { left, top },\n          },\n        },\n      }),\n    )\n  }\n  renderBox(item, key) {\n    return <DraggableBox key={key} id={key} {...item} />\n  }\n}\n\nexport default DropTarget(\n  ItemTypes.BOX,\n  {\n    drop(props, monitor, component) {\n      if (!component) {\n        return\n      }\n      const delta = monitor.getDifferenceFromInitialOffset()\n      const item = monitor.getItem()\n      let left = Math.round(item.left + delta.x)\n      let top = Math.round(item.top + delta.y)\n      if (props.snapToGrid) {\n        ;[left, top] = snapToGrid(left, top)\n      }\n      component.moveBox(item.id, left, top)\n    },\n  },\n  connect => ({\n    connectDropTarget: connect.dropTarget(),\n  }),\n)(Container)\n"]},"metadata":{},"sourceType":"module"}