{"ast":null,"code":"import _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\nimport { Vector2 } from '../../math/Vector2.js';\nimport { Curve } from '../core/Curve.js';\n\nfunction LineCurve(v1, v2) {\n  Curve.call(this);\n  this.type = 'LineCurve';\n  this.v1 = v1 || new Vector2();\n  this.v2 = v2 || new Vector2();\n}\n\nLineCurve.prototype = _Object$create(Curve.prototype);\nLineCurve.prototype.constructor = LineCurve;\nLineCurve.prototype.isLineCurve = true;\n\nLineCurve.prototype.getPoint = function (t, optionalTarget) {\n  var point = optionalTarget || new Vector2();\n\n  if (t === 1) {\n    point.copy(this.v2);\n  } else {\n    point.copy(this.v2).sub(this.v1);\n    point.multiplyScalar(t).add(this.v1);\n  }\n\n  return point;\n}; // Line curve is linear, so we can overwrite default getPointAt\n\n\nLineCurve.prototype.getPointAt = function (u, optionalTarget) {\n  return this.getPoint(u, optionalTarget);\n};\n\nLineCurve.prototype.getTangent = function ()\n/* t */\n{\n  var tangent = this.v2.clone().sub(this.v1);\n  return tangent.normalize();\n};\n\nLineCurve.prototype.copy = function (source) {\n  Curve.prototype.copy.call(this, source);\n  this.v1.copy(source.v1);\n  this.v2.copy(source.v2);\n  return this;\n};\n\nLineCurve.prototype.toJSON = function () {\n  var data = Curve.prototype.toJSON.call(this);\n  data.v1 = this.v1.toArray();\n  data.v2 = this.v2.toArray();\n  return data;\n};\n\nLineCurve.prototype.fromJSON = function (json) {\n  Curve.prototype.fromJSON.call(this, json);\n  this.v1.fromArray(json.v1);\n  this.v2.fromArray(json.v2);\n  return this;\n};\n\nexport { LineCurve };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/extras/curves/LineCurve.js"],"names":["Vector2","Curve","LineCurve","v1","v2","call","type","prototype","constructor","isLineCurve","getPoint","t","optionalTarget","point","copy","sub","multiplyScalar","add","getPointAt","u","getTangent","tangent","clone","normalize","source","toJSON","data","toArray","fromJSON","json","fromArray"],"mappings":";AAAA,SAASA,OAAT,QAAwB,uBAAxB;AACA,SAASC,KAAT,QAAsB,kBAAtB;;AAGA,SAASC,SAAT,CAAoBC,EAApB,EAAwBC,EAAxB,EAA6B;AAE5BH,EAAAA,KAAK,CAACI,IAAN,CAAY,IAAZ;AAEA,OAAKC,IAAL,GAAY,WAAZ;AAEA,OAAKH,EAAL,GAAUA,EAAE,IAAI,IAAIH,OAAJ,EAAhB;AACA,OAAKI,EAAL,GAAUA,EAAE,IAAI,IAAIJ,OAAJ,EAAhB;AAEA;;AAEDE,SAAS,CAACK,SAAV,GAAsB,eAAeN,KAAK,CAACM,SAArB,CAAtB;AACAL,SAAS,CAACK,SAAV,CAAoBC,WAApB,GAAkCN,SAAlC;AAEAA,SAAS,CAACK,SAAV,CAAoBE,WAApB,GAAkC,IAAlC;;AAEAP,SAAS,CAACK,SAAV,CAAoBG,QAApB,GAA+B,UAAWC,CAAX,EAAcC,cAAd,EAA+B;AAE7D,MAAIC,KAAK,GAAGD,cAAc,IAAI,IAAIZ,OAAJ,EAA9B;;AAEA,MAAKW,CAAC,KAAK,CAAX,EAAe;AAEdE,IAAAA,KAAK,CAACC,IAAN,CAAY,KAAKV,EAAjB;AAEA,GAJD,MAIO;AAENS,IAAAA,KAAK,CAACC,IAAN,CAAY,KAAKV,EAAjB,EAAsBW,GAAtB,CAA2B,KAAKZ,EAAhC;AACAU,IAAAA,KAAK,CAACG,cAAN,CAAsBL,CAAtB,EAA0BM,GAA1B,CAA+B,KAAKd,EAApC;AAEA;;AAED,SAAOU,KAAP;AAEA,CAjBD,C,CAmBA;;;AAEAX,SAAS,CAACK,SAAV,CAAoBW,UAApB,GAAiC,UAAWC,CAAX,EAAcP,cAAd,EAA+B;AAE/D,SAAO,KAAKF,QAAL,CAAeS,CAAf,EAAkBP,cAAlB,CAAP;AAEA,CAJD;;AAMAV,SAAS,CAACK,SAAV,CAAoBa,UAApB,GAAiC;AAAW;AAAU;AAErD,MAAIC,OAAO,GAAG,KAAKjB,EAAL,CAAQkB,KAAR,GAAgBP,GAAhB,CAAqB,KAAKZ,EAA1B,CAAd;AAEA,SAAOkB,OAAO,CAACE,SAAR,EAAP;AAEA,CAND;;AAQArB,SAAS,CAACK,SAAV,CAAoBO,IAApB,GAA2B,UAAWU,MAAX,EAAoB;AAE9CvB,EAAAA,KAAK,CAACM,SAAN,CAAgBO,IAAhB,CAAqBT,IAArB,CAA2B,IAA3B,EAAiCmB,MAAjC;AAEA,OAAKrB,EAAL,CAAQW,IAAR,CAAcU,MAAM,CAACrB,EAArB;AACA,OAAKC,EAAL,CAAQU,IAAR,CAAcU,MAAM,CAACpB,EAArB;AAEA,SAAO,IAAP;AAEA,CATD;;AAWAF,SAAS,CAACK,SAAV,CAAoBkB,MAApB,GAA6B,YAAY;AAExC,MAAIC,IAAI,GAAGzB,KAAK,CAACM,SAAN,CAAgBkB,MAAhB,CAAuBpB,IAAvB,CAA6B,IAA7B,CAAX;AAEAqB,EAAAA,IAAI,CAACvB,EAAL,GAAU,KAAKA,EAAL,CAAQwB,OAAR,EAAV;AACAD,EAAAA,IAAI,CAACtB,EAAL,GAAU,KAAKA,EAAL,CAAQuB,OAAR,EAAV;AAEA,SAAOD,IAAP;AAEA,CATD;;AAWAxB,SAAS,CAACK,SAAV,CAAoBqB,QAApB,GAA+B,UAAWC,IAAX,EAAkB;AAEhD5B,EAAAA,KAAK,CAACM,SAAN,CAAgBqB,QAAhB,CAAyBvB,IAAzB,CAA+B,IAA/B,EAAqCwB,IAArC;AAEA,OAAK1B,EAAL,CAAQ2B,SAAR,CAAmBD,IAAI,CAAC1B,EAAxB;AACA,OAAKC,EAAL,CAAQ0B,SAAR,CAAmBD,IAAI,CAACzB,EAAxB;AAEA,SAAO,IAAP;AAEA,CATD;;AAYA,SAASF,SAAT","sourcesContent":["import { Vector2 } from '../../math/Vector2.js';\nimport { Curve } from '../core/Curve.js';\n\n\nfunction LineCurve( v1, v2 ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'LineCurve';\n\n\tthis.v1 = v1 || new Vector2();\n\tthis.v2 = v2 || new Vector2();\n\n}\n\nLineCurve.prototype = Object.create( Curve.prototype );\nLineCurve.prototype.constructor = LineCurve;\n\nLineCurve.prototype.isLineCurve = true;\n\nLineCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector2();\n\n\tif ( t === 1 ) {\n\n\t\tpoint.copy( this.v2 );\n\n\t} else {\n\n\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t}\n\n\treturn point;\n\n};\n\n// Line curve is linear, so we can overwrite default getPointAt\n\nLineCurve.prototype.getPointAt = function ( u, optionalTarget ) {\n\n\treturn this.getPoint( u, optionalTarget );\n\n};\n\nLineCurve.prototype.getTangent = function ( /* t */ ) {\n\n\tvar tangent = this.v2.clone().sub( this.v1 );\n\n\treturn tangent.normalize();\n\n};\n\nLineCurve.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.v1.copy( source.v1 );\n\tthis.v2.copy( source.v2 );\n\n\treturn this;\n\n};\n\nLineCurve.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.v1 = this.v1.toArray();\n\tdata.v2 = this.v2.toArray();\n\n\treturn data;\n\n};\n\nLineCurve.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.v1.fromArray( json.v1 );\n\tthis.v2.fromArray( json.v2 );\n\n\treturn this;\n\n};\n\n\nexport { LineCurve };\n"]},"metadata":{},"sourceType":"module"}