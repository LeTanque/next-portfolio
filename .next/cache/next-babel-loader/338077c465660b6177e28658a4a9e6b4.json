{"ast":null,"code":"import _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport { Pass } from \"./Pass.js\";\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nvar MaskPass = function (scene, camera) {\n  Pass.call(this);\n  this.scene = scene;\n  this.camera = camera;\n  this.clear = true;\n  this.needsSwap = false;\n  this.inverse = false;\n};\n\nMaskPass.prototype = _Object$assign(_Object$create(Pass.prototype), {\n  constructor: MaskPass,\n  render: function (renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    var context = renderer.context;\n    var state = renderer.state; // don't update color or depth\n\n    state.buffers.color.setMask(false);\n    state.buffers.depth.setMask(false); // lock buffers\n\n    state.buffers.color.setLocked(true);\n    state.buffers.depth.setLocked(true); // set up stencil\n\n    var writeValue, clearValue;\n\n    if (this.inverse) {\n      writeValue = 0;\n      clearValue = 1;\n    } else {\n      writeValue = 1;\n      clearValue = 0;\n    }\n\n    state.buffers.stencil.setTest(true);\n    state.buffers.stencil.setOp(context.REPLACE, context.REPLACE, context.REPLACE);\n    state.buffers.stencil.setFunc(context.ALWAYS, writeValue, 0xffffffff);\n    state.buffers.stencil.setClear(clearValue); // draw into the stencil buffer\n\n    renderer.setRenderTarget(readBuffer);\n    if (this.clear) renderer.clear();\n    renderer.render(this.scene, this.camera);\n    renderer.setRenderTarget(writeBuffer);\n    if (this.clear) renderer.clear();\n    renderer.render(this.scene, this.camera); // unlock color and depth buffer for subsequent rendering\n\n    state.buffers.color.setLocked(false);\n    state.buffers.depth.setLocked(false); // only render where stencil is set to 1\n\n    state.buffers.stencil.setFunc(context.EQUAL, 1, 0xffffffff); // draw if == 1\n\n    state.buffers.stencil.setOp(context.KEEP, context.KEEP, context.KEEP);\n  }\n});\n\nvar ClearMaskPass = function () {\n  Pass.call(this);\n  this.needsSwap = false;\n};\n\nClearMaskPass.prototype = _Object$create(Pass.prototype);\n\n_Object$assign(ClearMaskPass.prototype, {\n  render: function (renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    renderer.state.buffers.stencil.setTest(false);\n  }\n});\n\nexport { ClearMaskPass, MaskPass };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/resources/postprocessing/MaskPass.js"],"names":["MaskPass","Pass","constructor","render","context","renderer","state","writeValue","clearValue","ClearMaskPass"],"mappings":";;AAAA,SAAA,IAAA,QAAA,WAAA;AACA;;;;AAIA,IAAIA,QAAQ,GAAG,UAAA,KAAA,EAAA,MAAA,EAAwB;AACnCC,EAAAA,IAAI,CAAJA,IAAAA,CAAAA,IAAAA;AAEA,OAAA,KAAA,GAAA,KAAA;AACA,OAAA,MAAA,GAAA,MAAA;AAEA,OAAA,KAAA,GAAA,IAAA;AACA,OAAA,SAAA,GAAA,KAAA;AAEA,OAAA,OAAA,GAAA,KAAA;AATJ,CAAA;;AAYAD,QAAQ,CAARA,SAAAA,GAAqB,cAAA,CAAc,cAAA,CAAcC,IAAI,CAAhC,SAAc,CAAd,EAA6C;AAC9DC,EAAAA,WAAW,EADmD,QAAA;AAG9DC,EAAAA,MAAM,EAAE,UAAA,QAAA,EAAA,WAAA,EAAA,UAAA,EAAA,SAAA,EAAA,UAAA,EAAmE;AACvE,QAAIC,OAAO,GAAGC,QAAQ,CAAtB,OAAA;AACA,QAAIC,KAAK,GAAGD,QAAQ,CAFmD,KAEvE,CAFuE,CAIvE;;AAEAC,IAAAA,KAAK,CAALA,OAAAA,CAAAA,KAAAA,CAAAA,OAAAA,CAAAA,KAAAA;AACAA,IAAAA,KAAK,CAALA,OAAAA,CAAAA,KAAAA,CAAAA,OAAAA,CAPuE,KAOvEA,EAPuE,CASvE;;AAEAA,IAAAA,KAAK,CAALA,OAAAA,CAAAA,KAAAA,CAAAA,SAAAA,CAAAA,IAAAA;AACAA,IAAAA,KAAK,CAALA,OAAAA,CAAAA,KAAAA,CAAAA,SAAAA,CAZuE,IAYvEA,EAZuE,CAcvE;;AAEA,QAAA,UAAA,EAAA,UAAA;;AAEA,QAAI,KAAJ,OAAA,EAAkB;AACdC,MAAAA,UAAU,GAAVA,CAAAA;AACAC,MAAAA,UAAU,GAAVA,CAAAA;AAFJ,KAAA,MAGO;AACHD,MAAAA,UAAU,GAAVA,CAAAA;AACAC,MAAAA,UAAU,GAAVA,CAAAA;AACH;;AAEDF,IAAAA,KAAK,CAALA,OAAAA,CAAAA,OAAAA,CAAAA,OAAAA,CAAAA,IAAAA;AACAA,IAAAA,KAAK,CAALA,OAAAA,CAAAA,OAAAA,CAAAA,KAAAA,CACIF,OAAO,CADXE,OAAAA,EAEIF,OAAO,CAFXE,OAAAA,EAGIF,OAAO,CAHXE,OAAAA;AAKAA,IAAAA,KAAK,CAALA,OAAAA,CAAAA,OAAAA,CAAAA,OAAAA,CAA8BF,OAAO,CAArCE,MAAAA,EAAAA,UAAAA,EAAAA,UAAAA;AACAA,IAAAA,KAAK,CAALA,OAAAA,CAAAA,OAAAA,CAAAA,QAAAA,CAjCuE,UAiCvEA,EAjCuE,CAmCvE;;AAEAD,IAAAA,QAAQ,CAARA,eAAAA,CAAAA,UAAAA;AACA,QAAI,KAAJ,KAAA,EAAgBA,QAAQ,CAARA,KAAAA;AAChBA,IAAAA,QAAQ,CAARA,MAAAA,CAAgB,KAAhBA,KAAAA,EAA4B,KAA5BA,MAAAA;AAEAA,IAAAA,QAAQ,CAARA,eAAAA,CAAAA,WAAAA;AACA,QAAI,KAAJ,KAAA,EAAgBA,QAAQ,CAARA,KAAAA;AAChBA,IAAAA,QAAQ,CAARA,MAAAA,CAAgB,KAAhBA,KAAAA,EAA4B,KA3C2C,MA2CvEA,EA3CuE,CA6CvE;;AAEAC,IAAAA,KAAK,CAALA,OAAAA,CAAAA,KAAAA,CAAAA,SAAAA,CAAAA,KAAAA;AACAA,IAAAA,KAAK,CAALA,OAAAA,CAAAA,KAAAA,CAAAA,SAAAA,CAhDuE,KAgDvEA,EAhDuE,CAkDvE;;AAEAA,IAAAA,KAAK,CAALA,OAAAA,CAAAA,OAAAA,CAAAA,OAAAA,CAA8BF,OAAO,CAArCE,KAAAA,EAAAA,CAAAA,EApDuE,UAoDvEA,EApDuE,CAoDV;;AAC7DA,IAAAA,KAAK,CAALA,OAAAA,CAAAA,OAAAA,CAAAA,KAAAA,CAA4BF,OAAO,CAAnCE,IAAAA,EAA0CF,OAAO,CAAjDE,IAAAA,EAAwDF,OAAO,CAA/DE,IAAAA;AACH;AAzD6D,CAA7C,CAArBN;;AA4DA,IAAIS,aAAa,GAAG,YAAW;AAC3BR,EAAAA,IAAI,CAAJA,IAAAA,CAAAA,IAAAA;AAEA,OAAA,SAAA,GAAA,KAAA;AAHJ,CAAA;;AAMAQ,aAAa,CAAbA,SAAAA,GAA0B,cAAA,CAAcR,IAAI,CAA5CQ,SAA0B,CAA1BA;;AAEA,cAAA,CAAcA,aAAa,CAA3B,SAAA,EAAuC;AACnCN,EAAAA,MAAM,EAAE,UAAA,QAAA,EAAA,WAAA,EAAA,UAAA,EAAA,SAAA,EAAA,UAAA,EAAmE;AACvEE,IAAAA,QAAQ,CAARA,KAAAA,CAAAA,OAAAA,CAAAA,OAAAA,CAAAA,OAAAA,CAAAA,KAAAA;AACH;AAHkC,CAAvC,CAAA;;AAMA,SAAA,aAAA,EAAA,QAAA","sourcesContent":["import { Pass } from \"./Pass.js\";\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nvar MaskPass = function(scene, camera) {\n    Pass.call(this);\n\n    this.scene = scene;\n    this.camera = camera;\n\n    this.clear = true;\n    this.needsSwap = false;\n\n    this.inverse = false;\n};\n\nMaskPass.prototype = Object.assign(Object.create(Pass.prototype), {\n    constructor: MaskPass,\n\n    render: function(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n        var context = renderer.context;\n        var state = renderer.state;\n\n        // don't update color or depth\n\n        state.buffers.color.setMask(false);\n        state.buffers.depth.setMask(false);\n\n        // lock buffers\n\n        state.buffers.color.setLocked(true);\n        state.buffers.depth.setLocked(true);\n\n        // set up stencil\n\n        var writeValue, clearValue;\n\n        if (this.inverse) {\n            writeValue = 0;\n            clearValue = 1;\n        } else {\n            writeValue = 1;\n            clearValue = 0;\n        }\n\n        state.buffers.stencil.setTest(true);\n        state.buffers.stencil.setOp(\n            context.REPLACE,\n            context.REPLACE,\n            context.REPLACE\n        );\n        state.buffers.stencil.setFunc(context.ALWAYS, writeValue, 0xffffffff);\n        state.buffers.stencil.setClear(clearValue);\n\n        // draw into the stencil buffer\n\n        renderer.setRenderTarget(readBuffer);\n        if (this.clear) renderer.clear();\n        renderer.render(this.scene, this.camera);\n\n        renderer.setRenderTarget(writeBuffer);\n        if (this.clear) renderer.clear();\n        renderer.render(this.scene, this.camera);\n\n        // unlock color and depth buffer for subsequent rendering\n\n        state.buffers.color.setLocked(false);\n        state.buffers.depth.setLocked(false);\n\n        // only render where stencil is set to 1\n\n        state.buffers.stencil.setFunc(context.EQUAL, 1, 0xffffffff); // draw if == 1\n        state.buffers.stencil.setOp(context.KEEP, context.KEEP, context.KEEP);\n    }\n});\n\nvar ClearMaskPass = function() {\n    Pass.call(this);\n\n    this.needsSwap = false;\n};\n\nClearMaskPass.prototype = Object.create(Pass.prototype);\n\nObject.assign(ClearMaskPass.prototype, {\n    render: function(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n        renderer.state.buffers.stencil.setTest(false);\n    }\n});\n\nexport { ClearMaskPass, MaskPass };\n"]},"metadata":{},"sourceType":"module"}