{"ast":null,"code":"/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction WebGLBufferRenderer(gl, extensions, info, capabilities) {\n  var isWebGL2 = capabilities.isWebGL2;\n  var mode;\n\n  function setMode(value) {\n    mode = value;\n  }\n\n  function render(start, count) {\n    gl.drawArrays(mode, start, count);\n    info.update(count, mode);\n  }\n\n  function renderInstances(geometry, start, count, primcount) {\n    if (primcount === 0) return;\n    var extension, methodName;\n\n    if (isWebGL2) {\n      extension = gl;\n      methodName = 'drawArraysInstanced';\n    } else {\n      extension = extensions.get('ANGLE_instanced_arrays');\n      methodName = 'drawArraysInstancedANGLE';\n\n      if (extension === null) {\n        console.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n        return;\n      }\n    }\n\n    extension[methodName](mode, start, count, primcount);\n    info.update(count, mode, primcount);\n  } //\n\n\n  this.setMode = setMode;\n  this.render = render;\n  this.renderInstances = renderInstances;\n}\n\nexport { WebGLBufferRenderer };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/renderers/webgl/WebGLBufferRenderer.js"],"names":["WebGLBufferRenderer","gl","extensions","info","capabilities","isWebGL2","mode","setMode","value","render","start","count","drawArrays","update","renderInstances","geometry","primcount","extension","methodName","get","console","error"],"mappings":"AAAA;;;AAIA,SAASA,mBAAT,CAA8BC,EAA9B,EAAkCC,UAAlC,EAA8CC,IAA9C,EAAoDC,YAApD,EAAmE;AAElE,MAAIC,QAAQ,GAAGD,YAAY,CAACC,QAA5B;AAEA,MAAIC,IAAJ;;AAEA,WAASC,OAAT,CAAkBC,KAAlB,EAA0B;AAEzBF,IAAAA,IAAI,GAAGE,KAAP;AAEA;;AAED,WAASC,MAAT,CAAiBC,KAAjB,EAAwBC,KAAxB,EAAgC;AAE/BV,IAAAA,EAAE,CAACW,UAAH,CAAeN,IAAf,EAAqBI,KAArB,EAA4BC,KAA5B;AAEAR,IAAAA,IAAI,CAACU,MAAL,CAAaF,KAAb,EAAoBL,IAApB;AAEA;;AAED,WAASQ,eAAT,CAA0BC,QAA1B,EAAoCL,KAApC,EAA2CC,KAA3C,EAAkDK,SAAlD,EAA8D;AAE7D,QAAKA,SAAS,KAAK,CAAnB,EAAuB;AAEvB,QAAIC,SAAJ,EAAeC,UAAf;;AAEA,QAAKb,QAAL,EAAgB;AAEfY,MAAAA,SAAS,GAAGhB,EAAZ;AACAiB,MAAAA,UAAU,GAAG,qBAAb;AAEA,KALD,MAKO;AAEND,MAAAA,SAAS,GAAGf,UAAU,CAACiB,GAAX,CAAgB,wBAAhB,CAAZ;AACAD,MAAAA,UAAU,GAAG,0BAAb;;AAEA,UAAKD,SAAS,KAAK,IAAnB,EAA0B;AAEzBG,QAAAA,OAAO,CAACC,KAAR,CAAe,gIAAf;AACA;AAEA;AAED;;AAEDJ,IAAAA,SAAS,CAAEC,UAAF,CAAT,CAAyBZ,IAAzB,EAA+BI,KAA/B,EAAsCC,KAAtC,EAA6CK,SAA7C;AAEAb,IAAAA,IAAI,CAACU,MAAL,CAAaF,KAAb,EAAoBL,IAApB,EAA0BU,SAA1B;AAEA,GAjDiE,CAmDlE;;;AAEA,OAAKT,OAAL,GAAeA,OAAf;AACA,OAAKE,MAAL,GAAcA,MAAd;AACA,OAAKK,eAAL,GAAuBA,eAAvB;AAEA;;AAGD,SAASd,mBAAT","sourcesContent":["/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLBufferRenderer( gl, extensions, info, capabilities ) {\n\n\tvar isWebGL2 = capabilities.isWebGL2;\n\n\tvar mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\tgl.drawArrays( mode, start, count );\n\n\t\tinfo.update( count, mode );\n\n\t}\n\n\tfunction renderInstances( geometry, start, count, primcount ) {\n\n\t\tif ( primcount === 0 ) return;\n\n\t\tvar extension, methodName;\n\n\t\tif ( isWebGL2 ) {\n\n\t\t\textension = gl;\n\t\t\tmethodName = 'drawArraysInstanced';\n\n\t\t} else {\n\n\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\tmethodName = 'drawArraysInstancedANGLE';\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\textension[ methodName ]( mode, start, count, primcount );\n\n\t\tinfo.update( count, mode, primcount );\n\n\t}\n\n\t//\n\n\tthis.setMode = setMode;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\n}\n\n\nexport { WebGLBufferRenderer };\n"]},"metadata":{},"sourceType":"module"}