{"ast":null,"code":"import _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\nimport { Vector3 } from '../../math/Vector3.js';\nimport { Curve } from '../core/Curve.js';\n/**\n * @author zz85 https://github.com/zz85\n *\n * Centripetal CatmullRom Curve - which is useful for avoiding\n * cusps and self-intersections in non-uniform catmull rom curves.\n * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n *\n * curve.type accepts centripetal(default), chordal and catmullrom\n * curve.tension is used for catmullrom which defaults to 0.5\n */\n\n/*\nBased on an optimized c++ solution in\n - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n - http://ideone.com/NoEbVM\n\nThis CubicPoly class could be used for reusing some variables and calculations,\nbut for three.js curve use, it could be possible inlined and flatten into a single function call\nwhich can be placed in CurveUtils.\n*/\n\nfunction CubicPoly() {\n  var c0 = 0,\n      c1 = 0,\n      c2 = 0,\n      c3 = 0;\n  /*\n   * Compute coefficients for a cubic polynomial\n   *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n   * such that\n   *   p(0) = x0, p(1) = x1\n   *  and\n   *   p'(0) = t0, p'(1) = t1.\n   */\n\n  function init(x0, x1, t0, t1) {\n    c0 = x0;\n    c1 = t0;\n    c2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;\n    c3 = 2 * x0 - 2 * x1 + t0 + t1;\n  }\n\n  return {\n    initCatmullRom: function (x0, x1, x2, x3, tension) {\n      init(x1, x2, tension * (x2 - x0), tension * (x3 - x1));\n    },\n    initNonuniformCatmullRom: function (x0, x1, x2, x3, dt0, dt1, dt2) {\n      // compute tangents when parameterized in [t1,t2]\n      var t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;\n      var t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2; // rescale tangents for parametrization in [0,1]\n\n      t1 *= dt1;\n      t2 *= dt1;\n      init(x1, x2, t1, t2);\n    },\n    calc: function (t) {\n      var t2 = t * t;\n      var t3 = t2 * t;\n      return c0 + c1 * t + c2 * t2 + c3 * t3;\n    }\n  };\n} //\n\n\nvar tmp = new Vector3();\nvar px = new CubicPoly(),\n    py = new CubicPoly(),\n    pz = new CubicPoly();\n\nfunction CatmullRomCurve3(points, closed, curveType, tension) {\n  Curve.call(this);\n  this.type = 'CatmullRomCurve3';\n  this.points = points || [];\n  this.closed = closed || false;\n  this.curveType = curveType || 'centripetal';\n  this.tension = tension || 0.5;\n}\n\nCatmullRomCurve3.prototype = _Object$create(Curve.prototype);\nCatmullRomCurve3.prototype.constructor = CatmullRomCurve3;\nCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\n\nCatmullRomCurve3.prototype.getPoint = function (t, optionalTarget) {\n  var point = optionalTarget || new Vector3();\n  var points = this.points;\n  var l = points.length;\n  var p = (l - (this.closed ? 0 : 1)) * t;\n  var intPoint = Math.floor(p);\n  var weight = p - intPoint;\n\n  if (this.closed) {\n    intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;\n  } else if (weight === 0 && intPoint === l - 1) {\n    intPoint = l - 2;\n    weight = 1;\n  }\n\n  var p0, p1, p2, p3; // 4 points\n\n  if (this.closed || intPoint > 0) {\n    p0 = points[(intPoint - 1) % l];\n  } else {\n    // extrapolate first point\n    tmp.subVectors(points[0], points[1]).add(points[0]);\n    p0 = tmp;\n  }\n\n  p1 = points[intPoint % l];\n  p2 = points[(intPoint + 1) % l];\n\n  if (this.closed || intPoint + 2 < l) {\n    p3 = points[(intPoint + 2) % l];\n  } else {\n    // extrapolate last point\n    tmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);\n    p3 = tmp;\n  }\n\n  if (this.curveType === 'centripetal' || this.curveType === 'chordal') {\n    // init Centripetal / Chordal Catmull-Rom\n    var pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n    var dt0 = Math.pow(p0.distanceToSquared(p1), pow);\n    var dt1 = Math.pow(p1.distanceToSquared(p2), pow);\n    var dt2 = Math.pow(p2.distanceToSquared(p3), pow); // safety check for repeated points\n\n    if (dt1 < 1e-4) dt1 = 1.0;\n    if (dt0 < 1e-4) dt0 = dt1;\n    if (dt2 < 1e-4) dt2 = dt1;\n    px.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);\n    py.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);\n    pz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);\n  } else if (this.curveType === 'catmullrom') {\n    px.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);\n    py.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);\n    pz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);\n  }\n\n  point.set(px.calc(weight), py.calc(weight), pz.calc(weight));\n  return point;\n};\n\nCatmullRomCurve3.prototype.copy = function (source) {\n  Curve.prototype.copy.call(this, source);\n  this.points = [];\n\n  for (var i = 0, l = source.points.length; i < l; i++) {\n    var point = source.points[i];\n    this.points.push(point.clone());\n  }\n\n  this.closed = source.closed;\n  this.curveType = source.curveType;\n  this.tension = source.tension;\n  return this;\n};\n\nCatmullRomCurve3.prototype.toJSON = function () {\n  var data = Curve.prototype.toJSON.call(this);\n  data.points = [];\n\n  for (var i = 0, l = this.points.length; i < l; i++) {\n    var point = this.points[i];\n    data.points.push(point.toArray());\n  }\n\n  data.closed = this.closed;\n  data.curveType = this.curveType;\n  data.tension = this.tension;\n  return data;\n};\n\nCatmullRomCurve3.prototype.fromJSON = function (json) {\n  Curve.prototype.fromJSON.call(this, json);\n  this.points = [];\n\n  for (var i = 0, l = json.points.length; i < l; i++) {\n    var point = json.points[i];\n    this.points.push(new Vector3().fromArray(point));\n  }\n\n  this.closed = json.closed;\n  this.curveType = json.curveType;\n  this.tension = json.tension;\n  return this;\n};\n\nexport { CatmullRomCurve3 };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/extras/curves/CatmullRomCurve3.js"],"names":["Vector3","Curve","CubicPoly","c0","c1","c2","c3","init","x0","x1","t0","t1","initCatmullRom","x2","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","t2","calc","t","t3","tmp","px","py","pz","CatmullRomCurve3","points","closed","curveType","call","type","prototype","constructor","isCatmullRomCurve3","getPoint","optionalTarget","point","l","length","p","intPoint","Math","floor","weight","abs","p0","p1","p2","p3","subVectors","add","pow","distanceToSquared","x","y","z","set","copy","source","i","push","clone","toJSON","data","toArray","fromJSON","json","fromArray"],"mappings":"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","sourcesContent":["import { Vector3 } from '../../math/Vector3.js';\nimport { Curve } from '../core/Curve.js';\n\n/**\n * @author zz85 https://github.com/zz85\n *\n * Centripetal CatmullRom Curve - which is useful for avoiding\n * cusps and self-intersections in non-uniform catmull rom curves.\n * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n *\n * curve.type accepts centripetal(default), chordal and catmullrom\n * curve.tension is used for catmullrom which defaults to 0.5\n */\n\n\n/*\nBased on an optimized c++ solution in\n - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n - http://ideone.com/NoEbVM\n\nThis CubicPoly class could be used for reusing some variables and calculations,\nbut for three.js curve use, it could be possible inlined and flatten into a single function call\nwhich can be placed in CurveUtils.\n*/\n\nfunction CubicPoly() {\n\n\tvar c0 = 0, c1 = 0, c2 = 0, c3 = 0;\n\n\t/*\n\t * Compute coefficients for a cubic polynomial\n\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t * such that\n\t *   p(0) = x0, p(1) = x1\n\t *  and\n\t *   p'(0) = t0, p'(1) = t1.\n\t */\n\tfunction init( x0, x1, t0, t1 ) {\n\n\t\tc0 = x0;\n\t\tc1 = t0;\n\t\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t}\n\n\treturn {\n\n\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\n\n\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t\t},\n\n\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t\t// rescale tangents for parametrization in [0,1]\n\t\t\tt1 *= dt1;\n\t\t\tt2 *= dt1;\n\n\t\t\tinit( x1, x2, t1, t2 );\n\n\t\t},\n\n\t\tcalc: function ( t ) {\n\n\t\t\tvar t2 = t * t;\n\t\t\tvar t3 = t2 * t;\n\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\n\t\t}\n\n\t};\n\n}\n\n//\n\nvar tmp = new Vector3();\nvar px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();\n\nfunction CatmullRomCurve3( points, closed, curveType, tension ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'CatmullRomCurve3';\n\n\tthis.points = points || [];\n\tthis.closed = closed || false;\n\tthis.curveType = curveType || 'centripetal';\n\tthis.tension = tension || 0.5;\n\n}\n\nCatmullRomCurve3.prototype = Object.create( Curve.prototype );\nCatmullRomCurve3.prototype.constructor = CatmullRomCurve3;\n\nCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\n\nCatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector3();\n\n\tvar points = this.points;\n\tvar l = points.length;\n\n\tvar p = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\tvar intPoint = Math.floor( p );\n\tvar weight = p - intPoint;\n\n\tif ( this.closed ) {\n\n\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;\n\n\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n\t\tintPoint = l - 2;\n\t\tweight = 1;\n\n\t}\n\n\tvar p0, p1, p2, p3; // 4 points\n\n\tif ( this.closed || intPoint > 0 ) {\n\n\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n\t} else {\n\n\t\t// extrapolate first point\n\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\tp0 = tmp;\n\n\t}\n\n\tp1 = points[ intPoint % l ];\n\tp2 = points[ ( intPoint + 1 ) % l ];\n\n\tif ( this.closed || intPoint + 2 < l ) {\n\n\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n\t} else {\n\n\t\t// extrapolate last point\n\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\tp3 = tmp;\n\n\t}\n\n\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\n\n\t\t// init Centripetal / Chordal Catmull-Rom\n\t\tvar pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t// safety check for repeated points\n\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\n\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t} else if ( this.curveType === 'catmullrom' ) {\n\n\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\n\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\n\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\n\n\t}\n\n\tpoint.set(\n\t\tpx.calc( weight ),\n\t\tpy.calc( weight ),\n\t\tpz.calc( weight )\n\t);\n\n\treturn point;\n\n};\n\nCatmullRomCurve3.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.points = [];\n\n\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\tvar point = source.points[ i ];\n\n\t\tthis.points.push( point.clone() );\n\n\t}\n\n\tthis.closed = source.closed;\n\tthis.curveType = source.curveType;\n\tthis.tension = source.tension;\n\n\treturn this;\n\n};\n\nCatmullRomCurve3.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.points = [];\n\n\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\tvar point = this.points[ i ];\n\t\tdata.points.push( point.toArray() );\n\n\t}\n\n\tdata.closed = this.closed;\n\tdata.curveType = this.curveType;\n\tdata.tension = this.tension;\n\n\treturn data;\n\n};\n\nCatmullRomCurve3.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.points = [];\n\n\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\tvar point = json.points[ i ];\n\t\tthis.points.push( new Vector3().fromArray( point ) );\n\n\t}\n\n\tthis.closed = json.closed;\n\tthis.curveType = json.curveType;\n\tthis.tension = json.tension;\n\n\treturn this;\n\n};\n\n\nexport { CatmullRomCurve3 };\n"]},"metadata":{},"sourceType":"module"}