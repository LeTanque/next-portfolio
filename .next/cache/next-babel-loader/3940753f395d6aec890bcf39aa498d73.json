{"ast":null,"code":"import _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\nimport { Material } from './Material.js';\nimport { MultiplyOperation } from '../constants.js';\nimport { Color } from '../math/Color.js';\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nfunction MeshLambertMaterial(parameters) {\n  Material.call(this);\n  this.type = 'MeshLambertMaterial';\n  this.color = new Color(0xffffff); // diffuse\n\n  this.map = null;\n  this.lightMap = null;\n  this.lightMapIntensity = 1.0;\n  this.aoMap = null;\n  this.aoMapIntensity = 1.0;\n  this.emissive = new Color(0x000000);\n  this.emissiveIntensity = 1.0;\n  this.emissiveMap = null;\n  this.specularMap = null;\n  this.alphaMap = null;\n  this.envMap = null;\n  this.combine = MultiplyOperation;\n  this.reflectivity = 1;\n  this.refractionRatio = 0.98;\n  this.wireframe = false;\n  this.wireframeLinewidth = 1;\n  this.wireframeLinecap = 'round';\n  this.wireframeLinejoin = 'round';\n  this.skinning = false;\n  this.morphTargets = false;\n  this.morphNormals = false;\n  this.setValues(parameters);\n}\n\nMeshLambertMaterial.prototype = _Object$create(Material.prototype);\nMeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\nMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\nMeshLambertMaterial.prototype.copy = function (source) {\n  Material.prototype.copy.call(this, source);\n  this.color.copy(source.color);\n  this.map = source.map;\n  this.lightMap = source.lightMap;\n  this.lightMapIntensity = source.lightMapIntensity;\n  this.aoMap = source.aoMap;\n  this.aoMapIntensity = source.aoMapIntensity;\n  this.emissive.copy(source.emissive);\n  this.emissiveMap = source.emissiveMap;\n  this.emissiveIntensity = source.emissiveIntensity;\n  this.specularMap = source.specularMap;\n  this.alphaMap = source.alphaMap;\n  this.envMap = source.envMap;\n  this.combine = source.combine;\n  this.reflectivity = source.reflectivity;\n  this.refractionRatio = source.refractionRatio;\n  this.wireframe = source.wireframe;\n  this.wireframeLinewidth = source.wireframeLinewidth;\n  this.wireframeLinecap = source.wireframeLinecap;\n  this.wireframeLinejoin = source.wireframeLinejoin;\n  this.skinning = source.skinning;\n  this.morphTargets = source.morphTargets;\n  this.morphNormals = source.morphNormals;\n  return this;\n};\n\nexport { MeshLambertMaterial };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/materials/MeshLambertMaterial.js"],"names":["Material","MultiplyOperation","Color","MeshLambertMaterial","parameters","call","type","color","map","lightMap","lightMapIntensity","aoMap","aoMapIntensity","emissive","emissiveIntensity","emissiveMap","specularMap","alphaMap","envMap","combine","reflectivity","refractionRatio","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","skinning","morphTargets","morphNormals","setValues","prototype","constructor","isMeshLambertMaterial","copy","source"],"mappings":"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","sourcesContent":["import { Material } from './Material.js';\nimport { MultiplyOperation } from '../constants.js';\nimport { Color } from '../math/Color.js';\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nfunction MeshLambertMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'MeshLambertMaterial';\n\n\tthis.color = new Color( 0xffffff ); // diffuse\n\n\tthis.map = null;\n\n\tthis.lightMap = null;\n\tthis.lightMapIntensity = 1.0;\n\n\tthis.aoMap = null;\n\tthis.aoMapIntensity = 1.0;\n\n\tthis.emissive = new Color( 0x000000 );\n\tthis.emissiveIntensity = 1.0;\n\tthis.emissiveMap = null;\n\n\tthis.specularMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.combine = MultiplyOperation;\n\tthis.reflectivity = 1;\n\tthis.refractionRatio = 0.98;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\tthis.morphNormals = false;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshLambertMaterial.prototype = Object.create( Material.prototype );\nMeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\n\nMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\nMeshLambertMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.map = source.map;\n\n\tthis.lightMap = source.lightMap;\n\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\tthis.aoMap = source.aoMap;\n\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\tthis.emissive.copy( source.emissive );\n\tthis.emissiveMap = source.emissiveMap;\n\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\tthis.specularMap = source.specularMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.combine = source.combine;\n\tthis.reflectivity = source.reflectivity;\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\treturn this;\n\n};\n\n\nexport { MeshLambertMaterial };\n"]},"metadata":{},"sourceType":"module"}