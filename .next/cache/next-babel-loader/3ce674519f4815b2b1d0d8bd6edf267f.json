{"ast":null,"code":"import _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport { Camera } from './Camera.js';\nimport { Object3D } from '../core/Object3D.js';\nimport { _Math } from '../math/Math.js';\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author greggman / http://games.greggman.com/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author tschw\n */\n\nfunction PerspectiveCamera(fov, aspect, near, far) {\n  Camera.call(this);\n  this.type = 'PerspectiveCamera';\n  this.fov = fov !== undefined ? fov : 50;\n  this.zoom = 1;\n  this.near = near !== undefined ? near : 0.1;\n  this.far = far !== undefined ? far : 2000;\n  this.focus = 10;\n  this.aspect = aspect !== undefined ? aspect : 1;\n  this.view = null;\n  this.filmGauge = 35; // width of the film (default in millimeters)\n\n  this.filmOffset = 0; // horizontal film offset (same unit as gauge)\n\n  this.updateProjectionMatrix();\n}\n\nPerspectiveCamera.prototype = _Object$assign(_Object$create(Camera.prototype), {\n  constructor: PerspectiveCamera,\n  isPerspectiveCamera: true,\n  copy: function (source, recursive) {\n    Camera.prototype.copy.call(this, source, recursive);\n    this.fov = source.fov;\n    this.zoom = source.zoom;\n    this.near = source.near;\n    this.far = source.far;\n    this.focus = source.focus;\n    this.aspect = source.aspect;\n    this.view = source.view === null ? null : _Object$assign({}, source.view);\n    this.filmGauge = source.filmGauge;\n    this.filmOffset = source.filmOffset;\n    return this;\n  },\n\n  /**\n   * Sets the FOV by focal length in respect to the current .filmGauge.\n   *\n   * The default film gauge is 35, so that the focal length can be specified for\n   * a 35mm (full frame) camera.\n   *\n   * Values for focal length and film gauge must have the same unit.\n   */\n  setFocalLength: function (focalLength) {\n    // see http://www.bobatkins.com/photography/technical/field_of_view.html\n    var vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n    this.fov = _Math.RAD2DEG * 2 * Math.atan(vExtentSlope);\n    this.updateProjectionMatrix();\n  },\n\n  /**\n   * Calculates the focal length from the current .fov and .filmGauge.\n   */\n  getFocalLength: function () {\n    var vExtentSlope = Math.tan(_Math.DEG2RAD * 0.5 * this.fov);\n    return 0.5 * this.getFilmHeight() / vExtentSlope;\n  },\n  getEffectiveFOV: function () {\n    return _Math.RAD2DEG * 2 * Math.atan(Math.tan(_Math.DEG2RAD * 0.5 * this.fov) / this.zoom);\n  },\n  getFilmWidth: function () {\n    // film not completely covered in portrait format (aspect < 1)\n    return this.filmGauge * Math.min(this.aspect, 1);\n  },\n  getFilmHeight: function () {\n    // film not completely covered in landscape format (aspect > 1)\n    return this.filmGauge / Math.max(this.aspect, 1);\n  },\n\n  /**\n   * Sets an offset in a larger frustum. This is useful for multi-window or\n   * multi-monitor/multi-machine setups.\n   *\n   * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n   * the monitors are in grid like this\n   *\n   *   +---+---+---+\n   *   | A | B | C |\n   *   +---+---+---+\n   *   | D | E | F |\n   *   +---+---+---+\n   *\n   * then for each monitor you would call it like this\n   *\n   *   var w = 1920;\n   *   var h = 1080;\n   *   var fullWidth = w * 3;\n   *   var fullHeight = h * 2;\n   *\n   *   --A--\n   *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n   *   --B--\n   *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n   *   --C--\n   *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n   *   --D--\n   *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n   *   --E--\n   *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n   *   --F--\n   *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n   *\n   *   Note there is no reason monitors have to be the same size or in a grid.\n   */\n  setViewOffset: function (fullWidth, fullHeight, x, y, width, height) {\n    this.aspect = fullWidth / fullHeight;\n\n    if (this.view === null) {\n      this.view = {\n        enabled: true,\n        fullWidth: 1,\n        fullHeight: 1,\n        offsetX: 0,\n        offsetY: 0,\n        width: 1,\n        height: 1\n      };\n    }\n\n    this.view.enabled = true;\n    this.view.fullWidth = fullWidth;\n    this.view.fullHeight = fullHeight;\n    this.view.offsetX = x;\n    this.view.offsetY = y;\n    this.view.width = width;\n    this.view.height = height;\n    this.updateProjectionMatrix();\n  },\n  clearViewOffset: function () {\n    if (this.view !== null) {\n      this.view.enabled = false;\n    }\n\n    this.updateProjectionMatrix();\n  },\n  updateProjectionMatrix: function () {\n    var near = this.near,\n        top = near * Math.tan(_Math.DEG2RAD * 0.5 * this.fov) / this.zoom,\n        height = 2 * top,\n        width = this.aspect * height,\n        left = -0.5 * width,\n        view = this.view;\n\n    if (this.view !== null && this.view.enabled) {\n      var fullWidth = view.fullWidth,\n          fullHeight = view.fullHeight;\n      left += view.offsetX * width / fullWidth;\n      top -= view.offsetY * height / fullHeight;\n      width *= view.width / fullWidth;\n      height *= view.height / fullHeight;\n    }\n\n    var skew = this.filmOffset;\n    if (skew !== 0) left += near * skew / this.getFilmWidth();\n    this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far);\n    this.projectionMatrixInverse.getInverse(this.projectionMatrix);\n  },\n  toJSON: function (meta) {\n    var data = Object3D.prototype.toJSON.call(this, meta);\n    data.object.fov = this.fov;\n    data.object.zoom = this.zoom;\n    data.object.near = this.near;\n    data.object.far = this.far;\n    data.object.focus = this.focus;\n    data.object.aspect = this.aspect;\n    if (this.view !== null) data.object.view = _Object$assign({}, this.view);\n    data.object.filmGauge = this.filmGauge;\n    data.object.filmOffset = this.filmOffset;\n    return data;\n  }\n});\nexport { PerspectiveCamera };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/cameras/PerspectiveCamera.js"],"names":["Camera","Object3D","_Math","PerspectiveCamera","fov","aspect","near","far","call","type","undefined","zoom","focus","view","filmGauge","filmOffset","updateProjectionMatrix","prototype","constructor","isPerspectiveCamera","copy","source","recursive","setFocalLength","focalLength","vExtentSlope","getFilmHeight","RAD2DEG","Math","atan","getFocalLength","tan","DEG2RAD","getEffectiveFOV","getFilmWidth","min","max","setViewOffset","fullWidth","fullHeight","x","y","width","height","enabled","offsetX","offsetY","clearViewOffset","top","left","skew","projectionMatrix","makePerspective","projectionMatrixInverse","getInverse","toJSON","meta","data","object"],"mappings":"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","sourcesContent":["import { Camera } from './Camera.js';\nimport { Object3D } from '../core/Object3D.js';\nimport { _Math } from '../math/Math.js';\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author greggman / http://games.greggman.com/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author tschw\n */\n\nfunction PerspectiveCamera( fov, aspect, near, far ) {\n\n\tCamera.call( this );\n\n\tthis.type = 'PerspectiveCamera';\n\n\tthis.fov = fov !== undefined ? fov : 50;\n\tthis.zoom = 1;\n\n\tthis.near = near !== undefined ? near : 0.1;\n\tthis.far = far !== undefined ? far : 2000;\n\tthis.focus = 10;\n\n\tthis.aspect = aspect !== undefined ? aspect : 1;\n\tthis.view = null;\n\n\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n\tthis.updateProjectionMatrix();\n\n}\n\nPerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\tconstructor: PerspectiveCamera,\n\n\tisPerspectiveCamera: true,\n\n\tcopy: function ( source, recursive ) {\n\n\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\tthis.fov = source.fov;\n\t\tthis.zoom = source.zoom;\n\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\t\tthis.focus = source.focus;\n\n\t\tthis.aspect = source.aspect;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\tthis.filmGauge = source.filmGauge;\n\t\tthis.filmOffset = source.filmOffset;\n\n\t\treturn this;\n\n\t},\n\n\t/**\n\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t *\n\t * The default film gauge is 35, so that the focal length can be specified for\n\t * a 35mm (full frame) camera.\n\t *\n\t * Values for focal length and film gauge must have the same unit.\n\t */\n\tsetFocalLength: function ( focalLength ) {\n\n\t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\tthis.fov = _Math.RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\t/**\n\t * Calculates the focal length from the current .fov and .filmGauge.\n\t */\n\tgetFocalLength: function () {\n\n\t\tvar vExtentSlope = Math.tan( _Math.DEG2RAD * 0.5 * this.fov );\n\n\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t},\n\n\tgetEffectiveFOV: function () {\n\n\t\treturn _Math.RAD2DEG * 2 * Math.atan(\n\t\t\tMath.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t},\n\n\tgetFilmWidth: function () {\n\n\t\t// film not completely covered in portrait format (aspect < 1)\n\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t},\n\n\tgetFilmHeight: function () {\n\n\t\t// film not completely covered in landscape format (aspect > 1)\n\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t},\n\n\t/**\n\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t * multi-monitor/multi-machine setups.\n\t *\n\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t * the monitors are in grid like this\n\t *\n\t *   +---+---+---+\n\t *   | A | B | C |\n\t *   +---+---+---+\n\t *   | D | E | F |\n\t *   +---+---+---+\n\t *\n\t * then for each monitor you would call it like this\n\t *\n\t *   var w = 1920;\n\t *   var h = 1080;\n\t *   var fullWidth = w * 3;\n\t *   var fullHeight = h * 2;\n\t *\n\t *   --A--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t *   --B--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t *   --C--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t *   --D--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t *   --E--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t *   --F--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t *\n\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t */\n\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\tif ( this.view === null ) {\n\n\t\t\tthis.view = {\n\t\t\t\tenabled: true,\n\t\t\t\tfullWidth: 1,\n\t\t\t\tfullHeight: 1,\n\t\t\t\toffsetX: 0,\n\t\t\t\toffsetY: 0,\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1\n\t\t\t};\n\n\t\t}\n\n\t\tthis.view.enabled = true;\n\t\tthis.view.fullWidth = fullWidth;\n\t\tthis.view.fullHeight = fullHeight;\n\t\tthis.view.offsetX = x;\n\t\tthis.view.offsetY = y;\n\t\tthis.view.width = width;\n\t\tthis.view.height = height;\n\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\tclearViewOffset: function () {\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tthis.view.enabled = false;\n\n\t\t}\n\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\tupdateProjectionMatrix: function () {\n\n\t\tvar near = this.near,\n\t\t\ttop = near * Math.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,\n\t\t\theight = 2 * top,\n\t\t\twidth = this.aspect * height,\n\t\t\tleft = - 0.5 * width,\n\t\t\tview = this.view;\n\n\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\tvar fullWidth = view.fullWidth,\n\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\twidth *= view.width / fullWidth;\n\t\t\theight *= view.height / fullHeight;\n\n\t\t}\n\n\t\tvar skew = this.filmOffset;\n\t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\n\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );\n\n\t\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.fov = this.fov;\n\t\tdata.object.zoom = this.zoom;\n\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\t\tdata.object.focus = this.focus;\n\n\t\tdata.object.aspect = this.aspect;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\tdata.object.filmGauge = this.filmGauge;\n\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\treturn data;\n\n\t}\n\n} );\n\n\nexport { PerspectiveCamera };\n"]},"metadata":{},"sourceType":"module"}