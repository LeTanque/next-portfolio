{"ast":null,"code":"import _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n */\nimport { Vector3 } from '../math/Vector3.js';\nimport { Object3D } from '../core/Object3D.js';\nimport { LineSegments } from '../objects/LineSegments.js';\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\n\nvar _vector = new Vector3();\n\nfunction SpotLightHelper(light, color) {\n  Object3D.call(this);\n  this.light = light;\n  this.light.updateMatrixWorld();\n  this.matrix = light.matrixWorld;\n  this.matrixAutoUpdate = false;\n  this.color = color;\n  var geometry = new BufferGeometry();\n  var positions = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];\n\n  for (var i = 0, j = 1, l = 32; i < l; i++, j++) {\n    var p1 = i / l * Math.PI * 2;\n    var p2 = j / l * Math.PI * 2;\n    positions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);\n  }\n\n  geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n  var material = new LineBasicMaterial({\n    fog: false\n  });\n  this.cone = new LineSegments(geometry, material);\n  this.add(this.cone);\n  this.update();\n}\n\nSpotLightHelper.prototype = _Object$create(Object3D.prototype);\nSpotLightHelper.prototype.constructor = SpotLightHelper;\n\nSpotLightHelper.prototype.dispose = function () {\n  this.cone.geometry.dispose();\n  this.cone.material.dispose();\n};\n\nSpotLightHelper.prototype.update = function () {\n  this.light.updateMatrixWorld();\n  var coneLength = this.light.distance ? this.light.distance : 1000;\n  var coneWidth = coneLength * Math.tan(this.light.angle);\n  this.cone.scale.set(coneWidth, coneWidth, coneLength);\n\n  _vector.setFromMatrixPosition(this.light.target.matrixWorld);\n\n  this.cone.lookAt(_vector);\n\n  if (this.color !== undefined) {\n    this.cone.material.color.set(this.color);\n  } else {\n    this.cone.material.color.copy(this.light.color);\n  }\n};\n\nexport { SpotLightHelper };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/helpers/SpotLightHelper.js"],"names":["Vector3","Object3D","LineSegments","LineBasicMaterial","Float32BufferAttribute","BufferGeometry","_vector","SpotLightHelper","light","color","call","updateMatrixWorld","matrix","matrixWorld","matrixAutoUpdate","geometry","positions","i","j","l","p1","Math","PI","p2","push","cos","sin","setAttribute","material","fog","cone","add","update","prototype","constructor","dispose","coneLength","distance","coneWidth","tan","angle","scale","set","setFromMatrixPosition","target","lookAt","undefined","copy"],"mappings":"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","sourcesContent":["/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nimport { Vector3 } from '../math/Vector3.js';\nimport { Object3D } from '../core/Object3D.js';\nimport { LineSegments } from '../objects/LineSegments.js';\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\n\nvar _vector = new Vector3();\n\nfunction SpotLightHelper( light, color ) {\n\n\tObject3D.call( this );\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.matrix = light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.color = color;\n\n\tvar geometry = new BufferGeometry();\n\n\tvar positions = [\n\t\t0, 0, 0, \t0, 0, 1,\n\t\t0, 0, 0, \t1, 0, 1,\n\t\t0, 0, 0,\t- 1, 0, 1,\n\t\t0, 0, 0, \t0, 1, 1,\n\t\t0, 0, 0, \t0, - 1, 1\n\t];\n\n\tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n\t\tvar p1 = ( i / l ) * Math.PI * 2;\n\t\tvar p2 = ( j / l ) * Math.PI * 2;\n\n\t\tpositions.push(\n\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t);\n\n\t}\n\n\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\tvar material = new LineBasicMaterial( { fog: false } );\n\n\tthis.cone = new LineSegments( geometry, material );\n\tthis.add( this.cone );\n\n\tthis.update();\n\n}\n\nSpotLightHelper.prototype = Object.create( Object3D.prototype );\nSpotLightHelper.prototype.constructor = SpotLightHelper;\n\nSpotLightHelper.prototype.dispose = function () {\n\n\tthis.cone.geometry.dispose();\n\tthis.cone.material.dispose();\n\n};\n\nSpotLightHelper.prototype.update = function () {\n\n\tthis.light.updateMatrixWorld();\n\n\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\n\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t_vector.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\tthis.cone.lookAt( _vector );\n\n\tif ( this.color !== undefined ) {\n\n\t\tthis.cone.material.color.set( this.color );\n\n\t} else {\n\n\t\tthis.cone.material.color.copy( this.light.color );\n\n\t}\n\n};\n\n\nexport { SpotLightHelper };\n"]},"metadata":{},"sourceType":"module"}