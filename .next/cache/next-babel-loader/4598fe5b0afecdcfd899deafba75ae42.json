{"ast":null,"code":"import _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport { Path } from './Path.js';\nimport { _Math } from '../../math/Math.js';\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * Defines a 2d shape plane using paths.\n **/\n// STEP 1 Create a path.\n// STEP 2 Turn path into shape.\n// STEP 3 ExtrudeGeometry takes in Shape/Shapes\n// STEP 3a - Extract points from each shape, turn to vertices\n// STEP 3b - Triangulate each shape, add faces.\n\nfunction Shape(points) {\n  Path.call(this, points);\n  this.uuid = _Math.generateUUID();\n  this.type = 'Shape';\n  this.holes = [];\n}\n\nShape.prototype = _Object$assign(_Object$create(Path.prototype), {\n  constructor: Shape,\n  getPointsHoles: function getPointsHoles(divisions) {\n    var holesPts = [];\n\n    for (var i = 0, l = this.holes.length; i < l; i++) {\n      holesPts[i] = this.holes[i].getPoints(divisions);\n    }\n\n    return holesPts;\n  },\n  // get points of shape and holes (keypoints based on segments parameter)\n  extractPoints: function extractPoints(divisions) {\n    return {\n      shape: this.getPoints(divisions),\n      holes: this.getPointsHoles(divisions)\n    };\n  },\n  copy: function copy(source) {\n    Path.prototype.copy.call(this, source);\n    this.holes = [];\n\n    for (var i = 0, l = source.holes.length; i < l; i++) {\n      var hole = source.holes[i];\n      this.holes.push(hole.clone());\n    }\n\n    return this;\n  },\n  toJSON: function toJSON() {\n    var data = Path.prototype.toJSON.call(this);\n    data.uuid = this.uuid;\n    data.holes = [];\n\n    for (var i = 0, l = this.holes.length; i < l; i++) {\n      var hole = this.holes[i];\n      data.holes.push(hole.toJSON());\n    }\n\n    return data;\n  },\n  fromJSON: function fromJSON(json) {\n    Path.prototype.fromJSON.call(this, json);\n    this.uuid = json.uuid;\n    this.holes = [];\n\n    for (var i = 0, l = json.holes.length; i < l; i++) {\n      var hole = json.holes[i];\n      this.holes.push(new Path().fromJSON(hole));\n    }\n\n    return this;\n  }\n});\nexport { Shape };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/extras/core/Shape.js"],"names":["Path","_Math","Shape","points","call","uuid","generateUUID","type","holes","prototype","constructor","getPointsHoles","divisions","holesPts","i","l","length","getPoints","extractPoints","shape","copy","source","hole","push","clone","toJSON","data","fromJSON","json"],"mappings":"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","sourcesContent":["import { Path } from './Path.js';\nimport { _Math } from '../../math/Math.js';\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * Defines a 2d shape plane using paths.\n **/\n\n// STEP 1 Create a path.\n// STEP 2 Turn path into shape.\n// STEP 3 ExtrudeGeometry takes in Shape/Shapes\n// STEP 3a - Extract points from each shape, turn to vertices\n// STEP 3b - Triangulate each shape, add faces.\n\nfunction Shape( points ) {\n\n\tPath.call( this, points );\n\n\tthis.uuid = _Math.generateUUID();\n\n\tthis.type = 'Shape';\n\n\tthis.holes = [];\n\n}\n\nShape.prototype = Object.assign( Object.create( Path.prototype ), {\n\n\tconstructor: Shape,\n\n\tgetPointsHoles: function ( divisions ) {\n\n\t\tvar holesPts = [];\n\n\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n\t\t}\n\n\t\treturn holesPts;\n\n\t},\n\n\t// get points of shape and holes (keypoints based on segments parameter)\n\n\textractPoints: function ( divisions ) {\n\n\t\treturn {\n\n\t\t\tshape: this.getPoints( divisions ),\n\t\t\tholes: this.getPointsHoles( divisions )\n\n\t\t};\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tPath.prototype.copy.call( this, source );\n\n\t\tthis.holes = [];\n\n\t\tfor ( var i = 0, l = source.holes.length; i < l; i ++ ) {\n\n\t\t\tvar hole = source.holes[ i ];\n\n\t\t\tthis.holes.push( hole.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar data = Path.prototype.toJSON.call( this );\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.holes = [];\n\n\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\tvar hole = this.holes[ i ];\n\t\t\tdata.holes.push( hole.toJSON() );\n\n\t\t}\n\n\t\treturn data;\n\n\t},\n\n\tfromJSON: function ( json ) {\n\n\t\tPath.prototype.fromJSON.call( this, json );\n\n\t\tthis.uuid = json.uuid;\n\t\tthis.holes = [];\n\n\t\tfor ( var i = 0, l = json.holes.length; i < l; i ++ ) {\n\n\t\t\tvar hole = json.holes[ i ];\n\t\t\tthis.holes.push( new Path().fromJSON( hole ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n} );\n\n\nexport { Shape };\n"]},"metadata":{},"sourceType":"module"}