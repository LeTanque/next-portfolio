{"ast":null,"code":"import { Vector2 } from \"three/src/Three\";\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author davidedc / http://www.sketchpatch.net/\n *\n * NVIDIA FXAA by Timothy Lottes\n * http://timothylottes.blogspot.com/2011/06/fxaa3-source-released.html\n * - WebGL port by @supereggbert\n * http://www.glge.org/demos/fxaa/\n */\n\nvar FXAAShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    resolution: {\n      value: new Vector2(1 / 1024, 1 / 512)\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"precision highp float;\", \"\", \"uniform sampler2D tDiffuse;\", \"\", \"uniform vec2 resolution;\", \"\", \"varying vec2 vUv;\", \"\", \"#define FXAA_PC 1\", \"#define FXAA_GLSL_100 1\", \"#define FXAA_QUALITY_PRESET 12\", \"\", \"#define FXAA_GREEN_AS_LUMA 1\", \"\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_PC_CONSOLE\", \"    //\", \"    // The console algorithm for PC is included\", \"    // for developers targeting really low spec machines.\", \"    // Likely better to just run FXAA_PC, and use a really low preset.\", \"    //\", \"    #define FXAA_PC_CONSOLE 0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_GLSL_120\", \"    #define FXAA_GLSL_120 0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_GLSL_130\", \"    #define FXAA_GLSL_130 0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_HLSL_3\", \"    #define FXAA_HLSL_3 0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_HLSL_4\", \"    #define FXAA_HLSL_4 0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_HLSL_5\", \"    #define FXAA_HLSL_5 0\", \"#endif\", \"/*==========================================================================*/\", \"#ifndef FXAA_GREEN_AS_LUMA\", \"    //\", \"    // For those using non-linear color,\", \"    // and either not able to get luma in alpha, or not wanting to,\", \"    // this enables FXAA to run using green as a proxy for luma.\", \"    // So with this enabled, no need to pack luma in alpha.\", \"    //\", \"    // This will turn off AA on anything which lacks some amount of green.\", \"    // Pure red and blue or combination of only R and B, will get no AA.\", \"    //\", \"    // Might want to lower the settings for both,\", \"    //    fxaaConsoleEdgeThresholdMin\", \"    //    fxaaQualityEdgeThresholdMin\", \"    // In order to insure AA does not get turned off on colors\", \"    // which contain a minor amount of green.\", \"    //\", \"    // 1 = On.\", \"    // 0 = Off.\", \"    //\", \"    #define FXAA_GREEN_AS_LUMA 0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_EARLY_EXIT\", \"    //\", \"    // Controls algorithm's early exit path.\", \"    // On PS3 turning this ON adds 2 cycles to the shader.\", \"    // On 360 turning this OFF adds 10ths of a millisecond to the shader.\", \"    // Turning this off on console will result in a more blurry image.\", \"    // So this defaults to on.\", \"    //\", \"    // 1 = On.\", \"    // 0 = Off.\", \"    //\", \"    #define FXAA_EARLY_EXIT 1\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_DISCARD\", \"    //\", \"    // Only valid for PC OpenGL currently.\", \"    // Probably will not work when FXAA_GREEN_AS_LUMA = 1.\", \"    //\", \"    // 1 = Use discard on pixels which don't need AA.\", \"    //     For APIs which enable concurrent TEX+ROP from same surface.\", \"    // 0 = Return unchanged color on pixels which don't need AA.\", \"    //\", \"    #define FXAA_DISCARD 0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_FAST_PIXEL_OFFSET\", \"    //\", \"    // Used for GLSL 120 only.\", \"    //\", \"    // 1 = GL API supports fast pixel offsets\", \"    // 0 = do not use fast pixel offsets\", \"    //\", \"    #ifdef GL_EXT_gpu_shader4\", \"        #define FXAA_FAST_PIXEL_OFFSET 1\", \"    #endif\", \"    #ifdef GL_NV_gpu_shader5\", \"        #define FXAA_FAST_PIXEL_OFFSET 1\", \"    #endif\", \"    #ifdef GL_ARB_gpu_shader5\", \"        #define FXAA_FAST_PIXEL_OFFSET 1\", \"    #endif\", \"    #ifndef FXAA_FAST_PIXEL_OFFSET\", \"        #define FXAA_FAST_PIXEL_OFFSET 0\", \"    #endif\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_GATHER4_ALPHA\", \"    //\", \"    // 1 = API supports gather4 on alpha channel.\", \"    // 0 = API does not support gather4 on alpha channel.\", \"    //\", \"    #if (FXAA_HLSL_5 == 1)\", \"        #define FXAA_GATHER4_ALPHA 1\", \"    #endif\", \"    #ifdef GL_ARB_gpu_shader5\", \"        #define FXAA_GATHER4_ALPHA 1\", \"    #endif\", \"    #ifdef GL_NV_gpu_shader5\", \"        #define FXAA_GATHER4_ALPHA 1\", \"    #endif\", \"    #ifndef FXAA_GATHER4_ALPHA\", \"        #define FXAA_GATHER4_ALPHA 0\", \"    #endif\", \"#endif\", \"\", \"\", \"/*============================================================================\", \"                        FXAA QUALITY - TUNING KNOBS\", \"------------------------------------------------------------------------------\", \"NOTE the other tuning knobs are now in the shader function inputs!\", \"============================================================================*/\", \"#ifndef FXAA_QUALITY_PRESET\", \"    //\", \"    // Choose the quality preset.\", \"    // This needs to be compiled into the shader as it effects code.\", \"    // Best option to include multiple presets is to\", \"    // in each shader define the preset, then include this file.\", \"    //\", \"    // OPTIONS\", \"    // -----------------------------------------------------------------------\", \"    // 10 to 15 - default medium dither (10=fastest, 15=highest quality)\", \"    // 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)\", \"    // 39       - no dither, very expensive\", \"    //\", \"    // NOTES\", \"    // -----------------------------------------------------------------------\", \"    // 12 = slightly faster then FXAA 3.9 and higher edge quality (default)\", \"    // 13 = about same speed as FXAA 3.9 and better than 12\", \"    // 23 = closest to FXAA 3.9 visually and performance wise\", \"    //  _ = the lowest digit is directly related to performance\", \"    // _  = the highest digit is directly related to style\", \"    //\", \"    #define FXAA_QUALITY_PRESET 12\", \"#endif\", \"\", \"\", \"/*============================================================================\", \"\", \"                           FXAA QUALITY - PRESETS\", \"\", \"============================================================================*/\", \"\", \"/*============================================================================\", \"                     FXAA QUALITY - MEDIUM DITHER PRESETS\", \"============================================================================*/\", \"#if (FXAA_QUALITY_PRESET == 10)\", \"    #define FXAA_QUALITY_PS 3\", \"    #define FXAA_QUALITY_P0 1.5\", \"    #define FXAA_QUALITY_P1 3.0\", \"    #define FXAA_QUALITY_P2 12.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 11)\", \"    #define FXAA_QUALITY_PS 4\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 3.0\", \"    #define FXAA_QUALITY_P3 12.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 12)\", \"    #define FXAA_QUALITY_PS 5\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 4.0\", \"    #define FXAA_QUALITY_P4 12.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 13)\", \"    #define FXAA_QUALITY_PS 6\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 4.0\", \"    #define FXAA_QUALITY_P5 12.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 14)\", \"    #define FXAA_QUALITY_PS 7\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 2.0\", \"    #define FXAA_QUALITY_P5 4.0\", \"    #define FXAA_QUALITY_P6 12.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 15)\", \"    #define FXAA_QUALITY_PS 8\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 2.0\", \"    #define FXAA_QUALITY_P5 2.0\", \"    #define FXAA_QUALITY_P6 4.0\", \"    #define FXAA_QUALITY_P7 12.0\", \"#endif\", \"\", \"/*============================================================================\", \"                     FXAA QUALITY - LOW DITHER PRESETS\", \"============================================================================*/\", \"#if (FXAA_QUALITY_PRESET == 20)\", \"    #define FXAA_QUALITY_PS 3\", \"    #define FXAA_QUALITY_P0 1.5\", \"    #define FXAA_QUALITY_P1 2.0\", \"    #define FXAA_QUALITY_P2 8.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 21)\", \"    #define FXAA_QUALITY_PS 4\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 8.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 22)\", \"    #define FXAA_QUALITY_PS 5\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 8.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 23)\", \"    #define FXAA_QUALITY_PS 6\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 2.0\", \"    #define FXAA_QUALITY_P5 8.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 24)\", \"    #define FXAA_QUALITY_PS 7\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 2.0\", \"    #define FXAA_QUALITY_P5 3.0\", \"    #define FXAA_QUALITY_P6 8.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 25)\", \"    #define FXAA_QUALITY_PS 8\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 2.0\", \"    #define FXAA_QUALITY_P5 2.0\", \"    #define FXAA_QUALITY_P6 4.0\", \"    #define FXAA_QUALITY_P7 8.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 26)\", \"    #define FXAA_QUALITY_PS 9\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 2.0\", \"    #define FXAA_QUALITY_P5 2.0\", \"    #define FXAA_QUALITY_P6 2.0\", \"    #define FXAA_QUALITY_P7 4.0\", \"    #define FXAA_QUALITY_P8 8.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 27)\", \"    #define FXAA_QUALITY_PS 10\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 2.0\", \"    #define FXAA_QUALITY_P5 2.0\", \"    #define FXAA_QUALITY_P6 2.0\", \"    #define FXAA_QUALITY_P7 2.0\", \"    #define FXAA_QUALITY_P8 4.0\", \"    #define FXAA_QUALITY_P9 8.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 28)\", \"    #define FXAA_QUALITY_PS 11\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 2.0\", \"    #define FXAA_QUALITY_P5 2.0\", \"    #define FXAA_QUALITY_P6 2.0\", \"    #define FXAA_QUALITY_P7 2.0\", \"    #define FXAA_QUALITY_P8 2.0\", \"    #define FXAA_QUALITY_P9 4.0\", \"    #define FXAA_QUALITY_P10 8.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 29)\", \"    #define FXAA_QUALITY_PS 12\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 2.0\", \"    #define FXAA_QUALITY_P5 2.0\", \"    #define FXAA_QUALITY_P6 2.0\", \"    #define FXAA_QUALITY_P7 2.0\", \"    #define FXAA_QUALITY_P8 2.0\", \"    #define FXAA_QUALITY_P9 2.0\", \"    #define FXAA_QUALITY_P10 4.0\", \"    #define FXAA_QUALITY_P11 8.0\", \"#endif\", \"\", \"/*============================================================================\", \"                     FXAA QUALITY - EXTREME QUALITY\", \"============================================================================*/\", \"#if (FXAA_QUALITY_PRESET == 39)\", \"    #define FXAA_QUALITY_PS 12\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.0\", \"    #define FXAA_QUALITY_P2 1.0\", \"    #define FXAA_QUALITY_P3 1.0\", \"    #define FXAA_QUALITY_P4 1.0\", \"    #define FXAA_QUALITY_P5 1.5\", \"    #define FXAA_QUALITY_P6 2.0\", \"    #define FXAA_QUALITY_P7 2.0\", \"    #define FXAA_QUALITY_P8 2.0\", \"    #define FXAA_QUALITY_P9 2.0\", \"    #define FXAA_QUALITY_P10 4.0\", \"    #define FXAA_QUALITY_P11 8.0\", \"#endif\", \"\", \"\", \"\", \"/*============================================================================\", \"\", \"                                API PORTING\", \"\", \"============================================================================*/\", \"#if (FXAA_GLSL_100 == 1) || (FXAA_GLSL_120 == 1) || (FXAA_GLSL_130 == 1)\", \"    #define FxaaBool bool\", \"    #define FxaaDiscard discard\", \"    #define FxaaFloat float\", \"    #define FxaaFloat2 vec2\", \"    #define FxaaFloat3 vec3\", \"    #define FxaaFloat4 vec4\", \"    #define FxaaHalf float\", \"    #define FxaaHalf2 vec2\", \"    #define FxaaHalf3 vec3\", \"    #define FxaaHalf4 vec4\", \"    #define FxaaInt2 ivec2\", \"    #define FxaaSat(x) clamp(x, 0.0, 1.0)\", \"    #define FxaaTex sampler2D\", \"#else\", \"    #define FxaaBool bool\", \"    #define FxaaDiscard clip(-1)\", \"    #define FxaaFloat float\", \"    #define FxaaFloat2 float2\", \"    #define FxaaFloat3 float3\", \"    #define FxaaFloat4 float4\", \"    #define FxaaHalf half\", \"    #define FxaaHalf2 half2\", \"    #define FxaaHalf3 half3\", \"    #define FxaaHalf4 half4\", \"    #define FxaaSat(x) saturate(x)\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_GLSL_100 == 1)\", \"  #define FxaaTexTop(t, p) texture2D(t, p, 0.0)\", \"  #define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r), 0.0)\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_GLSL_120 == 1)\", \"    // Requires,\", \"    //  #version 120\", \"    // And at least,\", \"    //  #extension GL_EXT_gpu_shader4 : enable\", \"    //  (or set FXAA_FAST_PIXEL_OFFSET 1 to work like DX9)\", \"    #define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)\", \"    #if (FXAA_FAST_PIXEL_OFFSET == 1)\", \"        #define FxaaTexOff(t, p, o, r) texture2DLodOffset(t, p, 0.0, o)\", \"    #else\", \"        #define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)\", \"    #endif\", \"    #if (FXAA_GATHER4_ALPHA == 1)\", \"        // use #extension GL_ARB_gpu_shader5 : enable\", \"        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\", \"        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\", \"        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)\", \"        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\", \"    #endif\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_GLSL_130 == 1)\", '    // Requires \"#version 130\" or better', \"    #define FxaaTexTop(t, p) textureLod(t, p, 0.0)\", \"    #define FxaaTexOff(t, p, o, r) textureLodOffset(t, p, 0.0, o)\", \"    #if (FXAA_GATHER4_ALPHA == 1)\", \"        // use #extension GL_ARB_gpu_shader5 : enable\", \"        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\", \"        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\", \"        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)\", \"        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\", \"    #endif\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_HLSL_3 == 1)\", \"    #define FxaaInt2 float2\", \"    #define FxaaTex sampler2D\", \"    #define FxaaTexTop(t, p) tex2Dlod(t, float4(p, 0.0, 0.0))\", \"    #define FxaaTexOff(t, p, o, r) tex2Dlod(t, float4(p + (o * r), 0, 0))\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_HLSL_4 == 1)\", \"    #define FxaaInt2 int2\", \"    struct FxaaTex { SamplerState smpl; Texture2D tex; };\", \"    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)\", \"    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_HLSL_5 == 1)\", \"    #define FxaaInt2 int2\", \"    struct FxaaTex { SamplerState smpl; Texture2D tex; };\", \"    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)\", \"    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)\", \"    #define FxaaTexAlpha4(t, p) t.tex.GatherAlpha(t.smpl, p)\", \"    #define FxaaTexOffAlpha4(t, p, o) t.tex.GatherAlpha(t.smpl, p, o)\", \"    #define FxaaTexGreen4(t, p) t.tex.GatherGreen(t.smpl, p)\", \"    #define FxaaTexOffGreen4(t, p, o) t.tex.GatherGreen(t.smpl, p, o)\", \"#endif\", \"\", \"\", \"/*============================================================================\", \"                   GREEN AS LUMA OPTION SUPPORT FUNCTION\", \"============================================================================*/\", \"#if (FXAA_GREEN_AS_LUMA == 0)\", \"    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.w; }\", \"#else\", \"    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }\", \"#endif\", \"\", \"\", \"\", \"\", \"/*============================================================================\", \"\", \"                             FXAA3 QUALITY - PC\", \"\", \"============================================================================*/\", \"#if (FXAA_PC == 1)\", \"/*--------------------------------------------------------------------------*/\", \"FxaaFloat4 FxaaPixelShader(\", \"    //\", \"    // Use noperspective interpolation here (turn off perspective interpolation).\", \"    // {xy} = center of pixel\", \"    FxaaFloat2 pos,\", \"    //\", \"    // Used only for FXAA Console, and not used on the 360 version.\", \"    // Use noperspective interpolation here (turn off perspective interpolation).\", \"    // {xy_} = upper left of pixel\", \"    // {_zw} = lower right of pixel\", \"    FxaaFloat4 fxaaConsolePosPos,\", \"    //\", \"    // Input color texture.\", \"    // {rgb_} = color in linear or perceptual color space\", \"    // if (FXAA_GREEN_AS_LUMA == 0)\", \"    //     {__a} = luma in perceptual color space (not linear)\", \"    FxaaTex tex,\", \"    //\", \"    // Only used on the optimized 360 version of FXAA Console.\", '    // For everything but 360, just use the same input here as for \"tex\".', \"    // For 360, same texture, just alias with a 2nd sampler.\", \"    // This sampler needs to have an exponent bias of -1.\", \"    FxaaTex fxaaConsole360TexExpBiasNegOne,\", \"    //\", \"    // Only used on the optimized 360 version of FXAA Console.\", '    // For everything but 360, just use the same input here as for \"tex\".', \"    // For 360, same texture, just alias with a 3nd sampler.\", \"    // This sampler needs to have an exponent bias of -2.\", \"    FxaaTex fxaaConsole360TexExpBiasNegTwo,\", \"    //\", \"    // Only used on FXAA Quality.\", \"    // This must be from a constant/uniform.\", \"    // {x_} = 1.0/screenWidthInPixels\", \"    // {_y} = 1.0/screenHeightInPixels\", \"    FxaaFloat2 fxaaQualityRcpFrame,\", \"    //\", \"    // Only used on FXAA Console.\", \"    // This must be from a constant/uniform.\", \"    // This effects sub-pixel AA quality and inversely sharpness.\", \"    //   Where N ranges between,\", \"    //     N = 0.50 (default)\", \"    //     N = 0.33 (sharper)\", \"    // {x__} = -N/screenWidthInPixels\", \"    // {_y_} = -N/screenHeightInPixels\", \"    // {_z_} =  N/screenWidthInPixels\", \"    // {__w} =  N/screenHeightInPixels\", \"    FxaaFloat4 fxaaConsoleRcpFrameOpt,\", \"    //\", \"    // Only used on FXAA Console.\", \"    // Not used on 360, but used on PS3 and PC.\", \"    // This must be from a constant/uniform.\", \"    // {x__} = -2.0/screenWidthInPixels\", \"    // {_y_} = -2.0/screenHeightInPixels\", \"    // {_z_} =  2.0/screenWidthInPixels\", \"    // {__w} =  2.0/screenHeightInPixels\", \"    FxaaFloat4 fxaaConsoleRcpFrameOpt2,\", \"    //\", \"    // Only used on FXAA Console.\", \"    // Only used on 360 in place of fxaaConsoleRcpFrameOpt2.\", \"    // This must be from a constant/uniform.\", \"    // {x__} =  8.0/screenWidthInPixels\", \"    // {_y_} =  8.0/screenHeightInPixels\", \"    // {_z_} = -4.0/screenWidthInPixels\", \"    // {__w} = -4.0/screenHeightInPixels\", \"    FxaaFloat4 fxaaConsole360RcpFrameOpt2,\", \"    //\", \"    // Only used on FXAA Quality.\", \"    // This used to be the FXAA_QUALITY_SUBPIX define.\", \"    // It is here now to allow easier tuning.\", \"    // Choose the amount of sub-pixel aliasing removal.\", \"    // This can effect sharpness.\", \"    //   1.00 - upper limit (softer)\", \"    //   0.75 - default amount of filtering\", \"    //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)\", \"    //   0.25 - almost off\", \"    //   0.00 - completely off\", \"    FxaaFloat fxaaQualitySubpix,\", \"    //\", \"    // Only used on FXAA Quality.\", \"    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.\", \"    // It is here now to allow easier tuning.\", \"    // The minimum amount of local contrast required to apply algorithm.\", \"    //   0.333 - too little (faster)\", \"    //   0.250 - low quality\", \"    //   0.166 - default\", \"    //   0.125 - high quality\", \"    //   0.063 - overkill (slower)\", \"    FxaaFloat fxaaQualityEdgeThreshold,\", \"    //\", \"    // Only used on FXAA Quality.\", \"    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.\", \"    // It is here now to allow easier tuning.\", \"    // Trims the algorithm from processing darks.\", \"    //   0.0833 - upper limit (default, the start of visible unfiltered edges)\", \"    //   0.0625 - high quality (faster)\", \"    //   0.0312 - visible limit (slower)\", \"    // Special notes when using FXAA_GREEN_AS_LUMA,\", \"    //   Likely want to set this to zero.\", \"    //   As colors that are mostly not-green\", \"    //   will appear very dark in the green channel!\", \"    //   Tune by looking at mostly non-green content,\", \"    //   then start at zero and increase until aliasing is a problem.\", \"    FxaaFloat fxaaQualityEdgeThresholdMin,\", \"    //\", \"    // Only used on FXAA Console.\", \"    // This used to be the FXAA_CONSOLE_EDGE_SHARPNESS define.\", \"    // It is here now to allow easier tuning.\", \"    // This does not effect PS3, as this needs to be compiled in.\", \"    //   Use FXAA_CONSOLE_PS3_EDGE_SHARPNESS for PS3.\", \"    //   Due to the PS3 being ALU bound,\", \"    //   there are only three safe values here: 2 and 4 and 8.\", \"    //   These options use the shaders ability to a free *|/ by 2|4|8.\", \"    // For all other platforms can be a non-power of two.\", \"    //   8.0 is sharper (default!!!)\", \"    //   4.0 is softer\", \"    //   2.0 is really soft (good only for vector graphics inputs)\", \"    FxaaFloat fxaaConsoleEdgeSharpness,\", \"    //\", \"    // Only used on FXAA Console.\", \"    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD define.\", \"    // It is here now to allow easier tuning.\", \"    // This does not effect PS3, as this needs to be compiled in.\", \"    //   Use FXAA_CONSOLE_PS3_EDGE_THRESHOLD for PS3.\", \"    //   Due to the PS3 being ALU bound,\", \"    //   there are only two safe values here: 1/4 and 1/8.\", \"    //   These options use the shaders ability to a free *|/ by 2|4|8.\", \"    // The console setting has a different mapping than the quality setting.\", \"    // Other platforms can use other values.\", \"    //   0.125 leaves less aliasing, but is softer (default!!!)\", \"    //   0.25 leaves more aliasing, and is sharper\", \"    FxaaFloat fxaaConsoleEdgeThreshold,\", \"    //\", \"    // Only used on FXAA Console.\", \"    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD_MIN define.\", \"    // It is here now to allow easier tuning.\", \"    // Trims the algorithm from processing darks.\", \"    // The console setting has a different mapping than the quality setting.\", \"    // This only applies when FXAA_EARLY_EXIT is 1.\", \"    // This does not apply to PS3,\", \"    // PS3 was simplified to avoid more shader instructions.\", \"    //   0.06 - faster but more aliasing in darks\", \"    //   0.05 - default\", \"    //   0.04 - slower and less aliasing in darks\", \"    // Special notes when using FXAA_GREEN_AS_LUMA,\", \"    //   Likely want to set this to zero.\", \"    //   As colors that are mostly not-green\", \"    //   will appear very dark in the green channel!\", \"    //   Tune by looking at mostly non-green content,\", \"    //   then start at zero and increase until aliasing is a problem.\", \"    FxaaFloat fxaaConsoleEdgeThresholdMin,\", \"    //\", \"    // Extra constants for 360 FXAA Console only.\", \"    // Use zeros or anything else for other platforms.\", \"    // These must be in physical constant registers and NOT immediates.\", \"    // Immediates will result in compiler un-optimizing.\", \"    // {xyzw} = float4(1.0, -1.0, 0.25, -0.25)\", \"    FxaaFloat4 fxaaConsole360ConstDir\", \") {\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat2 posM;\", \"    posM.x = pos.x;\", \"    posM.y = pos.y;\", \"    #if (FXAA_GATHER4_ALPHA == 1)\", \"        #if (FXAA_DISCARD == 0)\", \"            FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\", \"            #if (FXAA_GREEN_AS_LUMA == 0)\", \"                #define lumaM rgbyM.w\", \"            #else\", \"                #define lumaM rgbyM.y\", \"            #endif\", \"        #endif\", \"        #if (FXAA_GREEN_AS_LUMA == 0)\", \"            FxaaFloat4 luma4A = FxaaTexAlpha4(tex, posM);\", \"            FxaaFloat4 luma4B = FxaaTexOffAlpha4(tex, posM, FxaaInt2(-1, -1));\", \"        #else\", \"            FxaaFloat4 luma4A = FxaaTexGreen4(tex, posM);\", \"            FxaaFloat4 luma4B = FxaaTexOffGreen4(tex, posM, FxaaInt2(-1, -1));\", \"        #endif\", \"        #if (FXAA_DISCARD == 1)\", \"            #define lumaM luma4A.w\", \"        #endif\", \"        #define lumaE luma4A.z\", \"        #define lumaS luma4A.x\", \"        #define lumaSE luma4A.y\", \"        #define lumaNW luma4B.w\", \"        #define lumaN luma4B.z\", \"        #define lumaW luma4B.x\", \"    #else\", \"        FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\", \"        #if (FXAA_GREEN_AS_LUMA == 0)\", \"            #define lumaM rgbyM.w\", \"        #else\", \"            #define lumaM rgbyM.y\", \"        #endif\", \"        #if (FXAA_GLSL_100 == 1)\", \"          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0, 1.0), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 0.0), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0,-1.0), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 0.0), fxaaQualityRcpFrame.xy));\", \"        #else\", \"          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));\", \"        #endif\", \"    #endif\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat maxSM = max(lumaS, lumaM);\", \"    FxaaFloat minSM = min(lumaS, lumaM);\", \"    FxaaFloat maxESM = max(lumaE, maxSM);\", \"    FxaaFloat minESM = min(lumaE, minSM);\", \"    FxaaFloat maxWN = max(lumaN, lumaW);\", \"    FxaaFloat minWN = min(lumaN, lumaW);\", \"    FxaaFloat rangeMax = max(maxWN, maxESM);\", \"    FxaaFloat rangeMin = min(minWN, minESM);\", \"    FxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;\", \"    FxaaFloat range = rangeMax - rangeMin;\", \"    FxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);\", \"    FxaaBool earlyExit = range < rangeMaxClamped;\", \"/*--------------------------------------------------------------------------*/\", \"    if(earlyExit)\", \"        #if (FXAA_DISCARD == 1)\", \"            FxaaDiscard;\", \"        #else\", \"            return rgbyM;\", \"        #endif\", \"/*--------------------------------------------------------------------------*/\", \"    #if (FXAA_GATHER4_ALPHA == 0)\", \"        #if (FXAA_GLSL_100 == 1)\", \"          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0,-1.0), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 1.0), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0,-1.0), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 1.0), fxaaQualityRcpFrame.xy));\", \"        #else\", \"          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\", \"        #endif\", \"    #else\", \"        FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(1, -1), fxaaQualityRcpFrame.xy));\", \"        FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\", \"    #endif\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat lumaNS = lumaN + lumaS;\", \"    FxaaFloat lumaWE = lumaW + lumaE;\", \"    FxaaFloat subpixRcpRange = 1.0/range;\", \"    FxaaFloat subpixNSWE = lumaNS + lumaWE;\", \"    FxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;\", \"    FxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat lumaNESE = lumaNE + lumaSE;\", \"    FxaaFloat lumaNWNE = lumaNW + lumaNE;\", \"    FxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;\", \"    FxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat lumaNWSW = lumaNW + lumaSW;\", \"    FxaaFloat lumaSWSE = lumaSW + lumaSE;\", \"    FxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);\", \"    FxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);\", \"    FxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;\", \"    FxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;\", \"    FxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;\", \"    FxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;\", \"    FxaaFloat lengthSign = fxaaQualityRcpFrame.x;\", \"    FxaaBool horzSpan = edgeHorz >= edgeVert;\", \"    FxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;\", \"/*--------------------------------------------------------------------------*/\", \"    if(!horzSpan) lumaN = lumaW;\", \"    if(!horzSpan) lumaS = lumaE;\", \"    if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;\", \"    FxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat gradientN = lumaN - lumaM;\", \"    FxaaFloat gradientS = lumaS - lumaM;\", \"    FxaaFloat lumaNN = lumaN + lumaM;\", \"    FxaaFloat lumaSS = lumaS + lumaM;\", \"    FxaaBool pairN = abs(gradientN) >= abs(gradientS);\", \"    FxaaFloat gradient = max(abs(gradientN), abs(gradientS));\", \"    if(pairN) lengthSign = -lengthSign;\", \"    FxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat2 posB;\", \"    posB.x = posM.x;\", \"    posB.y = posM.y;\", \"    FxaaFloat2 offNP;\", \"    offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;\", \"    offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;\", \"    if(!horzSpan) posB.x += lengthSign * 0.5;\", \"    if( horzSpan) posB.y += lengthSign * 0.5;\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat2 posN;\", \"    posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;\", \"    posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;\", \"    FxaaFloat2 posP;\", \"    posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;\", \"    posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;\", \"    FxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;\", \"    FxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));\", \"    FxaaFloat subpixE = subpixC * subpixC;\", \"    FxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));\", \"/*--------------------------------------------------------------------------*/\", \"    if(!pairN) lumaNN = lumaSS;\", \"    FxaaFloat gradientScaled = gradient * 1.0/4.0;\", \"    FxaaFloat lumaMM = lumaM - lumaNN * 0.5;\", \"    FxaaFloat subpixF = subpixD * subpixE;\", \"    FxaaBool lumaMLTZero = lumaMM < 0.0;\", \"/*--------------------------------------------------------------------------*/\", \"    lumaEndN -= lumaNN * 0.5;\", \"    lumaEndP -= lumaNN * 0.5;\", \"    FxaaBool doneN = abs(lumaEndN) >= gradientScaled;\", \"    FxaaBool doneP = abs(lumaEndP) >= gradientScaled;\", \"    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;\", \"    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;\", \"    FxaaBool doneNP = (!doneN) || (!doneP);\", \"    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;\", \"    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;\", \"/*--------------------------------------------------------------------------*/\", \"    if(doneNP) {\", \"        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"        doneN = abs(lumaEndN) >= gradientScaled;\", \"        doneP = abs(lumaEndP) >= gradientScaled;\", \"        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;\", \"        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;\", \"        doneNP = (!doneN) || (!doneP);\", \"        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;\", \"        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;\", \"/*--------------------------------------------------------------------------*/\", \"        #if (FXAA_QUALITY_PS > 3)\", \"        if(doneNP) {\", \"            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"            doneN = abs(lumaEndN) >= gradientScaled;\", \"            doneP = abs(lumaEndP) >= gradientScaled;\", \"            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;\", \"            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;\", \"            doneNP = (!doneN) || (!doneP);\", \"            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;\", \"            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;\", \"/*--------------------------------------------------------------------------*/\", \"            #if (FXAA_QUALITY_PS > 4)\", \"            if(doneNP) {\", \"                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"                doneN = abs(lumaEndN) >= gradientScaled;\", \"                doneP = abs(lumaEndP) >= gradientScaled;\", \"                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;\", \"                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;\", \"                doneNP = (!doneN) || (!doneP);\", \"                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;\", \"                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;\", \"/*--------------------------------------------------------------------------*/\", \"                #if (FXAA_QUALITY_PS > 5)\", \"                if(doneNP) {\", \"                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"                    doneN = abs(lumaEndN) >= gradientScaled;\", \"                    doneP = abs(lumaEndP) >= gradientScaled;\", \"                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;\", \"                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;\", \"                    doneNP = (!doneN) || (!doneP);\", \"                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;\", \"                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;\", \"/*--------------------------------------------------------------------------*/\", \"                    #if (FXAA_QUALITY_PS > 6)\", \"                    if(doneNP) {\", \"                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"                        doneN = abs(lumaEndN) >= gradientScaled;\", \"                        doneP = abs(lumaEndP) >= gradientScaled;\", \"                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;\", \"                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;\", \"                        doneNP = (!doneN) || (!doneP);\", \"                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;\", \"                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;\", \"/*--------------------------------------------------------------------------*/\", \"                        #if (FXAA_QUALITY_PS > 7)\", \"                        if(doneNP) {\", \"                            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"                            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"                            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"                            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"                            doneN = abs(lumaEndN) >= gradientScaled;\", \"                            doneP = abs(lumaEndP) >= gradientScaled;\", \"                            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;\", \"                            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;\", \"                            doneNP = (!doneN) || (!doneP);\", \"                            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;\", \"                            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;\", \"/*--------------------------------------------------------------------------*/\", \"    #if (FXAA_QUALITY_PS > 8)\", \"    if(doneNP) {\", \"        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"        doneN = abs(lumaEndN) >= gradientScaled;\", \"        doneP = abs(lumaEndP) >= gradientScaled;\", \"        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;\", \"        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;\", \"        doneNP = (!doneN) || (!doneP);\", \"        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;\", \"        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;\", \"/*--------------------------------------------------------------------------*/\", \"        #if (FXAA_QUALITY_PS > 9)\", \"        if(doneNP) {\", \"            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"            doneN = abs(lumaEndN) >= gradientScaled;\", \"            doneP = abs(lumaEndP) >= gradientScaled;\", \"            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;\", \"            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;\", \"            doneNP = (!doneN) || (!doneP);\", \"            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;\", \"            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;\", \"/*--------------------------------------------------------------------------*/\", \"            #if (FXAA_QUALITY_PS > 10)\", \"            if(doneNP) {\", \"                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"                doneN = abs(lumaEndN) >= gradientScaled;\", \"                doneP = abs(lumaEndP) >= gradientScaled;\", \"                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;\", \"                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;\", \"                doneNP = (!doneN) || (!doneP);\", \"                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;\", \"                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;\", \"/*--------------------------------------------------------------------------*/\", \"                #if (FXAA_QUALITY_PS > 11)\", \"                if(doneNP) {\", \"                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"                    doneN = abs(lumaEndN) >= gradientScaled;\", \"                    doneP = abs(lumaEndP) >= gradientScaled;\", \"                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;\", \"                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;\", \"                    doneNP = (!doneN) || (!doneP);\", \"                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;\", \"                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;\", \"/*--------------------------------------------------------------------------*/\", \"                    #if (FXAA_QUALITY_PS > 12)\", \"                    if(doneNP) {\", \"                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"                        doneN = abs(lumaEndN) >= gradientScaled;\", \"                        doneP = abs(lumaEndP) >= gradientScaled;\", \"                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;\", \"                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;\", \"                        doneNP = (!doneN) || (!doneP);\", \"                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;\", \"                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;\", \"/*--------------------------------------------------------------------------*/\", \"                    }\", \"                    #endif\", \"/*--------------------------------------------------------------------------*/\", \"                }\", \"                #endif\", \"/*--------------------------------------------------------------------------*/\", \"            }\", \"            #endif\", \"/*--------------------------------------------------------------------------*/\", \"        }\", \"        #endif\", \"/*--------------------------------------------------------------------------*/\", \"    }\", \"    #endif\", \"/*--------------------------------------------------------------------------*/\", \"                        }\", \"                        #endif\", \"/*--------------------------------------------------------------------------*/\", \"                    }\", \"                    #endif\", \"/*--------------------------------------------------------------------------*/\", \"                }\", \"                #endif\", \"/*--------------------------------------------------------------------------*/\", \"            }\", \"            #endif\", \"/*--------------------------------------------------------------------------*/\", \"        }\", \"        #endif\", \"/*--------------------------------------------------------------------------*/\", \"    }\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat dstN = posM.x - posN.x;\", \"    FxaaFloat dstP = posP.x - posM.x;\", \"    if(!horzSpan) dstN = posM.y - posN.y;\", \"    if(!horzSpan) dstP = posP.y - posM.y;\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;\", \"    FxaaFloat spanLength = (dstP + dstN);\", \"    FxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;\", \"    FxaaFloat spanLengthRcp = 1.0/spanLength;\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaBool directionN = dstN < dstP;\", \"    FxaaFloat dst = min(dstN, dstP);\", \"    FxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;\", \"    FxaaFloat subpixG = subpixF * subpixF;\", \"    FxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;\", \"    FxaaFloat subpixH = subpixG * fxaaQualitySubpix;\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;\", \"    FxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);\", \"    if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;\", \"    if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;\", \"    #if (FXAA_DISCARD == 1)\", \"        return FxaaTexTop(tex, posM);\", \"    #else\", \"        return FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);\", \"    #endif\", \"}\", \"/*==========================================================================*/\", \"#endif\", \"\", \"void main() {\", \"  gl_FragColor = FxaaPixelShader(\", \"    vUv,\", \"    vec4(0.0),\", \"    tDiffuse,\", \"    tDiffuse,\", \"    tDiffuse,\", \"    resolution,\", \"    vec4(0.0),\", \"    vec4(0.0),\", \"    vec4(0.0),\", \"    0.75,\", \"    0.166,\", \"    0.0833,\", \"    0.0,\", \"    0.0,\", \"    0.0,\", \"    vec4(0.0)\", \"  );\", \"\", \"  // TODO avoid querying texture twice for same texel\", \"  gl_FragColor.a = texture2D(tDiffuse, vUv).a;\", \"}\"].join(\"\\n\")\n};\nexport { FXAAShader };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/resources/shaders/FXAAShader.js"],"names":["Vector2","FXAAShader","uniforms","tDiffuse","value","resolution","vertexShader","join","fragmentShader"],"mappings":"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","sourcesContent":["import { Vector2 } from \"three/src/Three\";\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author davidedc / http://www.sketchpatch.net/\n *\n * NVIDIA FXAA by Timothy Lottes\n * http://timothylottes.blogspot.com/2011/06/fxaa3-source-released.html\n * - WebGL port by @supereggbert\n * http://www.glge.org/demos/fxaa/\n */\n\nvar FXAAShader = {\n    uniforms: {\n        tDiffuse: { value: null },\n        resolution: { value: new Vector2(1 / 1024, 1 / 512) }\n    },\n\n    vertexShader: [\n        \"varying vec2 vUv;\",\n\n        \"void main() {\",\n\n        \"vUv = uv;\",\n        \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n        \"}\"\n    ].join(\"\\n\"),\n\n    fragmentShader: [\n        \"precision highp float;\",\n        \"\",\n        \"uniform sampler2D tDiffuse;\",\n        \"\",\n        \"uniform vec2 resolution;\",\n        \"\",\n        \"varying vec2 vUv;\",\n        \"\",\n        \"#define FXAA_PC 1\",\n        \"#define FXAA_GLSL_100 1\",\n        \"#define FXAA_QUALITY_PRESET 12\",\n        \"\",\n        \"#define FXAA_GREEN_AS_LUMA 1\",\n        \"\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"#ifndef FXAA_PC_CONSOLE\",\n        \"    //\",\n        \"    // The console algorithm for PC is included\",\n        \"    // for developers targeting really low spec machines.\",\n        \"    // Likely better to just run FXAA_PC, and use a really low preset.\",\n        \"    //\",\n        \"    #define FXAA_PC_CONSOLE 0\",\n        \"#endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"#ifndef FXAA_GLSL_120\",\n        \"    #define FXAA_GLSL_120 0\",\n        \"#endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"#ifndef FXAA_GLSL_130\",\n        \"    #define FXAA_GLSL_130 0\",\n        \"#endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"#ifndef FXAA_HLSL_3\",\n        \"    #define FXAA_HLSL_3 0\",\n        \"#endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"#ifndef FXAA_HLSL_4\",\n        \"    #define FXAA_HLSL_4 0\",\n        \"#endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"#ifndef FXAA_HLSL_5\",\n        \"    #define FXAA_HLSL_5 0\",\n        \"#endif\",\n        \"/*==========================================================================*/\",\n        \"#ifndef FXAA_GREEN_AS_LUMA\",\n        \"    //\",\n        \"    // For those using non-linear color,\",\n        \"    // and either not able to get luma in alpha, or not wanting to,\",\n        \"    // this enables FXAA to run using green as a proxy for luma.\",\n        \"    // So with this enabled, no need to pack luma in alpha.\",\n        \"    //\",\n        \"    // This will turn off AA on anything which lacks some amount of green.\",\n        \"    // Pure red and blue or combination of only R and B, will get no AA.\",\n        \"    //\",\n        \"    // Might want to lower the settings for both,\",\n        \"    //    fxaaConsoleEdgeThresholdMin\",\n        \"    //    fxaaQualityEdgeThresholdMin\",\n        \"    // In order to insure AA does not get turned off on colors\",\n        \"    // which contain a minor amount of green.\",\n        \"    //\",\n        \"    // 1 = On.\",\n        \"    // 0 = Off.\",\n        \"    //\",\n        \"    #define FXAA_GREEN_AS_LUMA 0\",\n        \"#endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"#ifndef FXAA_EARLY_EXIT\",\n        \"    //\",\n        \"    // Controls algorithm's early exit path.\",\n        \"    // On PS3 turning this ON adds 2 cycles to the shader.\",\n        \"    // On 360 turning this OFF adds 10ths of a millisecond to the shader.\",\n        \"    // Turning this off on console will result in a more blurry image.\",\n        \"    // So this defaults to on.\",\n        \"    //\",\n        \"    // 1 = On.\",\n        \"    // 0 = Off.\",\n        \"    //\",\n        \"    #define FXAA_EARLY_EXIT 1\",\n        \"#endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"#ifndef FXAA_DISCARD\",\n        \"    //\",\n        \"    // Only valid for PC OpenGL currently.\",\n        \"    // Probably will not work when FXAA_GREEN_AS_LUMA = 1.\",\n        \"    //\",\n        \"    // 1 = Use discard on pixels which don't need AA.\",\n        \"    //     For APIs which enable concurrent TEX+ROP from same surface.\",\n        \"    // 0 = Return unchanged color on pixels which don't need AA.\",\n        \"    //\",\n        \"    #define FXAA_DISCARD 0\",\n        \"#endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"#ifndef FXAA_FAST_PIXEL_OFFSET\",\n        \"    //\",\n        \"    // Used for GLSL 120 only.\",\n        \"    //\",\n        \"    // 1 = GL API supports fast pixel offsets\",\n        \"    // 0 = do not use fast pixel offsets\",\n        \"    //\",\n        \"    #ifdef GL_EXT_gpu_shader4\",\n        \"        #define FXAA_FAST_PIXEL_OFFSET 1\",\n        \"    #endif\",\n        \"    #ifdef GL_NV_gpu_shader5\",\n        \"        #define FXAA_FAST_PIXEL_OFFSET 1\",\n        \"    #endif\",\n        \"    #ifdef GL_ARB_gpu_shader5\",\n        \"        #define FXAA_FAST_PIXEL_OFFSET 1\",\n        \"    #endif\",\n        \"    #ifndef FXAA_FAST_PIXEL_OFFSET\",\n        \"        #define FXAA_FAST_PIXEL_OFFSET 0\",\n        \"    #endif\",\n        \"#endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"#ifndef FXAA_GATHER4_ALPHA\",\n        \"    //\",\n        \"    // 1 = API supports gather4 on alpha channel.\",\n        \"    // 0 = API does not support gather4 on alpha channel.\",\n        \"    //\",\n        \"    #if (FXAA_HLSL_5 == 1)\",\n        \"        #define FXAA_GATHER4_ALPHA 1\",\n        \"    #endif\",\n        \"    #ifdef GL_ARB_gpu_shader5\",\n        \"        #define FXAA_GATHER4_ALPHA 1\",\n        \"    #endif\",\n        \"    #ifdef GL_NV_gpu_shader5\",\n        \"        #define FXAA_GATHER4_ALPHA 1\",\n        \"    #endif\",\n        \"    #ifndef FXAA_GATHER4_ALPHA\",\n        \"        #define FXAA_GATHER4_ALPHA 0\",\n        \"    #endif\",\n        \"#endif\",\n        \"\",\n        \"\",\n        \"/*============================================================================\",\n        \"                        FXAA QUALITY - TUNING KNOBS\",\n        \"------------------------------------------------------------------------------\",\n        \"NOTE the other tuning knobs are now in the shader function inputs!\",\n        \"============================================================================*/\",\n        \"#ifndef FXAA_QUALITY_PRESET\",\n        \"    //\",\n        \"    // Choose the quality preset.\",\n        \"    // This needs to be compiled into the shader as it effects code.\",\n        \"    // Best option to include multiple presets is to\",\n        \"    // in each shader define the preset, then include this file.\",\n        \"    //\",\n        \"    // OPTIONS\",\n        \"    // -----------------------------------------------------------------------\",\n        \"    // 10 to 15 - default medium dither (10=fastest, 15=highest quality)\",\n        \"    // 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)\",\n        \"    // 39       - no dither, very expensive\",\n        \"    //\",\n        \"    // NOTES\",\n        \"    // -----------------------------------------------------------------------\",\n        \"    // 12 = slightly faster then FXAA 3.9 and higher edge quality (default)\",\n        \"    // 13 = about same speed as FXAA 3.9 and better than 12\",\n        \"    // 23 = closest to FXAA 3.9 visually and performance wise\",\n        \"    //  _ = the lowest digit is directly related to performance\",\n        \"    // _  = the highest digit is directly related to style\",\n        \"    //\",\n        \"    #define FXAA_QUALITY_PRESET 12\",\n        \"#endif\",\n        \"\",\n        \"\",\n        \"/*============================================================================\",\n        \"\",\n        \"                           FXAA QUALITY - PRESETS\",\n        \"\",\n        \"============================================================================*/\",\n        \"\",\n        \"/*============================================================================\",\n        \"                     FXAA QUALITY - MEDIUM DITHER PRESETS\",\n        \"============================================================================*/\",\n        \"#if (FXAA_QUALITY_PRESET == 10)\",\n        \"    #define FXAA_QUALITY_PS 3\",\n        \"    #define FXAA_QUALITY_P0 1.5\",\n        \"    #define FXAA_QUALITY_P1 3.0\",\n        \"    #define FXAA_QUALITY_P2 12.0\",\n        \"#endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"#if (FXAA_QUALITY_PRESET == 11)\",\n        \"    #define FXAA_QUALITY_PS 4\",\n        \"    #define FXAA_QUALITY_P0 1.0\",\n        \"    #define FXAA_QUALITY_P1 1.5\",\n        \"    #define FXAA_QUALITY_P2 3.0\",\n        \"    #define FXAA_QUALITY_P3 12.0\",\n        \"#endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"#if (FXAA_QUALITY_PRESET == 12)\",\n        \"    #define FXAA_QUALITY_PS 5\",\n        \"    #define FXAA_QUALITY_P0 1.0\",\n        \"    #define FXAA_QUALITY_P1 1.5\",\n        \"    #define FXAA_QUALITY_P2 2.0\",\n        \"    #define FXAA_QUALITY_P3 4.0\",\n        \"    #define FXAA_QUALITY_P4 12.0\",\n        \"#endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"#if (FXAA_QUALITY_PRESET == 13)\",\n        \"    #define FXAA_QUALITY_PS 6\",\n        \"    #define FXAA_QUALITY_P0 1.0\",\n        \"    #define FXAA_QUALITY_P1 1.5\",\n        \"    #define FXAA_QUALITY_P2 2.0\",\n        \"    #define FXAA_QUALITY_P3 2.0\",\n        \"    #define FXAA_QUALITY_P4 4.0\",\n        \"    #define FXAA_QUALITY_P5 12.0\",\n        \"#endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"#if (FXAA_QUALITY_PRESET == 14)\",\n        \"    #define FXAA_QUALITY_PS 7\",\n        \"    #define FXAA_QUALITY_P0 1.0\",\n        \"    #define FXAA_QUALITY_P1 1.5\",\n        \"    #define FXAA_QUALITY_P2 2.0\",\n        \"    #define FXAA_QUALITY_P3 2.0\",\n        \"    #define FXAA_QUALITY_P4 2.0\",\n        \"    #define FXAA_QUALITY_P5 4.0\",\n        \"    #define FXAA_QUALITY_P6 12.0\",\n        \"#endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"#if (FXAA_QUALITY_PRESET == 15)\",\n        \"    #define FXAA_QUALITY_PS 8\",\n        \"    #define FXAA_QUALITY_P0 1.0\",\n        \"    #define FXAA_QUALITY_P1 1.5\",\n        \"    #define FXAA_QUALITY_P2 2.0\",\n        \"    #define FXAA_QUALITY_P3 2.0\",\n        \"    #define FXAA_QUALITY_P4 2.0\",\n        \"    #define FXAA_QUALITY_P5 2.0\",\n        \"    #define FXAA_QUALITY_P6 4.0\",\n        \"    #define FXAA_QUALITY_P7 12.0\",\n        \"#endif\",\n        \"\",\n        \"/*============================================================================\",\n        \"                     FXAA QUALITY - LOW DITHER PRESETS\",\n        \"============================================================================*/\",\n        \"#if (FXAA_QUALITY_PRESET == 20)\",\n        \"    #define FXAA_QUALITY_PS 3\",\n        \"    #define FXAA_QUALITY_P0 1.5\",\n        \"    #define FXAA_QUALITY_P1 2.0\",\n        \"    #define FXAA_QUALITY_P2 8.0\",\n        \"#endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"#if (FXAA_QUALITY_PRESET == 21)\",\n        \"    #define FXAA_QUALITY_PS 4\",\n        \"    #define FXAA_QUALITY_P0 1.0\",\n        \"    #define FXAA_QUALITY_P1 1.5\",\n        \"    #define FXAA_QUALITY_P2 2.0\",\n        \"    #define FXAA_QUALITY_P3 8.0\",\n        \"#endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"#if (FXAA_QUALITY_PRESET == 22)\",\n        \"    #define FXAA_QUALITY_PS 5\",\n        \"    #define FXAA_QUALITY_P0 1.0\",\n        \"    #define FXAA_QUALITY_P1 1.5\",\n        \"    #define FXAA_QUALITY_P2 2.0\",\n        \"    #define FXAA_QUALITY_P3 2.0\",\n        \"    #define FXAA_QUALITY_P4 8.0\",\n        \"#endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"#if (FXAA_QUALITY_PRESET == 23)\",\n        \"    #define FXAA_QUALITY_PS 6\",\n        \"    #define FXAA_QUALITY_P0 1.0\",\n        \"    #define FXAA_QUALITY_P1 1.5\",\n        \"    #define FXAA_QUALITY_P2 2.0\",\n        \"    #define FXAA_QUALITY_P3 2.0\",\n        \"    #define FXAA_QUALITY_P4 2.0\",\n        \"    #define FXAA_QUALITY_P5 8.0\",\n        \"#endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"#if (FXAA_QUALITY_PRESET == 24)\",\n        \"    #define FXAA_QUALITY_PS 7\",\n        \"    #define FXAA_QUALITY_P0 1.0\",\n        \"    #define FXAA_QUALITY_P1 1.5\",\n        \"    #define FXAA_QUALITY_P2 2.0\",\n        \"    #define FXAA_QUALITY_P3 2.0\",\n        \"    #define FXAA_QUALITY_P4 2.0\",\n        \"    #define FXAA_QUALITY_P5 3.0\",\n        \"    #define FXAA_QUALITY_P6 8.0\",\n        \"#endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"#if (FXAA_QUALITY_PRESET == 25)\",\n        \"    #define FXAA_QUALITY_PS 8\",\n        \"    #define FXAA_QUALITY_P0 1.0\",\n        \"    #define FXAA_QUALITY_P1 1.5\",\n        \"    #define FXAA_QUALITY_P2 2.0\",\n        \"    #define FXAA_QUALITY_P3 2.0\",\n        \"    #define FXAA_QUALITY_P4 2.0\",\n        \"    #define FXAA_QUALITY_P5 2.0\",\n        \"    #define FXAA_QUALITY_P6 4.0\",\n        \"    #define FXAA_QUALITY_P7 8.0\",\n        \"#endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"#if (FXAA_QUALITY_PRESET == 26)\",\n        \"    #define FXAA_QUALITY_PS 9\",\n        \"    #define FXAA_QUALITY_P0 1.0\",\n        \"    #define FXAA_QUALITY_P1 1.5\",\n        \"    #define FXAA_QUALITY_P2 2.0\",\n        \"    #define FXAA_QUALITY_P3 2.0\",\n        \"    #define FXAA_QUALITY_P4 2.0\",\n        \"    #define FXAA_QUALITY_P5 2.0\",\n        \"    #define FXAA_QUALITY_P6 2.0\",\n        \"    #define FXAA_QUALITY_P7 4.0\",\n        \"    #define FXAA_QUALITY_P8 8.0\",\n        \"#endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"#if (FXAA_QUALITY_PRESET == 27)\",\n        \"    #define FXAA_QUALITY_PS 10\",\n        \"    #define FXAA_QUALITY_P0 1.0\",\n        \"    #define FXAA_QUALITY_P1 1.5\",\n        \"    #define FXAA_QUALITY_P2 2.0\",\n        \"    #define FXAA_QUALITY_P3 2.0\",\n        \"    #define FXAA_QUALITY_P4 2.0\",\n        \"    #define FXAA_QUALITY_P5 2.0\",\n        \"    #define FXAA_QUALITY_P6 2.0\",\n        \"    #define FXAA_QUALITY_P7 2.0\",\n        \"    #define FXAA_QUALITY_P8 4.0\",\n        \"    #define FXAA_QUALITY_P9 8.0\",\n        \"#endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"#if (FXAA_QUALITY_PRESET == 28)\",\n        \"    #define FXAA_QUALITY_PS 11\",\n        \"    #define FXAA_QUALITY_P0 1.0\",\n        \"    #define FXAA_QUALITY_P1 1.5\",\n        \"    #define FXAA_QUALITY_P2 2.0\",\n        \"    #define FXAA_QUALITY_P3 2.0\",\n        \"    #define FXAA_QUALITY_P4 2.0\",\n        \"    #define FXAA_QUALITY_P5 2.0\",\n        \"    #define FXAA_QUALITY_P6 2.0\",\n        \"    #define FXAA_QUALITY_P7 2.0\",\n        \"    #define FXAA_QUALITY_P8 2.0\",\n        \"    #define FXAA_QUALITY_P9 4.0\",\n        \"    #define FXAA_QUALITY_P10 8.0\",\n        \"#endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"#if (FXAA_QUALITY_PRESET == 29)\",\n        \"    #define FXAA_QUALITY_PS 12\",\n        \"    #define FXAA_QUALITY_P0 1.0\",\n        \"    #define FXAA_QUALITY_P1 1.5\",\n        \"    #define FXAA_QUALITY_P2 2.0\",\n        \"    #define FXAA_QUALITY_P3 2.0\",\n        \"    #define FXAA_QUALITY_P4 2.0\",\n        \"    #define FXAA_QUALITY_P5 2.0\",\n        \"    #define FXAA_QUALITY_P6 2.0\",\n        \"    #define FXAA_QUALITY_P7 2.0\",\n        \"    #define FXAA_QUALITY_P8 2.0\",\n        \"    #define FXAA_QUALITY_P9 2.0\",\n        \"    #define FXAA_QUALITY_P10 4.0\",\n        \"    #define FXAA_QUALITY_P11 8.0\",\n        \"#endif\",\n        \"\",\n        \"/*============================================================================\",\n        \"                     FXAA QUALITY - EXTREME QUALITY\",\n        \"============================================================================*/\",\n        \"#if (FXAA_QUALITY_PRESET == 39)\",\n        \"    #define FXAA_QUALITY_PS 12\",\n        \"    #define FXAA_QUALITY_P0 1.0\",\n        \"    #define FXAA_QUALITY_P1 1.0\",\n        \"    #define FXAA_QUALITY_P2 1.0\",\n        \"    #define FXAA_QUALITY_P3 1.0\",\n        \"    #define FXAA_QUALITY_P4 1.0\",\n        \"    #define FXAA_QUALITY_P5 1.5\",\n        \"    #define FXAA_QUALITY_P6 2.0\",\n        \"    #define FXAA_QUALITY_P7 2.0\",\n        \"    #define FXAA_QUALITY_P8 2.0\",\n        \"    #define FXAA_QUALITY_P9 2.0\",\n        \"    #define FXAA_QUALITY_P10 4.0\",\n        \"    #define FXAA_QUALITY_P11 8.0\",\n        \"#endif\",\n        \"\",\n        \"\",\n        \"\",\n        \"/*============================================================================\",\n        \"\",\n        \"                                API PORTING\",\n        \"\",\n        \"============================================================================*/\",\n        \"#if (FXAA_GLSL_100 == 1) || (FXAA_GLSL_120 == 1) || (FXAA_GLSL_130 == 1)\",\n        \"    #define FxaaBool bool\",\n        \"    #define FxaaDiscard discard\",\n        \"    #define FxaaFloat float\",\n        \"    #define FxaaFloat2 vec2\",\n        \"    #define FxaaFloat3 vec3\",\n        \"    #define FxaaFloat4 vec4\",\n        \"    #define FxaaHalf float\",\n        \"    #define FxaaHalf2 vec2\",\n        \"    #define FxaaHalf3 vec3\",\n        \"    #define FxaaHalf4 vec4\",\n        \"    #define FxaaInt2 ivec2\",\n        \"    #define FxaaSat(x) clamp(x, 0.0, 1.0)\",\n        \"    #define FxaaTex sampler2D\",\n        \"#else\",\n        \"    #define FxaaBool bool\",\n        \"    #define FxaaDiscard clip(-1)\",\n        \"    #define FxaaFloat float\",\n        \"    #define FxaaFloat2 float2\",\n        \"    #define FxaaFloat3 float3\",\n        \"    #define FxaaFloat4 float4\",\n        \"    #define FxaaHalf half\",\n        \"    #define FxaaHalf2 half2\",\n        \"    #define FxaaHalf3 half3\",\n        \"    #define FxaaHalf4 half4\",\n        \"    #define FxaaSat(x) saturate(x)\",\n        \"#endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"#if (FXAA_GLSL_100 == 1)\",\n        \"  #define FxaaTexTop(t, p) texture2D(t, p, 0.0)\",\n        \"  #define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r), 0.0)\",\n        \"#endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"#if (FXAA_GLSL_120 == 1)\",\n        \"    // Requires,\",\n        \"    //  #version 120\",\n        \"    // And at least,\",\n        \"    //  #extension GL_EXT_gpu_shader4 : enable\",\n        \"    //  (or set FXAA_FAST_PIXEL_OFFSET 1 to work like DX9)\",\n        \"    #define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)\",\n        \"    #if (FXAA_FAST_PIXEL_OFFSET == 1)\",\n        \"        #define FxaaTexOff(t, p, o, r) texture2DLodOffset(t, p, 0.0, o)\",\n        \"    #else\",\n        \"        #define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)\",\n        \"    #endif\",\n        \"    #if (FXAA_GATHER4_ALPHA == 1)\",\n        \"        // use #extension GL_ARB_gpu_shader5 : enable\",\n        \"        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\",\n        \"        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\",\n        \"        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)\",\n        \"        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\",\n        \"    #endif\",\n        \"#endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"#if (FXAA_GLSL_130 == 1)\",\n        '    // Requires \"#version 130\" or better',\n        \"    #define FxaaTexTop(t, p) textureLod(t, p, 0.0)\",\n        \"    #define FxaaTexOff(t, p, o, r) textureLodOffset(t, p, 0.0, o)\",\n        \"    #if (FXAA_GATHER4_ALPHA == 1)\",\n        \"        // use #extension GL_ARB_gpu_shader5 : enable\",\n        \"        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\",\n        \"        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\",\n        \"        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)\",\n        \"        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\",\n        \"    #endif\",\n        \"#endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"#if (FXAA_HLSL_3 == 1)\",\n        \"    #define FxaaInt2 float2\",\n        \"    #define FxaaTex sampler2D\",\n        \"    #define FxaaTexTop(t, p) tex2Dlod(t, float4(p, 0.0, 0.0))\",\n        \"    #define FxaaTexOff(t, p, o, r) tex2Dlod(t, float4(p + (o * r), 0, 0))\",\n        \"#endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"#if (FXAA_HLSL_4 == 1)\",\n        \"    #define FxaaInt2 int2\",\n        \"    struct FxaaTex { SamplerState smpl; Texture2D tex; };\",\n        \"    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)\",\n        \"    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)\",\n        \"#endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"#if (FXAA_HLSL_5 == 1)\",\n        \"    #define FxaaInt2 int2\",\n        \"    struct FxaaTex { SamplerState smpl; Texture2D tex; };\",\n        \"    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)\",\n        \"    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)\",\n        \"    #define FxaaTexAlpha4(t, p) t.tex.GatherAlpha(t.smpl, p)\",\n        \"    #define FxaaTexOffAlpha4(t, p, o) t.tex.GatherAlpha(t.smpl, p, o)\",\n        \"    #define FxaaTexGreen4(t, p) t.tex.GatherGreen(t.smpl, p)\",\n        \"    #define FxaaTexOffGreen4(t, p, o) t.tex.GatherGreen(t.smpl, p, o)\",\n        \"#endif\",\n        \"\",\n        \"\",\n        \"/*============================================================================\",\n        \"                   GREEN AS LUMA OPTION SUPPORT FUNCTION\",\n        \"============================================================================*/\",\n        \"#if (FXAA_GREEN_AS_LUMA == 0)\",\n        \"    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.w; }\",\n        \"#else\",\n        \"    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }\",\n        \"#endif\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"/*============================================================================\",\n        \"\",\n        \"                             FXAA3 QUALITY - PC\",\n        \"\",\n        \"============================================================================*/\",\n        \"#if (FXAA_PC == 1)\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"FxaaFloat4 FxaaPixelShader(\",\n        \"    //\",\n        \"    // Use noperspective interpolation here (turn off perspective interpolation).\",\n        \"    // {xy} = center of pixel\",\n        \"    FxaaFloat2 pos,\",\n        \"    //\",\n        \"    // Used only for FXAA Console, and not used on the 360 version.\",\n        \"    // Use noperspective interpolation here (turn off perspective interpolation).\",\n        \"    // {xy_} = upper left of pixel\",\n        \"    // {_zw} = lower right of pixel\",\n        \"    FxaaFloat4 fxaaConsolePosPos,\",\n        \"    //\",\n        \"    // Input color texture.\",\n        \"    // {rgb_} = color in linear or perceptual color space\",\n        \"    // if (FXAA_GREEN_AS_LUMA == 0)\",\n        \"    //     {__a} = luma in perceptual color space (not linear)\",\n        \"    FxaaTex tex,\",\n        \"    //\",\n        \"    // Only used on the optimized 360 version of FXAA Console.\",\n        '    // For everything but 360, just use the same input here as for \"tex\".',\n        \"    // For 360, same texture, just alias with a 2nd sampler.\",\n        \"    // This sampler needs to have an exponent bias of -1.\",\n        \"    FxaaTex fxaaConsole360TexExpBiasNegOne,\",\n        \"    //\",\n        \"    // Only used on the optimized 360 version of FXAA Console.\",\n        '    // For everything but 360, just use the same input here as for \"tex\".',\n        \"    // For 360, same texture, just alias with a 3nd sampler.\",\n        \"    // This sampler needs to have an exponent bias of -2.\",\n        \"    FxaaTex fxaaConsole360TexExpBiasNegTwo,\",\n        \"    //\",\n        \"    // Only used on FXAA Quality.\",\n        \"    // This must be from a constant/uniform.\",\n        \"    // {x_} = 1.0/screenWidthInPixels\",\n        \"    // {_y} = 1.0/screenHeightInPixels\",\n        \"    FxaaFloat2 fxaaQualityRcpFrame,\",\n        \"    //\",\n        \"    // Only used on FXAA Console.\",\n        \"    // This must be from a constant/uniform.\",\n        \"    // This effects sub-pixel AA quality and inversely sharpness.\",\n        \"    //   Where N ranges between,\",\n        \"    //     N = 0.50 (default)\",\n        \"    //     N = 0.33 (sharper)\",\n        \"    // {x__} = -N/screenWidthInPixels\",\n        \"    // {_y_} = -N/screenHeightInPixels\",\n        \"    // {_z_} =  N/screenWidthInPixels\",\n        \"    // {__w} =  N/screenHeightInPixels\",\n        \"    FxaaFloat4 fxaaConsoleRcpFrameOpt,\",\n        \"    //\",\n        \"    // Only used on FXAA Console.\",\n        \"    // Not used on 360, but used on PS3 and PC.\",\n        \"    // This must be from a constant/uniform.\",\n        \"    // {x__} = -2.0/screenWidthInPixels\",\n        \"    // {_y_} = -2.0/screenHeightInPixels\",\n        \"    // {_z_} =  2.0/screenWidthInPixels\",\n        \"    // {__w} =  2.0/screenHeightInPixels\",\n        \"    FxaaFloat4 fxaaConsoleRcpFrameOpt2,\",\n        \"    //\",\n        \"    // Only used on FXAA Console.\",\n        \"    // Only used on 360 in place of fxaaConsoleRcpFrameOpt2.\",\n        \"    // This must be from a constant/uniform.\",\n        \"    // {x__} =  8.0/screenWidthInPixels\",\n        \"    // {_y_} =  8.0/screenHeightInPixels\",\n        \"    // {_z_} = -4.0/screenWidthInPixels\",\n        \"    // {__w} = -4.0/screenHeightInPixels\",\n        \"    FxaaFloat4 fxaaConsole360RcpFrameOpt2,\",\n        \"    //\",\n        \"    // Only used on FXAA Quality.\",\n        \"    // This used to be the FXAA_QUALITY_SUBPIX define.\",\n        \"    // It is here now to allow easier tuning.\",\n        \"    // Choose the amount of sub-pixel aliasing removal.\",\n        \"    // This can effect sharpness.\",\n        \"    //   1.00 - upper limit (softer)\",\n        \"    //   0.75 - default amount of filtering\",\n        \"    //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)\",\n        \"    //   0.25 - almost off\",\n        \"    //   0.00 - completely off\",\n        \"    FxaaFloat fxaaQualitySubpix,\",\n        \"    //\",\n        \"    // Only used on FXAA Quality.\",\n        \"    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.\",\n        \"    // It is here now to allow easier tuning.\",\n        \"    // The minimum amount of local contrast required to apply algorithm.\",\n        \"    //   0.333 - too little (faster)\",\n        \"    //   0.250 - low quality\",\n        \"    //   0.166 - default\",\n        \"    //   0.125 - high quality\",\n        \"    //   0.063 - overkill (slower)\",\n        \"    FxaaFloat fxaaQualityEdgeThreshold,\",\n        \"    //\",\n        \"    // Only used on FXAA Quality.\",\n        \"    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.\",\n        \"    // It is here now to allow easier tuning.\",\n        \"    // Trims the algorithm from processing darks.\",\n        \"    //   0.0833 - upper limit (default, the start of visible unfiltered edges)\",\n        \"    //   0.0625 - high quality (faster)\",\n        \"    //   0.0312 - visible limit (slower)\",\n        \"    // Special notes when using FXAA_GREEN_AS_LUMA,\",\n        \"    //   Likely want to set this to zero.\",\n        \"    //   As colors that are mostly not-green\",\n        \"    //   will appear very dark in the green channel!\",\n        \"    //   Tune by looking at mostly non-green content,\",\n        \"    //   then start at zero and increase until aliasing is a problem.\",\n        \"    FxaaFloat fxaaQualityEdgeThresholdMin,\",\n        \"    //\",\n        \"    // Only used on FXAA Console.\",\n        \"    // This used to be the FXAA_CONSOLE_EDGE_SHARPNESS define.\",\n        \"    // It is here now to allow easier tuning.\",\n        \"    // This does not effect PS3, as this needs to be compiled in.\",\n        \"    //   Use FXAA_CONSOLE_PS3_EDGE_SHARPNESS for PS3.\",\n        \"    //   Due to the PS3 being ALU bound,\",\n        \"    //   there are only three safe values here: 2 and 4 and 8.\",\n        \"    //   These options use the shaders ability to a free *|/ by 2|4|8.\",\n        \"    // For all other platforms can be a non-power of two.\",\n        \"    //   8.0 is sharper (default!!!)\",\n        \"    //   4.0 is softer\",\n        \"    //   2.0 is really soft (good only for vector graphics inputs)\",\n        \"    FxaaFloat fxaaConsoleEdgeSharpness,\",\n        \"    //\",\n        \"    // Only used on FXAA Console.\",\n        \"    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD define.\",\n        \"    // It is here now to allow easier tuning.\",\n        \"    // This does not effect PS3, as this needs to be compiled in.\",\n        \"    //   Use FXAA_CONSOLE_PS3_EDGE_THRESHOLD for PS3.\",\n        \"    //   Due to the PS3 being ALU bound,\",\n        \"    //   there are only two safe values here: 1/4 and 1/8.\",\n        \"    //   These options use the shaders ability to a free *|/ by 2|4|8.\",\n        \"    // The console setting has a different mapping than the quality setting.\",\n        \"    // Other platforms can use other values.\",\n        \"    //   0.125 leaves less aliasing, but is softer (default!!!)\",\n        \"    //   0.25 leaves more aliasing, and is sharper\",\n        \"    FxaaFloat fxaaConsoleEdgeThreshold,\",\n        \"    //\",\n        \"    // Only used on FXAA Console.\",\n        \"    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD_MIN define.\",\n        \"    // It is here now to allow easier tuning.\",\n        \"    // Trims the algorithm from processing darks.\",\n        \"    // The console setting has a different mapping than the quality setting.\",\n        \"    // This only applies when FXAA_EARLY_EXIT is 1.\",\n        \"    // This does not apply to PS3,\",\n        \"    // PS3 was simplified to avoid more shader instructions.\",\n        \"    //   0.06 - faster but more aliasing in darks\",\n        \"    //   0.05 - default\",\n        \"    //   0.04 - slower and less aliasing in darks\",\n        \"    // Special notes when using FXAA_GREEN_AS_LUMA,\",\n        \"    //   Likely want to set this to zero.\",\n        \"    //   As colors that are mostly not-green\",\n        \"    //   will appear very dark in the green channel!\",\n        \"    //   Tune by looking at mostly non-green content,\",\n        \"    //   then start at zero and increase until aliasing is a problem.\",\n        \"    FxaaFloat fxaaConsoleEdgeThresholdMin,\",\n        \"    //\",\n        \"    // Extra constants for 360 FXAA Console only.\",\n        \"    // Use zeros or anything else for other platforms.\",\n        \"    // These must be in physical constant registers and NOT immediates.\",\n        \"    // Immediates will result in compiler un-optimizing.\",\n        \"    // {xyzw} = float4(1.0, -1.0, 0.25, -0.25)\",\n        \"    FxaaFloat4 fxaaConsole360ConstDir\",\n        \") {\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"    FxaaFloat2 posM;\",\n        \"    posM.x = pos.x;\",\n        \"    posM.y = pos.y;\",\n        \"    #if (FXAA_GATHER4_ALPHA == 1)\",\n        \"        #if (FXAA_DISCARD == 0)\",\n        \"            FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\",\n        \"            #if (FXAA_GREEN_AS_LUMA == 0)\",\n        \"                #define lumaM rgbyM.w\",\n        \"            #else\",\n        \"                #define lumaM rgbyM.y\",\n        \"            #endif\",\n        \"        #endif\",\n        \"        #if (FXAA_GREEN_AS_LUMA == 0)\",\n        \"            FxaaFloat4 luma4A = FxaaTexAlpha4(tex, posM);\",\n        \"            FxaaFloat4 luma4B = FxaaTexOffAlpha4(tex, posM, FxaaInt2(-1, -1));\",\n        \"        #else\",\n        \"            FxaaFloat4 luma4A = FxaaTexGreen4(tex, posM);\",\n        \"            FxaaFloat4 luma4B = FxaaTexOffGreen4(tex, posM, FxaaInt2(-1, -1));\",\n        \"        #endif\",\n        \"        #if (FXAA_DISCARD == 1)\",\n        \"            #define lumaM luma4A.w\",\n        \"        #endif\",\n        \"        #define lumaE luma4A.z\",\n        \"        #define lumaS luma4A.x\",\n        \"        #define lumaSE luma4A.y\",\n        \"        #define lumaNW luma4B.w\",\n        \"        #define lumaN luma4B.z\",\n        \"        #define lumaW luma4B.x\",\n        \"    #else\",\n        \"        FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\",\n        \"        #if (FXAA_GREEN_AS_LUMA == 0)\",\n        \"            #define lumaM rgbyM.w\",\n        \"        #else\",\n        \"            #define lumaM rgbyM.y\",\n        \"        #endif\",\n        \"        #if (FXAA_GLSL_100 == 1)\",\n        \"          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0, 1.0), fxaaQualityRcpFrame.xy));\",\n        \"          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 0.0), fxaaQualityRcpFrame.xy));\",\n        \"          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0,-1.0), fxaaQualityRcpFrame.xy));\",\n        \"          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 0.0), fxaaQualityRcpFrame.xy));\",\n        \"        #else\",\n        \"          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));\",\n        \"          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));\",\n        \"          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));\",\n        \"          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));\",\n        \"        #endif\",\n        \"    #endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"    FxaaFloat maxSM = max(lumaS, lumaM);\",\n        \"    FxaaFloat minSM = min(lumaS, lumaM);\",\n        \"    FxaaFloat maxESM = max(lumaE, maxSM);\",\n        \"    FxaaFloat minESM = min(lumaE, minSM);\",\n        \"    FxaaFloat maxWN = max(lumaN, lumaW);\",\n        \"    FxaaFloat minWN = min(lumaN, lumaW);\",\n        \"    FxaaFloat rangeMax = max(maxWN, maxESM);\",\n        \"    FxaaFloat rangeMin = min(minWN, minESM);\",\n        \"    FxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;\",\n        \"    FxaaFloat range = rangeMax - rangeMin;\",\n        \"    FxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);\",\n        \"    FxaaBool earlyExit = range < rangeMaxClamped;\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"    if(earlyExit)\",\n        \"        #if (FXAA_DISCARD == 1)\",\n        \"            FxaaDiscard;\",\n        \"        #else\",\n        \"            return rgbyM;\",\n        \"        #endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"    #if (FXAA_GATHER4_ALPHA == 0)\",\n        \"        #if (FXAA_GLSL_100 == 1)\",\n        \"          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0,-1.0), fxaaQualityRcpFrame.xy));\",\n        \"          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 1.0), fxaaQualityRcpFrame.xy));\",\n        \"          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0,-1.0), fxaaQualityRcpFrame.xy));\",\n        \"          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 1.0), fxaaQualityRcpFrame.xy));\",\n        \"        #else\",\n        \"          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));\",\n        \"          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));\",\n        \"          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));\",\n        \"          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\",\n        \"        #endif\",\n        \"    #else\",\n        \"        FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(1, -1), fxaaQualityRcpFrame.xy));\",\n        \"        FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\",\n        \"    #endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"    FxaaFloat lumaNS = lumaN + lumaS;\",\n        \"    FxaaFloat lumaWE = lumaW + lumaE;\",\n        \"    FxaaFloat subpixRcpRange = 1.0/range;\",\n        \"    FxaaFloat subpixNSWE = lumaNS + lumaWE;\",\n        \"    FxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;\",\n        \"    FxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"    FxaaFloat lumaNESE = lumaNE + lumaSE;\",\n        \"    FxaaFloat lumaNWNE = lumaNW + lumaNE;\",\n        \"    FxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;\",\n        \"    FxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"    FxaaFloat lumaNWSW = lumaNW + lumaSW;\",\n        \"    FxaaFloat lumaSWSE = lumaSW + lumaSE;\",\n        \"    FxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);\",\n        \"    FxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);\",\n        \"    FxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;\",\n        \"    FxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;\",\n        \"    FxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;\",\n        \"    FxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"    FxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;\",\n        \"    FxaaFloat lengthSign = fxaaQualityRcpFrame.x;\",\n        \"    FxaaBool horzSpan = edgeHorz >= edgeVert;\",\n        \"    FxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"    if(!horzSpan) lumaN = lumaW;\",\n        \"    if(!horzSpan) lumaS = lumaE;\",\n        \"    if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;\",\n        \"    FxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"    FxaaFloat gradientN = lumaN - lumaM;\",\n        \"    FxaaFloat gradientS = lumaS - lumaM;\",\n        \"    FxaaFloat lumaNN = lumaN + lumaM;\",\n        \"    FxaaFloat lumaSS = lumaS + lumaM;\",\n        \"    FxaaBool pairN = abs(gradientN) >= abs(gradientS);\",\n        \"    FxaaFloat gradient = max(abs(gradientN), abs(gradientS));\",\n        \"    if(pairN) lengthSign = -lengthSign;\",\n        \"    FxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"    FxaaFloat2 posB;\",\n        \"    posB.x = posM.x;\",\n        \"    posB.y = posM.y;\",\n        \"    FxaaFloat2 offNP;\",\n        \"    offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;\",\n        \"    offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;\",\n        \"    if(!horzSpan) posB.x += lengthSign * 0.5;\",\n        \"    if( horzSpan) posB.y += lengthSign * 0.5;\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"    FxaaFloat2 posN;\",\n        \"    posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;\",\n        \"    posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;\",\n        \"    FxaaFloat2 posP;\",\n        \"    posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;\",\n        \"    posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;\",\n        \"    FxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;\",\n        \"    FxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));\",\n        \"    FxaaFloat subpixE = subpixC * subpixC;\",\n        \"    FxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"    if(!pairN) lumaNN = lumaSS;\",\n        \"    FxaaFloat gradientScaled = gradient * 1.0/4.0;\",\n        \"    FxaaFloat lumaMM = lumaM - lumaNN * 0.5;\",\n        \"    FxaaFloat subpixF = subpixD * subpixE;\",\n        \"    FxaaBool lumaMLTZero = lumaMM < 0.0;\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"    lumaEndN -= lumaNN * 0.5;\",\n        \"    lumaEndP -= lumaNN * 0.5;\",\n        \"    FxaaBool doneN = abs(lumaEndN) >= gradientScaled;\",\n        \"    FxaaBool doneP = abs(lumaEndP) >= gradientScaled;\",\n        \"    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;\",\n        \"    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;\",\n        \"    FxaaBool doneNP = (!doneN) || (!doneP);\",\n        \"    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;\",\n        \"    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"    if(doneNP) {\",\n        \"        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n        \"        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n        \"        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n        \"        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n        \"        doneN = abs(lumaEndN) >= gradientScaled;\",\n        \"        doneP = abs(lumaEndP) >= gradientScaled;\",\n        \"        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;\",\n        \"        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;\",\n        \"        doneNP = (!doneN) || (!doneP);\",\n        \"        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;\",\n        \"        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"        #if (FXAA_QUALITY_PS > 3)\",\n        \"        if(doneNP) {\",\n        \"            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n        \"            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n        \"            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n        \"            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n        \"            doneN = abs(lumaEndN) >= gradientScaled;\",\n        \"            doneP = abs(lumaEndP) >= gradientScaled;\",\n        \"            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;\",\n        \"            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;\",\n        \"            doneNP = (!doneN) || (!doneP);\",\n        \"            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;\",\n        \"            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"            #if (FXAA_QUALITY_PS > 4)\",\n        \"            if(doneNP) {\",\n        \"                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n        \"                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n        \"                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n        \"                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n        \"                doneN = abs(lumaEndN) >= gradientScaled;\",\n        \"                doneP = abs(lumaEndP) >= gradientScaled;\",\n        \"                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;\",\n        \"                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;\",\n        \"                doneNP = (!doneN) || (!doneP);\",\n        \"                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;\",\n        \"                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"                #if (FXAA_QUALITY_PS > 5)\",\n        \"                if(doneNP) {\",\n        \"                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n        \"                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n        \"                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n        \"                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n        \"                    doneN = abs(lumaEndN) >= gradientScaled;\",\n        \"                    doneP = abs(lumaEndP) >= gradientScaled;\",\n        \"                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;\",\n        \"                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;\",\n        \"                    doneNP = (!doneN) || (!doneP);\",\n        \"                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;\",\n        \"                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"                    #if (FXAA_QUALITY_PS > 6)\",\n        \"                    if(doneNP) {\",\n        \"                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n        \"                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n        \"                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n        \"                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n        \"                        doneN = abs(lumaEndN) >= gradientScaled;\",\n        \"                        doneP = abs(lumaEndP) >= gradientScaled;\",\n        \"                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;\",\n        \"                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;\",\n        \"                        doneNP = (!doneN) || (!doneP);\",\n        \"                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;\",\n        \"                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"                        #if (FXAA_QUALITY_PS > 7)\",\n        \"                        if(doneNP) {\",\n        \"                            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n        \"                            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n        \"                            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n        \"                            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n        \"                            doneN = abs(lumaEndN) >= gradientScaled;\",\n        \"                            doneP = abs(lumaEndP) >= gradientScaled;\",\n        \"                            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;\",\n        \"                            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;\",\n        \"                            doneNP = (!doneN) || (!doneP);\",\n        \"                            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;\",\n        \"                            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"    #if (FXAA_QUALITY_PS > 8)\",\n        \"    if(doneNP) {\",\n        \"        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n        \"        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n        \"        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n        \"        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n        \"        doneN = abs(lumaEndN) >= gradientScaled;\",\n        \"        doneP = abs(lumaEndP) >= gradientScaled;\",\n        \"        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;\",\n        \"        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;\",\n        \"        doneNP = (!doneN) || (!doneP);\",\n        \"        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;\",\n        \"        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"        #if (FXAA_QUALITY_PS > 9)\",\n        \"        if(doneNP) {\",\n        \"            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n        \"            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n        \"            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n        \"            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n        \"            doneN = abs(lumaEndN) >= gradientScaled;\",\n        \"            doneP = abs(lumaEndP) >= gradientScaled;\",\n        \"            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;\",\n        \"            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;\",\n        \"            doneNP = (!doneN) || (!doneP);\",\n        \"            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;\",\n        \"            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"            #if (FXAA_QUALITY_PS > 10)\",\n        \"            if(doneNP) {\",\n        \"                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n        \"                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n        \"                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n        \"                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n        \"                doneN = abs(lumaEndN) >= gradientScaled;\",\n        \"                doneP = abs(lumaEndP) >= gradientScaled;\",\n        \"                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;\",\n        \"                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;\",\n        \"                doneNP = (!doneN) || (!doneP);\",\n        \"                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;\",\n        \"                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"                #if (FXAA_QUALITY_PS > 11)\",\n        \"                if(doneNP) {\",\n        \"                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n        \"                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n        \"                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n        \"                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n        \"                    doneN = abs(lumaEndN) >= gradientScaled;\",\n        \"                    doneP = abs(lumaEndP) >= gradientScaled;\",\n        \"                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;\",\n        \"                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;\",\n        \"                    doneNP = (!doneN) || (!doneP);\",\n        \"                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;\",\n        \"                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"                    #if (FXAA_QUALITY_PS > 12)\",\n        \"                    if(doneNP) {\",\n        \"                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n        \"                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n        \"                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n        \"                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n        \"                        doneN = abs(lumaEndN) >= gradientScaled;\",\n        \"                        doneP = abs(lumaEndP) >= gradientScaled;\",\n        \"                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;\",\n        \"                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;\",\n        \"                        doneNP = (!doneN) || (!doneP);\",\n        \"                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;\",\n        \"                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"                    }\",\n        \"                    #endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"                }\",\n        \"                #endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"            }\",\n        \"            #endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"        }\",\n        \"        #endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"    }\",\n        \"    #endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"                        }\",\n        \"                        #endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"                    }\",\n        \"                    #endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"                }\",\n        \"                #endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"            }\",\n        \"            #endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"        }\",\n        \"        #endif\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"    }\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"    FxaaFloat dstN = posM.x - posN.x;\",\n        \"    FxaaFloat dstP = posP.x - posM.x;\",\n        \"    if(!horzSpan) dstN = posM.y - posN.y;\",\n        \"    if(!horzSpan) dstP = posP.y - posM.y;\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"    FxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;\",\n        \"    FxaaFloat spanLength = (dstP + dstN);\",\n        \"    FxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;\",\n        \"    FxaaFloat spanLengthRcp = 1.0/spanLength;\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"    FxaaBool directionN = dstN < dstP;\",\n        \"    FxaaFloat dst = min(dstN, dstP);\",\n        \"    FxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;\",\n        \"    FxaaFloat subpixG = subpixF * subpixF;\",\n        \"    FxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;\",\n        \"    FxaaFloat subpixH = subpixG * fxaaQualitySubpix;\",\n        \"/*--------------------------------------------------------------------------*/\",\n        \"    FxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;\",\n        \"    FxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);\",\n        \"    if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;\",\n        \"    if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;\",\n        \"    #if (FXAA_DISCARD == 1)\",\n        \"        return FxaaTexTop(tex, posM);\",\n        \"    #else\",\n        \"        return FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);\",\n        \"    #endif\",\n        \"}\",\n        \"/*==========================================================================*/\",\n        \"#endif\",\n        \"\",\n        \"void main() {\",\n        \"  gl_FragColor = FxaaPixelShader(\",\n        \"    vUv,\",\n        \"    vec4(0.0),\",\n        \"    tDiffuse,\",\n        \"    tDiffuse,\",\n        \"    tDiffuse,\",\n        \"    resolution,\",\n        \"    vec4(0.0),\",\n        \"    vec4(0.0),\",\n        \"    vec4(0.0),\",\n        \"    0.75,\",\n        \"    0.166,\",\n        \"    0.0833,\",\n        \"    0.0,\",\n        \"    0.0,\",\n        \"    0.0,\",\n        \"    vec4(0.0)\",\n        \"  );\",\n        \"\",\n        \"  // TODO avoid querying texture twice for same texel\",\n        \"  gl_FragColor.a = texture2D(tDiffuse, vUv).a;\",\n        \"}\"\n    ].join(\"\\n\")\n};\n\nexport { FXAAShader };\n"]},"metadata":{},"sourceType":"module"}