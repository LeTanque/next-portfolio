{"ast":null,"code":"var _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef, useState, useMemo } from \"react\";\nimport * as THREE from 'three';\nimport { Canvas, extend as extendThree, useFrame, useLoader, useResource, useThree } from \"react-three-fiber\"; // Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\n\nimport { EffectComposer } from './resources/postprocessing/EffectComposer';\nimport { RenderPass } from './resources/postprocessing/RenderPass';\nimport { GlitchPass } from './resources/postprocessing/GlitchPass';\nextendThree({\n  EffectComposer,\n  RenderPass,\n  GlitchPass\n}); // import TextLoop from \"../TextLoop\";\n// const DEFAULT_LAYER = 0;\n// const OCCLUSION_LAYER = 1;\n// The canvas houses this function, the scene. Scene is where the elements come together.\n\nconst Particle = () => {\n  const ref = useRef();\n  const texture = useMemo(() => new THREE.TextureLoader().load(url), [url]);\n  useFrame(({\n    clock\n  }) => {// ref.current.position.x = Math.cos(clock.getElapsedTime()) * 1.1\n    // ref.current.rotation.x = ref.current.rotation.y += 0.0008\n    // ref.current.rotation.x += 0.001\n    // ref.current.rotation.y += 0.004\n    // ref.current.rotation.z += 0.004\n  });\n  return __jsx(React.Fragment, null, __jsx(\"mesh\", {\n    ref: ref,\n    position: [0, 0, 2] // positions the object above the plane\n    ,\n    receiveShadow: true,\n    castShadow: true,\n    visible: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, __jsx(\"planeBufferGeometry\", {\n    attach: \"geometry\",\n    args: [300, 300],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), __jsx(\"meshLambertMaterial\", {\n    attach: \"material\",\n    color: \"#ccbbee\",\n    transparent: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, __jsx(\"primitive\", {\n    attach: \"map\",\n    object: texture,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }))));\n}; // Cast the lighting\n\n\nconst Lighting = () => {\n  return __jsx(React.Fragment, null, __jsx(\"directionalLight\", {\n    color: \"#ffffff\",\n    intensity: 0.5,\n    position: [-1, 0, 0] // distance={300}\n    // angle={1.05}\n    // penumbra={1}\n    // decay={2}\n    // castShadow\n    // shadow-mapSize-width={size.width} \n    // shadow-mapSize-height={size.height}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }));\n}; // Creates a fullscreen colored plane\n\n\nconst Plane = () => {\n  const plane = useRef();\n  return __jsx(\"mesh\", {\n    ref: plane,\n    receiveShadow: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, __jsx(\"planeGeometry\", {\n    attach: \"geometry\",\n    args: [20, 20, 32, 32],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }), __jsx(\"meshPhysicalMaterial\", {\n    attach: \"material\",\n    color: \"#000000\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }));\n}; // This is the canvas. It's the lowest level element in the three/webGl chain\n\n\nconst CanvasicalSmoke = () => {\n  const {\n    // gl,                           // WebGL renderer \n    // scene,                        // Default scene\n    // camera,                       // Default camera\n    size // Bounds of the view (which stretches 100% and auto-adjusts)\n\n  } = useThree();\n  return __jsx(React.Fragment, null, __jsx(Canvas, {\n    className: \"container block__three-container\",\n    camera: {\n      fov: 75,\n      aspect: size.width / size.height,\n      near: 1,\n      far: 10000\n    },\n    position: [0, 0, 1000],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, __jsx(Plane, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }), __jsx(Lighting, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }), __jsx(Particle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  })));\n};\n\nexport default CanvasicalSmoke; // // A light bar\n// const LightBar = () => {\n//     // const lightBar = useRef();\n//     return (\n//         <>\n//             <mesh \n//                 // ref={lightBar} \n//             >\n//                 <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n//                 <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n//             </mesh>\n//         </>\n//     )\n// }","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx"],"names":["extend","extendThree","GlitchPass","Particle","ref","useRef","texture","useMemo","THREE","useFrame","clock","Lighting","Plane","plane","CanvasicalSmoke","useThree","fov","aspect","size","near","far"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef, useState, useMemo } from \"react\";\nimport * as THREE from 'three';\nimport {\n    Canvas,\n    extend as extendThree,\n    useFrame,\n    useLoader,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\n\n// Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\nimport { EffectComposer } from './resources/postprocessing/EffectComposer';\nimport { RenderPass } from './resources/postprocessing/RenderPass';\nimport { GlitchPass } from './resources/postprocessing/GlitchPass';\nextendThree({ EffectComposer, RenderPass, GlitchPass });\n\n// import TextLoop from \"../TextLoop\";\n\n\n\n// const DEFAULT_LAYER = 0;\n// const OCCLUSION_LAYER = 1;\n\n\n\n\n// The canvas houses this function, the scene. Scene is where the elements come together.\nconst Particle = () => {\n    const ref = useRef();\n    const texture = useMemo(() => new THREE.TextureLoader().load(url), [url])\n\n    useFrame(({ clock }) => {\n        // ref.current.position.x = Math.cos(clock.getElapsedTime()) * 1.1\n        // ref.current.rotation.x = ref.current.rotation.y += 0.0008\n        // ref.current.rotation.x += 0.001\n        // ref.current.rotation.y += 0.004\n        // ref.current.rotation.z += 0.004\n    });\n    \n\n\n    return (\n        <>\n                <mesh \n                    ref={ref}\n                    position={[ 0, 0, 2 ]} // positions the object above the plane\n                    receiveShadow\n                    castShadow\n                    visible \n                >\n                    <planeBufferGeometry attach=\"geometry\" args={[300, 300]} />\n                    <meshLambertMaterial \n                        attach=\"material\" \n                        color=\"#ccbbee\"\n                        transparent\n                    >\n                        <primitive attach=\"map\" object={texture} />\n                    </ meshLambertMaterial>\n                </mesh>\n        </>\n    )\n}\n\n// Cast the lighting\nconst Lighting = () => {\n    \n    return (\n        <>\n            <directionalLight\n                color=\"#ffffff\"\n                intensity={0.5}\n                position={[ -1, 0, 0 ]} \n                // distance={300}\n                // angle={1.05}\n                // penumbra={1}\n                // decay={2}\n                // castShadow\n                // shadow-mapSize-width={size.width} \n                // shadow-mapSize-height={size.height}\n            />\n        </>\n    )\n}\n\n// Creates a fullscreen colored plane\nconst Plane = () => {\n    const plane = useRef();\n\n    return (\n        <mesh \n            ref={plane}\n            receiveShadow\n        >\n            <planeGeometry  attach=\"geometry\"  args={[ 20, 20, 32, 32 ]} />\n            <meshPhysicalMaterial  attach=\"material\"  color=\"#000000\"  />\n        </mesh>\n    )\n}\n\n// This is the canvas. It's the lowest level element in the three/webGl chain\nconst CanvasicalSmoke = () => {\n    const {\n        // gl,                           // WebGL renderer \n        // scene,                        // Default scene\n        // camera,                       // Default camera\n        size,                         // Bounds of the view (which stretches 100% and auto-adjusts)\n    } = useThree();\n\n    return (\n        <>\n            <Canvas\n                className=\"container block__three-container\" \n                camera={{ \n                    fov: 75, \n                    aspect: size.width / size.height,\n                    near: 1,\n                    far: 10000,\n                }} \n                position={[ 0, 0, 1000 ]}\n            >\n                <Plane />\n                <Lighting />\n                <Particle  />\n\n                {/* <LightBar /> */}\n                \n            </Canvas> \n           \n            {/* <TextLoop  /> */}\n\n        </>\n    );\n}\n\nexport default CanvasicalSmoke;\n\n\n\n\n\n\n\n\n// // A light bar\n// const LightBar = () => {\n//     // const lightBar = useRef();\n\n//     return (\n//         <>\n//             <mesh \n//                 // ref={lightBar} \n//             >\n//                 <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n//                 <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n//             </mesh>\n//         </>\n//     )\n// }\n"]},"metadata":{},"sourceType":"module"}