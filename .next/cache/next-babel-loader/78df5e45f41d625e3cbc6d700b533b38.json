{"ast":null,"code":"var _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/Canvasical.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport * as THREE from 'three';\nimport { Canvas, extend as extendThree, useFrame, useLoader, useResource, useThree } from \"react-three-fiber\"; // Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\n\nimport { EffectComposer } from './resources/postprocessing/EffectComposer';\nimport { RenderPass } from './resources/postprocessing/RenderPass';\nimport { GlitchPass } from './resources/postprocessing/GlitchPass';\nextendThree({\n  EffectComposer,\n  RenderPass,\n  GlitchPass\n}); // import TextLoop from \"../TextLoop\";\n// // Creates a fullscreen colored plane\n// const Background = ({ color }) => {\n//     const { viewport } = useThree();\n//     return (\n//         <mesh scale={[viewport.width, viewport.height, 1]}>\n//             <planeGeometry attach=\"geometry\" args={[1, 1]} />\n//             <meshPhysicalMaterial attach=\"material\" color={color}  depthTest={false} />\n//         </mesh>\n//     )\n// }\n// The canvas houses this function, the scene. Scene is where the elements come together.\n\nconst ObjectMeshTetra = () => {\n  const {\n    gl,\n    // WebGL renderer \n    scene,\n    // Default scene\n    camera,\n    // Default camera\n    size // Bounds of the view (which stretches 100% and auto-adjusts)\n\n  } = useThree();\n  const ref = useRef(); // const [geometryRef, geometry] = useResource();\n  // const [materialRef, material] = useResource();\n\n  useFrame(() => {\n    return ref.current.rotation.x = ref.current.rotation.y += 0.01;\n  });\n  return __jsx(React.Fragment, null, __jsx(\"group\", {\n    ref: ref,\n    scale: [1, 1, 1],\n    receiveShadow: true,\n    visible: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, __jsx(\"mesh\", {\n    userData: {\n      test: 'hello'\n    },\n    position: [1, 2, 3],\n    rotation: [0, 0, 0],\n    scale: [2.0, 2.0, 2.0],\n    receiveShadow: true // radius={100}\n    // onClick={e => console.log('click')}\n    // onPointerOver={e => console.log('hover')}\n    // onPointerOut={e => console.log('unhover')}\n    ,\n    visible: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, __jsx(\"tetrahedronGeometry\", {\n    attach: \"geometry\",\n    detail: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }), __jsx(\"meshPhongMaterial\", {\n    attach: \"material\",\n    color: \"#0077ff\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }))));\n};\n\nconst Lighting = () => {\n  return __jsx(React.Fragment, null, __jsx(\"ambientLight\", {\n    color: \"#ffffff\",\n    intensity: 0.1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }), __jsx(\"spotLight\", {\n    color: \"#ffffff\",\n    intensity: 4,\n    distance: 200,\n    angle: 1,\n    penumbra: 0,\n    decay: 2,\n    position: [15, 40, 35],\n    castShadow: true,\n    \"shadow-mapSize-width\": size.width,\n    \"shadow-mapSize-height\": size.height,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }));\n}; // This is the canvas. It's the lowest level element in the three/webGl chain\n\n\nconst Canvasical = () => {\n  return __jsx(React.Fragment, null, __jsx(Canvas, {\n    className: \"container block__three-container\" // style={{ backgroundColor: \"#ffffff\" }}\n    ,\n    style: {\n      background: 'radial-gradient(at 50% 70%, #200f20 40%, #090b1f 80%, #050523 100%)'\n    },\n    camera: {\n      fov: 75,\n      position: [0, 0, 15],\n      zoom: 1,\n      focus: 10\n    },\n    shadowMap: true // children                      // Either a function child (which receives state) or regular children\n    // gl                            // Props that go into the default webGL-renderer\n    // camera                        // Props that go into the default camera\n    // raycaster                     // Props that go into the default raycaster\n    // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n    // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n    // gl2 = false                   // Enables webgl2\n    // concurrent = false            // Enables React concurrent mode\n    // resize = undefined            // Resize config, see react-use-measure's options\n    // orthographic = false          // Creates an orthographic camera if true\n    // noEvents = false              // Switch off raytracing and event support\n    // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n    // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n    // updateDefaultCamera = true    // Adjusts default camera on size changes\n    // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n    // onPointerMissed \n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, __jsx(Lighting, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }), __jsx(ObjectMeshTetra, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  })));\n};\n\nexport default Canvasical;","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/Canvasical.jsx"],"names":["React","useCallback","useEffect","useRef","useState","THREE","Canvas","extend","extendThree","useFrame","useLoader","useResource","useThree","EffectComposer","RenderPass","GlitchPass","ObjectMeshTetra","gl","scene","camera","size","ref","current","rotation","x","y","test","Lighting","width","height","Canvasical","background","fov","position","zoom","focus"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport * as THREE from 'three';\nimport {\n    Canvas,\n    extend as extendThree,\n    useFrame,\n    useLoader,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\n\n// Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\nimport { EffectComposer } from './resources/postprocessing/EffectComposer';\nimport { RenderPass } from './resources/postprocessing/RenderPass';\nimport { GlitchPass } from './resources/postprocessing/GlitchPass';\nextendThree({ EffectComposer, RenderPass, GlitchPass });\n\n// import TextLoop from \"../TextLoop\";\n\n\n\n\n\n// // Creates a fullscreen colored plane\n// const Background = ({ color }) => {\n//     const { viewport } = useThree();\n\n//     return (\n//         <mesh scale={[viewport.width, viewport.height, 1]}>\n//             <planeGeometry attach=\"geometry\" args={[1, 1]} />\n//             <meshPhysicalMaterial attach=\"material\" color={color}  depthTest={false} />\n//         </mesh>\n//     )\n// }\n\n\n\n\n\n\n// The canvas houses this function, the scene. Scene is where the elements come together.\nconst ObjectMeshTetra = () => {\n    const {\n        gl,                           // WebGL renderer \n        scene,                        // Default scene\n        camera,                       // Default camera\n        size,                         // Bounds of the view (which stretches 100% and auto-adjusts)\n    } = useThree();\n    const ref = useRef();\n    // const [geometryRef, geometry] = useResource();\n    // const [materialRef, material] = useResource();\n    \n    useFrame(() => {\n        return ref.current.rotation.x = ref.current.rotation.y += 0.01\n    });\n\n    return (\n        <>\n            <group \n                ref={ref}\n                scale={[ 1,1,1 ]}\n                receiveShadow={true}\n                visible\n            >\n                {/* \n                <meshLambertMaterial \n                    ref={materialRef}\n                    color=\"#00aa33\"\n                    transparent={true}\n                    opacity={0.8}\n                    // map={smokeTexture}\n                />  */}\n                {/* <dodecahedronGeometry \n                    attach=\"geometry\" \n                    // args={[10000, 10000]} \n                    detail={1}\n                /> */}\n\n                <mesh \n                    userData={{ test: 'hello' }} \n                    position={[ 1, 2, 3 ]} \n                    rotation={[ 0, 0, 0 ]}\n                    scale={[ 2.0, 2.0, 2.0 ]}\n                    receiveShadow={true}\n                    // radius={100}\n                    // onClick={e => console.log('click')}\n                    // onPointerOver={e => console.log('hover')}\n                    // onPointerOut={e => console.log('unhover')}\n                    visible \n                >\n                    <tetrahedronGeometry \n                        attach=\"geometry\" \n                        detail={1}\n                    />\n                    <meshPhongMaterial \n                        attach=\"material\" \n                        color=\"#0077ff\"\n                    />\n                </mesh>\n            </group>\n        </>\n    )\n}\n\nconst Lighting = () => {\n    return (\n        <>\n            <ambientLight\n                color=\"#ffffff\"\n                intensity={0.1}\n            />\n            <spotLight\n                color=\"#ffffff\"\n                intensity={4}\n                distance={200}\n                angle={1}\n                penumbra={0}\n                decay={2}\n                position={[ 15, 40, 35 ]} \n                castShadow\n                shadow-mapSize-width={size.width} \n                shadow-mapSize-height={size.height}\n            />\n        </>\n    )\n}\n\n\n\n\n\n// This is the canvas. It's the lowest level element in the three/webGl chain\nconst Canvasical = () => {\n\n    return (\n        <>\n            <Canvas\n                className=\"container block__three-container\" \n                // style={{ backgroundColor: \"#ffffff\" }}\n                style={{ background: 'radial-gradient(at 50% 70%, #200f20 40%, #090b1f 80%, #050523 100%)' }}\n                camera={{ \n                    fov: 75, \n                    position: [ 0, 0, 15 ],\n                    zoom: 1,\n                    focus: 10,\n                }} \n                shadowMap\n                // children                      // Either a function child (which receives state) or regular children\n                // gl                            // Props that go into the default webGL-renderer\n                // camera                        // Props that go into the default camera\n                // raycaster                     // Props that go into the default raycaster\n                // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n                // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n                // gl2 = false                   // Enables webgl2\n                // concurrent = false            // Enables React concurrent mode\n                // resize = undefined            // Resize config, see react-use-measure's options\n                // orthographic = false          // Creates an orthographic camera if true\n                // noEvents = false              // Switch off raytracing and event support\n                // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n                // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n                // updateDefaultCamera = true    // Adjusts default camera on size changes\n                // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n                // onPointerMissed \n            >\n\n                <Lighting />\n\n                <ObjectMeshTetra  />\n\n            </Canvas> \n           \n            {/* <TextLoop  /> */}\n\n        </>\n    );\n}\n\nexport default Canvasical;\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}