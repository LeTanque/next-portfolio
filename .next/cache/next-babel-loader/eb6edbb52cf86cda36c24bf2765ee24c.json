{"ast":null,"code":"/**\n * @author mrdoob / http://mrdoob.com/\n */\nimport { Color } from '../../math/Color.js';\nimport { Matrix4 } from '../../math/Matrix4.js';\nimport { Vector2 } from '../../math/Vector2.js';\nimport { Vector3 } from '../../math/Vector3.js';\n\nfunction UniformsCache() {\n  var lights = {};\n  return {\n    get: function get(light) {\n      if (lights[light.id] !== undefined) {\n        return lights[light.id];\n      }\n\n      var uniforms;\n\n      switch (light.type) {\n        case 'DirectionalLight':\n          uniforms = {\n            direction: new Vector3(),\n            color: new Color(),\n            shadow: false,\n            shadowBias: 0,\n            shadowRadius: 1,\n            shadowMapSize: new Vector2()\n          };\n          break;\n\n        case 'SpotLight':\n          uniforms = {\n            position: new Vector3(),\n            direction: new Vector3(),\n            color: new Color(),\n            distance: 0,\n            coneCos: 0,\n            penumbraCos: 0,\n            decay: 0,\n            shadow: false,\n            shadowBias: 0,\n            shadowRadius: 1,\n            shadowMapSize: new Vector2()\n          };\n          break;\n\n        case 'PointLight':\n          uniforms = {\n            position: new Vector3(),\n            color: new Color(),\n            distance: 0,\n            decay: 0,\n            shadow: false,\n            shadowBias: 0,\n            shadowRadius: 1,\n            shadowMapSize: new Vector2(),\n            shadowCameraNear: 1,\n            shadowCameraFar: 1000\n          };\n          break;\n\n        case 'HemisphereLight':\n          uniforms = {\n            direction: new Vector3(),\n            skyColor: new Color(),\n            groundColor: new Color()\n          };\n          break;\n\n        case 'RectAreaLight':\n          uniforms = {\n            color: new Color(),\n            position: new Vector3(),\n            halfWidth: new Vector3(),\n            halfHeight: new Vector3() // TODO (abelnation): set RectAreaLight shadow uniforms\n\n          };\n          break;\n      }\n\n      lights[light.id] = uniforms;\n      return uniforms;\n    }\n  };\n}\n\nvar nextVersion = 0;\n\nfunction shadowCastingLightsFirst(lightA, lightB) {\n  return (lightB.castShadow ? 1 : 0) - (lightA.castShadow ? 1 : 0);\n}\n\nfunction WebGLLights() {\n  var cache = new UniformsCache();\n  var state = {\n    version: 0,\n    hash: {\n      directionalLength: -1,\n      pointLength: -1,\n      spotLength: -1,\n      rectAreaLength: -1,\n      hemiLength: -1,\n      numDirectionalShadows: -1,\n      numPointShadows: -1,\n      numSpotShadows: -1\n    },\n    ambient: [0, 0, 0],\n    probe: [],\n    directional: [],\n    directionalShadowMap: [],\n    directionalShadowMatrix: [],\n    spot: [],\n    spotShadowMap: [],\n    spotShadowMatrix: [],\n    rectArea: [],\n    point: [],\n    pointShadowMap: [],\n    pointShadowMatrix: [],\n    hemi: [],\n    numDirectionalShadows: -1,\n    numPointShadows: -1,\n    numSpotShadows: -1\n  };\n\n  for (var i = 0; i < 9; i++) {\n    state.probe.push(new Vector3());\n  }\n\n  var vector3 = new Vector3();\n  var matrix4 = new Matrix4();\n  var matrix42 = new Matrix4();\n\n  function setup(lights, shadows, camera) {\n    var r = 0,\n        g = 0,\n        b = 0;\n\n    for (var i = 0; i < 9; i++) {\n      state.probe[i].set(0, 0, 0);\n    }\n\n    var directionalLength = 0;\n    var pointLength = 0;\n    var spotLength = 0;\n    var rectAreaLength = 0;\n    var hemiLength = 0;\n    var numDirectionalShadows = 0;\n    var numPointShadows = 0;\n    var numSpotShadows = 0;\n    var viewMatrix = camera.matrixWorldInverse;\n    lights.sort(shadowCastingLightsFirst);\n\n    for (var i = 0, l = lights.length; i < l; i++) {\n      var light = lights[i];\n      var color = light.color;\n      var intensity = light.intensity;\n      var distance = light.distance;\n      var shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;\n\n      if (light.isAmbientLight) {\n        r += color.r * intensity;\n        g += color.g * intensity;\n        b += color.b * intensity;\n      } else if (light.isLightProbe) {\n        for (var j = 0; j < 9; j++) {\n          state.probe[j].addScaledVector(light.sh.coefficients[j], intensity);\n        }\n      } else if (light.isDirectionalLight) {\n        var uniforms = cache.get(light);\n        uniforms.color.copy(light.color).multiplyScalar(light.intensity);\n        uniforms.direction.setFromMatrixPosition(light.matrixWorld);\n        vector3.setFromMatrixPosition(light.target.matrixWorld);\n        uniforms.direction.sub(vector3);\n        uniforms.direction.transformDirection(viewMatrix);\n        uniforms.shadow = light.castShadow;\n\n        if (light.castShadow) {\n          var shadow = light.shadow;\n          uniforms.shadowBias = shadow.bias;\n          uniforms.shadowRadius = shadow.radius;\n          uniforms.shadowMapSize = shadow.mapSize;\n          state.directionalShadowMap[directionalLength] = shadowMap;\n          state.directionalShadowMatrix[directionalLength] = light.shadow.matrix;\n          numDirectionalShadows++;\n        }\n\n        state.directional[directionalLength] = uniforms;\n        directionalLength++;\n      } else if (light.isSpotLight) {\n        var uniforms = cache.get(light);\n        uniforms.position.setFromMatrixPosition(light.matrixWorld);\n        uniforms.position.applyMatrix4(viewMatrix);\n        uniforms.color.copy(color).multiplyScalar(intensity);\n        uniforms.distance = distance;\n        uniforms.direction.setFromMatrixPosition(light.matrixWorld);\n        vector3.setFromMatrixPosition(light.target.matrixWorld);\n        uniforms.direction.sub(vector3);\n        uniforms.direction.transformDirection(viewMatrix);\n        uniforms.coneCos = Math.cos(light.angle);\n        uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));\n        uniforms.decay = light.decay;\n        uniforms.shadow = light.castShadow;\n\n        if (light.castShadow) {\n          var shadow = light.shadow;\n          uniforms.shadowBias = shadow.bias;\n          uniforms.shadowRadius = shadow.radius;\n          uniforms.shadowMapSize = shadow.mapSize;\n          state.spotShadowMap[spotLength] = shadowMap;\n          state.spotShadowMatrix[spotLength] = light.shadow.matrix;\n          numSpotShadows++;\n        }\n\n        state.spot[spotLength] = uniforms;\n        spotLength++;\n      } else if (light.isRectAreaLight) {\n        var uniforms = cache.get(light); // (a) intensity is the total visible light emitted\n        //uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n        // (b) intensity is the brightness of the light\n\n        uniforms.color.copy(color).multiplyScalar(intensity);\n        uniforms.position.setFromMatrixPosition(light.matrixWorld);\n        uniforms.position.applyMatrix4(viewMatrix); // extract local rotation of light to derive width/height half vectors\n\n        matrix42.identity();\n        matrix4.copy(light.matrixWorld);\n        matrix4.premultiply(viewMatrix);\n        matrix42.extractRotation(matrix4);\n        uniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);\n        uniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);\n        uniforms.halfWidth.applyMatrix4(matrix42);\n        uniforms.halfHeight.applyMatrix4(matrix42); // TODO (abelnation): RectAreaLight distance?\n        // uniforms.distance = distance;\n\n        state.rectArea[rectAreaLength] = uniforms;\n        rectAreaLength++;\n      } else if (light.isPointLight) {\n        var uniforms = cache.get(light);\n        uniforms.position.setFromMatrixPosition(light.matrixWorld);\n        uniforms.position.applyMatrix4(viewMatrix);\n        uniforms.color.copy(light.color).multiplyScalar(light.intensity);\n        uniforms.distance = light.distance;\n        uniforms.decay = light.decay;\n        uniforms.shadow = light.castShadow;\n\n        if (light.castShadow) {\n          var shadow = light.shadow;\n          uniforms.shadowBias = shadow.bias;\n          uniforms.shadowRadius = shadow.radius;\n          uniforms.shadowMapSize = shadow.mapSize;\n          uniforms.shadowCameraNear = shadow.camera.near;\n          uniforms.shadowCameraFar = shadow.camera.far;\n          state.pointShadowMap[pointLength] = shadowMap;\n          state.pointShadowMatrix[pointLength] = light.shadow.matrix;\n          numPointShadows++;\n        }\n\n        state.point[pointLength] = uniforms;\n        pointLength++;\n      } else if (light.isHemisphereLight) {\n        var uniforms = cache.get(light);\n        uniforms.direction.setFromMatrixPosition(light.matrixWorld);\n        uniforms.direction.transformDirection(viewMatrix);\n        uniforms.direction.normalize();\n        uniforms.skyColor.copy(light.color).multiplyScalar(intensity);\n        uniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity);\n        state.hemi[hemiLength] = uniforms;\n        hemiLength++;\n      }\n    }\n\n    state.ambient[0] = r;\n    state.ambient[1] = g;\n    state.ambient[2] = b;\n    var hash = state.hash;\n\n    if (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows) {\n      state.directional.length = directionalLength;\n      state.spot.length = spotLength;\n      state.rectArea.length = rectAreaLength;\n      state.point.length = pointLength;\n      state.hemi.length = hemiLength;\n      state.directionalShadowMap.length = numDirectionalShadows;\n      state.pointShadowMap.length = numPointShadows;\n      state.spotShadowMap.length = numSpotShadows;\n      state.directionalShadowMatrix.length = numDirectionalShadows;\n      state.pointShadowMatrix.length = numPointShadows;\n      state.spotShadowMatrix.length = numSpotShadows;\n      hash.directionalLength = directionalLength;\n      hash.pointLength = pointLength;\n      hash.spotLength = spotLength;\n      hash.rectAreaLength = rectAreaLength;\n      hash.hemiLength = hemiLength;\n      hash.numDirectionalShadows = numDirectionalShadows;\n      hash.numPointShadows = numPointShadows;\n      hash.numSpotShadows = numSpotShadows;\n      state.version = nextVersion++;\n    }\n  }\n\n  return {\n    setup: setup,\n    state: state\n  };\n}\n\nexport { WebGLLights };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/renderers/webgl/WebGLLights.js"],"names":["Color","Matrix4","Vector2","Vector3","UniformsCache","lights","get","light","id","undefined","uniforms","type","direction","color","shadow","shadowBias","shadowRadius","shadowMapSize","position","distance","coneCos","penumbraCos","decay","shadowCameraNear","shadowCameraFar","skyColor","groundColor","halfWidth","halfHeight","nextVersion","shadowCastingLightsFirst","lightA","lightB","castShadow","WebGLLights","cache","state","version","hash","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","numDirectionalShadows","numPointShadows","numSpotShadows","ambient","probe","directional","directionalShadowMap","directionalShadowMatrix","spot","spotShadowMap","spotShadowMatrix","rectArea","point","pointShadowMap","pointShadowMatrix","hemi","i","push","vector3","matrix4","matrix42","setup","shadows","camera","r","g","b","set","viewMatrix","matrixWorldInverse","sort","l","length","intensity","shadowMap","map","texture","isAmbientLight","isLightProbe","j","addScaledVector","sh","coefficients","isDirectionalLight","copy","multiplyScalar","setFromMatrixPosition","matrixWorld","target","sub","transformDirection","bias","radius","mapSize","matrix","isSpotLight","applyMatrix4","Math","cos","angle","penumbra","isRectAreaLight","identity","premultiply","extractRotation","width","height","isPointLight","near","far","isHemisphereLight","normalize"],"mappings":"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","sourcesContent":["/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nimport { Color } from '../../math/Color.js';\nimport { Matrix4 } from '../../math/Matrix4.js';\nimport { Vector2 } from '../../math/Vector2.js';\nimport { Vector3 } from '../../math/Vector3.js';\n\nfunction UniformsCache() {\n\n\tvar lights = {};\n\n\treturn {\n\n\t\tget: function ( light ) {\n\n\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\treturn lights[ light.id ];\n\n\t\t\t}\n\n\t\t\tvar uniforms;\n\n\t\t\tswitch ( light.type ) {\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tcolor: new Color(),\n\n\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\treturn uniforms;\n\n\t\t}\n\n\t};\n\n}\n\nvar nextVersion = 0;\n\nfunction shadowCastingLightsFirst( lightA, lightB ) {\n\n\treturn ( lightB.castShadow ? 1 : 0 ) - ( lightA.castShadow ? 1 : 0 );\n\n}\n\nfunction WebGLLights() {\n\n\tvar cache = new UniformsCache();\n\n\tvar state = {\n\n\t\tversion: 0,\n\n\t\thash: {\n\t\t\tdirectionalLength: - 1,\n\t\t\tpointLength: - 1,\n\t\t\tspotLength: - 1,\n\t\t\trectAreaLength: - 1,\n\t\t\themiLength: - 1,\n\n\t\t\tnumDirectionalShadows: - 1,\n\t\t\tnumPointShadows: - 1,\n\t\t\tnumSpotShadows: - 1,\n\t\t},\n\n\t\tambient: [ 0, 0, 0 ],\n\t\tprobe: [],\n\t\tdirectional: [],\n\t\tdirectionalShadowMap: [],\n\t\tdirectionalShadowMatrix: [],\n\t\tspot: [],\n\t\tspotShadowMap: [],\n\t\tspotShadowMatrix: [],\n\t\trectArea: [],\n\t\tpoint: [],\n\t\tpointShadowMap: [],\n\t\tpointShadowMatrix: [],\n\t\themi: [],\n\n\t\tnumDirectionalShadows: - 1,\n\t\tnumPointShadows: - 1,\n\t\tnumSpotShadows: - 1\n\n\t};\n\n\tfor ( var i = 0; i < 9; i ++ ) state.probe.push( new Vector3() );\n\n\tvar vector3 = new Vector3();\n\tvar matrix4 = new Matrix4();\n\tvar matrix42 = new Matrix4();\n\n\tfunction setup( lights, shadows, camera ) {\n\n\t\tvar r = 0, g = 0, b = 0;\n\n\t\tfor ( var i = 0; i < 9; i ++ ) state.probe[ i ].set( 0, 0, 0 );\n\n\t\tvar directionalLength = 0;\n\t\tvar pointLength = 0;\n\t\tvar spotLength = 0;\n\t\tvar rectAreaLength = 0;\n\t\tvar hemiLength = 0;\n\n\t\tvar numDirectionalShadows = 0;\n\t\tvar numPointShadows = 0;\n\t\tvar numSpotShadows = 0;\n\n\t\tvar viewMatrix = camera.matrixWorldInverse;\n\n\t\tlights.sort( shadowCastingLightsFirst );\n\n\t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\tvar light = lights[ i ];\n\n\t\t\tvar color = light.color;\n\t\t\tvar intensity = light.intensity;\n\t\t\tvar distance = light.distance;\n\n\t\t\tvar shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n\t\t\tif ( light.isAmbientLight ) {\n\n\t\t\t\tr += color.r * intensity;\n\t\t\t\tg += color.g * intensity;\n\t\t\t\tb += color.b * intensity;\n\n\t\t\t} else if ( light.isLightProbe ) {\n\n\t\t\t\tfor ( var j = 0; j < 9; j ++ ) {\n\n\t\t\t\t\tstate.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );\n\n\t\t\t\t}\n\n\t\t\t} else if ( light.isDirectionalLight ) {\n\n\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\tstate.directionalShadowMap[ directionalLength ] = shadowMap;\n\t\t\t\t\tstate.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\n\t\t\t\t\tnumDirectionalShadows ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.directional[ directionalLength ] = uniforms;\n\n\t\t\t\tdirectionalLength ++;\n\n\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\t\t\t\tuniforms.distance = distance;\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\tstate.spotShadowMap[ spotLength ] = shadowMap;\n\t\t\t\t\tstate.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n\n\t\t\t\t\tnumSpotShadows ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.spot[ spotLength ] = uniforms;\n\n\t\t\t\tspotLength ++;\n\n\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t// (a) intensity is the total visible light emitted\n\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n\n\t\t\t\t// (b) intensity is the brightness of the light\n\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t// extract local rotation of light to derive width/height half vectors\n\t\t\t\tmatrix42.identity();\n\t\t\t\tmatrix4.copy( light.matrixWorld );\n\t\t\t\tmatrix4.premultiply( viewMatrix );\n\t\t\t\tmatrix42.extractRotation( matrix4 );\n\n\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\tuniforms.halfWidth.applyMatrix4( matrix42 );\n\t\t\t\tuniforms.halfHeight.applyMatrix4( matrix42 );\n\n\t\t\t\t// TODO (abelnation): RectAreaLight distance?\n\t\t\t\t// uniforms.distance = distance;\n\n\t\t\t\tstate.rectArea[ rectAreaLength ] = uniforms;\n\n\t\t\t\trectAreaLength ++;\n\n\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\tuniforms.shadowCameraNear = shadow.camera.near;\n\t\t\t\t\tuniforms.shadowCameraFar = shadow.camera.far;\n\n\t\t\t\t\tstate.pointShadowMap[ pointLength ] = shadowMap;\n\t\t\t\t\tstate.pointShadowMatrix[ pointLength ] = light.shadow.matrix;\n\n\t\t\t\t\tnumPointShadows ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.point[ pointLength ] = uniforms;\n\n\t\t\t\tpointLength ++;\n\n\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\t\t\tuniforms.direction.normalize();\n\n\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\n\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\n\t\t\t\tstate.hemi[ hemiLength ] = uniforms;\n\n\t\t\t\themiLength ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.ambient[ 0 ] = r;\n\t\tstate.ambient[ 1 ] = g;\n\t\tstate.ambient[ 2 ] = b;\n\n\t\tvar hash = state.hash;\n\n\t\tif ( hash.directionalLength !== directionalLength ||\n\t\t\thash.pointLength !== pointLength ||\n\t\t\thash.spotLength !== spotLength ||\n\t\t\thash.rectAreaLength !== rectAreaLength ||\n\t\t\thash.hemiLength !== hemiLength ||\n\t\t\thash.numDirectionalShadows !== numDirectionalShadows ||\n\t\t\thash.numPointShadows !== numPointShadows ||\n\t\t\thash.numSpotShadows !== numSpotShadows ) {\n\n\t\t\tstate.directional.length = directionalLength;\n\t\t\tstate.spot.length = spotLength;\n\t\t\tstate.rectArea.length = rectAreaLength;\n\t\t\tstate.point.length = pointLength;\n\t\t\tstate.hemi.length = hemiLength;\n\n\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\n\t\t\tstate.pointShadowMap.length = numPointShadows;\n\t\t\tstate.spotShadowMap.length = numSpotShadows;\n\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\n\t\t\tstate.pointShadowMatrix.length = numPointShadows;\n\t\t\tstate.spotShadowMatrix.length = numSpotShadows;\n\n\t\t\thash.directionalLength = directionalLength;\n\t\t\thash.pointLength = pointLength;\n\t\t\thash.spotLength = spotLength;\n\t\t\thash.rectAreaLength = rectAreaLength;\n\t\t\thash.hemiLength = hemiLength;\n\n\t\t\thash.numDirectionalShadows = numDirectionalShadows;\n\t\t\thash.numPointShadows = numPointShadows;\n\t\t\thash.numSpotShadows = numSpotShadows;\n\n\t\t\tstate.version = nextVersion ++;\n\n\t\t}\n\n\t}\n\n\treturn {\n\t\tsetup: setup,\n\t\tstate: state\n\t};\n\n}\n\n\nexport { WebGLLights };\n"]},"metadata":{},"sourceType":"module"}