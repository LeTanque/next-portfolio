{"ast":null,"code":"import _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\nimport { Geometry } from '../core/Geometry.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js'; // PlaneGeometry\n\nfunction PlaneGeometry(width, height, widthSegments, heightSegments) {\n  Geometry.call(this);\n  this.type = 'PlaneGeometry';\n  this.parameters = {\n    width: width,\n    height: height,\n    widthSegments: widthSegments,\n    heightSegments: heightSegments\n  };\n  this.fromBufferGeometry(new PlaneBufferGeometry(width, height, widthSegments, heightSegments));\n  this.mergeVertices();\n}\n\nPlaneGeometry.prototype = _Object$create(Geometry.prototype);\nPlaneGeometry.prototype.constructor = PlaneGeometry; // PlaneBufferGeometry\n\nfunction PlaneBufferGeometry(width, height, widthSegments, heightSegments) {\n  BufferGeometry.call(this);\n  this.type = 'PlaneBufferGeometry';\n  this.parameters = {\n    width: width,\n    height: height,\n    widthSegments: widthSegments,\n    heightSegments: heightSegments\n  };\n  width = width || 1;\n  height = height || 1;\n  var width_half = width / 2;\n  var height_half = height / 2;\n  var gridX = Math.floor(widthSegments) || 1;\n  var gridY = Math.floor(heightSegments) || 1;\n  var gridX1 = gridX + 1;\n  var gridY1 = gridY + 1;\n  var segment_width = width / gridX;\n  var segment_height = height / gridY;\n  var ix, iy; // buffers\n\n  var indices = [];\n  var vertices = [];\n  var normals = [];\n  var uvs = []; // generate vertices, normals and uvs\n\n  for (iy = 0; iy < gridY1; iy++) {\n    var y = iy * segment_height - height_half;\n\n    for (ix = 0; ix < gridX1; ix++) {\n      var x = ix * segment_width - width_half;\n      vertices.push(x, -y, 0);\n      normals.push(0, 0, 1);\n      uvs.push(ix / gridX);\n      uvs.push(1 - iy / gridY);\n    }\n  } // indices\n\n\n  for (iy = 0; iy < gridY; iy++) {\n    for (ix = 0; ix < gridX; ix++) {\n      var a = ix + gridX1 * iy;\n      var b = ix + gridX1 * (iy + 1);\n      var c = ix + 1 + gridX1 * (iy + 1);\n      var d = ix + 1 + gridX1 * iy; // faces\n\n      indices.push(a, b, d);\n      indices.push(b, c, d);\n    }\n  } // build geometry\n\n\n  this.setIndex(indices);\n  this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n  this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n  this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n}\n\nPlaneBufferGeometry.prototype = _Object$create(BufferGeometry.prototype);\nPlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\nexport { PlaneGeometry, PlaneBufferGeometry };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/geometries/PlaneGeometry.js"],"names":["Geometry","BufferGeometry","Float32BufferAttribute","PlaneGeometry","width","height","widthSegments","heightSegments","call","type","parameters","fromBufferGeometry","PlaneBufferGeometry","mergeVertices","prototype","constructor","width_half","height_half","gridX","Math","floor","gridY","gridX1","gridY1","segment_width","segment_height","ix","iy","indices","vertices","normals","uvs","y","x","push","a","b","c","d","setIndex","setAttribute"],"mappings":"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","sourcesContent":["/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nimport { Geometry } from '../core/Geometry.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\n\n// PlaneGeometry\n\nfunction PlaneGeometry( width, height, widthSegments, heightSegments ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'PlaneGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments\n\t};\n\n\tthis.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\tthis.mergeVertices();\n\n}\n\nPlaneGeometry.prototype = Object.create( Geometry.prototype );\nPlaneGeometry.prototype.constructor = PlaneGeometry;\n\n// PlaneBufferGeometry\n\nfunction PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'PlaneBufferGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments\n\t};\n\n\twidth = width || 1;\n\theight = height || 1;\n\n\tvar width_half = width / 2;\n\tvar height_half = height / 2;\n\n\tvar gridX = Math.floor( widthSegments ) || 1;\n\tvar gridY = Math.floor( heightSegments ) || 1;\n\n\tvar gridX1 = gridX + 1;\n\tvar gridY1 = gridY + 1;\n\n\tvar segment_width = width / gridX;\n\tvar segment_height = height / gridY;\n\n\tvar ix, iy;\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// generate vertices, normals and uvs\n\n\tfor ( iy = 0; iy < gridY1; iy ++ ) {\n\n\t\tvar y = iy * segment_height - height_half;\n\n\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\tvar x = ix * segment_width - width_half;\n\n\t\t\tvertices.push( x, - y, 0 );\n\n\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\tuvs.push( ix / gridX );\n\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t}\n\n\t}\n\n\t// indices\n\n\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\tvar a = ix + gridX1 * iy;\n\t\t\tvar b = ix + gridX1 * ( iy + 1 );\n\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t// faces\n\n\t\t\tindices.push( a, b, d );\n\t\t\tindices.push( b, c, d );\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n}\n\nPlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nPlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\n\n\nexport { PlaneGeometry, PlaneBufferGeometry };\n"]},"metadata":{},"sourceType":"module"}