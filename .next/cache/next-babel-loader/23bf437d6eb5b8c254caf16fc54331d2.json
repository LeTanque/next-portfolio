{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef, useState, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { Canvas, extend as extendThree, useFrame // useLoader,\n, useResource, useThree } from \"react-three-fiber\";\nimport { useSpring, a } from 'react-spring/three'; // Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\n\nimport { EffectComposer } from \"./resources/postprocessing/EffectComposer\";\nimport { RenderPass } from \"./resources/postprocessing/RenderPass\";\nimport { GlitchPass } from \"./resources/postprocessing/GlitchPass\";\nextendThree({\n  EffectComposer: EffectComposer,\n  RenderPass: RenderPass,\n  GlitchPass: GlitchPass\n}); // import TextLoop from \"../TextLoop\";\n// Cast the lighting\n\nvar Lighting = function Lighting() {\n  var _useThree = useThree(),\n      mouse = _useThree.mouse;\n\n  var light = useRef();\n  useFrame(function () {\n    light.current.position.set(mouse.x / 20, -mouse.y / 20, 0);\n  });\n  return __jsx(React.Fragment, null, __jsx(\"directionalLight\", {\n    position: [-2, 0, 30],\n    intensity: 0.5,\n    color: \"#ffffff\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), __jsx(\"pointLight\", {\n    ref: light,\n    distance: 50,\n    intensity: 1.5,\n    color: \"#ffffff\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }));\n}; // This renders text via canvas and projects it as a sprite\n\n\nvar Text = function Text(_ref) {\n  var children = _ref.children,\n      position = _ref.position,\n      opacity = _ref.opacity,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'white' : _ref$color,\n      _ref$fontSize = _ref.fontSize,\n      fontSize = _ref$fontSize === void 0 ? 410 : _ref$fontSize;\n\n  var _useThree2 = useThree(),\n      _useThree2$size = _useThree2.size,\n      width = _useThree2$size.width,\n      height = _useThree2$size.height,\n      _useThree2$viewport = _useThree2.viewport,\n      viewportWidth = _useThree2$viewport.width,\n      viewportHeight = _useThree2$viewport.height;\n\n  var scale = viewportWidth > viewportHeight ? viewportWidth : viewportHeight;\n  var canvas = useMemo(function () {\n    var canvas = document.createElement('canvas');\n    canvas.width = canvas.height = 2048;\n    var context = canvas.getContext('2d');\n    context.font = \"bold \".concat(fontSize, \"px -apple-system, BlinkMacSystemFont, avenir next, avenir, helvetica neue, helvetica, ubuntu, roboto, noto, segoe ui, arial, sans-serif\");\n    context.textAlign = 'center';\n    context.textBaseline = 'middle';\n    context.fillStyle = color;\n    context.fillText(children, 1024, 1024 - 410 / 2);\n    return canvas;\n  }, [children, width, height]);\n  return __jsx(a.sprite, {\n    scale: [scale, scale, 1],\n    position: position,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, __jsx(a.spriteMaterial, {\n    attach: \"material\",\n    transparent: true,\n    opacity: opacity,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, __jsx(\"canvasTexture\", {\n    attach: \"map\",\n    image: canvas,\n    premultiplyAlpha: true,\n    onUpdate: function onUpdate(s) {\n      return s.needsUpdate = true;\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  })));\n}; // The canvas houses this function, the scene. Scene is where the elements come together.\n\n\nvar SmokePuff = function SmokePuff(_ref2) {\n  var geometry = _ref2.geometry,\n      material = _ref2.material;\n  var smokePuffRef = useRef(); // let tenToHundred = Math.random() * 100; // 10 - 99.99\n  // let speed = 0.01 + Math.random() / 200; // 0.1 - 0.19\n  // const cosWave = (Math.cos(tenToHundred) / 3) - 1.1;  // a cosign wave.  ~ 0.5 - 1.5\n\n  var factor = 1 + Math.random() * 2; // ~ 1-3\n\n  var xFactor = -100 + Math.random() * 200; // -100 - 100\n\n  var yFactor = -100 + Math.random() * 200; // -100 - 100\n\n  var zFactor = 10 + Math.random() * 10; //  10 - 20\n\n  var getRandomArbitrary = function getRandomArbitrary(min, max) {\n    return Math.random() * (max - min) + min;\n  };\n\n  var randomFactor = getRandomArbitrary(1.1, 2);\n  useFrame(function (_ref3) {\n    var clock = _ref3.clock; // tenToHundred += speed; // tenToHundred = tenToHundred + speed, plus it sets a unique new version of tenToHundred.\n    // let delta = clock.getDelta();  // Change in clock. Something like 0.0001 - 0.0099\n\n    var slowRotation = clock.elapsedTime * 0.017 * randomFactor + xFactor; // starts at ~0.0001 + xFactor and goes slow\n\n    var slowGrowth = Math.tanh(clock.elapsedTime / 18) + 3;\n    smokePuffRef.current.scale.set(slowGrowth, slowGrowth, 2);\n    smokePuffRef.current.rotation.z = slowRotation;\n    smokePuffRef.current.position.set(xFactor * factor, yFactor * factor, zFactor // xFactor + Math.cos((tenToHundred/ 30) * factor) + (Math.sin(tenToHundred* 1) * factor) / 10,\n    // yFactor + Math.sin((tenToHundred/ 20) * factor) + (Math.cos(tenToHundred* 2) * factor) / 10,\n    // zFactor + Math.cos((tenToHundred/ 10) * factor) + (Math.sin(tenToHundred* 3) * factor) / 20\n    );\n  });\n  return __jsx(\"mesh\", {\n    ref: smokePuffRef,\n    material: material,\n    geometry: geometry,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  });\n};\n\nvar GenerateSmoke = function GenerateSmoke() {\n  var _useResource = useResource(),\n      _useResource2 = _slicedToArray(_useResource, 2),\n      geometryRef = _useResource2[0],\n      geometry = _useResource2[1];\n\n  var _useResource3 = useResource(),\n      _useResource4 = _slicedToArray(_useResource3, 2),\n      materialRef = _useResource4[0],\n      material = _useResource4[1];\n\n  var url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n  var texture = useMemo(function () {\n    return new THREE.TextureLoader().load(url);\n  }, [url]);\n  return __jsx(React.Fragment, null, __jsx(Lighting, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }), __jsx(\"planeGeometry\", {\n    ref: geometryRef,\n    attach: \"geometry\",\n    args: [200, 200],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }), __jsx(\"meshLambertMaterial\", {\n    ref: materialRef,\n    attach: \"material\",\n    color: \"#ccbbee\",\n    transparent: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, __jsx(\"primitive\", {\n    attach: \"map\",\n    object: texture,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  })), geometry && new Array(33).fill().map(function (_, index) {\n    return __jsx(SmokePuff, {\n      key: index,\n      material: material,\n      geometry: geometry,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    });\n  }));\n}; // This is the canvas. It's the lowest level element in the three/webGl chain\n\n\nvar CanvasicalSmoke = function CanvasicalSmoke() {\n  var _useThree3 = useThree(),\n      size = _useThree3.size;\n\n  var _useSpring = useSpring(function () {\n    return {\n      top: 0,\n      mouse: [0, 0]\n    };\n  }),\n      _useSpring2 = _slicedToArray(_useSpring, 2),\n      _useSpring2$ = _useSpring2[0],\n      top = _useSpring2$.top,\n      mouse = _useSpring2$.mouse,\n      set = _useSpring2[1];\n\n  var scrollMax = size.height * 4.5; // const particleCount = 3;\n  // const particleArray = [{ id: 0, x: 0, y: 0, z: 2 }];\n  // useEffect(() => {\n  //     if (particleArray.length === particleCount) {\n  //         return null;\n  //     } else {\n  //         for (let i = 0; i <= particleCount; i++) {\n  //             particleArray.push({\n  //                 id: particleArray[i].id + 1,\n  //                 x: particleArray[i].x + 1,\n  //                 y: particleArray[i].y + 1,\n  //                 z: 2\n  //             });\n  //         }\n  //     }\n  // }, [particleArray]);\n\n  return __jsx(React.Fragment, null, __jsx(Canvas, {\n    className: \"container block__three-container\",\n    camera: {\n      fov: 75,\n      aspect: 0.5,\n      near: 1,\n      far: 10000,\n      position: [0, 0, 600]\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, __jsx(GenerateSmoke, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }), __jsx(Text, {\n    opacity: top.interpolate([0, 200], [1, 0]),\n    position: top.interpolate(function (top) {\n      return [0, -1 + top / 200, 0];\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, \"lorem\"), __jsx(Text, {\n    position: top.interpolate(function (top) {\n      return [0, -20 + top * 10 / scrollMax * 2, 0];\n    }),\n    color: \"black\",\n    fontSize: 150,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }, \"Ipsum\")));\n};\n\nexport default CanvasicalSmoke; // // Creates a fullscreen colored plane\n// const Plane = () => {\n//     return (\n//         <mesh >\n//             <planeGeometry  attach=\"geometry\"  args={[ 32, 32, 32, 32 ]} />\n//             <meshPhysicalMaterial  attach=\"material\"  color=\"#ffffff\"  />\n//         </mesh>\n//     )\n// }\n// // A light bar\n// const LightBar = () => {\n//     // const lightBar = useRef();\n//     return (\n//         <>\n//             <mesh\n//                 // ref={lightBar}\n//             >\n//                 <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n//                 <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n//             </mesh>\n//         </>\n//     )\n// }","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx"],"names":["extend","extendThree","EffectComposer","RenderPass","GlitchPass","Lighting","mouse","useThree","light","useRef","useFrame","Text","children","position","opacity","color","fontSize","width","height","viewportWidth","viewportHeight","scale","canvas","useMemo","document","context","s","SmokePuff","geometry","material","smokePuffRef","factor","Math","xFactor","yFactor","zFactor","getRandomArbitrary","max","randomFactor","clock","slowRotation","slowGrowth","GenerateSmoke","geometryRef","useResource","materialRef","url","texture","THREE","CanvasicalSmoke","size","top","set","useSpring","scrollMax","fov","aspect","near","far"],"mappings":"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","sourcesContent":["import React, {\n    useCallback,\n    useEffect,\n    useRef,\n    useState,\n    useMemo\n} from \"react\";\nimport * as THREE from \"three\";\nimport {\n    Canvas,\n    extend as extendThree,\n    useFrame,\n    // useLoader,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\nimport { useSpring, a } from 'react-spring/three';\n\n// Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\nimport { EffectComposer } from \"./resources/postprocessing/EffectComposer\";\nimport { RenderPass } from \"./resources/postprocessing/RenderPass\";\nimport { GlitchPass } from \"./resources/postprocessing/GlitchPass\";\nextendThree({ EffectComposer, RenderPass, GlitchPass });\n\n// import TextLoop from \"../TextLoop\";\n\n\n// Cast the lighting\nconst Lighting = () => {\n    const { mouse } = useThree();\n    const light = useRef();\n    \n    useFrame(() => {\n        light.current.position.set( mouse.x / 20, -mouse.y / 20, 0 )\n    });\n\n    return (\n        <>\n            <directionalLight\n                position={[ -2, 0, 30 ]}  intensity={0.5}  color=\"#ffffff\" \n            />\n            <pointLight \n                ref={light} distance={50} intensity={1.5} color=\"#ffffff\" \n            />\n        </>\n    );\n};\n\n// This renders text via canvas and projects it as a sprite\nconst Text = ({ children, position, opacity, color = 'white', fontSize = 410 }) => {\n    const {\n        size: { width, height },\n        viewport: { width: viewportWidth, height: viewportHeight }\n    } = useThree()\n\n    const scale = viewportWidth > viewportHeight ? viewportWidth : viewportHeight\n    const canvas = useMemo(() => {\n        const canvas = document.createElement('canvas')\n        canvas.width = canvas.height = 2048\n        const context = canvas.getContext('2d')\n        context.font = `bold ${fontSize}px -apple-system, BlinkMacSystemFont, avenir next, avenir, helvetica neue, helvetica, ubuntu, roboto, noto, segoe ui, arial, sans-serif`\n        context.textAlign = 'center'\n        context.textBaseline = 'middle'\n        context.fillStyle = color\n        context.fillText(children, 1024, 1024 - 410 / 2)\n        return canvas\n    }, [children, width, height])\n\n    return (\n        <a.sprite scale={[scale, scale, 1]} position={position}>\n            <a.spriteMaterial attach=\"material\" transparent opacity={opacity}>\n                <canvasTexture attach=\"map\" image={canvas} premultiplyAlpha onUpdate={s => (s.needsUpdate = true)} />\n            </a.spriteMaterial>\n        </a.sprite>\n    )\n}\n\n// The canvas houses this function, the scene. Scene is where the elements come together.\nconst SmokePuff = ({ geometry, material }) => {\n    let smokePuffRef = useRef();\n    // let tenToHundred = Math.random() * 100; // 10 - 99.99\n    // let speed = 0.01 + Math.random() / 200; // 0.1 - 0.19\n    // const cosWave = (Math.cos(tenToHundred) / 3) - 1.1;  // a cosign wave.  ~ 0.5 - 1.5\n    let factor = 1 + Math.random() * 2;  // ~ 1-3\n    let xFactor = -100 + Math.random() * 200;  // -100 - 100\n    let yFactor = -100 + Math.random() * 200;  // -100 - 100\n    let zFactor = 10 + Math.random() * 10;  //  10 - 20\n    \n    const getRandomArbitrary = (min, max) => Math.random() * (max - min) + min;\n    let randomFactor = getRandomArbitrary(1.1, 2);\n    \n    useFrame(({ clock }) => {\n        // tenToHundred += speed; // tenToHundred = tenToHundred + speed, plus it sets a unique new version of tenToHundred.\n        // let delta = clock.getDelta();  // Change in clock. Something like 0.0001 - 0.0099\n        let slowRotation = ((clock.elapsedTime * (0.017)) * randomFactor) + xFactor;  // starts at ~0.0001 + xFactor and goes slow\n        let slowGrowth = (Math.tanh(clock.elapsedTime / 18) + 3);\n\n        smokePuffRef.current.scale.set(slowGrowth, slowGrowth, 2);\n        smokePuffRef.current.rotation.z = slowRotation;\n        smokePuffRef.current.position.set(\n            xFactor * factor,\n            yFactor * factor,\n            zFactor\n            // xFactor + Math.cos((tenToHundred/ 30) * factor) + (Math.sin(tenToHundred* 1) * factor) / 10,\n            // yFactor + Math.sin((tenToHundred/ 20) * factor) + (Math.cos(tenToHundred* 2) * factor) / 10,\n            // zFactor + Math.cos((tenToHundred/ 10) * factor) + (Math.sin(tenToHundred* 3) * factor) / 20\n        );\n    });\n\n    return <mesh  ref={smokePuffRef} material={material} geometry={geometry}  />;\n}\n\nconst GenerateSmoke = () => {\n    const [geometryRef, geometry] = useResource();\n    const [materialRef, material] = useResource();\n    const url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n    const texture = useMemo(() => new THREE.TextureLoader().load(url), [url]);\n    \n    return (\n        <>\n            <Lighting />\n\n            <planeGeometry \n                ref={geometryRef} \n                attach=\"geometry\"   \n                args={[200, 200]} \n            />\n            <meshLambertMaterial \n                ref={materialRef}\n                attach=\"material\" \n                color=\"#ccbbee\"\n                transparent\n            >\n                <primitive attach=\"map\" object={texture} />\n            </meshLambertMaterial>\n\n            {geometry && new Array(33).fill().map((_, index) => (\n                <SmokePuff\n                    key={index}\n                    material={material}\n                    geometry={geometry}\n\n                />\n            ))}\n        </>\n    );\n}\n\n\n// This is the canvas. It's the lowest level element in the three/webGl chain\nconst CanvasicalSmoke = () => {\n    const { size } = useThree();\n    const [ { top, mouse }, set ] = useSpring(() => ({ top: 0, mouse: [0, 0] }));\n    const scrollMax = size.height * 4.5;\n    // const particleCount = 3;\n    // const particleArray = [{ id: 0, x: 0, y: 0, z: 2 }];\n\n    // useEffect(() => {\n    //     if (particleArray.length === particleCount) {\n    //         return null;\n    //     } else {\n    //         for (let i = 0; i <= particleCount; i++) {\n    //             particleArray.push({\n    //                 id: particleArray[i].id + 1,\n    //                 x: particleArray[i].x + 1,\n    //                 y: particleArray[i].y + 1,\n    //                 z: 2\n    //             });\n    //         }\n    //     }\n    // }, [particleArray]);\n\n    return (\n        <>\n            <Canvas\n                className=\"container block__three-container\"\n                camera={{\n                    fov: 75,\n                    aspect: 0.5,\n                    near: 1,\n                    far: 10000,\n                    position: [0, 0, 600]\n                }}\n            >\n                <GenerateSmoke />\n                <Text opacity={top.interpolate([0, 200], [1, 0])} position={top.interpolate(top => [0, -1 + top / 200, 0])}>\n                    lorem\n                </Text>\n                <Text position={top.interpolate(top => [0, -20 + ((top * 10) / scrollMax) * 2, 0])} color=\"black\" fontSize={150}>\n                    Ipsum\n                </Text>\n            </Canvas>\n            {/* <TextLoop  /> */}\n        </>\n    );\n};\n\nexport default CanvasicalSmoke;\n\n// // Creates a fullscreen colored plane\n// const Plane = () => {\n//     return (\n//         <mesh >\n//             <planeGeometry  attach=\"geometry\"  args={[ 32, 32, 32, 32 ]} />\n//             <meshPhysicalMaterial  attach=\"material\"  color=\"#ffffff\"  />\n//         </mesh>\n//     )\n// }\n\n// // A light bar\n// const LightBar = () => {\n//     // const lightBar = useRef();\n\n//     return (\n//         <>\n//             <mesh\n//                 // ref={lightBar}\n//             >\n//                 <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n//                 <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n//             </mesh>\n//         </>\n//     )\n// }\n"]},"metadata":{},"sourceType":"module"}