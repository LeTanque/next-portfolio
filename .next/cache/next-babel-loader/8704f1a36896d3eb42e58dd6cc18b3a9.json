{"ast":null,"code":"var _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/SmokeContainerReal.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRef, useState } from \"react\";\nimport * as THREE from 'three';\nimport { Canvas, useFrame, extend, useResource // useLoader,\n// useThree,\n} from \"react-three-fiber\";\nimport * as resources from './resources/index';\nextend(resources);\nimport TextLoop from \"../TextLoop\"; // This component creates a fullscreen colored plane \n// const Background = ({ color }) => {\n//     const { viewport } = useThree();\n//     return (\n//         <mesh scale={[viewport.width, viewport.height, 1]}>\n//             <planeGeometry attach=\"geometry\" args={[1, 1]} />\n//             <a.meshBasicMaterial attach=\"material\" color={color} depthTest={false} />\n//         </mesh>\n//     )\n// }\n// // This component loads an image and projects it onto a plane\n// function Image({ url, opacity, scale, ...props }) {\n//     const texture = useMemo(() => new THREE.TextureLoader().load(url), [url])\n//     const [hovered, setHover] = useState(false)\n//     const hover = useCallback(() => setHover(true), [])\n//     const unhover = useCallback(() => setHover(false), [])\n//     const { factor } = useSpring({ factor: hovered ? 1.1 : 1 })\n//     return (\n//         <a.mesh {...props} onHover={hover} onUnhover={unhover} scale={factor.interpolate(f => [scale * f, scale * f, 1])}>\n//             <planeBufferGeometry attach=\"geometry\" args={[5, 5]} />\n//             <a.meshLambertMaterial attach=\"material\" transparent opacity={opacity}>\n//                 <primitive attach=\"map\" object={texture} />\n//             </a.meshLambertMaterial>\n//         </a.mesh>\n//     )\n// }\n// const Thing = props => {\n//     const { vertices } = props;\n//     const [ geometryRef, geometry ] = useResource();\n//     const ref = useRef();\n//     console.log('geometryRef AND geometry --> ', geometryRef, geometry);\n//     useFrame(() => {\n//         return ref.current.rotation.x = ref.current.rotation.y += 0.01\n//     })\n//     // useFrame(() => (console.log('ref.current --> ', ref.current)))\n//     return (\n//         <group \n//             ref={ref}\n//         >\n//             <line>\n//                 <geometry \n//                     attach=\"geometry\"\n//                     vertices={vertices.map( v => new THREE.Vector3(...v) )}\n//                     onUpdate={self => (self.verticesNeedUpdate = true)}\n//                 />\n//                 <lineBasicMaterial   attach=\"material\"  color=\"#ff0000\" />\n//             </line>\n//             <mesh       // a mesh combines material with geometry\n//                 // onClick={click => console.log('click --> ', click)}\n//                 // onHover={hover => console.log('hover --> ', hover)}\n//             >\n//                 <octahedronGeometry \n//                     attach=\"geometry\"  \n//                     args={[10000, 10000]}\n//                     parameters={{ a: 0 }}\n//                 />\n//                 <meshBasicMaterial  \n//                     attach=\"material\"  \n//                     color=\"peachpuff\" \n//                     opacity={0.5} \n//                     transparent={true} \n//                 />\n//             </mesh>\n//         </group>\n//     )\n// }\n// This component maintains the scene \n\nconst Scene = ({\n  mouse\n}) => {\n  const {\n    size\n  } = useThree();\n  const scrollMax = size.height * 4.5;\n  return __jsx(React.Fragment, null, __jsx(a.spotLight, {\n    intensity: 1.2,\n    color: \"white\",\n    position: mouse.interpolate((x, y) => [x / 100, -y / 100, 6.5]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }), __jsx(Background, {\n    color: top.interpolate([0, 0.25, 0.8, 1], ['#27282F', '#247BA0', '#70C1B3', '#f8f3f1']),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }), __jsx(Thing, {\n    vertices: [[-1, 0, 0], [0, 1, 0], [1, 0, 0], [0, -1, 0], [-1, 0, 0]],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }));\n}; // Main container\n\n\nconst SmokeContainerReal = () => {\n  const {\n    0: mouseState,\n    1: setMouseState\n  } = useState({\n    mouse: [0, 0]\n  });\n  useFrame(({\n    clientX: x,\n    clientY: y\n  }) => {\n    setMouseState({\n      mouse: [x - window.innerWidth / 2, y - window.innerHeight / 2]\n    });\n  });\n  return __jsx(\"div\", {\n    className: \"container block__three-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, __jsx(Canvas, {\n    style: {\n      background: 'radial-gradient(at 50% 70%, #200f20 40%, #090b1f 80%, #050523 100%)'\n    },\n    camera: {\n      fov: 75,\n      position: [0, 0, 60]\n    } // children                      // Either a function child (which receives state) or regular children\n    // gl                            // Props that go into the default webGL-renderer\n    // camera                        // Props that go into the default camera\n    // raycaster                     // Props that go into the default raycaster\n    // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n    // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n    // gl2 = false                   // Enables webgl2\n    // concurrent = false            // Enables React concurrent mode\n    // resize = undefined            // Resize config, see react-use-measure's options\n    // orthographic = false          // Creates an orthographic camera if true\n    // noEvents = false              // Switch off raytracing and event support\n    // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n    // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n    // updateDefaultCamera = true    // Adjusts default camera on size changes\n    // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n    // onPointerMissed \n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, __jsx(\"rectAreaLight\", {\n    intensity: 3,\n    position: [0, 10, -10],\n    width: 30,\n    height: 30,\n    onUpdate: self => self.lookAt(new THREE.Vector3(0, 0, 0)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }), __jsx(TextLoop, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  })));\n};\n\nexport default SmokeContainerReal;","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/SmokeContainerReal.jsx"],"names":["useRef","useState","THREE","Canvas","useFrame","extend","useResource","resources","TextLoop","Scene","mouse","size","useThree","scrollMax","height","interpolate","x","y","top","SmokeContainerReal","mouseState","setMouseState","clientX","clientY","window","innerWidth","innerHeight","background","fov","position","self","lookAt","Vector3"],"mappings":"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","sourcesContent":["import { useRef, useState } from \"react\";\nimport * as THREE from 'three';\nimport {\n    Canvas,\n    useFrame,\n    extend,\n    useResource,\n    // useLoader,\n    // useThree,\n} from \"react-three-fiber\";\nimport * as resources from './resources/index';\nextend(resources);\n\nimport TextLoop from \"../TextLoop\";\n\n\n\n\n\n\n// This component creates a fullscreen colored plane \n// const Background = ({ color }) => {\n//     const { viewport } = useThree();\n\n//     return (\n//         <mesh scale={[viewport.width, viewport.height, 1]}>\n//             <planeGeometry attach=\"geometry\" args={[1, 1]} />\n//             <a.meshBasicMaterial attach=\"material\" color={color} depthTest={false} />\n//         </mesh>\n//     )\n// }\n\n\n\n// // This component loads an image and projects it onto a plane\n// function Image({ url, opacity, scale, ...props }) {\n//     const texture = useMemo(() => new THREE.TextureLoader().load(url), [url])\n//     const [hovered, setHover] = useState(false)\n//     const hover = useCallback(() => setHover(true), [])\n//     const unhover = useCallback(() => setHover(false), [])\n//     const { factor } = useSpring({ factor: hovered ? 1.1 : 1 })\n//     return (\n//         <a.mesh {...props} onHover={hover} onUnhover={unhover} scale={factor.interpolate(f => [scale * f, scale * f, 1])}>\n//             <planeBufferGeometry attach=\"geometry\" args={[5, 5]} />\n//             <a.meshLambertMaterial attach=\"material\" transparent opacity={opacity}>\n//                 <primitive attach=\"map\" object={texture} />\n//             </a.meshLambertMaterial>\n//         </a.mesh>\n//     )\n// }\n\n\n\n\n\n\n// const Thing = props => {\n//     const { vertices } = props;\n//     const [ geometryRef, geometry ] = useResource();\n//     const ref = useRef();\n\n//     console.log('geometryRef AND geometry --> ', geometryRef, geometry);\n\n//     useFrame(() => {\n//         return ref.current.rotation.x = ref.current.rotation.y += 0.01\n//     })\n\n//     // useFrame(() => (console.log('ref.current --> ', ref.current)))\n    \n//     return (\n//         <group \n//             ref={ref}\n//         >\n//             <line>\n//                 <geometry \n//                     attach=\"geometry\"\n//                     vertices={vertices.map( v => new THREE.Vector3(...v) )}\n//                     onUpdate={self => (self.verticesNeedUpdate = true)}\n//                 />\n//                 <lineBasicMaterial   attach=\"material\"  color=\"#ff0000\" />\n//             </line>\n                \n//             <mesh       // a mesh combines material with geometry\n//                 // onClick={click => console.log('click --> ', click)}\n//                 // onHover={hover => console.log('hover --> ', hover)}\n//             >\n//                 <octahedronGeometry \n//                     attach=\"geometry\"  \n//                     args={[10000, 10000]}\n//                     parameters={{ a: 0 }}\n//                 />\n//                 <meshBasicMaterial  \n//                     attach=\"material\"  \n//                     color=\"peachpuff\" \n//                     opacity={0.5} \n//                     transparent={true} \n//                 />\n//             </mesh>\n//         </group>\n//     )\n// }\n\n\n// This component maintains the scene \nconst Scene = ({ mouse }) => {\n    const { size } = useThree();\n    const scrollMax = size.height * 4.5;\n\n    return (\n        <>\n            <a.spotLight intensity={1.2} color=\"white\" position={mouse.interpolate((x, y) => [x / 100, -y / 100, 6.5])} />\n            {/* <Effects factor={top.interpolate([0, 150], [1, 0])} /> */}\n            <Background color={top.interpolate([0, 0.25, 0.8, 1], ['#27282F', '#247BA0', '#70C1B3', '#f8f3f1'])} />\n\n            <Thing   vertices={[ [ -1,0,0 ], [ 0,1,0 ], [ 1,0,0 ], [ 0,-1,0 ], [ -1,0,0 ] ]}  />\n\n            \n        </>\n    )\n}\n\n// Main container\nconst SmokeContainerReal = () => {\n    const [ mouseState, setMouseState ] = useState({ mouse: [ 0, 0 ] });\n\n    useFrame(({ clientX: x, clientY: y }) => {\n        setMouseState({ mouse: [x - window.innerWidth / 2, y - window.innerHeight / 2] });\n    })\n\n    return (\n        <div  className=\"container block__three-container\" >\n            <Canvas\n                style={{ background: 'radial-gradient(at 50% 70%, #200f20 40%, #090b1f 80%, #050523 100%)' }}\n                camera={{ fov: 75, position: [0, 0, 60] }} \n                // children                      // Either a function child (which receives state) or regular children\n                // gl                            // Props that go into the default webGL-renderer\n                // camera                        // Props that go into the default camera\n                // raycaster                     // Props that go into the default raycaster\n                // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n                // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n                // gl2 = false                   // Enables webgl2\n                // concurrent = false            // Enables React concurrent mode\n                // resize = undefined            // Resize config, see react-use-measure's options\n                // orthographic = false          // Creates an orthographic camera if true\n                // noEvents = false              // Switch off raytracing and event support\n                // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n                // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n                // updateDefaultCamera = true    // Adjusts default camera on size changes\n                // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n                // onPointerMissed \n            >   \n                <rectAreaLight\n                    intensity={3}\n                    position={[0, 10, -10]}\n                    width={30}\n                    height={30}\n                    onUpdate={self => self.lookAt(new THREE.Vector3(0, 0, 0))}\n                />\n\n                <TextLoop  />\n                {/* <Scene  mouse={mouseState} /> */}\n\n            </Canvas> \n        </div>\n    );\n}\n\nexport default SmokeContainerReal;"]},"metadata":{},"sourceType":"module"}