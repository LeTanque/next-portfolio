{"ast":null,"code":"import _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport { DataTexture, FloatType, Math as _Math, Mesh, OrthographicCamera, PlaneBufferGeometry, RGBFormat, Scene, ShaderMaterial, UniformsUtils, Vector2 } from \"three/src/Three\";\nimport { WaterShader } from \"../shaders/WaterShader.js\";\nimport { Pass } from \"./Pass.js\";\n\nvar WaterPass = function (dt_size) {\n  Pass.call(this);\n  if (WaterShader === undefined) console.error(\"THREE.WaterPass relies on THREE.WaterShader\");\n  var shader = WaterShader;\n  this.uniforms = UniformsUtils.clone(shader.uniforms);\n  if (dt_size === undefined) dt_size = 64;\n  this.uniforms[\"resolution\"].value = new Vector2(dt_size, dt_size);\n  this.material = new ShaderMaterial({\n    uniforms: this.uniforms,\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader\n  });\n  this.camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  this.scene = new Scene();\n  this.quad = new Mesh(new PlaneBufferGeometry(2, 2), null);\n  this.quad.frustumCulled = false; // Avoid getting clipped\n\n  this.scene.add(this.quad);\n  this.factor = 0;\n  this.time = 0;\n};\n\nWaterPass.prototype = _Object$assign(_Object$create(Pass.prototype), {\n  constructor: WaterPass,\n  render: function (renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    const factor = Math.max(0, this.factor);\n    this.uniforms[\"byp\"].value = factor ? 0 : 1;\n    this.uniforms[\"texture\"].value = readBuffer.texture;\n    this.uniforms[\"time\"].value = this.time;\n    this.uniforms[\"factor\"].value = this.factor;\n    this.time += 0.05;\n    this.quad.material = this.material;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      renderer.render(this.scene, this.camera);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      renderer.render(this.scene, this.camera);\n    }\n  }\n});\nexport { WaterPass };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/resources/postprocessing/WaterPass.js"],"names":["DataTexture","FloatType","Math","_Math","Mesh","OrthographicCamera","PlaneBufferGeometry","RGBFormat","Scene","ShaderMaterial","UniformsUtils","Vector2","WaterShader","Pass","WaterPass","dt_size","call","undefined","console","error","shader","uniforms","clone","value","material","vertexShader","fragmentShader","camera","scene","quad","frustumCulled","add","factor","time","prototype","constructor","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","max","texture","renderToScreen","setRenderTarget","clear"],"mappings":"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","sourcesContent":["import {\n    DataTexture,\n    FloatType,\n    Math as _Math,\n    Mesh,\n    OrthographicCamera,\n    PlaneBufferGeometry,\n    RGBFormat,\n    Scene,\n    ShaderMaterial,\n    UniformsUtils,\n    Vector2\n} from \"three/src/Three\";\nimport { WaterShader } from \"../shaders/WaterShader.js\";\nimport { Pass } from \"./Pass.js\";\n\nvar WaterPass = function(dt_size) {\n    Pass.call(this);\n    if (WaterShader === undefined)\n        console.error(\"THREE.WaterPass relies on THREE.WaterShader\");\n    var shader = WaterShader;\n    this.uniforms = UniformsUtils.clone(shader.uniforms);\n    if (dt_size === undefined) dt_size = 64;\n    this.uniforms[\"resolution\"].value = new Vector2(dt_size, dt_size);\n    this.material = new ShaderMaterial({\n        uniforms: this.uniforms,\n        vertexShader: shader.vertexShader,\n        fragmentShader: shader.fragmentShader\n    });\n    this.camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    this.scene = new Scene();\n    this.quad = new Mesh(new PlaneBufferGeometry(2, 2), null);\n    this.quad.frustumCulled = false; // Avoid getting clipped\n    this.scene.add(this.quad);\n    this.factor = 0;\n    this.time = 0;\n};\n\nWaterPass.prototype = Object.assign(Object.create(Pass.prototype), {\n    constructor: WaterPass,\n\n    render: function(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n        const factor = Math.max(0, this.factor);\n        this.uniforms[\"byp\"].value = factor ? 0 : 1;\n        this.uniforms[\"texture\"].value = readBuffer.texture;\n        this.uniforms[\"time\"].value = this.time;\n        this.uniforms[\"factor\"].value = this.factor;\n        this.time += 0.05;\n        this.quad.material = this.material;\n        if (this.renderToScreen) {\n            renderer.setRenderTarget(null);\n            renderer.render(this.scene, this.camera);\n        } else {\n            renderer.setRenderTarget(writeBuffer);\n            if (this.clear) renderer.clear();\n            renderer.render(this.scene, this.camera);\n        }\n    }\n});\n\nexport { WaterPass };\n"]},"metadata":{},"sourceType":"module"}