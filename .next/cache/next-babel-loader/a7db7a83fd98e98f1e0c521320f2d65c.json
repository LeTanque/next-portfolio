{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/Canvasical.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef } from \"react\";\nimport * as THREE from 'three';\nimport { Canvas, extend as extendThree, useFrame, useLoader, useResource, useThree } from \"react-three-fiber\"; // Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\n\nimport { EffectComposer } from './resources/postprocessing/EffectComposer';\nimport { RenderPass } from './resources/postprocessing/RenderPass';\nimport { GlitchPass } from './resources/postprocessing/GlitchPass';\nextendThree({\n  EffectComposer: EffectComposer,\n  RenderPass: RenderPass,\n  GlitchPass: GlitchPass\n});\nimport TextLoop from \"../TextLoop\"; // Creates a fullscreen colored plane\n\nvar Background = function Background(_ref) {\n  var color = _ref.color;\n\n  var _useThree = useThree(),\n      viewport = _useThree.viewport;\n\n  return __jsx(\"mesh\", {\n    scale: [viewport.width, viewport.height, 1],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, __jsx(\"planeGeometry\", {\n    attach: \"geometry\",\n    args: [1, 1],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }), __jsx(\"meshPhysicalMaterial\", {\n    attach: \"material\",\n    color: color,\n    depthTest: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }));\n}; // The canvas houses this function, the scene. Scene is where the elements come together.\n\n\nvar Scene = function Scene() {\n  var _useResource = useResource(),\n      _useResource2 = _slicedToArray(_useResource, 2),\n      geometryRef = _useResource2[0],\n      geometry = _useResource2[1];\n\n  var _useResource3 = useResource(),\n      _useResource4 = _slicedToArray(_useResource3, 2),\n      materialRef = _useResource4[0],\n      material = _useResource4[1];\n\n  var ref = useRef();\n  return __jsx(\"group\", {\n    ref: ref,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, __jsx(Background, {\n    color: \"#000000\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), __jsx(\"pointLight\", {\n    color: \"#ffffff\",\n    intensity: 1.3,\n    position: [50, 50, 50],\n    distance: 50,\n    decay: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), __jsx(\"meshLambertMaterial\", {\n    ref: materialRef,\n    color: \"#00aa33\",\n    transparent: true,\n    opacity: 0.75 // map={smokeTexture}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), __jsx(\"mesh\", {\n    ref: ref,\n    userData: {\n      test: 'hello'\n    },\n    position: [1, 2, 3],\n    rotation: [0, 0, 0] // onClick={e => console.log('click')}\n    // onPointerOver={e => console.log('hover')}\n    // onPointerOut={e => console.log('unhover')}\n    ,\n    visible: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, __jsx(\"planeGeometry\", {\n    attach: \"geometry\",\n    args: [10000, 10000],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), __jsx(\"meshNormalMaterial\", {\n    attach: \"material\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  })));\n}; // This is the canvas. It's the lowest level element in the three/webGl chain\n\n\nvar Canvasical = function Canvasical() {\n  return __jsx(React.Fragment, null, __jsx(Canvas // className=\"container block__three-container\" \n  , {\n    camera: {\n      fov: 75,\n      position: [0, 0, 50]\n    } // style={{ background: 'radial-gradient(at 50% 70%, #200f20 40%, #090b1f 80%, #050523 100%)' }}\n    // children                      // Either a function child (which receives state) or regular children\n    // gl                            // Props that go into the default webGL-renderer\n    // camera                        // Props that go into the default camera\n    // raycaster                     // Props that go into the default raycaster\n    // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n    // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n    // gl2 = false                   // Enables webgl2\n    // concurrent = false            // Enables React concurrent mode\n    // resize = undefined            // Resize config, see react-use-measure's options\n    // orthographic = false          // Creates an orthographic camera if true\n    // noEvents = false              // Switch off raytracing and event support\n    // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n    // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n    // updateDefaultCamera = true    // Adjusts default camera on size changes\n    // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n    // onPointerMissed \n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, __jsx(Scene, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  })), __jsx(TextLoop, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }));\n};\n\nexport default Canvasical;","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/Canvasical.jsx"],"names":["React","useCallback","useEffect","useRef","THREE","Canvas","extend","extendThree","useFrame","useLoader","useResource","useThree","EffectComposer","RenderPass","GlitchPass","TextLoop","Background","color","viewport","width","height","Scene","geometryRef","geometry","materialRef","material","ref","test","Canvasical","fov","position"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef } from \"react\";\nimport * as THREE from 'three';\nimport {\n    Canvas,\n    extend as extendThree,\n    useFrame,\n    useLoader,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\n\n// Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\nimport { EffectComposer } from './resources/postprocessing/EffectComposer'\nimport { RenderPass } from './resources/postprocessing/RenderPass'\nimport { GlitchPass } from './resources/postprocessing/GlitchPass'\nextendThree({ EffectComposer, RenderPass, GlitchPass });\n\nimport TextLoop from \"../TextLoop\";\n\n\n\n\n\n// Creates a fullscreen colored plane\nconst Background = ({ color }) => {\n    const { viewport } = useThree();\n\n    return (\n        <mesh scale={[viewport.width, viewport.height, 1]}>\n            <planeGeometry attach=\"geometry\" args={[1, 1]} />\n            <meshPhysicalMaterial attach=\"material\" color={color}  depthTest={false} />\n        </mesh>\n    )\n}\n\n\n\n\n\n\n// The canvas houses this function, the scene. Scene is where the elements come together.\nconst Scene = () => {\n    const [geometryRef, geometry] = useResource();\n    const [materialRef, material] = useResource();\n    const ref = useRef();\n    \n\n\n    return (\n        <group ref={ref}>\n\n            <Background  color=\"#000000\" />\n\n            <pointLight\n                color=\"#ffffff\"\n                intensity={1.3} \n                position={[50, 50, 50]} \n                distance={50}\n                decay={2}\n            />\n\n            \n            <meshLambertMaterial \n                ref={materialRef}\n                color=\"#00aa33\"\n                transparent={true}\n                opacity={0.75}\n                // map={smokeTexture}\n            /> \n\n            <mesh \n                ref={ref}\n                userData={{ test: 'hello' }} \n                position={[1, 2, 3]} \n                rotation={[0, 0, 0]}\n                // onClick={e => console.log('click')}\n                // onPointerOver={e => console.log('hover')}\n                // onPointerOut={e => console.log('unhover')}\n                visible \n            >\n                <planeGeometry \n                    attach=\"geometry\" \n                    args={[10000, 10000]} \n                />\n                <meshNormalMaterial attach=\"material\" />\n            </mesh>\n            \n            \n        </group>\n    )\n}\n\n\n// This is the canvas. It's the lowest level element in the three/webGl chain\nconst Canvasical = () => {\n\n\n    return (\n        <>\n            <Canvas\n                // className=\"container block__three-container\" \n                camera={{ fov: 75, position: [0, 0, 50] }} \n                // style={{ background: 'radial-gradient(at 50% 70%, #200f20 40%, #090b1f 80%, #050523 100%)' }}\n                // children                      // Either a function child (which receives state) or regular children\n                // gl                            // Props that go into the default webGL-renderer\n                // camera                        // Props that go into the default camera\n                // raycaster                     // Props that go into the default raycaster\n                // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n                // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n                // gl2 = false                   // Enables webgl2\n                // concurrent = false            // Enables React concurrent mode\n                // resize = undefined            // Resize config, see react-use-measure's options\n                // orthographic = false          // Creates an orthographic camera if true\n                // noEvents = false              // Switch off raytracing and event support\n                // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n                // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n                // updateDefaultCamera = true    // Adjusts default camera on size changes\n                // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n                // onPointerMissed \n            >\n\n                <Scene />\n\n            </Canvas> \n           \n            <TextLoop  />\n\n        </>\n    );\n}\n\nexport default Canvasical;\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}