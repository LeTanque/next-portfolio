{"ast":null,"code":"import _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\nimport { Curve } from '../core/Curve.js';\nimport { CatmullRom } from '../core/Interpolations.js';\nimport { Vector2 } from '../../math/Vector2.js';\n\nfunction SplineCurve(points\n/* array of Vector2 */\n) {\n  Curve.call(this);\n  this.type = 'SplineCurve';\n  this.points = points || [];\n}\n\nSplineCurve.prototype = _Object$create(Curve.prototype);\nSplineCurve.prototype.constructor = SplineCurve;\nSplineCurve.prototype.isSplineCurve = true;\n\nSplineCurve.prototype.getPoint = function (t, optionalTarget) {\n  var point = optionalTarget || new Vector2();\n  var points = this.points;\n  var p = (points.length - 1) * t;\n  var intPoint = Math.floor(p);\n  var weight = p - intPoint;\n  var p0 = points[intPoint === 0 ? intPoint : intPoint - 1];\n  var p1 = points[intPoint];\n  var p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];\n  var p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];\n  point.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));\n  return point;\n};\n\nSplineCurve.prototype.copy = function (source) {\n  Curve.prototype.copy.call(this, source);\n  this.points = [];\n\n  for (var i = 0, l = source.points.length; i < l; i++) {\n    var point = source.points[i];\n    this.points.push(point.clone());\n  }\n\n  return this;\n};\n\nSplineCurve.prototype.toJSON = function () {\n  var data = Curve.prototype.toJSON.call(this);\n  data.points = [];\n\n  for (var i = 0, l = this.points.length; i < l; i++) {\n    var point = this.points[i];\n    data.points.push(point.toArray());\n  }\n\n  return data;\n};\n\nSplineCurve.prototype.fromJSON = function (json) {\n  Curve.prototype.fromJSON.call(this, json);\n  this.points = [];\n\n  for (var i = 0, l = json.points.length; i < l; i++) {\n    var point = json.points[i];\n    this.points.push(new Vector2().fromArray(point));\n  }\n\n  return this;\n};\n\nexport { SplineCurve };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/extras/curves/SplineCurve.js"],"names":["Curve","CatmullRom","Vector2","SplineCurve","points","call","type","prototype","constructor","isSplineCurve","getPoint","t","optionalTarget","point","p","length","intPoint","Math","floor","weight","p0","p1","p2","p3","set","x","y","copy","source","i","l","push","clone","toJSON","data","toArray","fromJSON","json","fromArray"],"mappings":"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","sourcesContent":["import { Curve } from '../core/Curve.js';\nimport { CatmullRom } from '../core/Interpolations.js';\nimport { Vector2 } from '../../math/Vector2.js';\n\n\nfunction SplineCurve( points /* array of Vector2 */ ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'SplineCurve';\n\n\tthis.points = points || [];\n\n}\n\nSplineCurve.prototype = Object.create( Curve.prototype );\nSplineCurve.prototype.constructor = SplineCurve;\n\nSplineCurve.prototype.isSplineCurve = true;\n\nSplineCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector2();\n\n\tvar points = this.points;\n\tvar p = ( points.length - 1 ) * t;\n\n\tvar intPoint = Math.floor( p );\n\tvar weight = p - intPoint;\n\n\tvar p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\tvar p1 = points[ intPoint ];\n\tvar p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\tvar p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\tpoint.set(\n\t\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\n\t\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\n\t);\n\n\treturn point;\n\n};\n\nSplineCurve.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.points = [];\n\n\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\tvar point = source.points[ i ];\n\n\t\tthis.points.push( point.clone() );\n\n\t}\n\n\treturn this;\n\n};\n\nSplineCurve.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.points = [];\n\n\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\tvar point = this.points[ i ];\n\t\tdata.points.push( point.toArray() );\n\n\t}\n\n\treturn data;\n\n};\n\nSplineCurve.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.points = [];\n\n\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\tvar point = json.points[ i ];\n\t\tthis.points.push( new Vector2().fromArray( point ) );\n\n\t}\n\n\treturn this;\n\n};\n\n\nexport { SplineCurve };\n"]},"metadata":{},"sourceType":"module"}