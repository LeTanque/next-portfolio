{"ast":null,"code":"import _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n * @author Mugen87 / https://github.com/Mugen87\n * @author hughes\n */\nimport { Geometry } from '../core/Geometry.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { Vector2 } from '../math/Vector2.js'; // CircleGeometry\n\nfunction CircleGeometry(radius, segments, thetaStart, thetaLength) {\n  Geometry.call(this);\n  this.type = 'CircleGeometry';\n  this.parameters = {\n    radius: radius,\n    segments: segments,\n    thetaStart: thetaStart,\n    thetaLength: thetaLength\n  };\n  this.fromBufferGeometry(new CircleBufferGeometry(radius, segments, thetaStart, thetaLength));\n  this.mergeVertices();\n}\n\nCircleGeometry.prototype = _Object$create(Geometry.prototype);\nCircleGeometry.prototype.constructor = CircleGeometry; // CircleBufferGeometry\n\nfunction CircleBufferGeometry(radius, segments, thetaStart, thetaLength) {\n  BufferGeometry.call(this);\n  this.type = 'CircleBufferGeometry';\n  this.parameters = {\n    radius: radius,\n    segments: segments,\n    thetaStart: thetaStart,\n    thetaLength: thetaLength\n  };\n  radius = radius || 1;\n  segments = segments !== undefined ? Math.max(3, segments) : 8;\n  thetaStart = thetaStart !== undefined ? thetaStart : 0;\n  thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2; // buffers\n\n  var indices = [];\n  var vertices = [];\n  var normals = [];\n  var uvs = []; // helper variables\n\n  var i, s;\n  var vertex = new Vector3();\n  var uv = new Vector2(); // center point\n\n  vertices.push(0, 0, 0);\n  normals.push(0, 0, 1);\n  uvs.push(0.5, 0.5);\n\n  for (s = 0, i = 3; s <= segments; s++, i += 3) {\n    var segment = thetaStart + s / segments * thetaLength; // vertex\n\n    vertex.x = radius * Math.cos(segment);\n    vertex.y = radius * Math.sin(segment);\n    vertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n    normals.push(0, 0, 1); // uvs\n\n    uv.x = (vertices[i] / radius + 1) / 2;\n    uv.y = (vertices[i + 1] / radius + 1) / 2;\n    uvs.push(uv.x, uv.y);\n  } // indices\n\n\n  for (i = 1; i <= segments; i++) {\n    indices.push(i, i + 1, 0);\n  } // build geometry\n\n\n  this.setIndex(indices);\n  this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n  this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n  this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n}\n\nCircleBufferGeometry.prototype = _Object$create(BufferGeometry.prototype);\nCircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\nexport { CircleGeometry, CircleBufferGeometry };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/geometries/CircleGeometry.js"],"names":["Geometry","BufferGeometry","Float32BufferAttribute","Vector3","Vector2","CircleGeometry","radius","segments","thetaStart","thetaLength","call","type","parameters","fromBufferGeometry","CircleBufferGeometry","mergeVertices","prototype","constructor","undefined","Math","max","PI","indices","vertices","normals","uvs","i","s","vertex","uv","push","segment","x","cos","y","sin","z","setIndex","setAttribute"],"mappings":"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","sourcesContent":["/**\n * @author benaadams / https://twitter.com/ben_a_adams\n * @author Mugen87 / https://github.com/Mugen87\n * @author hughes\n */\n\nimport { Geometry } from '../core/Geometry.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { Vector2 } from '../math/Vector2.js';\n\n// CircleGeometry\n\nfunction CircleGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'CircleGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tsegments: segments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tthis.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\n\tthis.mergeVertices();\n\n}\n\nCircleGeometry.prototype = Object.create( Geometry.prototype );\nCircleGeometry.prototype.constructor = CircleGeometry;\n\n// CircleBufferGeometry\n\nfunction CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'CircleBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tsegments: segments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tradius = radius || 1;\n\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// helper variables\n\n\tvar i, s;\n\tvar vertex = new Vector3();\n\tvar uv = new Vector2();\n\n\t// center point\n\n\tvertices.push( 0, 0, 0 );\n\tnormals.push( 0, 0, 1 );\n\tuvs.push( 0.5, 0.5 );\n\n\tfor ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {\n\n\t\tvar segment = thetaStart + s / segments * thetaLength;\n\n\t\t// vertex\n\n\t\tvertex.x = radius * Math.cos( segment );\n\t\tvertex.y = radius * Math.sin( segment );\n\n\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t// normal\n\n\t\tnormals.push( 0, 0, 1 );\n\n\t\t// uvs\n\n\t\tuv.x = ( vertices[ i ] / radius + 1 ) / 2;\n\t\tuv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;\n\n\t\tuvs.push( uv.x, uv.y );\n\n\t}\n\n\t// indices\n\n\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\tindices.push( i, i + 1, 0 );\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n}\n\nCircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nCircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\n\n\nexport { CircleGeometry, CircleBufferGeometry };\n"]},"metadata":{},"sourceType":"module"}