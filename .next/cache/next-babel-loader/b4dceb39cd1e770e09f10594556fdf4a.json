{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nimport { BackSide, FrontSide, CubeUVReflectionMapping } from '../../constants.js';\nimport { BoxBufferGeometry } from '../../geometries/BoxGeometry.js';\nimport { PlaneBufferGeometry } from '../../geometries/PlaneGeometry.js';\nimport { ShaderMaterial } from '../../materials/ShaderMaterial.js';\nimport { Color } from '../../math/Color.js';\nimport { Mesh } from '../../objects/Mesh.js';\nimport { ShaderLib } from '../shaders/ShaderLib.js';\nimport { cloneUniforms } from '../shaders/UniformsUtils.js';\n\nfunction WebGLBackground(renderer, state, objects, premultipliedAlpha) {\n  var clearColor = new Color(0x000000);\n  var clearAlpha = 0;\n  var planeMesh;\n  var boxMesh; // Store the current background texture and its `version`\n  // so we can recompile the material accordingly.\n\n  var currentBackground = null;\n  var currentBackgroundVersion = 0;\n\n  function render(renderList, scene, camera, forceClear) {\n    var background = scene.background; // Ignore background in AR\n    // TODO: Reconsider this.\n\n    var xr = renderer.xr;\n    var session = xr.getSession && xr.getSession();\n\n    if (session && session.environmentBlendMode === 'additive') {\n      background = null;\n    }\n\n    if (background === null) {\n      setClear(clearColor, clearAlpha);\n      currentBackground = null;\n      currentBackgroundVersion = 0;\n    } else if (background && background.isColor) {\n      setClear(background, 1);\n      forceClear = true;\n      currentBackground = null;\n      currentBackgroundVersion = 0;\n    }\n\n    if (renderer.autoClear || forceClear) {\n      renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n    }\n\n    if (background && (background.isCubeTexture || background.isWebGLRenderTargetCube || background.mapping === CubeUVReflectionMapping)) {\n      if (boxMesh === undefined) {\n        boxMesh = new Mesh(new BoxBufferGeometry(1, 1, 1), new ShaderMaterial({\n          type: 'BackgroundCubeMaterial',\n          uniforms: cloneUniforms(ShaderLib.cube.uniforms),\n          vertexShader: ShaderLib.cube.vertexShader,\n          fragmentShader: ShaderLib.cube.fragmentShader,\n          side: BackSide,\n          depthTest: false,\n          depthWrite: false,\n          fog: false\n        }));\n        boxMesh.geometry.deleteAttribute('normal');\n        boxMesh.geometry.deleteAttribute('uv');\n\n        boxMesh.onBeforeRender = function (renderer, scene, camera) {\n          this.matrixWorld.copyPosition(camera.matrixWorld);\n        }; // enable code injection for non-built-in material\n\n\n        _Object$defineProperty(boxMesh.material, 'envMap', {\n          get: function get() {\n            return this.uniforms.envMap.value;\n          }\n        });\n\n        objects.update(boxMesh);\n      }\n\n      var texture = background.isWebGLRenderTargetCube ? background.texture : background;\n      boxMesh.material.uniforms.envMap.value = texture;\n      boxMesh.material.uniforms.flipEnvMap.value = texture.isCubeTexture ? -1 : 1;\n\n      if (currentBackground !== background || currentBackgroundVersion !== texture.version) {\n        boxMesh.material.needsUpdate = true;\n        currentBackground = background;\n        currentBackgroundVersion = texture.version;\n      } // push to the pre-sorted opaque render list\n\n\n      renderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);\n    } else if (background && background.isTexture) {\n      if (planeMesh === undefined) {\n        planeMesh = new Mesh(new PlaneBufferGeometry(2, 2), new ShaderMaterial({\n          type: 'BackgroundMaterial',\n          uniforms: cloneUniforms(ShaderLib.background.uniforms),\n          vertexShader: ShaderLib.background.vertexShader,\n          fragmentShader: ShaderLib.background.fragmentShader,\n          side: FrontSide,\n          depthTest: false,\n          depthWrite: false,\n          fog: false\n        }));\n        planeMesh.geometry.deleteAttribute('normal'); // enable code injection for non-built-in material\n\n        _Object$defineProperty(planeMesh.material, 'map', {\n          get: function get() {\n            return this.uniforms.t2D.value;\n          }\n        });\n\n        objects.update(planeMesh);\n      }\n\n      planeMesh.material.uniforms.t2D.value = background;\n\n      if (background.matrixAutoUpdate === true) {\n        background.updateMatrix();\n      }\n\n      planeMesh.material.uniforms.uvTransform.value.copy(background.matrix);\n\n      if (currentBackground !== background || currentBackgroundVersion !== background.version) {\n        planeMesh.material.needsUpdate = true;\n        currentBackground = background;\n        currentBackgroundVersion = background.version;\n      } // push to the pre-sorted opaque render list\n\n\n      renderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);\n    }\n  }\n\n  function setClear(color, alpha) {\n    state.buffers.color.setClear(color.r, color.g, color.b, alpha, premultipliedAlpha);\n  }\n\n  return {\n    getClearColor: function getClearColor() {\n      return clearColor;\n    },\n    setClearColor: function setClearColor(color, alpha) {\n      clearColor.set(color);\n      clearAlpha = alpha !== undefined ? alpha : 1;\n      setClear(clearColor, clearAlpha);\n    },\n    getClearAlpha: function getClearAlpha() {\n      return clearAlpha;\n    },\n    setClearAlpha: function setClearAlpha(alpha) {\n      clearAlpha = alpha;\n      setClear(clearColor, clearAlpha);\n    },\n    render: render\n  };\n}\n\nexport { WebGLBackground };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/renderers/webgl/WebGLBackground.js"],"names":["BackSide","FrontSide","CubeUVReflectionMapping","BoxBufferGeometry","PlaneBufferGeometry","ShaderMaterial","Color","Mesh","ShaderLib","cloneUniforms","WebGLBackground","renderer","state","objects","premultipliedAlpha","clearColor","clearAlpha","planeMesh","boxMesh","currentBackground","currentBackgroundVersion","render","renderList","scene","camera","forceClear","background","xr","session","getSession","environmentBlendMode","setClear","isColor","autoClear","clear","autoClearColor","autoClearDepth","autoClearStencil","isCubeTexture","isWebGLRenderTargetCube","mapping","undefined","type","uniforms","cube","vertexShader","fragmentShader","side","depthTest","depthWrite","fog","geometry","deleteAttribute","onBeforeRender","matrixWorld","copyPosition","material","get","envMap","value","update","texture","flipEnvMap","version","needsUpdate","unshift","isTexture","t2D","matrixAutoUpdate","updateMatrix","uvTransform","copy","matrix","color","alpha","buffers","r","g","b","getClearColor","setClearColor","set","getClearAlpha","setClearAlpha"],"mappings":";;AAAA;;;AAIA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,uBAA9B,QAA6D,oBAA7D;AACA,SAASC,iBAAT,QAAkC,iCAAlC;AACA,SAASC,mBAAT,QAAoC,mCAApC;AACA,SAASC,cAAT,QAA+B,mCAA/B;AACA,SAASC,KAAT,QAAsB,qBAAtB;AACA,SAASC,IAAT,QAAqB,uBAArB;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,aAAT,QAA8B,6BAA9B;;AAEA,SAASC,eAAT,CAA0BC,QAA1B,EAAoCC,KAApC,EAA2CC,OAA3C,EAAoDC,kBAApD,EAAyE;AAExE,MAAIC,UAAU,GAAG,IAAIT,KAAJ,CAAW,QAAX,CAAjB;AACA,MAAIU,UAAU,GAAG,CAAjB;AAEA,MAAIC,SAAJ;AACA,MAAIC,OAAJ,CANwE,CAOxE;AACA;;AACA,MAAIC,iBAAiB,GAAG,IAAxB;AACA,MAAIC,wBAAwB,GAAG,CAA/B;;AAEA,WAASC,MAAT,CAAiBC,UAAjB,EAA6BC,KAA7B,EAAoCC,MAApC,EAA4CC,UAA5C,EAAyD;AAExD,QAAIC,UAAU,GAAGH,KAAK,CAACG,UAAvB,CAFwD,CAIxD;AACA;;AAEA,QAAIC,EAAE,GAAGhB,QAAQ,CAACgB,EAAlB;AACA,QAAIC,OAAO,GAAGD,EAAE,CAACE,UAAH,IAAiBF,EAAE,CAACE,UAAH,EAA/B;;AAEA,QAAKD,OAAO,IAAIA,OAAO,CAACE,oBAAR,KAAiC,UAAjD,EAA8D;AAE7DJ,MAAAA,UAAU,GAAG,IAAb;AAEA;;AAED,QAAKA,UAAU,KAAK,IAApB,EAA2B;AAE1BK,MAAAA,QAAQ,CAAEhB,UAAF,EAAcC,UAAd,CAAR;AACAG,MAAAA,iBAAiB,GAAG,IAApB;AACAC,MAAAA,wBAAwB,GAAG,CAA3B;AAEA,KAND,MAMO,IAAKM,UAAU,IAAIA,UAAU,CAACM,OAA9B,EAAwC;AAE9CD,MAAAA,QAAQ,CAAEL,UAAF,EAAc,CAAd,CAAR;AACAD,MAAAA,UAAU,GAAG,IAAb;AACAN,MAAAA,iBAAiB,GAAG,IAApB;AACAC,MAAAA,wBAAwB,GAAG,CAA3B;AAEA;;AAED,QAAKT,QAAQ,CAACsB,SAAT,IAAsBR,UAA3B,EAAwC;AAEvCd,MAAAA,QAAQ,CAACuB,KAAT,CAAgBvB,QAAQ,CAACwB,cAAzB,EAAyCxB,QAAQ,CAACyB,cAAlD,EAAkEzB,QAAQ,CAAC0B,gBAA3E;AAEA;;AAED,QAAKX,UAAU,KAAMA,UAAU,CAACY,aAAX,IAA4BZ,UAAU,CAACa,uBAAvC,IAAkEb,UAAU,CAACc,OAAX,KAAuBtC,uBAA/F,CAAf,EAA0I;AAEzI,UAAKgB,OAAO,KAAKuB,SAAjB,EAA6B;AAE5BvB,QAAAA,OAAO,GAAG,IAAIX,IAAJ,CACT,IAAIJ,iBAAJ,CAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,CADS,EAET,IAAIE,cAAJ,CAAoB;AACnBqC,UAAAA,IAAI,EAAE,wBADa;AAEnBC,UAAAA,QAAQ,EAAElC,aAAa,CAAED,SAAS,CAACoC,IAAV,CAAeD,QAAjB,CAFJ;AAGnBE,UAAAA,YAAY,EAAErC,SAAS,CAACoC,IAAV,CAAeC,YAHV;AAInBC,UAAAA,cAAc,EAAEtC,SAAS,CAACoC,IAAV,CAAeE,cAJZ;AAKnBC,UAAAA,IAAI,EAAE/C,QALa;AAMnBgD,UAAAA,SAAS,EAAE,KANQ;AAOnBC,UAAAA,UAAU,EAAE,KAPO;AAQnBC,UAAAA,GAAG,EAAE;AARc,SAApB,CAFS,CAAV;AAcAhC,QAAAA,OAAO,CAACiC,QAAR,CAAiBC,eAAjB,CAAkC,QAAlC;AACAlC,QAAAA,OAAO,CAACiC,QAAR,CAAiBC,eAAjB,CAAkC,IAAlC;;AAEAlC,QAAAA,OAAO,CAACmC,cAAR,GAAyB,UAAW1C,QAAX,EAAqBY,KAArB,EAA4BC,MAA5B,EAAqC;AAE7D,eAAK8B,WAAL,CAAiBC,YAAjB,CAA+B/B,MAAM,CAAC8B,WAAtC;AAEA,SAJD,CAnB4B,CAyB5B;;;AACA,+BAAuBpC,OAAO,CAACsC,QAA/B,EAAyC,QAAzC,EAAmD;AAElDC,UAAAA,GAAG,EAAE,eAAY;AAEhB,mBAAO,KAAKd,QAAL,CAAce,MAAd,CAAqBC,KAA5B;AAEA;AANiD,SAAnD;;AAUA9C,QAAAA,OAAO,CAAC+C,MAAR,CAAgB1C,OAAhB;AAEA;;AAED,UAAI2C,OAAO,GAAGnC,UAAU,CAACa,uBAAX,GAAqCb,UAAU,CAACmC,OAAhD,GAA0DnC,UAAxE;AAEAR,MAAAA,OAAO,CAACsC,QAAR,CAAiBb,QAAjB,CAA0Be,MAA1B,CAAiCC,KAAjC,GAAyCE,OAAzC;AACA3C,MAAAA,OAAO,CAACsC,QAAR,CAAiBb,QAAjB,CAA0BmB,UAA1B,CAAqCH,KAArC,GAA6CE,OAAO,CAACvB,aAAR,GAAwB,CAAE,CAA1B,GAA8B,CAA3E;;AAEA,UAAKnB,iBAAiB,KAAKO,UAAtB,IACAN,wBAAwB,KAAKyC,OAAO,CAACE,OAD1C,EACoD;AAEnD7C,QAAAA,OAAO,CAACsC,QAAR,CAAiBQ,WAAjB,GAA+B,IAA/B;AAEA7C,QAAAA,iBAAiB,GAAGO,UAApB;AACAN,QAAAA,wBAAwB,GAAGyC,OAAO,CAACE,OAAnC;AAEA,OAvDwI,CAyDzI;;;AACAzC,MAAAA,UAAU,CAAC2C,OAAX,CAAoB/C,OAApB,EAA6BA,OAAO,CAACiC,QAArC,EAA+CjC,OAAO,CAACsC,QAAvD,EAAiE,CAAjE,EAAoE,CAApE,EAAuE,IAAvE;AAEA,KA5DD,MA4DO,IAAK9B,UAAU,IAAIA,UAAU,CAACwC,SAA9B,EAA0C;AAEhD,UAAKjD,SAAS,KAAKwB,SAAnB,EAA+B;AAE9BxB,QAAAA,SAAS,GAAG,IAAIV,IAAJ,CACX,IAAIH,mBAAJ,CAAyB,CAAzB,EAA4B,CAA5B,CADW,EAEX,IAAIC,cAAJ,CAAoB;AACnBqC,UAAAA,IAAI,EAAE,oBADa;AAEnBC,UAAAA,QAAQ,EAAElC,aAAa,CAAED,SAAS,CAACkB,UAAV,CAAqBiB,QAAvB,CAFJ;AAGnBE,UAAAA,YAAY,EAAErC,SAAS,CAACkB,UAAV,CAAqBmB,YAHhB;AAInBC,UAAAA,cAAc,EAAEtC,SAAS,CAACkB,UAAV,CAAqBoB,cAJlB;AAKnBC,UAAAA,IAAI,EAAE9C,SALa;AAMnB+C,UAAAA,SAAS,EAAE,KANQ;AAOnBC,UAAAA,UAAU,EAAE,KAPO;AAQnBC,UAAAA,GAAG,EAAE;AARc,SAApB,CAFW,CAAZ;AAcAjC,QAAAA,SAAS,CAACkC,QAAV,CAAmBC,eAAnB,CAAoC,QAApC,EAhB8B,CAkB9B;;AACA,+BAAuBnC,SAAS,CAACuC,QAAjC,EAA2C,KAA3C,EAAkD;AAEjDC,UAAAA,GAAG,EAAE,eAAY;AAEhB,mBAAO,KAAKd,QAAL,CAAcwB,GAAd,CAAkBR,KAAzB;AAEA;AANgD,SAAlD;;AAUA9C,QAAAA,OAAO,CAAC+C,MAAR,CAAgB3C,SAAhB;AAEA;;AAEDA,MAAAA,SAAS,CAACuC,QAAV,CAAmBb,QAAnB,CAA4BwB,GAA5B,CAAgCR,KAAhC,GAAwCjC,UAAxC;;AAEA,UAAKA,UAAU,CAAC0C,gBAAX,KAAgC,IAArC,EAA4C;AAE3C1C,QAAAA,UAAU,CAAC2C,YAAX;AAEA;;AAEDpD,MAAAA,SAAS,CAACuC,QAAV,CAAmBb,QAAnB,CAA4B2B,WAA5B,CAAwCX,KAAxC,CAA8CY,IAA9C,CAAoD7C,UAAU,CAAC8C,MAA/D;;AAEA,UAAKrD,iBAAiB,KAAKO,UAAtB,IACDN,wBAAwB,KAAKM,UAAU,CAACqC,OAD5C,EACsD;AAErD9C,QAAAA,SAAS,CAACuC,QAAV,CAAmBQ,WAAnB,GAAiC,IAAjC;AAEA7C,QAAAA,iBAAiB,GAAGO,UAApB;AACAN,QAAAA,wBAAwB,GAAGM,UAAU,CAACqC,OAAtC;AAEA,OArD+C,CAwDhD;;;AACAzC,MAAAA,UAAU,CAAC2C,OAAX,CAAoBhD,SAApB,EAA+BA,SAAS,CAACkC,QAAzC,EAAmDlC,SAAS,CAACuC,QAA7D,EAAuE,CAAvE,EAA0E,CAA1E,EAA6E,IAA7E;AAEA;AAED;;AAED,WAASzB,QAAT,CAAmB0C,KAAnB,EAA0BC,KAA1B,EAAkC;AAEjC9D,IAAAA,KAAK,CAAC+D,OAAN,CAAcF,KAAd,CAAoB1C,QAApB,CAA8B0C,KAAK,CAACG,CAApC,EAAuCH,KAAK,CAACI,CAA7C,EAAgDJ,KAAK,CAACK,CAAtD,EAAyDJ,KAAzD,EAAgE5D,kBAAhE;AAEA;;AAED,SAAO;AAENiE,IAAAA,aAAa,EAAE,yBAAY;AAE1B,aAAOhE,UAAP;AAEA,KANK;AAONiE,IAAAA,aAAa,EAAE,uBAAWP,KAAX,EAAkBC,KAAlB,EAA0B;AAExC3D,MAAAA,UAAU,CAACkE,GAAX,CAAgBR,KAAhB;AACAzD,MAAAA,UAAU,GAAG0D,KAAK,KAAKjC,SAAV,GAAsBiC,KAAtB,GAA8B,CAA3C;AACA3C,MAAAA,QAAQ,CAAEhB,UAAF,EAAcC,UAAd,CAAR;AAEA,KAbK;AAcNkE,IAAAA,aAAa,EAAE,yBAAY;AAE1B,aAAOlE,UAAP;AAEA,KAlBK;AAmBNmE,IAAAA,aAAa,EAAE,uBAAWT,KAAX,EAAmB;AAEjC1D,MAAAA,UAAU,GAAG0D,KAAb;AACA3C,MAAAA,QAAQ,CAAEhB,UAAF,EAAcC,UAAd,CAAR;AAEA,KAxBK;AAyBNK,IAAAA,MAAM,EAAEA;AAzBF,GAAP;AA6BA;;AAGD,SAASX,eAAT","sourcesContent":["/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nimport { BackSide, FrontSide, CubeUVReflectionMapping } from '../../constants.js';\nimport { BoxBufferGeometry } from '../../geometries/BoxGeometry.js';\nimport { PlaneBufferGeometry } from '../../geometries/PlaneGeometry.js';\nimport { ShaderMaterial } from '../../materials/ShaderMaterial.js';\nimport { Color } from '../../math/Color.js';\nimport { Mesh } from '../../objects/Mesh.js';\nimport { ShaderLib } from '../shaders/ShaderLib.js';\nimport { cloneUniforms } from '../shaders/UniformsUtils.js';\n\nfunction WebGLBackground( renderer, state, objects, premultipliedAlpha ) {\n\n\tvar clearColor = new Color( 0x000000 );\n\tvar clearAlpha = 0;\n\n\tvar planeMesh;\n\tvar boxMesh;\n\t// Store the current background texture and its `version`\n\t// so we can recompile the material accordingly.\n\tvar currentBackground = null;\n\tvar currentBackgroundVersion = 0;\n\n\tfunction render( renderList, scene, camera, forceClear ) {\n\n\t\tvar background = scene.background;\n\n\t\t// Ignore background in AR\n\t\t// TODO: Reconsider this.\n\n\t\tvar xr = renderer.xr;\n\t\tvar session = xr.getSession && xr.getSession();\n\n\t\tif ( session && session.environmentBlendMode === 'additive' ) {\n\n\t\t\tbackground = null;\n\n\t\t}\n\n\t\tif ( background === null ) {\n\n\t\t\tsetClear( clearColor, clearAlpha );\n\t\t\tcurrentBackground = null;\n\t\t\tcurrentBackgroundVersion = 0;\n\n\t\t} else if ( background && background.isColor ) {\n\n\t\t\tsetClear( background, 1 );\n\t\t\tforceClear = true;\n\t\t\tcurrentBackground = null;\n\t\t\tcurrentBackgroundVersion = 0;\n\n\t\t}\n\n\t\tif ( renderer.autoClear || forceClear ) {\n\n\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\n\t\t}\n\n\t\tif ( background && ( background.isCubeTexture || background.isWebGLRenderTargetCube || background.mapping === CubeUVReflectionMapping ) ) {\n\n\t\t\tif ( boxMesh === undefined ) {\n\n\t\t\t\tboxMesh = new Mesh(\n\t\t\t\t\tnew BoxBufferGeometry( 1, 1, 1 ),\n\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\ttype: 'BackgroundCubeMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.cube.uniforms ),\n\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t} )\n\t\t\t\t);\n\n\t\t\t\tboxMesh.geometry.deleteAttribute( 'normal' );\n\t\t\t\tboxMesh.geometry.deleteAttribute( 'uv' );\n\n\t\t\t\tboxMesh.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\n\n\t\t\t\t};\n\n\t\t\t\t// enable code injection for non-built-in material\n\t\t\t\tObject.defineProperty( boxMesh.material, 'envMap', {\n\n\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\treturn this.uniforms.envMap.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tobjects.update( boxMesh );\n\n\t\t\t}\n\n\t\t\tvar texture = background.isWebGLRenderTargetCube ? background.texture : background;\n\n\t\t\tboxMesh.material.uniforms.envMap.value = texture;\n\t\t\tboxMesh.material.uniforms.flipEnvMap.value = texture.isCubeTexture ? - 1 : 1;\n\n\t\t\tif ( currentBackground !== background ||\n\t\t\t     currentBackgroundVersion !== texture.version ) {\n\n\t\t\t\tboxMesh.material.needsUpdate = true;\n\n\t\t\t\tcurrentBackground = background;\n\t\t\t\tcurrentBackgroundVersion = texture.version;\n\n\t\t\t}\n\n\t\t\t// push to the pre-sorted opaque render list\n\t\t\trenderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );\n\n\t\t} else if ( background && background.isTexture ) {\n\n\t\t\tif ( planeMesh === undefined ) {\n\n\t\t\t\tplaneMesh = new Mesh(\n\t\t\t\t\tnew PlaneBufferGeometry( 2, 2 ),\n\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\ttype: 'BackgroundMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.background.uniforms ),\n\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\n\t\t\t\t\t\tside: FrontSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t} )\n\t\t\t\t);\n\n\t\t\t\tplaneMesh.geometry.deleteAttribute( 'normal' );\n\n\t\t\t\t// enable code injection for non-built-in material\n\t\t\t\tObject.defineProperty( planeMesh.material, 'map', {\n\n\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\treturn this.uniforms.t2D.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tobjects.update( planeMesh );\n\n\t\t\t}\n\n\t\t\tplaneMesh.material.uniforms.t2D.value = background;\n\n\t\t\tif ( background.matrixAutoUpdate === true ) {\n\n\t\t\t\tbackground.updateMatrix();\n\n\t\t\t}\n\n\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy( background.matrix );\n\n\t\t\tif ( currentBackground !== background ||\n\t\t\t\t   currentBackgroundVersion !== background.version ) {\n\n\t\t\t\tplaneMesh.material.needsUpdate = true;\n\n\t\t\t\tcurrentBackground = background;\n\t\t\t\tcurrentBackgroundVersion = background.version;\n\n\t\t\t}\n\n\n\t\t\t// push to the pre-sorted opaque render list\n\t\t\trenderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );\n\n\t\t}\n\n\t}\n\n\tfunction setClear( color, alpha ) {\n\n\t\tstate.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );\n\n\t}\n\n\treturn {\n\n\t\tgetClearColor: function () {\n\n\t\t\treturn clearColor;\n\n\t\t},\n\t\tsetClearColor: function ( color, alpha ) {\n\n\t\t\tclearColor.set( color );\n\t\t\tclearAlpha = alpha !== undefined ? alpha : 1;\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t},\n\t\tgetClearAlpha: function () {\n\n\t\t\treturn clearAlpha;\n\n\t\t},\n\t\tsetClearAlpha: function ( alpha ) {\n\n\t\t\tclearAlpha = alpha;\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t},\n\t\trender: render\n\n\t};\n\n}\n\n\nexport { WebGLBackground };\n"]},"metadata":{},"sourceType":"module"}