{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport { ClearMaskPass, MaskPass } from \"./MaskPass.js\";\nimport { ShaderPass } from \"./ShaderPass.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { LinearFilter, RGBAFormat, Vector2, WebGLRenderTarget } from \"three/src/Three\";\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nvar EffectComposer = function (renderer, renderTarget) {\n  this.renderer = renderer;\n\n  if (renderTarget === undefined) {\n    var parameters = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBAFormat,\n      stencilBuffer: false\n    };\n    var size = renderer.getDrawingBufferSize(new Vector2());\n    renderTarget = new WebGLRenderTarget(size.width, size.height, parameters);\n    renderTarget.texture.name = \"EffectComposer.rt1\";\n  }\n\n  this.renderTarget1 = renderTarget;\n  this.renderTarget2 = renderTarget.clone();\n  this.renderTarget2.texture.name = \"EffectComposer.rt2\";\n  this.writeBuffer = this.renderTarget1;\n  this.readBuffer = this.renderTarget2;\n  this.passes = []; // dependencies\n\n  if (CopyShader === undefined) {\n    console.error(\"THREE.EffectComposer relies on THREE.CopyShader\");\n  }\n\n  if (ShaderPass === undefined) {\n    console.error(\"THREE.EffectComposer relies on THREE.ShaderPass\");\n  }\n\n  this.copyPass = new ShaderPass(CopyShader);\n  this._previousFrameTime = _Date$now();\n};\n\n_Object$assign(EffectComposer.prototype, {\n  swapBuffers: function () {\n    var tmp = this.readBuffer;\n    this.readBuffer = this.writeBuffer;\n    this.writeBuffer = tmp;\n  },\n  addPass: function (pass) {\n    this.passes.push(pass);\n    var size = this.renderer.getDrawingBufferSize(new Vector2());\n    pass.setSize(size.width, size.height);\n  },\n  insertPass: function (pass, index) {\n    this.passes.splice(index, 0, pass);\n  },\n  render: function (deltaTime) {\n    // deltaTime value is in seconds\n    if (deltaTime === undefined) {\n      deltaTime = (_Date$now() - this._previousFrameTime) * 0.001;\n    }\n\n    this._previousFrameTime = _Date$now();\n    var currentRenderTarget = this.renderer.getRenderTarget();\n    var maskActive = false;\n    var pass,\n        i,\n        il = this.passes.length;\n\n    for (i = 0; i < il; i++) {\n      pass = this.passes[i];\n      if (pass.enabled === false) continue;\n      pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);\n\n      if (pass.needsSwap) {\n        if (maskActive) {\n          var context = this.renderer.context;\n          context.stencilFunc(context.NOTEQUAL, 1, 0xffffffff);\n          this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime);\n          context.stencilFunc(context.EQUAL, 1, 0xffffffff);\n        }\n\n        this.swapBuffers();\n      }\n\n      if (MaskPass !== undefined) {\n        if (pass instanceof MaskPass) {\n          maskActive = true;\n        } else if (pass instanceof ClearMaskPass) {\n          maskActive = false;\n        }\n      }\n    }\n\n    this.renderer.setRenderTarget(currentRenderTarget);\n  },\n  reset: function (renderTarget) {\n    if (renderTarget === undefined) {\n      var size = this.renderer.getDrawingBufferSize(new Vector2());\n      renderTarget = this.renderTarget1.clone();\n      renderTarget.setSize(size.width, size.height);\n    }\n\n    this.renderTarget1.dispose();\n    this.renderTarget2.dispose();\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n  },\n  setSize: function (width, height) {\n    this.renderTarget1.setSize(width, height);\n    this.renderTarget2.setSize(width, height);\n\n    for (var i = 0; i < this.passes.length; i++) {\n      this.passes[i].setSize(width, height);\n    }\n  }\n});\n\nexport { EffectComposer };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/resources/postprocessing/EffectComposer.js"],"names":["EffectComposer","renderTarget","parameters","minFilter","magFilter","format","stencilBuffer","size","renderer","CopyShader","console","ShaderPass","swapBuffers","tmp","addPass","pass","insertPass","render","deltaTime","currentRenderTarget","maskActive","il","i","context","MaskPass","reset","setSize"],"mappings":";;AAAA,SAAA,aAAA,EAAA,QAAA,QAAA,eAAA;AACA,SAAA,UAAA,QAAA,iBAAA;AACA,SAAA,UAAA,QAAA,0BAAA;AACA,SAAA,YAAA,EAAA,UAAA,EAAA,OAAA,EAAA,iBAAA,QAAA,iBAAA;AAMA;;;;AAIA,IAAIA,cAAc,GAAG,UAAA,QAAA,EAAA,YAAA,EAAiC;AAClD,OAAA,QAAA,GAAA,QAAA;;AAEA,MAAIC,YAAY,KAAhB,SAAA,EAAgC;AAC5B,QAAIC,UAAU,GAAG;AACbC,MAAAA,SAAS,EADI,YAAA;AAEbC,MAAAA,SAAS,EAFI,YAAA;AAGbC,MAAAA,MAAM,EAHO,UAAA;AAIbC,MAAAA,aAAa,EAAE;AAJF,KAAjB;AAOA,QAAIC,IAAI,GAAGC,QAAQ,CAARA,oBAAAA,CAA8B,IAAzC,OAAyC,EAA9BA,CAAX;AACAP,IAAAA,YAAY,GAAG,IAAA,iBAAA,CACXM,IAAI,CADO,KAAA,EAEXA,IAAI,CAFO,MAAA,EAAfN,UAAe,CAAfA;AAKAA,IAAAA,YAAY,CAAZA,OAAAA,CAAAA,IAAAA,GAAAA,oBAAAA;AACH;;AAED,OAAA,aAAA,GAAA,YAAA;AACA,OAAA,aAAA,GAAqBA,YAAY,CAAjC,KAAqBA,EAArB;AACA,OAAA,aAAA,CAAA,OAAA,CAAA,IAAA,GAAA,oBAAA;AACA,OAAA,WAAA,GAAmB,KAAnB,aAAA;AACA,OAAA,UAAA,GAAkB,KAAlB,aAAA;AACA,OAAA,MAAA,GAzBkD,EAyBlD,CAzBkD,CA2BlD;;AACA,MAAIQ,UAAU,KAAd,SAAA,EAA8B;AAC1BC,IAAAA,OAAO,CAAPA,KAAAA,CAAAA,iDAAAA;AACH;;AACD,MAAIC,UAAU,KAAd,SAAA,EAA8B;AAC1BD,IAAAA,OAAO,CAAPA,KAAAA,CAAAA,iDAAAA;AACH;;AACD,OAAA,QAAA,GAAgB,IAAA,UAAA,CAAhB,UAAgB,CAAhB;AACA,OAAA,kBAAA,GAA0B,SAA1B,EAAA;AAnCJ,CAAA;;AAsCA,cAAA,CAAcV,cAAc,CAA5B,SAAA,EAAwC;AACpCY,EAAAA,WAAW,EAAE,YAAW;AACpB,QAAIC,GAAG,GAAG,KAAV,UAAA;AACA,SAAA,UAAA,GAAkB,KAAlB,WAAA;AACA,SAAA,WAAA,GAAA,GAAA;AAJgC,GAAA;AAOpCC,EAAAA,OAAO,EAAE,UAAA,IAAA,EAAe;AACpB,SAAA,MAAA,CAAA,IAAA,CAAA,IAAA;AACA,QAAIP,IAAI,GAAG,KAAA,QAAA,CAAA,oBAAA,CAAmC,IAA9C,OAA8C,EAAnC,CAAX;AACAQ,IAAAA,IAAI,CAAJA,OAAAA,CAAaR,IAAI,CAAjBQ,KAAAA,EAAyBR,IAAI,CAA7BQ,MAAAA;AAVgC,GAAA;AAapCC,EAAAA,UAAU,EAAE,UAAA,IAAA,EAAA,KAAA,EAAsB;AAC9B,SAAA,MAAA,CAAA,MAAA,CAAA,KAAA,EAAA,CAAA,EAAA,IAAA;AAdgC,GAAA;AAiBpCC,EAAAA,MAAM,EAAE,UAAA,SAAA,EAAoB;AACxB;AACA,QAAIC,SAAS,KAAb,SAAA,EAA6B;AACzBA,MAAAA,SAAS,GAAG,CAAC,SAAA,KAAa,KAAd,kBAAA,IAAZA,KAAAA;AACH;;AACD,SAAA,kBAAA,GAA0B,SAA1B,EAAA;AACA,QAAIC,mBAAmB,GAAG,KAAA,QAAA,CAA1B,eAA0B,EAA1B;AACA,QAAIC,UAAU,GAAd,KAAA;AACA,QAAA,IAAA;AAAA,QAAA,CAAA;AAAA,QAEIC,EAAE,GAAG,KAAA,MAAA,CAFT,MAAA;;AAIA,SAAKC,CAAC,GAAN,CAAA,EAAYA,CAAC,GAAb,EAAA,EAAoBA,CAApB,EAAA,EAAyB;AACrBP,MAAAA,IAAI,GAAG,KAAA,MAAA,CAAPA,CAAO,CAAPA;AACA,UAAIA,IAAI,CAAJA,OAAAA,KAAJ,KAAA,EAA4B;AAE5BA,MAAAA,IAAI,CAAJA,MAAAA,CACI,KADJA,QAAAA,EAEI,KAFJA,WAAAA,EAGI,KAHJA,UAAAA,EAAAA,SAAAA,EAAAA,UAAAA;;AAOA,UAAIA,IAAI,CAAR,SAAA,EAAoB;AAChB,YAAA,UAAA,EAAgB;AACZ,cAAIQ,OAAO,GAAG,KAAA,QAAA,CAAd,OAAA;AACAA,UAAAA,OAAO,CAAPA,WAAAA,CAAoBA,OAAO,CAA3BA,QAAAA,EAAAA,CAAAA,EAAAA,UAAAA;AACA,eAAA,QAAA,CAAA,MAAA,CACI,KADJ,QAAA,EAEI,KAFJ,WAAA,EAGI,KAHJ,UAAA,EAAA,SAAA;AAMAA,UAAAA,OAAO,CAAPA,WAAAA,CAAoBA,OAAO,CAA3BA,KAAAA,EAAAA,CAAAA,EAAAA,UAAAA;AACH;;AACD,aAAA,WAAA;AACH;;AACD,UAAIC,QAAQ,KAAZ,SAAA,EAA4B;AACxB,YAAIT,IAAI,YAAR,QAAA,EAA8B;AAC1BK,UAAAA,UAAU,GAAVA,IAAAA;AADJ,SAAA,MAEO,IAAIL,IAAI,YAAR,aAAA,EAAmC;AACtCK,UAAAA,UAAU,GAAVA,KAAAA;AACH;AACJ;AACJ;;AACD,SAAA,QAAA,CAAA,eAAA,CAAA,mBAAA;AA9DgC,GAAA;AAiEpCK,EAAAA,KAAK,EAAE,UAAA,YAAA,EAAuB;AAC1B,QAAIxB,YAAY,KAAhB,SAAA,EAAgC;AAC5B,UAAIM,IAAI,GAAG,KAAA,QAAA,CAAA,oBAAA,CAAmC,IAA9C,OAA8C,EAAnC,CAAX;AACAN,MAAAA,YAAY,GAAG,KAAA,aAAA,CAAfA,KAAe,EAAfA;AACAA,MAAAA,YAAY,CAAZA,OAAAA,CAAqBM,IAAI,CAAzBN,KAAAA,EAAiCM,IAAI,CAArCN,MAAAA;AACH;;AACD,SAAA,aAAA,CAAA,OAAA;AACA,SAAA,aAAA,CAAA,OAAA;AACA,SAAA,aAAA,GAAA,YAAA;AACA,SAAA,aAAA,GAAqBA,YAAY,CAAjC,KAAqBA,EAArB;AACA,SAAA,WAAA,GAAmB,KAAnB,aAAA;AACA,SAAA,UAAA,GAAkB,KAAlB,aAAA;AA5EgC,GAAA;AA8EpCyB,EAAAA,OAAO,EAAE,UAAA,KAAA,EAAA,MAAA,EAAwB;AAC7B,SAAA,aAAA,CAAA,OAAA,CAAA,KAAA,EAAA,MAAA;AACA,SAAA,aAAA,CAAA,OAAA,CAAA,KAAA,EAAA,MAAA;;AACA,SAAK,IAAIJ,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAG,KAAA,MAAA,CAApB,MAAA,EAAwCA,CAAxC,EAAA,EAA6C;AACzC,WAAA,MAAA,CAAA,CAAA,EAAA,OAAA,CAAA,KAAA,EAAA,MAAA;AACH;AACJ;AApFmC,CAAxC,CAAA;;AAuFA,SAAA,cAAA","sourcesContent":["import { ClearMaskPass, MaskPass } from \"./MaskPass.js\";\nimport { ShaderPass } from \"./ShaderPass.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport {\n    LinearFilter,\n    RGBAFormat,\n    Vector2,\n    WebGLRenderTarget\n} from \"three/src/Three\";\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nvar EffectComposer = function(renderer, renderTarget) {\n    this.renderer = renderer;\n\n    if (renderTarget === undefined) {\n        var parameters = {\n            minFilter: LinearFilter,\n            magFilter: LinearFilter,\n            format: RGBAFormat,\n            stencilBuffer: false\n        };\n\n        var size = renderer.getDrawingBufferSize(new Vector2());\n        renderTarget = new WebGLRenderTarget(\n            size.width,\n            size.height,\n            parameters\n        );\n        renderTarget.texture.name = \"EffectComposer.rt1\";\n    }\n\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.renderTarget2.texture.name = \"EffectComposer.rt2\";\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n    this.passes = [];\n\n    // dependencies\n    if (CopyShader === undefined) {\n        console.error(\"THREE.EffectComposer relies on THREE.CopyShader\");\n    }\n    if (ShaderPass === undefined) {\n        console.error(\"THREE.EffectComposer relies on THREE.ShaderPass\");\n    }\n    this.copyPass = new ShaderPass(CopyShader);\n    this._previousFrameTime = Date.now();\n};\n\nObject.assign(EffectComposer.prototype, {\n    swapBuffers: function() {\n        var tmp = this.readBuffer;\n        this.readBuffer = this.writeBuffer;\n        this.writeBuffer = tmp;\n    },\n\n    addPass: function(pass) {\n        this.passes.push(pass);\n        var size = this.renderer.getDrawingBufferSize(new Vector2());\n        pass.setSize(size.width, size.height);\n    },\n\n    insertPass: function(pass, index) {\n        this.passes.splice(index, 0, pass);\n    },\n\n    render: function(deltaTime) {\n        // deltaTime value is in seconds\n        if (deltaTime === undefined) {\n            deltaTime = (Date.now() - this._previousFrameTime) * 0.001;\n        }\n        this._previousFrameTime = Date.now();\n        var currentRenderTarget = this.renderer.getRenderTarget();\n        var maskActive = false;\n        var pass,\n            i,\n            il = this.passes.length;\n\n        for (i = 0; i < il; i++) {\n            pass = this.passes[i];\n            if (pass.enabled === false) continue;\n\n            pass.render(\n                this.renderer,\n                this.writeBuffer,\n                this.readBuffer,\n                deltaTime,\n                maskActive\n            );\n            if (pass.needsSwap) {\n                if (maskActive) {\n                    var context = this.renderer.context;\n                    context.stencilFunc(context.NOTEQUAL, 1, 0xffffffff);\n                    this.copyPass.render(\n                        this.renderer,\n                        this.writeBuffer,\n                        this.readBuffer,\n                        deltaTime\n                    );\n                    context.stencilFunc(context.EQUAL, 1, 0xffffffff);\n                }\n                this.swapBuffers();\n            }\n            if (MaskPass !== undefined) {\n                if (pass instanceof MaskPass) {\n                    maskActive = true;\n                } else if (pass instanceof ClearMaskPass) {\n                    maskActive = false;\n                }\n            }\n        }\n        this.renderer.setRenderTarget(currentRenderTarget);\n    },\n\n    reset: function(renderTarget) {\n        if (renderTarget === undefined) {\n            var size = this.renderer.getDrawingBufferSize(new Vector2());\n            renderTarget = this.renderTarget1.clone();\n            renderTarget.setSize(size.width, size.height);\n        }\n        this.renderTarget1.dispose();\n        this.renderTarget2.dispose();\n        this.renderTarget1 = renderTarget;\n        this.renderTarget2 = renderTarget.clone();\n        this.writeBuffer = this.renderTarget1;\n        this.readBuffer = this.renderTarget2;\n    },\n    setSize: function(width, height) {\n        this.renderTarget1.setSize(width, height);\n        this.renderTarget2.setSize(width, height);\n        for (var i = 0; i < this.passes.length; i++) {\n            this.passes[i].setSize(width, height);\n        }\n    }\n});\n\nexport { EffectComposer };\n"]},"metadata":{},"sourceType":"module"}