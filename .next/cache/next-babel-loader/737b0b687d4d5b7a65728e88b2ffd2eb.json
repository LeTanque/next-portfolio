{"ast":null,"code":"import _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author benaadams / https://twitter.com/ben_a_adams\n * @author Mugen87 / https://github.com/Mugen87\n */\nimport { Geometry } from '../core/Geometry.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { Vector3 } from '../math/Vector3.js'; // SphereGeometry\n\nfunction SphereGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) {\n  Geometry.call(this);\n  this.type = 'SphereGeometry';\n  this.parameters = {\n    radius: radius,\n    widthSegments: widthSegments,\n    heightSegments: heightSegments,\n    phiStart: phiStart,\n    phiLength: phiLength,\n    thetaStart: thetaStart,\n    thetaLength: thetaLength\n  };\n  this.fromBufferGeometry(new SphereBufferGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength));\n  this.mergeVertices();\n}\n\nSphereGeometry.prototype = _Object$create(Geometry.prototype);\nSphereGeometry.prototype.constructor = SphereGeometry; // SphereBufferGeometry\n\nfunction SphereBufferGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) {\n  BufferGeometry.call(this);\n  this.type = 'SphereBufferGeometry';\n  this.parameters = {\n    radius: radius,\n    widthSegments: widthSegments,\n    heightSegments: heightSegments,\n    phiStart: phiStart,\n    phiLength: phiLength,\n    thetaStart: thetaStart,\n    thetaLength: thetaLength\n  };\n  radius = radius || 1;\n  widthSegments = Math.max(3, Math.floor(widthSegments) || 8);\n  heightSegments = Math.max(2, Math.floor(heightSegments) || 6);\n  phiStart = phiStart !== undefined ? phiStart : 0;\n  phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n  thetaStart = thetaStart !== undefined ? thetaStart : 0;\n  thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n  var thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);\n  var ix, iy;\n  var index = 0;\n  var grid = [];\n  var vertex = new Vector3();\n  var normal = new Vector3(); // buffers\n\n  var indices = [];\n  var vertices = [];\n  var normals = [];\n  var uvs = []; // generate vertices, normals and uvs\n\n  for (iy = 0; iy <= heightSegments; iy++) {\n    var verticesRow = [];\n    var v = iy / heightSegments; // special case for the poles\n\n    var uOffset = 0;\n\n    if (iy == 0 && thetaStart == 0) {\n      uOffset = 0.5 / widthSegments;\n    } else if (iy == heightSegments && thetaEnd == Math.PI) {\n      uOffset = -0.5 / widthSegments;\n    }\n\n    for (ix = 0; ix <= widthSegments; ix++) {\n      var u = ix / widthSegments; // vertex\n\n      vertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n      vertex.y = radius * Math.cos(thetaStart + v * thetaLength);\n      vertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n      vertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n      normal.copy(vertex).normalize();\n      normals.push(normal.x, normal.y, normal.z); // uv\n\n      uvs.push(u + uOffset, 1 - v);\n      verticesRow.push(index++);\n    }\n\n    grid.push(verticesRow);\n  } // indices\n\n\n  for (iy = 0; iy < heightSegments; iy++) {\n    for (ix = 0; ix < widthSegments; ix++) {\n      var a = grid[iy][ix + 1];\n      var b = grid[iy][ix];\n      var c = grid[iy + 1][ix];\n      var d = grid[iy + 1][ix + 1];\n      if (iy !== 0 || thetaStart > 0) indices.push(a, b, d);\n      if (iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d);\n    }\n  } // build geometry\n\n\n  this.setIndex(indices);\n  this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n  this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n  this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n}\n\nSphereBufferGeometry.prototype = _Object$create(BufferGeometry.prototype);\nSphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\nexport { SphereGeometry, SphereBufferGeometry };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/geometries/SphereGeometry.js"],"names":["Geometry","BufferGeometry","Float32BufferAttribute","Vector3","SphereGeometry","radius","widthSegments","heightSegments","phiStart","phiLength","thetaStart","thetaLength","call","type","parameters","fromBufferGeometry","SphereBufferGeometry","mergeVertices","prototype","constructor","Math","max","floor","undefined","PI","thetaEnd","min","ix","iy","index","grid","vertex","normal","indices","vertices","normals","uvs","verticesRow","v","uOffset","u","x","cos","sin","y","z","push","copy","normalize","a","b","c","d","setIndex","setAttribute"],"mappings":"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","sourcesContent":["/**\n * @author mrdoob / http://mrdoob.com/\n * @author benaadams / https://twitter.com/ben_a_adams\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nimport { Geometry } from '../core/Geometry.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { Vector3 } from '../math/Vector3.js';\n\n// SphereGeometry\n\nfunction SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'SphereGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tthis.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\n\tthis.mergeVertices();\n\n}\n\nSphereGeometry.prototype = Object.create( Geometry.prototype );\nSphereGeometry.prototype.constructor = SphereGeometry;\n\n// SphereBufferGeometry\n\nfunction SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'SphereBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tradius = radius || 1;\n\n\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\n\tphiStart = phiStart !== undefined ? phiStart : 0;\n\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\n\tvar thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );\n\n\tvar ix, iy;\n\n\tvar index = 0;\n\tvar grid = [];\n\n\tvar vertex = new Vector3();\n\tvar normal = new Vector3();\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// generate vertices, normals and uvs\n\n\tfor ( iy = 0; iy <= heightSegments; iy ++ ) {\n\n\t\tvar verticesRow = [];\n\n\t\tvar v = iy / heightSegments;\n\n\t\t// special case for the poles\n\n\t\tvar uOffset = 0;\n\n\t\tif ( iy == 0 && thetaStart == 0 ) {\n\n\t\t\tuOffset = 0.5 / widthSegments;\n\n\t\t} else if ( iy == heightSegments && thetaEnd == Math.PI ) {\n\n\t\t\tuOffset = - 0.5 / widthSegments;\n\n\t\t}\n\n\t\tfor ( ix = 0; ix <= widthSegments; ix ++ ) {\n\n\t\t\tvar u = ix / widthSegments;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tnormal.copy( vertex ).normalize();\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t// uv\n\n\t\t\tuvs.push( u + uOffset, 1 - v );\n\n\t\t\tverticesRow.push( index ++ );\n\n\t\t}\n\n\t\tgrid.push( verticesRow );\n\n\t}\n\n\t// indices\n\n\tfor ( iy = 0; iy < heightSegments; iy ++ ) {\n\n\t\tfor ( ix = 0; ix < widthSegments; ix ++ ) {\n\n\t\t\tvar a = grid[ iy ][ ix + 1 ];\n\t\t\tvar b = grid[ iy ][ ix ];\n\t\t\tvar c = grid[ iy + 1 ][ ix ];\n\t\t\tvar d = grid[ iy + 1 ][ ix + 1 ];\n\n\t\t\tif ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );\n\t\t\tif ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n}\n\nSphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nSphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\n\n\nexport { SphereGeometry, SphereBufferGeometry };\n"]},"metadata":{},"sourceType":"module"}