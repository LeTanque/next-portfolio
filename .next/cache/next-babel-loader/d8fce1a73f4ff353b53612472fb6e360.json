{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nimport { Vector2 } from '../math/Vector2.js';\n\nfunction DirectGeometry() {\n  this.vertices = [];\n  this.normals = [];\n  this.colors = [];\n  this.uvs = [];\n  this.uvs2 = [];\n  this.groups = [];\n  this.morphTargets = {};\n  this.skinWeights = [];\n  this.skinIndices = []; // this.lineDistances = [];\n\n  this.boundingBox = null;\n  this.boundingSphere = null; // update flags\n\n  this.verticesNeedUpdate = false;\n  this.normalsNeedUpdate = false;\n  this.colorsNeedUpdate = false;\n  this.uvsNeedUpdate = false;\n  this.groupsNeedUpdate = false;\n}\n\n_Object$assign(DirectGeometry.prototype, {\n  computeGroups: function (geometry) {\n    var group;\n    var groups = [];\n    var materialIndex = undefined;\n    var faces = geometry.faces;\n\n    for (var i = 0; i < faces.length; i++) {\n      var face = faces[i]; // materials\n\n      if (face.materialIndex !== materialIndex) {\n        materialIndex = face.materialIndex;\n\n        if (group !== undefined) {\n          group.count = i * 3 - group.start;\n          groups.push(group);\n        }\n\n        group = {\n          start: i * 3,\n          materialIndex: materialIndex\n        };\n      }\n    }\n\n    if (group !== undefined) {\n      group.count = i * 3 - group.start;\n      groups.push(group);\n    }\n\n    this.groups = groups;\n  },\n  fromGeometry: function (geometry) {\n    var faces = geometry.faces;\n    var vertices = geometry.vertices;\n    var faceVertexUvs = geometry.faceVertexUvs;\n    var hasFaceVertexUv = faceVertexUvs[0] && faceVertexUvs[0].length > 0;\n    var hasFaceVertexUv2 = faceVertexUvs[1] && faceVertexUvs[1].length > 0; // morphs\n\n    var morphTargets = geometry.morphTargets;\n    var morphTargetsLength = morphTargets.length;\n    var morphTargetsPosition;\n\n    if (morphTargetsLength > 0) {\n      morphTargetsPosition = [];\n\n      for (var i = 0; i < morphTargetsLength; i++) {\n        morphTargetsPosition[i] = {\n          name: morphTargets[i].name,\n          data: []\n        };\n      }\n\n      this.morphTargets.position = morphTargetsPosition;\n    }\n\n    var morphNormals = geometry.morphNormals;\n    var morphNormalsLength = morphNormals.length;\n    var morphTargetsNormal;\n\n    if (morphNormalsLength > 0) {\n      morphTargetsNormal = [];\n\n      for (var i = 0; i < morphNormalsLength; i++) {\n        morphTargetsNormal[i] = {\n          name: morphNormals[i].name,\n          data: []\n        };\n      }\n\n      this.morphTargets.normal = morphTargetsNormal;\n    } // skins\n\n\n    var skinIndices = geometry.skinIndices;\n    var skinWeights = geometry.skinWeights;\n    var hasSkinIndices = skinIndices.length === vertices.length;\n    var hasSkinWeights = skinWeights.length === vertices.length; //\n\n    if (vertices.length > 0 && faces.length === 0) {\n      console.error('THREE.DirectGeometry: Faceless geometries are not supported.');\n    }\n\n    for (var i = 0; i < faces.length; i++) {\n      var face = faces[i];\n      this.vertices.push(vertices[face.a], vertices[face.b], vertices[face.c]);\n      var vertexNormals = face.vertexNormals;\n\n      if (vertexNormals.length === 3) {\n        this.normals.push(vertexNormals[0], vertexNormals[1], vertexNormals[2]);\n      } else {\n        var normal = face.normal;\n        this.normals.push(normal, normal, normal);\n      }\n\n      var vertexColors = face.vertexColors;\n\n      if (vertexColors.length === 3) {\n        this.colors.push(vertexColors[0], vertexColors[1], vertexColors[2]);\n      } else {\n        var color = face.color;\n        this.colors.push(color, color, color);\n      }\n\n      if (hasFaceVertexUv === true) {\n        var vertexUvs = faceVertexUvs[0][i];\n\n        if (vertexUvs !== undefined) {\n          this.uvs.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);\n        } else {\n          console.warn('THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i);\n          this.uvs.push(new Vector2(), new Vector2(), new Vector2());\n        }\n      }\n\n      if (hasFaceVertexUv2 === true) {\n        var vertexUvs = faceVertexUvs[1][i];\n\n        if (vertexUvs !== undefined) {\n          this.uvs2.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);\n        } else {\n          console.warn('THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i);\n          this.uvs2.push(new Vector2(), new Vector2(), new Vector2());\n        }\n      } // morphs\n\n\n      for (var j = 0; j < morphTargetsLength; j++) {\n        var morphTarget = morphTargets[j].vertices;\n        morphTargetsPosition[j].data.push(morphTarget[face.a], morphTarget[face.b], morphTarget[face.c]);\n      }\n\n      for (var j = 0; j < morphNormalsLength; j++) {\n        var morphNormal = morphNormals[j].vertexNormals[i];\n        morphTargetsNormal[j].data.push(morphNormal.a, morphNormal.b, morphNormal.c);\n      } // skins\n\n\n      if (hasSkinIndices) {\n        this.skinIndices.push(skinIndices[face.a], skinIndices[face.b], skinIndices[face.c]);\n      }\n\n      if (hasSkinWeights) {\n        this.skinWeights.push(skinWeights[face.a], skinWeights[face.b], skinWeights[face.c]);\n      }\n    }\n\n    this.computeGroups(geometry);\n    this.verticesNeedUpdate = geometry.verticesNeedUpdate;\n    this.normalsNeedUpdate = geometry.normalsNeedUpdate;\n    this.colorsNeedUpdate = geometry.colorsNeedUpdate;\n    this.uvsNeedUpdate = geometry.uvsNeedUpdate;\n    this.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n    if (geometry.boundingSphere !== null) {\n      this.boundingSphere = geometry.boundingSphere.clone();\n    }\n\n    if (geometry.boundingBox !== null) {\n      this.boundingBox = geometry.boundingBox.clone();\n    }\n\n    return this;\n  }\n});\n\nexport { DirectGeometry };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/core/DirectGeometry.js"],"names":["Vector2","DirectGeometry","vertices","normals","colors","uvs","uvs2","groups","morphTargets","skinWeights","skinIndices","boundingBox","boundingSphere","verticesNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","uvsNeedUpdate","groupsNeedUpdate","prototype","computeGroups","geometry","group","materialIndex","undefined","faces","i","length","face","count","start","push","fromGeometry","faceVertexUvs","hasFaceVertexUv","hasFaceVertexUv2","morphTargetsLength","morphTargetsPosition","name","data","position","morphNormals","morphNormalsLength","morphTargetsNormal","normal","hasSkinIndices","hasSkinWeights","console","error","a","b","c","vertexNormals","vertexColors","color","vertexUvs","warn","j","morphTarget","morphNormal","clone"],"mappings":";;AAAA;;;AAIA,SAASA,OAAT,QAAwB,oBAAxB;;AAEA,SAASC,cAAT,GAA0B;AAEzB,OAAKC,QAAL,GAAgB,EAAhB;AACA,OAAKC,OAAL,GAAe,EAAf;AACA,OAAKC,MAAL,GAAc,EAAd;AACA,OAAKC,GAAL,GAAW,EAAX;AACA,OAAKC,IAAL,GAAY,EAAZ;AAEA,OAAKC,MAAL,GAAc,EAAd;AAEA,OAAKC,YAAL,GAAoB,EAApB;AAEA,OAAKC,WAAL,GAAmB,EAAnB;AACA,OAAKC,WAAL,GAAmB,EAAnB,CAbyB,CAezB;;AAEA,OAAKC,WAAL,GAAmB,IAAnB;AACA,OAAKC,cAAL,GAAsB,IAAtB,CAlByB,CAoBzB;;AAEA,OAAKC,kBAAL,GAA0B,KAA1B;AACA,OAAKC,iBAAL,GAAyB,KAAzB;AACA,OAAKC,gBAAL,GAAwB,KAAxB;AACA,OAAKC,aAAL,GAAqB,KAArB;AACA,OAAKC,gBAAL,GAAwB,KAAxB;AAEA;;AAED,eAAehB,cAAc,CAACiB,SAA9B,EAAyC;AAExCC,EAAAA,aAAa,EAAE,UAAWC,QAAX,EAAsB;AAEpC,QAAIC,KAAJ;AACA,QAAId,MAAM,GAAG,EAAb;AACA,QAAIe,aAAa,GAAGC,SAApB;AAEA,QAAIC,KAAK,GAAGJ,QAAQ,CAACI,KAArB;;AAEA,SAAM,IAAIC,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGD,KAAK,CAACE,MAA3B,EAAmCD,CAAC,EAApC,EAA0C;AAEzC,UAAIE,IAAI,GAAGH,KAAK,CAAEC,CAAF,CAAhB,CAFyC,CAIzC;;AAEA,UAAKE,IAAI,CAACL,aAAL,KAAuBA,aAA5B,EAA4C;AAE3CA,QAAAA,aAAa,GAAGK,IAAI,CAACL,aAArB;;AAEA,YAAKD,KAAK,KAAKE,SAAf,EAA2B;AAE1BF,UAAAA,KAAK,CAACO,KAAN,GAAgBH,CAAC,GAAG,CAAN,GAAYJ,KAAK,CAACQ,KAAhC;AACAtB,UAAAA,MAAM,CAACuB,IAAP,CAAaT,KAAb;AAEA;;AAEDA,QAAAA,KAAK,GAAG;AACPQ,UAAAA,KAAK,EAAEJ,CAAC,GAAG,CADJ;AAEPH,UAAAA,aAAa,EAAEA;AAFR,SAAR;AAKA;AAED;;AAED,QAAKD,KAAK,KAAKE,SAAf,EAA2B;AAE1BF,MAAAA,KAAK,CAACO,KAAN,GAAgBH,CAAC,GAAG,CAAN,GAAYJ,KAAK,CAACQ,KAAhC;AACAtB,MAAAA,MAAM,CAACuB,IAAP,CAAaT,KAAb;AAEA;;AAED,SAAKd,MAAL,GAAcA,MAAd;AAEA,GA7CuC;AA+CxCwB,EAAAA,YAAY,EAAE,UAAWX,QAAX,EAAsB;AAEnC,QAAII,KAAK,GAAGJ,QAAQ,CAACI,KAArB;AACA,QAAItB,QAAQ,GAAGkB,QAAQ,CAAClB,QAAxB;AACA,QAAI8B,aAAa,GAAGZ,QAAQ,CAACY,aAA7B;AAEA,QAAIC,eAAe,GAAGD,aAAa,CAAE,CAAF,CAAb,IAAsBA,aAAa,CAAE,CAAF,CAAb,CAAmBN,MAAnB,GAA4B,CAAxE;AACA,QAAIQ,gBAAgB,GAAGF,aAAa,CAAE,CAAF,CAAb,IAAsBA,aAAa,CAAE,CAAF,CAAb,CAAmBN,MAAnB,GAA4B,CAAzE,CAPmC,CASnC;;AAEA,QAAIlB,YAAY,GAAGY,QAAQ,CAACZ,YAA5B;AACA,QAAI2B,kBAAkB,GAAG3B,YAAY,CAACkB,MAAtC;AAEA,QAAIU,oBAAJ;;AAEA,QAAKD,kBAAkB,GAAG,CAA1B,EAA8B;AAE7BC,MAAAA,oBAAoB,GAAG,EAAvB;;AAEA,WAAM,IAAIX,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGU,kBAArB,EAAyCV,CAAC,EAA1C,EAAgD;AAE/CW,QAAAA,oBAAoB,CAAEX,CAAF,CAApB,GAA4B;AAC3BY,UAAAA,IAAI,EAAE7B,YAAY,CAAEiB,CAAF,CAAZ,CAAkBY,IADG;AAE1BC,UAAAA,IAAI,EAAE;AAFoB,SAA5B;AAKA;;AAED,WAAK9B,YAAL,CAAkB+B,QAAlB,GAA6BH,oBAA7B;AAEA;;AAED,QAAII,YAAY,GAAGpB,QAAQ,CAACoB,YAA5B;AACA,QAAIC,kBAAkB,GAAGD,YAAY,CAACd,MAAtC;AAEA,QAAIgB,kBAAJ;;AAEA,QAAKD,kBAAkB,GAAG,CAA1B,EAA8B;AAE7BC,MAAAA,kBAAkB,GAAG,EAArB;;AAEA,WAAM,IAAIjB,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGgB,kBAArB,EAAyChB,CAAC,EAA1C,EAAgD;AAE/CiB,QAAAA,kBAAkB,CAAEjB,CAAF,CAAlB,GAA0B;AACzBY,UAAAA,IAAI,EAAEG,YAAY,CAAEf,CAAF,CAAZ,CAAkBY,IADC;AAExBC,UAAAA,IAAI,EAAE;AAFkB,SAA1B;AAKA;;AAED,WAAK9B,YAAL,CAAkBmC,MAAlB,GAA2BD,kBAA3B;AAEA,KArDkC,CAuDnC;;;AAEA,QAAIhC,WAAW,GAAGU,QAAQ,CAACV,WAA3B;AACA,QAAID,WAAW,GAAGW,QAAQ,CAACX,WAA3B;AAEA,QAAImC,cAAc,GAAGlC,WAAW,CAACgB,MAAZ,KAAuBxB,QAAQ,CAACwB,MAArD;AACA,QAAImB,cAAc,GAAGpC,WAAW,CAACiB,MAAZ,KAAuBxB,QAAQ,CAACwB,MAArD,CA7DmC,CA+DnC;;AAEA,QAAKxB,QAAQ,CAACwB,MAAT,GAAkB,CAAlB,IAAuBF,KAAK,CAACE,MAAN,KAAiB,CAA7C,EAAiD;AAEhDoB,MAAAA,OAAO,CAACC,KAAR,CAAe,8DAAf;AAEA;;AAED,SAAM,IAAItB,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGD,KAAK,CAACE,MAA3B,EAAmCD,CAAC,EAApC,EAA0C;AAEzC,UAAIE,IAAI,GAAGH,KAAK,CAAEC,CAAF,CAAhB;AAEA,WAAKvB,QAAL,CAAc4B,IAAd,CAAoB5B,QAAQ,CAAEyB,IAAI,CAACqB,CAAP,CAA5B,EAAwC9C,QAAQ,CAAEyB,IAAI,CAACsB,CAAP,CAAhD,EAA4D/C,QAAQ,CAAEyB,IAAI,CAACuB,CAAP,CAApE;AAEA,UAAIC,aAAa,GAAGxB,IAAI,CAACwB,aAAzB;;AAEA,UAAKA,aAAa,CAACzB,MAAd,KAAyB,CAA9B,EAAkC;AAEjC,aAAKvB,OAAL,CAAa2B,IAAb,CAAmBqB,aAAa,CAAE,CAAF,CAAhC,EAAuCA,aAAa,CAAE,CAAF,CAApD,EAA2DA,aAAa,CAAE,CAAF,CAAxE;AAEA,OAJD,MAIO;AAEN,YAAIR,MAAM,GAAGhB,IAAI,CAACgB,MAAlB;AAEA,aAAKxC,OAAL,CAAa2B,IAAb,CAAmBa,MAAnB,EAA2BA,MAA3B,EAAmCA,MAAnC;AAEA;;AAED,UAAIS,YAAY,GAAGzB,IAAI,CAACyB,YAAxB;;AAEA,UAAKA,YAAY,CAAC1B,MAAb,KAAwB,CAA7B,EAAiC;AAEhC,aAAKtB,MAAL,CAAY0B,IAAZ,CAAkBsB,YAAY,CAAE,CAAF,CAA9B,EAAqCA,YAAY,CAAE,CAAF,CAAjD,EAAwDA,YAAY,CAAE,CAAF,CAApE;AAEA,OAJD,MAIO;AAEN,YAAIC,KAAK,GAAG1B,IAAI,CAAC0B,KAAjB;AAEA,aAAKjD,MAAL,CAAY0B,IAAZ,CAAkBuB,KAAlB,EAAyBA,KAAzB,EAAgCA,KAAhC;AAEA;;AAED,UAAKpB,eAAe,KAAK,IAAzB,EAAgC;AAE/B,YAAIqB,SAAS,GAAGtB,aAAa,CAAE,CAAF,CAAb,CAAoBP,CAApB,CAAhB;;AAEA,YAAK6B,SAAS,KAAK/B,SAAnB,EAA+B;AAE9B,eAAKlB,GAAL,CAASyB,IAAT,CAAewB,SAAS,CAAE,CAAF,CAAxB,EAA+BA,SAAS,CAAE,CAAF,CAAxC,EAA+CA,SAAS,CAAE,CAAF,CAAxD;AAEA,SAJD,MAIO;AAENR,UAAAA,OAAO,CAACS,IAAR,CAAc,0DAAd,EAA0E9B,CAA1E;AAEA,eAAKpB,GAAL,CAASyB,IAAT,CAAe,IAAI9B,OAAJ,EAAf,EAA8B,IAAIA,OAAJ,EAA9B,EAA6C,IAAIA,OAAJ,EAA7C;AAEA;AAED;;AAED,UAAKkC,gBAAgB,KAAK,IAA1B,EAAiC;AAEhC,YAAIoB,SAAS,GAAGtB,aAAa,CAAE,CAAF,CAAb,CAAoBP,CAApB,CAAhB;;AAEA,YAAK6B,SAAS,KAAK/B,SAAnB,EAA+B;AAE9B,eAAKjB,IAAL,CAAUwB,IAAV,CAAgBwB,SAAS,CAAE,CAAF,CAAzB,EAAgCA,SAAS,CAAE,CAAF,CAAzC,EAAgDA,SAAS,CAAE,CAAF,CAAzD;AAEA,SAJD,MAIO;AAENR,UAAAA,OAAO,CAACS,IAAR,CAAc,2DAAd,EAA2E9B,CAA3E;AAEA,eAAKnB,IAAL,CAAUwB,IAAV,CAAgB,IAAI9B,OAAJ,EAAhB,EAA+B,IAAIA,OAAJ,EAA/B,EAA8C,IAAIA,OAAJ,EAA9C;AAEA;AAED,OApEwC,CAsEzC;;;AAEA,WAAM,IAAIwD,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGrB,kBAArB,EAAyCqB,CAAC,EAA1C,EAAgD;AAE/C,YAAIC,WAAW,GAAGjD,YAAY,CAAEgD,CAAF,CAAZ,CAAkBtD,QAApC;AAEAkC,QAAAA,oBAAoB,CAAEoB,CAAF,CAApB,CAA0BlB,IAA1B,CAA+BR,IAA/B,CAAqC2B,WAAW,CAAE9B,IAAI,CAACqB,CAAP,CAAhD,EAA4DS,WAAW,CAAE9B,IAAI,CAACsB,CAAP,CAAvE,EAAmFQ,WAAW,CAAE9B,IAAI,CAACuB,CAAP,CAA9F;AAEA;;AAED,WAAM,IAAIM,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGf,kBAArB,EAAyCe,CAAC,EAA1C,EAAgD;AAE/C,YAAIE,WAAW,GAAGlB,YAAY,CAAEgB,CAAF,CAAZ,CAAkBL,aAAlB,CAAiC1B,CAAjC,CAAlB;AAEAiB,QAAAA,kBAAkB,CAAEc,CAAF,CAAlB,CAAwBlB,IAAxB,CAA6BR,IAA7B,CAAmC4B,WAAW,CAACV,CAA/C,EAAkDU,WAAW,CAACT,CAA9D,EAAiES,WAAW,CAACR,CAA7E;AAEA,OAtFwC,CAwFzC;;;AAEA,UAAKN,cAAL,EAAsB;AAErB,aAAKlC,WAAL,CAAiBoB,IAAjB,CAAuBpB,WAAW,CAAEiB,IAAI,CAACqB,CAAP,CAAlC,EAA8CtC,WAAW,CAAEiB,IAAI,CAACsB,CAAP,CAAzD,EAAqEvC,WAAW,CAAEiB,IAAI,CAACuB,CAAP,CAAhF;AAEA;;AAED,UAAKL,cAAL,EAAsB;AAErB,aAAKpC,WAAL,CAAiBqB,IAAjB,CAAuBrB,WAAW,CAAEkB,IAAI,CAACqB,CAAP,CAAlC,EAA8CvC,WAAW,CAAEkB,IAAI,CAACsB,CAAP,CAAzD,EAAqExC,WAAW,CAAEkB,IAAI,CAACuB,CAAP,CAAhF;AAEA;AAED;;AAED,SAAK/B,aAAL,CAAoBC,QAApB;AAEA,SAAKP,kBAAL,GAA0BO,QAAQ,CAACP,kBAAnC;AACA,SAAKC,iBAAL,GAAyBM,QAAQ,CAACN,iBAAlC;AACA,SAAKC,gBAAL,GAAwBK,QAAQ,CAACL,gBAAjC;AACA,SAAKC,aAAL,GAAqBI,QAAQ,CAACJ,aAA9B;AACA,SAAKC,gBAAL,GAAwBG,QAAQ,CAACH,gBAAjC;;AAEA,QAAKG,QAAQ,CAACR,cAAT,KAA4B,IAAjC,EAAwC;AAEvC,WAAKA,cAAL,GAAsBQ,QAAQ,CAACR,cAAT,CAAwB+C,KAAxB,EAAtB;AAEA;;AAED,QAAKvC,QAAQ,CAACT,WAAT,KAAyB,IAA9B,EAAqC;AAEpC,WAAKA,WAAL,GAAmBS,QAAQ,CAACT,WAAT,CAAqBgD,KAArB,EAAnB;AAEA;;AAED,WAAO,IAAP;AAEA;AApPuC,CAAzC;;AAyPA,SAAS1D,cAAT","sourcesContent":["/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nimport { Vector2 } from '../math/Vector2.js';\n\nfunction DirectGeometry() {\n\n\tthis.vertices = [];\n\tthis.normals = [];\n\tthis.colors = [];\n\tthis.uvs = [];\n\tthis.uvs2 = [];\n\n\tthis.groups = [];\n\n\tthis.morphTargets = {};\n\n\tthis.skinWeights = [];\n\tthis.skinIndices = [];\n\n\t// this.lineDistances = [];\n\n\tthis.boundingBox = null;\n\tthis.boundingSphere = null;\n\n\t// update flags\n\n\tthis.verticesNeedUpdate = false;\n\tthis.normalsNeedUpdate = false;\n\tthis.colorsNeedUpdate = false;\n\tthis.uvsNeedUpdate = false;\n\tthis.groupsNeedUpdate = false;\n\n}\n\nObject.assign( DirectGeometry.prototype, {\n\n\tcomputeGroups: function ( geometry ) {\n\n\t\tvar group;\n\t\tvar groups = [];\n\t\tvar materialIndex = undefined;\n\n\t\tvar faces = geometry.faces;\n\n\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\t// materials\n\n\t\t\tif ( face.materialIndex !== materialIndex ) {\n\n\t\t\t\tmaterialIndex = face.materialIndex;\n\n\t\t\t\tif ( group !== undefined ) {\n\n\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\t\tgroups.push( group );\n\n\t\t\t\t}\n\n\t\t\t\tgroup = {\n\t\t\t\t\tstart: i * 3,\n\t\t\t\t\tmaterialIndex: materialIndex\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( group !== undefined ) {\n\n\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\tgroups.push( group );\n\n\t\t}\n\n\t\tthis.groups = groups;\n\n\t},\n\n\tfromGeometry: function ( geometry ) {\n\n\t\tvar faces = geometry.faces;\n\t\tvar vertices = geometry.vertices;\n\t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\n\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\n\t\t// morphs\n\n\t\tvar morphTargets = geometry.morphTargets;\n\t\tvar morphTargetsLength = morphTargets.length;\n\n\t\tvar morphTargetsPosition;\n\n\t\tif ( morphTargetsLength > 0 ) {\n\n\t\t\tmorphTargetsPosition = [];\n\n\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\n\n\t\t\t\tmorphTargetsPosition[ i ] = {\n\t\t\t\t\tname: morphTargets[ i ].name,\n\t\t\t\t \tdata: []\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tthis.morphTargets.position = morphTargetsPosition;\n\n\t\t}\n\n\t\tvar morphNormals = geometry.morphNormals;\n\t\tvar morphNormalsLength = morphNormals.length;\n\n\t\tvar morphTargetsNormal;\n\n\t\tif ( morphNormalsLength > 0 ) {\n\n\t\t\tmorphTargetsNormal = [];\n\n\t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\n\n\t\t\t\tmorphTargetsNormal[ i ] = {\n\t\t\t\t\tname: morphNormals[ i ].name,\n\t\t\t\t \tdata: []\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\n\t\t}\n\n\t\t// skins\n\n\t\tvar skinIndices = geometry.skinIndices;\n\t\tvar skinWeights = geometry.skinWeights;\n\n\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\n\n\t\t//\n\n\t\tif ( vertices.length > 0 && faces.length === 0 ) {\n\n\t\t\tconsole.error( 'THREE.DirectGeometry: Faceless geometries are not supported.' );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\n\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\n\t\t\t} else {\n\n\t\t\t\tvar normal = face.normal;\n\n\t\t\t\tthis.normals.push( normal, normal, normal );\n\n\t\t\t}\n\n\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\tif ( vertexColors.length === 3 ) {\n\n\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\n\t\t\t} else {\n\n\t\t\t\tvar color = face.color;\n\n\t\t\t\tthis.colors.push( color, color, color );\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexUv === true ) {\n\n\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\n\n\t\t\t\t\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexUv2 === true ) {\n\n\t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\n\n\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\n\n\t\t\t\t\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// morphs\n\n\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\n\n\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\n\n\t\t\t\tmorphTargetsPosition[ j ].data.push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\n\t\t\t}\n\n\t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\n\n\t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\n\n\t\t\t\tmorphTargetsNormal[ j ].data.push( morphNormal.a, morphNormal.b, morphNormal.c );\n\n\t\t\t}\n\n\t\t\t// skins\n\n\t\t\tif ( hasSkinIndices ) {\n\n\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\n\t\t\t}\n\n\t\t\tif ( hasSkinWeights ) {\n\n\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.computeGroups( geometry );\n\n\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t}\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n} );\n\n\nexport { DirectGeometry };\n"]},"metadata":{},"sourceType":"module"}