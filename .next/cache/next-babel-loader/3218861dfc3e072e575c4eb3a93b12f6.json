{"ast":null,"code":"import _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport { LinearFilter, Mesh, MeshBasicMaterial, NearestFilter, OrthographicCamera, PlaneBufferGeometry, RGBAFormat, Scene, ShaderMaterial, UniformsUtils, WebGLRenderTarget } from \"three\";\nimport { AfterimageShader } from \"../shaders/AfterimageShader.js\";\nimport { Pass } from \"./Pass.js\";\n/**\n * @author HypnosNova / https://www.threejs.org.cn/gallery/\n */\n\nvar AfterimagePass = function (damp) {\n  Pass.call(this);\n  if (AfterimageShader === undefined) console.error(\"THREE.AfterimagePass relies on THREE.AfterimageShader\");\n  this.shader = AfterimageShader;\n  this.uniforms = UniformsUtils.clone(this.shader.uniforms);\n  this.factor = damp !== undefined ? damp : 0.96;\n  this.textureComp = new WebGLRenderTarget(window.innerWidth, window.innerHeight, {\n    minFilter: LinearFilter,\n    magFilter: NearestFilter,\n    format: RGBAFormat\n  });\n  this.textureOld = new WebGLRenderTarget(window.innerWidth, window.innerHeight, {\n    minFilter: LinearFilter,\n    magFilter: NearestFilter,\n    format: RGBAFormat\n  });\n  this.shaderMaterial = new ShaderMaterial({\n    uniforms: this.uniforms,\n    vertexShader: this.shader.vertexShader,\n    fragmentShader: this.shader.fragmentShader\n  });\n  this.sceneComp = new Scene();\n  this.scene = new Scene();\n  this.camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  this.camera.position.z = 1;\n  var geometry = new PlaneBufferGeometry(2, 2);\n  this.quadComp = new Mesh(geometry, this.shaderMaterial);\n  this.sceneComp.add(this.quadComp);\n  var material = new MeshBasicMaterial({\n    map: this.textureComp.texture\n  });\n  var quadScreen = new Mesh(geometry, material);\n  this.scene.add(quadScreen);\n};\n\nAfterimagePass.prototype = _Object$assign(_Object$create(Pass.prototype), {\n  constructor: AfterimagePass,\n  render: function (renderer, writeBuffer, readBuffer) {\n    this.uniforms[\"damp\"].value = this.factor;\n    this.uniforms[\"tOld\"].value = this.textureOld.texture;\n    this.uniforms[\"tNew\"].value = readBuffer.texture;\n    this.quadComp.material = this.shaderMaterial;\n    renderer.setRenderTarget(this.textureComp);\n    renderer.render(this.sceneComp, this.camera);\n    renderer.setRenderTarget(this.textureOld);\n    renderer.render(this.scene, this.camera);\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      renderer.render(this.scene, this.camera);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      renderer.render(this.scene, this.camera);\n    }\n  }\n});\nexport { AfterimagePass };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/resources/postprocessing/AfterimagePass.js"],"names":["AfterimagePass","Pass","AfterimageShader","console","UniformsUtils","damp","window","minFilter","magFilter","format","RGBAFormat","uniforms","vertexShader","fragmentShader","geometry","material","map","texture","quadScreen","constructor","render","readBuffer","renderer"],"mappings":"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","sourcesContent":["import {\n    LinearFilter,\n    Mesh,\n    MeshBasicMaterial,\n    NearestFilter,\n    OrthographicCamera,\n    PlaneBufferGeometry,\n    RGBAFormat,\n    Scene,\n    ShaderMaterial,\n    UniformsUtils,\n    WebGLRenderTarget\n} from \"three\";\nimport { AfterimageShader } from \"../shaders/AfterimageShader.js\";\nimport { Pass } from \"./Pass.js\";\n/**\n * @author HypnosNova / https://www.threejs.org.cn/gallery/\n */\n\nvar AfterimagePass = function(damp) {\n    Pass.call(this);\n\n    if (AfterimageShader === undefined)\n        console.error(\"THREE.AfterimagePass relies on THREE.AfterimageShader\");\n\n    this.shader = AfterimageShader;\n\n    this.uniforms = UniformsUtils.clone(this.shader.uniforms);\n\n    this.factor = damp !== undefined ? damp : 0.96;\n\n    this.textureComp = new WebGLRenderTarget(\n        window.innerWidth,\n        window.innerHeight,\n        {\n            minFilter: LinearFilter,\n            magFilter: NearestFilter,\n            format: RGBAFormat\n        }\n    );\n\n    this.textureOld = new WebGLRenderTarget(\n        window.innerWidth,\n        window.innerHeight,\n        {\n            minFilter: LinearFilter,\n            magFilter: NearestFilter,\n            format: RGBAFormat\n        }\n    );\n\n    this.shaderMaterial = new ShaderMaterial({\n        uniforms: this.uniforms,\n        vertexShader: this.shader.vertexShader,\n        fragmentShader: this.shader.fragmentShader\n    });\n\n    this.sceneComp = new Scene();\n    this.scene = new Scene();\n\n    this.camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    this.camera.position.z = 1;\n\n    var geometry = new PlaneBufferGeometry(2, 2);\n\n    this.quadComp = new Mesh(geometry, this.shaderMaterial);\n    this.sceneComp.add(this.quadComp);\n\n    var material = new MeshBasicMaterial({\n        map: this.textureComp.texture\n    });\n\n    var quadScreen = new Mesh(geometry, material);\n    this.scene.add(quadScreen);\n};\n\nAfterimagePass.prototype = Object.assign(Object.create(Pass.prototype), {\n    constructor: AfterimagePass,\n\n    render: function(renderer, writeBuffer, readBuffer) {\n        this.uniforms[\"damp\"].value = this.factor;\n        this.uniforms[\"tOld\"].value = this.textureOld.texture;\n        this.uniforms[\"tNew\"].value = readBuffer.texture;\n\n        this.quadComp.material = this.shaderMaterial;\n\n        renderer.setRenderTarget(this.textureComp);\n        renderer.render(this.sceneComp, this.camera);\n\n        renderer.setRenderTarget(this.textureOld);\n        renderer.render(this.scene, this.camera);\n\n        if (this.renderToScreen) {\n            renderer.setRenderTarget(null);\n            renderer.render(this.scene, this.camera);\n        } else {\n            renderer.setRenderTarget(writeBuffer);\n\n            if (this.clear) renderer.clear();\n\n            renderer.render(this.scene, this.camera);\n        }\n    }\n});\n\nexport { AfterimagePass };\n"]},"metadata":{},"sourceType":"module"}