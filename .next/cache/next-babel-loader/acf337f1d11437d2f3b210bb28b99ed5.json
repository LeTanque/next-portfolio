{"ast":null,"code":"import _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nimport { LineSegments } from '../objects/LineSegments.js';\nimport { VertexColors } from '../constants.js';\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Color } from '../math/Color.js';\n\nfunction GridHelper(size, divisions, color1, color2) {\n  size = size || 10;\n  divisions = divisions || 10;\n  color1 = new Color(color1 !== undefined ? color1 : 0x444444);\n  color2 = new Color(color2 !== undefined ? color2 : 0x888888);\n  var center = divisions / 2;\n  var step = size / divisions;\n  var halfSize = size / 2;\n  var vertices = [],\n      colors = [];\n\n  for (var i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step) {\n    vertices.push(-halfSize, 0, k, halfSize, 0, k);\n    vertices.push(k, 0, -halfSize, k, 0, halfSize);\n    var color = i === center ? color1 : color2;\n    color.toArray(colors, j);\n    j += 3;\n    color.toArray(colors, j);\n    j += 3;\n    color.toArray(colors, j);\n    j += 3;\n    color.toArray(colors, j);\n    j += 3;\n  }\n\n  var geometry = new BufferGeometry();\n  geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n  geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n  var material = new LineBasicMaterial({\n    vertexColors: VertexColors\n  });\n  LineSegments.call(this, geometry, material);\n}\n\nGridHelper.prototype = _Object$assign(_Object$create(LineSegments.prototype), {\n  constructor: GridHelper,\n  copy: function copy(source) {\n    LineSegments.prototype.copy.call(this, source);\n    this.geometry.copy(source.geometry);\n    this.material.copy(source.material);\n    return this;\n  },\n  clone: function clone() {\n    return new this.constructor().copy(this);\n  }\n});\nexport { GridHelper };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/helpers/GridHelper.js"],"names":["LineSegments","VertexColors","LineBasicMaterial","Float32BufferAttribute","BufferGeometry","Color","GridHelper","size","divisions","color1","color2","undefined","center","step","halfSize","vertices","colors","i","j","k","push","color","toArray","geometry","setAttribute","material","vertexColors","call","prototype","constructor","copy","source","clone"],"mappings":"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","sourcesContent":["/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nimport { LineSegments } from '../objects/LineSegments.js';\nimport { VertexColors } from '../constants.js';\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Color } from '../math/Color.js';\n\nfunction GridHelper( size, divisions, color1, color2 ) {\n\n\tsize = size || 10;\n\tdivisions = divisions || 10;\n\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\tvar center = divisions / 2;\n\tvar step = size / divisions;\n\tvar halfSize = size / 2;\n\n\tvar vertices = [], colors = [];\n\n\tfor ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\n\n\t\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\n\t\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\n\n\t\tvar color = i === center ? color1 : color2;\n\n\t\tcolor.toArray( colors, j ); j += 3;\n\t\tcolor.toArray( colors, j ); j += 3;\n\t\tcolor.toArray( colors, j ); j += 3;\n\t\tcolor.toArray( colors, j ); j += 3;\n\n\t}\n\n\tvar geometry = new BufferGeometry();\n\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\tLineSegments.call( this, geometry, material );\n\n}\n\nGridHelper.prototype = Object.assign( Object.create( LineSegments.prototype ), {\n\n\tconstructor: GridHelper,\n\n\tcopy: function ( source ) {\n\n\t\tLineSegments.prototype.copy.call( this, source );\n\n\t\tthis.geometry.copy( source.geometry );\n\t\tthis.material.copy( source.material );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n} );\n\nexport { GridHelper };\n"]},"metadata":{},"sourceType":"module"}