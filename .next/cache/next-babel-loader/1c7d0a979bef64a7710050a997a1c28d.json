{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport { Matrix4 } from '../math/Matrix4.js';\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author michael guerrero / http://realitymeltdown.com\n * @author ikerr / http://verold.com\n */\n\nvar _offsetMatrix = new Matrix4();\n\nvar _identityMatrix = new Matrix4();\n\nfunction Skeleton(bones, boneInverses) {\n  // copy the bone array\n  bones = bones || [];\n  this.bones = bones.slice(0);\n  this.boneMatrices = new Float32Array(this.bones.length * 16);\n  this.frame = -1; // use the supplied bone inverses or calculate the inverses\n\n  if (boneInverses === undefined) {\n    this.calculateInverses();\n  } else {\n    if (this.bones.length === boneInverses.length) {\n      this.boneInverses = boneInverses.slice(0);\n    } else {\n      console.warn('THREE.Skeleton boneInverses is the wrong length.');\n      this.boneInverses = [];\n\n      for (var i = 0, il = this.bones.length; i < il; i++) {\n        this.boneInverses.push(new Matrix4());\n      }\n    }\n  }\n}\n\n_Object$assign(Skeleton.prototype, {\n  calculateInverses: function calculateInverses() {\n    this.boneInverses = [];\n\n    for (var i = 0, il = this.bones.length; i < il; i++) {\n      var inverse = new Matrix4();\n\n      if (this.bones[i]) {\n        inverse.getInverse(this.bones[i].matrixWorld);\n      }\n\n      this.boneInverses.push(inverse);\n    }\n  },\n  pose: function pose() {\n    var bone, i, il; // recover the bind-time world matrices\n\n    for (i = 0, il = this.bones.length; i < il; i++) {\n      bone = this.bones[i];\n\n      if (bone) {\n        bone.matrixWorld.getInverse(this.boneInverses[i]);\n      }\n    } // compute the local matrices, positions, rotations and scales\n\n\n    for (i = 0, il = this.bones.length; i < il; i++) {\n      bone = this.bones[i];\n\n      if (bone) {\n        if (bone.parent && bone.parent.isBone) {\n          bone.matrix.getInverse(bone.parent.matrixWorld);\n          bone.matrix.multiply(bone.matrixWorld);\n        } else {\n          bone.matrix.copy(bone.matrixWorld);\n        }\n\n        bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);\n      }\n    }\n  },\n  update: function update() {\n    var bones = this.bones;\n    var boneInverses = this.boneInverses;\n    var boneMatrices = this.boneMatrices;\n    var boneTexture = this.boneTexture; // flatten bone matrices to array\n\n    for (var i = 0, il = bones.length; i < il; i++) {\n      // compute the offset between the current and the original transform\n      var matrix = bones[i] ? bones[i].matrixWorld : _identityMatrix;\n\n      _offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);\n\n      _offsetMatrix.toArray(boneMatrices, i * 16);\n    }\n\n    if (boneTexture !== undefined) {\n      boneTexture.needsUpdate = true;\n    }\n  },\n  clone: function clone() {\n    return new Skeleton(this.bones, this.boneInverses);\n  },\n  getBoneByName: function getBoneByName(name) {\n    for (var i = 0, il = this.bones.length; i < il; i++) {\n      var bone = this.bones[i];\n\n      if (bone.name === name) {\n        return bone;\n      }\n    }\n\n    return undefined;\n  }\n});\n\nexport { Skeleton };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/objects/Skeleton.js"],"names":["Matrix4","_offsetMatrix","_identityMatrix","Skeleton","bones","boneInverses","slice","boneMatrices","Float32Array","length","frame","undefined","calculateInverses","console","warn","i","il","push","prototype","inverse","getInverse","matrixWorld","pose","bone","parent","isBone","matrix","multiply","copy","decompose","position","quaternion","scale","update","boneTexture","multiplyMatrices","toArray","needsUpdate","clone","getBoneByName","name"],"mappings":"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","sourcesContent":["import { Matrix4 } from '../math/Matrix4.js';\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author michael guerrero / http://realitymeltdown.com\n * @author ikerr / http://verold.com\n */\n\nvar _offsetMatrix = new Matrix4();\nvar _identityMatrix = new Matrix4();\n\nfunction Skeleton( bones, boneInverses ) {\n\n\t// copy the bone array\n\n\tbones = bones || [];\n\n\tthis.bones = bones.slice( 0 );\n\tthis.boneMatrices = new Float32Array( this.bones.length * 16 );\n\n\tthis.frame = - 1;\n\n\t// use the supplied bone inverses or calculate the inverses\n\n\tif ( boneInverses === undefined ) {\n\n\t\tthis.calculateInverses();\n\n\t} else {\n\n\t\tif ( this.bones.length === boneInverses.length ) {\n\n\t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Skeleton boneInverses is the wrong length.' );\n\n\t\t\tthis.boneInverses = [];\n\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tthis.boneInverses.push( new Matrix4() );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nObject.assign( Skeleton.prototype, {\n\n\tcalculateInverses: function () {\n\n\t\tthis.boneInverses = [];\n\n\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tvar inverse = new Matrix4();\n\n\t\t\tif ( this.bones[ i ] ) {\n\n\t\t\t\tinverse.getInverse( this.bones[ i ].matrixWorld );\n\n\t\t\t}\n\n\t\t\tthis.boneInverses.push( inverse );\n\n\t\t}\n\n\t},\n\n\tpose: function () {\n\n\t\tvar bone, i, il;\n\n\t\t// recover the bind-time world matrices\n\n\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tbone = this.bones[ i ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// compute the local matrices, positions, rotations and scales\n\n\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tbone = this.bones[ i ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\n\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tupdate: function () {\n\n\t\tvar bones = this.bones;\n\t\tvar boneInverses = this.boneInverses;\n\t\tvar boneMatrices = this.boneMatrices;\n\t\tvar boneTexture = this.boneTexture;\n\n\t\t// flatten bone matrices to array\n\n\t\tfor ( var i = 0, il = bones.length; i < il; i ++ ) {\n\n\t\t\t// compute the offset between the current and the original transform\n\n\t\t\tvar matrix = bones[ i ] ? bones[ i ].matrixWorld : _identityMatrix;\n\n\t\t\t_offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\n\t\t\t_offsetMatrix.toArray( boneMatrices, i * 16 );\n\n\t\t}\n\n\t\tif ( boneTexture !== undefined ) {\n\n\t\t\tboneTexture.needsUpdate = true;\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new Skeleton( this.bones, this.boneInverses );\n\n\t},\n\n\tgetBoneByName: function ( name ) {\n\n\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tvar bone = this.bones[ i ];\n\n\t\t\tif ( bone.name === name ) {\n\n\t\t\t\treturn bone;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn undefined;\n\n\t}\n\n} );\n\n\nexport { Skeleton };\n"]},"metadata":{},"sourceType":"module"}