{"ast":null,"code":"var _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx\";\nvar __jsx = React.createElement;\nimport React, { // useCallback,\n// useEffect,\nuseRef // useState,\n, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { Canvas, extend as extendThree, useFrame // useLoader,\n, useResource, useThree } from \"react-three-fiber\"; // import { useSpring, a } from 'react-spring/three';\n// Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\n\nimport { EffectComposer } from \"./resources/postprocessing/EffectComposer\";\nimport { RenderPass } from \"./resources/postprocessing/RenderPass\";\nimport { GlitchPass } from \"./resources/postprocessing/GlitchPass\";\nextendThree({\n  EffectComposer,\n  RenderPass,\n  GlitchPass\n});\nimport TextLoop from \"../TextLoop\"; // Cast the lighting\n\nconst Lighting = () => {\n  const {\n    mouse\n  } = useThree();\n  const light = useRef(); // useFrame(() => {\n  //     light.current.position.set( mouse.x / 20, -mouse.y / 20, 50 )\n  // });\n\n  console.log('mouse.x / 20 --> ', mouse.x / 20);\n  console.log('light --> ', light);\n  return __jsx(React.Fragment, null, __jsx(\"pointLight\", {\n    ref: light,\n    distance: 50,\n    intensity: 1.5,\n    color: \"#ffffff\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }));\n}; // // This renders text via canvas and projects it as a sprite\n// const Text = ({ opacity, color = 'white', fontSize = 410 }) => {\n//     return (\n//         <a.sprite scale={[ 1, 1, 1 ]} >\n//             <a.spriteMaterial attach=\"material\" transparent opacity={opacity}>\n//                 <canvasTexture attach=\"map\"   premultiplyAlpha   />\n//             </a.spriteMaterial>\n//         </a.sprite>\n//     )\n// }\n// The canvas houses this function, the scene. Scene is where the elements come together.\n\n\nconst SmokePuff = ({\n  geometry,\n  material\n}) => {\n  let smokePuffRef = useRef(); // let tenToHundred = Math.random() * 100; // 10 - 99.99\n  // let speed = 0.01 + Math.random() / 200; // 0.1 - 0.19\n  // const cosWave = (Math.cos(tenToHundred) / 3) - 1.1;  // a cosign wave.  ~ 0.5 - 1.5\n\n  let factor = 1 + Math.random() * 2; // ~ 1-3\n\n  let xFactor = -100 + Math.random() * 200; // -100 - 100\n\n  let yFactor = -100 + Math.random() * 200; // -100 - 100\n\n  let zFactor = 10 + Math.random() * 10; //  10 - 20\n\n  const getRandomArbitrary = (min, max) => Math.random() * (max - min) + min;\n\n  let randomFactor = getRandomArbitrary(1.1, 2);\n  useFrame(({\n    clock\n  }) => {\n    // tenToHundred += speed; // tenToHundred = tenToHundred + speed, plus it sets a unique new version of tenToHundred.\n    // let delta = clock.getDelta();  // Change in clock. Something like 0.0001 - 0.0099\n    let slowRotation = clock.elapsedTime * 0.017 * randomFactor + xFactor; // starts at ~0.0001 + xFactor and goes slow\n\n    let slowGrowth = Math.tanh(clock.elapsedTime / 18) + 3;\n    smokePuffRef.current.scale.set(slowGrowth, slowGrowth, 2);\n    smokePuffRef.current.rotation.z = slowRotation;\n    smokePuffRef.current.position.set(xFactor * factor, yFactor * factor, zFactor);\n  });\n  return __jsx(\"mesh\", {\n    ref: smokePuffRef,\n    material: material,\n    geometry: geometry,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  });\n};\n\nconst GenerateSmoke = () => {\n  const [geometryRef, geometry] = useResource();\n  const [materialRef, material] = useResource();\n  const url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n  const texture = useMemo(() => new THREE.TextureLoader().load(url), [url]);\n  return __jsx(React.Fragment, null, __jsx(Lighting, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }), __jsx(\"planeGeometry\", {\n    ref: geometryRef,\n    attach: \"geometry\",\n    args: [200, 200],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }), __jsx(\"meshLambertMaterial\", {\n    ref: materialRef,\n    attach: \"material\",\n    color: \"#ffffff\",\n    transparent: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, __jsx(\"primitive\", {\n    attach: \"map\",\n    object: texture,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  })), geometry && new Array(33).fill().map((_, index) => __jsx(SmokePuff, {\n    key: index,\n    material: material,\n    geometry: geometry,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  })));\n}; // This is the canvas. It's the lowest level element in the three/webGl chain\n\n\nconst CanvasicalSmoke = () => {\n  return __jsx(React.Fragment, null, __jsx(Canvas, {\n    className: \"container block__three-container\",\n    camera: {\n      fov: 75,\n      aspect: 0.5,\n      near: 1,\n      far: 10000,\n      position: [0, 0, 600]\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, __jsx(GenerateSmoke, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  })), __jsx(TextLoop, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }));\n};\n\nexport default CanvasicalSmoke;","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx"],"names":["extend","extendThree","GlitchPass","Lighting","mouse","useThree","light","useRef","console","SmokePuff","material","smokePuffRef","factor","Math","xFactor","yFactor","zFactor","getRandomArbitrary","max","randomFactor","useFrame","clock","slowRotation","slowGrowth","GenerateSmoke","useResource","url","texture","useMemo","THREE","geometry","CanvasicalSmoke","fov","aspect","near","far","position"],"mappings":"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","sourcesContent":["import React, {\n    // useCallback,\n    // useEffect,\n    useRef,\n    // useState,\n    useMemo\n} from \"react\";\nimport * as THREE from \"three\";\nimport {\n    Canvas,\n    extend as extendThree,\n    useFrame,\n    // useLoader,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\n// import { useSpring, a } from 'react-spring/three';\n\n// Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\nimport { EffectComposer } from \"./resources/postprocessing/EffectComposer\";\nimport { RenderPass } from \"./resources/postprocessing/RenderPass\";\nimport { GlitchPass } from \"./resources/postprocessing/GlitchPass\";\nextendThree({ EffectComposer, RenderPass, GlitchPass });\n\nimport TextLoop from \"../TextLoop\";\n\n\n// Cast the lighting\nconst Lighting = () => {\n    const { mouse } = useThree();\n    const light = useRef();\n    \n    // useFrame(() => {\n    //     light.current.position.set( mouse.x / 20, -mouse.y / 20, 50 )\n        \n    // });\n\n    console.log('mouse.x / 20 --> ', mouse.x / 20);\n\n    console.log('light --> ', light);\n\n    return (\n        <>\n            {/* <directionalLight\n                ref={light} position={[ -2, 0, 40 ]}  intensity={0.7}  color=\"#ff0000\" \n            /> */}\n            <pointLight \n                ref={light} distance={50} intensity={1.5} color=\"#ffffff\" \n            />\n        </>\n    );\n};\n\n// // This renders text via canvas and projects it as a sprite\n// const Text = ({ opacity, color = 'white', fontSize = 410 }) => {\n//     return (\n//         <a.sprite scale={[ 1, 1, 1 ]} >\n//             <a.spriteMaterial attach=\"material\" transparent opacity={opacity}>\n//                 <canvasTexture attach=\"map\"   premultiplyAlpha   />\n//             </a.spriteMaterial>\n//         </a.sprite>\n//     )\n// }\n\n// The canvas houses this function, the scene. Scene is where the elements come together.\nconst SmokePuff = ({ geometry, material }) => {\n    let smokePuffRef = useRef();\n    // let tenToHundred = Math.random() * 100; // 10 - 99.99\n    // let speed = 0.01 + Math.random() / 200; // 0.1 - 0.19\n    // const cosWave = (Math.cos(tenToHundred) / 3) - 1.1;  // a cosign wave.  ~ 0.5 - 1.5\n    let factor = 1 + Math.random() * 2;  // ~ 1-3\n    let xFactor = -100 + Math.random() * 200;  // -100 - 100\n    let yFactor = -100 + Math.random() * 200;  // -100 - 100\n    let zFactor = 10 + Math.random() * 10;  //  10 - 20\n    \n    const getRandomArbitrary = (min, max) => Math.random() * (max - min) + min;\n    let randomFactor = getRandomArbitrary(1.1, 2);\n    \n    useFrame(({ clock }) => {\n        // tenToHundred += speed; // tenToHundred = tenToHundred + speed, plus it sets a unique new version of tenToHundred.\n        // let delta = clock.getDelta();  // Change in clock. Something like 0.0001 - 0.0099\n        let slowRotation = ((clock.elapsedTime * (0.017)) * randomFactor) + xFactor;  // starts at ~0.0001 + xFactor and goes slow\n        let slowGrowth = (Math.tanh(clock.elapsedTime / 18) + 3);\n\n        smokePuffRef.current.scale.set(slowGrowth, slowGrowth, 2);\n        smokePuffRef.current.rotation.z = slowRotation;\n        smokePuffRef.current.position.set(\n            xFactor * factor,\n            yFactor * factor,\n            zFactor\n        );\n    });\n\n    return <mesh  ref={smokePuffRef} material={material} geometry={geometry}  />;\n}\n\nconst GenerateSmoke = () => {\n    const [ geometryRef, geometry ] = useResource();\n    const [ materialRef, material ] = useResource();\n    const url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n    const texture = useMemo(() => new THREE.TextureLoader().load(url), [url]);\n    \n    return (\n        <>\n            <Lighting />\n\n            <planeGeometry \n                ref={geometryRef} \n                attach=\"geometry\"   \n                args={[200, 200]} \n            />\n            <meshLambertMaterial \n                ref={materialRef}\n                attach=\"material\" \n                color=\"#ffffff\"\n                transparent\n            >\n                <primitive attach=\"map\" object={texture} />\n            </meshLambertMaterial>\n\n            {geometry && new Array(33).fill().map((_, index) => (\n                <SmokePuff\n                    key={index}\n                    material={material}\n                    geometry={geometry}\n\n                />\n            ))}\n        </>\n    );\n}\n\n// This is the canvas. It's the lowest level element in the three/webGl chain\nconst CanvasicalSmoke = () => {\n\n    return (\n        <>\n            <Canvas\n                className=\"container block__three-container\"\n                camera={{\n                    fov: 75,\n                    aspect: 0.5,\n                    near: 1,\n                    far: 10000,\n                    position: [0, 0, 600]\n                }}\n            >\n                <GenerateSmoke />\n                {/* <Text opacity={0.9}  color=\"black\" fontSize={150} ></Text> */}\n            </Canvas>\n            <TextLoop  />\n        </>\n    );\n};\n\nexport default CanvasicalSmoke;\n\n\n"]},"metadata":{},"sourceType":"module"}