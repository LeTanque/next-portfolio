{"ast":null,"code":"import _readOnlyError from \"@babel/runtime-corejs2/helpers/esm/readOnlyError\";\nvar _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/SmokeContainer.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef } from \"react\";\nimport { extend, Canvas, useFrame, useResource, useThree } from \"react-three-fiber\";\nimport * as resources from './resources/index';\nextend(resources);\nimport TextLoop from \"../TextLoop\";\n\nvar SmokeThing = function SmokeThing() {\n  var ref = useRef();\n  useFrame(function () {\n    return ref.current.rotation.x = ref.current.rotation.y += 0.01;\n  });\n  return __jsx(\"mesh\", {\n    ref: ref,\n    onClick: function onClick(e) {\n      return console.log('click');\n    },\n    onPointerOver: function onPointerOver(e) {\n      return console.log('hover');\n    },\n    onPointerOut: function onPointerOut(e) {\n      return console.log('unhover');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, __jsx(\"planeGeometry\", {\n    attach: \"geometry\",\n    args: [10000, 10000],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }), __jsx(\"meshNormalMaterial\", {\n    attach: \"material\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }));\n};\n\nvar SmokeContainer = function SmokeContainer() {\n  var _useThree = useThree(),\n      gl = _useThree.gl,\n      scene = _useThree.scene,\n      camera = _useThree.camera,\n      size = _useThree.size,\n      viewport = _useThree.viewport,\n      aspect = _useThree.aspect,\n      mouse = _useThree.mouse,\n      clock = _useThree.clock,\n      invalidate = _useThree.invalidate,\n      intersect = _useThree.intersect,\n      setDefaultCamera = _useThree.setDefaultCamera; // const mouse = useRef([0, 0]);\n  // const onMouseMove = useCallback(\n  //     ({ clientX: x, clientY: y }) =>\n  //     (mouse.current = [\n  //         x - window.innerWidth / 2,\n  //         y - window.innerHeight / 2\n  //     ]),\n  //     []\n  // );\n\n\n  var init = function init() {\n    stats = new Stats();\n    clock = (_readOnlyError(\"clock\"), new THREE.Clock());\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    scene = (_readOnlyError(\"scene\"), new THREE.Scene());\n    camera = (_readOnlyError(\"camera\"), new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 10000));\n    camera.position.z = 1000;\n    scene.add(camera);\n    geometry = new THREE.CubeGeometry(200, 200, 200);\n    material = new THREE.MeshLambertMaterial({\n      color: 0xaa6666,\n      wireframe: false\n    });\n    mesh = new THREE.Mesh(geometry, material); //scene.add( mesh );\n\n    cubeSineDriver = 0;\n    textGeo = new THREE.PlaneGeometry(300, 300);\n    THREE.ImageUtils.crossOrigin = \"\"; //Need this to pull in crossdomain images from AWS\n\n    textTexture = THREE.ImageUtils.loadTexture(\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/quickText.png\");\n    textMaterial = new THREE.MeshLambertMaterial({\n      color: 0x00ffff,\n      opacity: 1,\n      map: textTexture,\n      transparent: true,\n      blending: THREE.AdditiveBlending\n    });\n    text = new THREE.Mesh(textGeo, textMaterial);\n    text.position.z = 800;\n    scene.add(text);\n    light = new THREE.DirectionalLight(0xffffff, 0.5);\n    light.position.set(-1, 0, 1);\n    scene.add(light);\n    smokeTexture = THREE.ImageUtils.loadTexture(\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png\");\n    smokeMaterial = new THREE.MeshLambertMaterial({\n      color: 0x00dddd,\n      map: smokeTexture,\n      transparent: true\n    });\n    smokeGeo = new THREE.PlaneGeometry(300, 300);\n    smokeParticles = [];\n\n    for (p = 0; p < 150; p++) {\n      var particle = new THREE.Mesh(smokeGeo, smokeMaterial);\n      particle.position.set(Math.random() * 500 - 250, Math.random() * 500 - 250, Math.random() * 1000 - 100);\n      particle.rotation.z = Math.random() * 360;\n      scene.add(particle);\n      smokeParticles.push(particle);\n    }\n\n    document.body.appendChild(renderer.domElement);\n  };\n\n  var animate = function animate() {\n    // note: three.js includes requestAnimationFrame shim\n    stats.begin();\n    delta = clock.getDelta();\n    requestAnimationFrame(animate);\n    evolveSmoke();\n    render();\n    stats.end();\n  };\n\n  var evolveSmoke = function evolveSmoke() {\n    var sp = smokeParticles.length;\n\n    while (sp--) {\n      smokeParticles[sp].rotation.z += delta * 0.2;\n    }\n  };\n\n  var render = function render() {\n    mesh.rotation.x += 0.005;\n    mesh.rotation.y += 0.01;\n    cubeSineDriver += 0.01;\n    mesh.position.z = 100 + Math.sin(cubeSineDriver) * 500;\n    renderer.render(scene, camera);\n  };\n\n  return __jsx(\"div\", {\n    className: \"container block__three-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, __jsx(Canvas, {\n    camera: {\n      fov: 75,\n      position: [0, 0, 60]\n    } // children                      // Either a function child (which receives state) or regular children\n    // gl                            // Props that go into the default webGL-renderer\n    // camera                        // Props that go into the default camera\n    // raycaster                     // Props that go into the default raycaster\n    // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n    // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n    // gl2 = false                   // Enables webgl2\n    // concurrent = false            // Enables React concurrent mode\n    // resize = undefined            // Resize config, see react-use-measure's options\n    // orthographic = false          // Creates an orthographic camera if true\n    // noEvents = false              // Switch off raytracing and event support\n    // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n    // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n    // updateDefaultCamera = true    // Adjusts default camera on size changes\n    // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n    // onPointerMissed \n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, __jsx(SmokeThing, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  })), __jsx(TextLoop, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }));\n};\n\nexport default SmokeContainer;","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/SmokeContainer.jsx"],"names":["extend","SmokeThing","ref","useRef","useFrame","console","SmokeContainer","gl","scene","camera","size","viewport","aspect","mouse","clock","invalidate","intersect","setDefaultCamera","useThree","init","stats","THREE","renderer","window","geometry","material","color","wireframe","mesh","cubeSineDriver","textGeo","textTexture","textMaterial","opacity","map","transparent","blending","AdditiveBlending","text","light","smokeTexture","smokeMaterial","smokeGeo","smokeParticles","p","particle","Math","document","animate","delta","requestAnimationFrame","evolveSmoke","render","sp","fov","position"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef } from \"react\";\nimport {\n    extend,\n    Canvas,\n    useFrame,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\nimport * as resources from './resources/index';\nextend(resources);\n\n\nimport TextLoop from \"../TextLoop\";\n\n\n\n\n\n\nconst SmokeThing = () => {\n    const ref = useRef()\n\n    useFrame(() => (ref.current.rotation.x = ref.current.rotation.y += 0.01))\n\n    return (\n        <mesh\n            ref={ref}\n            onClick={e => console.log('click')}\n            onPointerOver={e => console.log('hover')}\n            onPointerOut={e => console.log('unhover')}\n        >\n            <planeGeometry \n                attach=\"geometry\" \n                args={[10000, 10000]} \n            />\n            <meshNormalMaterial attach=\"material\" />\n        </mesh>\n    )\n}\n\n\n\n\nconst SmokeContainer = () => {\n    const {\n        gl,                           // WebGL renderer \n        scene,                        // Default scene\n        camera,                       // Default camera\n        size,                         // Bounds of the view (which stretches 100% and auto-adjusts)\n        viewport,                     // Bounds of the viewport in 3d units + factor (size/viewport)\n        aspect,                       // Aspect ratio (size.width / size.height)\n        mouse,                        // Current 2D mouse coordinates\n        clock,                        // THREE.Clock (useful for useFrame deltas)\n        invalidate,                   // Invalidates a single frame (for <Canvas invalidateFrameloop />)\n        intersect,                    // Calls onMouseMove handlers for objects underneath the cursor\n        setDefaultCamera,             // Sets the default camera\n    } = useThree();\n\n \n\n\n    // const mouse = useRef([0, 0]);\n    // const onMouseMove = useCallback(\n    //     ({ clientX: x, clientY: y }) =>\n    //     (mouse.current = [\n    //         x - window.innerWidth / 2,\n    //         y - window.innerHeight / 2\n    //     ]),\n    //     []\n    // );\n\n \n    const init = () => {\n        stats = new Stats();\n\n\n        clock = new THREE.Clock();\n\n        renderer = new THREE.WebGLRenderer();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n\n        scene = new THREE.Scene();\n\n        camera = new THREE.PerspectiveCamera(\n            75,\n            window.innerWidth / window.innerHeight,\n            1,\n            10000\n        );\n        camera.position.z = 1000;\n        scene.add(camera);\n\n        geometry = new THREE.CubeGeometry(200, 200, 200);\n        material = new THREE.MeshLambertMaterial({\n            color: 0xaa6666,\n            wireframe: false\n        });\n        mesh = new THREE.Mesh(geometry, material);\n        //scene.add( mesh );\n        cubeSineDriver = 0;\n\n        textGeo = new THREE.PlaneGeometry(300, 300);\n        THREE.ImageUtils.crossOrigin = \"\"; //Need this to pull in crossdomain images from AWS\n        textTexture = THREE.ImageUtils.loadTexture(\n            \"https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/quickText.png\"\n        );\n        textMaterial = new THREE.MeshLambertMaterial({\n            color: 0x00ffff,\n            opacity: 1,\n            map: textTexture,\n            transparent: true,\n            blending: THREE.AdditiveBlending\n        });\n        text = new THREE.Mesh(textGeo, textMaterial);\n        text.position.z = 800;\n        scene.add(text);\n\n        light = new THREE.DirectionalLight(0xffffff, 0.5);\n        light.position.set(-1, 0, 1);\n        scene.add(light);\n\n        smokeTexture = THREE.ImageUtils.loadTexture(\n            \"https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png\"\n        );\n        smokeMaterial = new THREE.MeshLambertMaterial({\n            color: 0x00dddd,\n            map: smokeTexture,\n            transparent: true\n        });\n        smokeGeo = new THREE.PlaneGeometry(300, 300);\n        smokeParticles = [];\n\n        for (p = 0; p < 150; p++) {\n            var particle = new THREE.Mesh(smokeGeo, smokeMaterial);\n            particle.position.set(\n                Math.random() * 500 - 250,\n                Math.random() * 500 - 250,\n                Math.random() * 1000 - 100\n            );\n            particle.rotation.z = Math.random() * 360;\n            scene.add(particle);\n            smokeParticles.push(particle);\n        }\n\n        document.body.appendChild(renderer.domElement);\n    }\n\n    const animate = () => {\n        // note: three.js includes requestAnimationFrame shim\n        stats.begin();\n        delta = clock.getDelta();\n        requestAnimationFrame(animate);\n        evolveSmoke();\n        render();\n        stats.end();\n    }\n\n    const evolveSmoke = () => {\n        var sp = smokeParticles.length;\n        while (sp--) {\n            smokeParticles[sp].rotation.z += delta * 0.2;\n        }\n    }\n\n    const render = () => {\n        mesh.rotation.x += 0.005;\n        mesh.rotation.y += 0.01;\n        cubeSineDriver += 0.01;\n        mesh.position.z = 100 + Math.sin(cubeSineDriver) * 500;\n        renderer.render(scene, camera);\n    }\n\n    return (\n        <div \n            className=\"container block__three-container\" \n        >\n            \n            <Canvas\n                camera={{ fov: 75, position: [0, 0, 60] }} \n                // children                      // Either a function child (which receives state) or regular children\n                // gl                            // Props that go into the default webGL-renderer\n                // camera                        // Props that go into the default camera\n                // raycaster                     // Props that go into the default raycaster\n                // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n                // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n                // gl2 = false                   // Enables webgl2\n                // concurrent = false            // Enables React concurrent mode\n                // resize = undefined            // Resize config, see react-use-measure's options\n                // orthographic = false          // Creates an orthographic camera if true\n                // noEvents = false              // Switch off raytracing and event support\n                // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n                // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n                // updateDefaultCamera = true    // Adjusts default camera on size changes\n                // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n                // onPointerMissed \n            >   \n                \n                <SmokeThing />\n\n            </Canvas> \n           \n            <TextLoop  />\n\n        </div>\n    );\n}\n\nexport default SmokeContainer;\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}