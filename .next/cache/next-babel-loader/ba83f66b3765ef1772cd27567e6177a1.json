{"ast":null,"code":"var _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef, useState, useMemo } from \"react\";\nimport * as THREE from 'three';\nimport { Canvas, extend as extendThree, useFrame, useLoader, useResource, useThree } from \"react-three-fiber\"; // Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\n\nimport { EffectComposer } from './resources/postprocessing/EffectComposer';\nimport { RenderPass } from './resources/postprocessing/RenderPass';\nimport { GlitchPass } from './resources/postprocessing/GlitchPass';\nextendThree({\n  EffectComposer,\n  RenderPass,\n  GlitchPass\n}); // import TextLoop from \"../TextLoop\";\n// const DEFAULT_LAYER = 0;\n// const OCCLUSION_LAYER = 1;\n// The canvas houses this function, the scene. Scene is where the elements come together.\n\nconst SmokeParticle = () => {\n  const {\n    scene // Default scene\n\n  } = useThree();\n  const ref = useRef();\n  const url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n  const texture = useMemo(() => new THREE.TextureLoader().load(url), [url]);\n  let xFactor = Math.random() * 500 - 250;\n  let yFactor = Math.random() * 500 - 250;\n  let zFactor = Math.random() * 800 - 100;\n  let rotationAngle = Math.random() * 360 - zFactor; // let position = { x: Math.random() * 500-250, y: Math.random() * 500-250, z: 2 };\n  // // let position = (Math.random()*500-250, Math.random()*500-250, 2);\n  // let rotation = Math.random() * 360;\n\n  useFrame(({\n    clock\n  }) => {\n    let delta = clock.getDelta();\n    ref.current.rotation.z += delta * 0.2; // ref.current.rotation.z = rotationAngle;\n\n    ref.current.position.set(Math.cos(clock.getElapsedTime()) * 1.5 * xFactor, (ref.current.rotation.y += 0.01) * yFactor, 2 // xFactor,\n    // yFactor,\n    // zFactor\n    );\n  }); // if (ref && ref.current && ref.current.parent) {\n  //     ref.current.parent.scale.z = 1.22;\n  // }\n\n  return __jsx(\"mesh\", {\n    ref: ref // scale={[ 1, 1, 2 ]}\n    ,\n    visible: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, __jsx(\"planeGeometry\", {\n    attach: \"geometry\",\n    args: [200, 200],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), __jsx(\"meshLambertMaterial\", {\n    attach: \"material\",\n    color: \"#ccbbee\",\n    transparent: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, __jsx(\"primitive\", {\n    attach: \"map\",\n    object: texture,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  })));\n};\n\nconst GenerateSmoke = () => {\n  return __jsx(React.Fragment, null, new Array(80).fill().map((_, index) => __jsx(SmokeParticle, {\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  })));\n}; // Cast the lighting\n\n\nconst Lighting = () => {\n  return __jsx(\"directionalLight\", {\n    color: \"#ffffff\",\n    intensity: 0.5,\n    position: [-2, 0, 30],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  });\n}; // This is the canvas. It's the lowest level element in the three/webGl chain\n\n\nconst CanvasicalSmoke = () => {\n  return __jsx(React.Fragment, null, __jsx(Canvas, {\n    className: \"container block__three-container\",\n    camera: {\n      fov: 75,\n      aspect: 0.5,\n      near: 1,\n      far: 10000,\n      position: [0, 0, 600]\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, __jsx(Lighting, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }), __jsx(GenerateSmoke, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  })));\n};\n\nexport default CanvasicalSmoke; // // Creates a fullscreen colored plane\n// const Plane = () => {\n//     return (\n//         <mesh >\n//             <planeGeometry  attach=\"geometry\"  args={[ 32, 32, 32, 32 ]} />\n//             <meshPhysicalMaterial  attach=\"material\"  color=\"#ffffff\"  />\n//         </mesh>\n//     )\n// }\n// // A light bar\n// const LightBar = () => {\n//     // const lightBar = useRef();\n//     return (\n//         <>\n//             <mesh \n//                 // ref={lightBar} \n//             >\n//                 <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n//                 <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n//             </mesh>\n//         </>\n//     )\n// }","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx"],"names":["React","useCallback","useEffect","useRef","useState","useMemo","THREE","Canvas","extend","extendThree","useFrame","useLoader","useResource","useThree","EffectComposer","RenderPass","GlitchPass","SmokeParticle","scene","ref","url","texture","TextureLoader","load","xFactor","Math","random","yFactor","zFactor","rotationAngle","clock","delta","getDelta","current","rotation","z","position","set","cos","getElapsedTime","y","GenerateSmoke","Array","fill","map","_","index","Lighting","CanvasicalSmoke","fov","aspect","near","far"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef, useState, useMemo } from \"react\";\nimport * as THREE from 'three';\nimport {\n    Canvas,\n    extend as extendThree,\n    useFrame,\n    useLoader,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\n\n// Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\nimport { EffectComposer } from './resources/postprocessing/EffectComposer';\nimport { RenderPass } from './resources/postprocessing/RenderPass';\nimport { GlitchPass } from './resources/postprocessing/GlitchPass';\nextendThree({ EffectComposer, RenderPass, GlitchPass });\n\n// import TextLoop from \"../TextLoop\";\n\n\n// const DEFAULT_LAYER = 0;\n// const OCCLUSION_LAYER = 1;\n\n\n// The canvas houses this function, the scene. Scene is where the elements come together.\nconst SmokeParticle = () => {\n    const { \n        scene,                        // Default scene\n    } = useThree();\n    const ref = useRef();\n    const url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n    const texture = useMemo(() => new THREE.TextureLoader().load(url), [url]);\n    \n    let xFactor = Math.random() * 500 - 250;\n    let yFactor = Math.random() * 500 - 250;\n    let zFactor = Math.random() * 800 - 100;\n    let rotationAngle = (Math.random() * 360) - zFactor;\n\n    // let position = { x: Math.random() * 500-250, y: Math.random() * 500-250, z: 2 };\n    // // let position = (Math.random()*500-250, Math.random()*500-250, 2);\n    // let rotation = Math.random() * 360;\n\n    useFrame(({ clock }) => {\n        let delta = clock.getDelta();\n        ref.current.rotation.z += (delta * 0.2);\n        // ref.current.rotation.z = rotationAngle;\n        ref.current.position.set(\n            (Math.cos(clock.getElapsedTime()) * 1.5) * xFactor,\n            (ref.current.rotation.y += 0.01) * yFactor,\n            2,\n            // xFactor,\n            // yFactor,\n            // zFactor\n        );\n    })\n\n    // if (ref && ref.current && ref.current.parent) {\n    //     ref.current.parent.scale.z = 1.22;\n    // }\n\n    return (\n        <mesh \n            ref={ref}\n            // scale={[ 1, 1, 2 ]}\n            visible \n        >\n            <planeGeometry \n                attach=\"geometry\"   \n                args={[200, 200]} \n            />\n\n            <meshLambertMaterial \n                attach=\"material\" \n                color=\"#ccbbee\"\n                transparent\n            >\n                <primitive attach=\"map\" object={texture} />\n            </ meshLambertMaterial>\n\n            \n        </mesh>\n    )\n}\n\n\nconst GenerateSmoke = () => {\n    \n    return (\n        <>\n            {new Array(80).fill().map((_, index) => <SmokeParticle key={index}  />)}\n        </>\n    )\n}\n\n// Cast the lighting\nconst Lighting = () => {\n    return (\n        <directionalLight\n            color=\"#ffffff\"\n            intensity={0.5}\n            position={[ -2, 0, 30 ]} \n        />\n    )\n}\n\n// This is the canvas. It's the lowest level element in the three/webGl chain\nconst CanvasicalSmoke = () => {\n    return (\n        <>\n            <Canvas\n                className=\"container block__three-container\" \n                camera={{ \n                    fov: 75, \n                    aspect: 0.5,\n                    near: 1,\n                    far: 10000,\n                    position: [ 0, 0, 600 ]\n                }} \n\n            >\n                <Lighting />\n                <GenerateSmoke  />\n            </Canvas> \n           \n            {/* <TextLoop  /> */}\n        </>\n    );\n}\n\nexport default CanvasicalSmoke;\n\n\n\n\n\n// // Creates a fullscreen colored plane\n// const Plane = () => {\n//     return (\n//         <mesh >\n//             <planeGeometry  attach=\"geometry\"  args={[ 32, 32, 32, 32 ]} />\n//             <meshPhysicalMaterial  attach=\"material\"  color=\"#ffffff\"  />\n//         </mesh>\n//     )\n// }\n\n\n// // A light bar\n// const LightBar = () => {\n//     // const lightBar = useRef();\n\n//     return (\n//         <>\n//             <mesh \n//                 // ref={lightBar} \n//             >\n//                 <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n//                 <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n//             </mesh>\n//         </>\n//     )\n// }\n"]},"metadata":{},"sourceType":"module"}