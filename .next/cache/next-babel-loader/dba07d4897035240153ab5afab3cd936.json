{"ast":null,"code":"var _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef, useState, useMemo } from \"react\";\nimport * as THREE from 'three';\nimport { Canvas, extend as extendThree, useFrame, useLoader, useResource, useThree } from \"react-three-fiber\"; // Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\n\nimport { EffectComposer } from './resources/postprocessing/EffectComposer';\nimport { RenderPass } from './resources/postprocessing/RenderPass';\nimport { GlitchPass } from './resources/postprocessing/GlitchPass';\nextendThree({\n  EffectComposer,\n  RenderPass,\n  GlitchPass\n}); // import TextLoop from \"../TextLoop\";\n// const DEFAULT_LAYER = 0;\n// const OCCLUSION_LAYER = 1;\n// The canvas houses this function, the scene. Scene is where the elements come together.\n\nconst SmokeParticle = () => {\n  const {\n    scene // Default scene\n\n  } = useThree();\n  const ref = useRef();\n  const url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n  const texture = useMemo(() => new THREE.TextureLoader().load(url), [url]);\n  let xFactor = Math.random() * 500 - 250;\n  let yFactor = Math.random() * 500 - 250;\n  let zFactor = Math.random() * 800 - 100;\n  let rotationAngle = Math.random() * 360; // let position = { x: Math.random() * 500-250, y: Math.random() * 500-250, z: 2 };\n  // // let position = (Math.random()*500-250, Math.random()*500-250, 2);\n  // let rotation = Math.random() * 360;\n\n  useFrame(({\n    clock\n  }) => {\n    let delta = clock.getDelta(); // ref.current.rotation.z = ref.current.rotation.z * Math.random();\n    // ref.current.rotation.z += rotationAngle;\n    // smokeParticles[sp].rotation.z += delta * 0.2;\n\n    ref.current.rotation.set(0, 0, delta * 0.2);\n    ref.current.position.set(1, Math.cos(clock.getElapsedTime()) * 1.5, // (ref.current.position.z += 0.01) * zFactor,\n    2 // xFactor,\n    // yFactor,\n    // zFactor\n    );\n  });\n  console.log('ref --> ', ref); // if (ref && ref.current && ref.current.parent) {\n  //     ref.current.parent.scale.z = 1.22;\n  // }\n\n  return __jsx(\"mesh\", {\n    ref: ref,\n    scale: [1, 1, 2],\n    visible: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, __jsx(\"planeGeometry\", {\n    attach: \"geometry\",\n    args: [200, 200],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), __jsx(\"meshLambertMaterial\", {\n    attach: \"material\",\n    color: \"#ccbbee\",\n    transparent: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, __jsx(\"primitive\", {\n    attach: \"map\",\n    object: texture,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  })));\n};\n\nconst GenerateSmoke = () => {\n  return __jsx(React.Fragment, null, new Array(80).fill().map((_, index) => __jsx(SmokeParticle, {\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  })));\n}; // Cast the lighting\n\n\nconst Lighting = () => {\n  return __jsx(\"directionalLight\", {\n    color: \"#ffffff\",\n    intensity: 0.5,\n    position: [-2, 0, 30],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  });\n}; // This is the canvas. It's the lowest level element in the three/webGl chain\n\n\nconst CanvasicalSmoke = () => {\n  return __jsx(React.Fragment, null, __jsx(Canvas, {\n    className: \"container block__three-container\",\n    camera: {\n      fov: 75,\n      aspect: 0.5,\n      near: 1,\n      far: 10000,\n      position: [0, 0, 600]\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, __jsx(Lighting, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }), __jsx(GenerateSmoke, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  })));\n};\n\nexport default CanvasicalSmoke; // // Creates a fullscreen colored plane\n// const Plane = () => {\n//     return (\n//         <mesh >\n//             <planeGeometry  attach=\"geometry\"  args={[ 32, 32, 32, 32 ]} />\n//             <meshPhysicalMaterial  attach=\"material\"  color=\"#ffffff\"  />\n//         </mesh>\n//     )\n// }\n// // A light bar\n// const LightBar = () => {\n//     // const lightBar = useRef();\n//     return (\n//         <>\n//             <mesh \n//                 // ref={lightBar} \n//             >\n//                 <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n//                 <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n//             </mesh>\n//         </>\n//     )\n// }","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx"],"names":["extend","extendThree","GlitchPass","SmokeParticle","useThree","ref","useRef","url","texture","useMemo","THREE","xFactor","Math","yFactor","zFactor","rotationAngle","useFrame","clock","delta","console","GenerateSmoke","Lighting","CanvasicalSmoke","fov","aspect","near","far","position"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef, useState, useMemo } from \"react\";\nimport * as THREE from 'three';\nimport {\n    Canvas,\n    extend as extendThree,\n    useFrame,\n    useLoader,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\n\n// Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\nimport { EffectComposer } from './resources/postprocessing/EffectComposer';\nimport { RenderPass } from './resources/postprocessing/RenderPass';\nimport { GlitchPass } from './resources/postprocessing/GlitchPass';\nextendThree({ EffectComposer, RenderPass, GlitchPass });\n\n// import TextLoop from \"../TextLoop\";\n\n\n// const DEFAULT_LAYER = 0;\n// const OCCLUSION_LAYER = 1;\n\n\n// The canvas houses this function, the scene. Scene is where the elements come together.\nconst SmokeParticle = () => {\n    const { \n        scene,                        // Default scene\n    } = useThree();\n    const ref = useRef();\n    const url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n    const texture = useMemo(() => new THREE.TextureLoader().load(url), [url]);\n    \n    let xFactor = Math.random() * 500 - 250;\n    let yFactor = Math.random() * 500 - 250;\n    let zFactor = Math.random() * 800 - 100;\n    let rotationAngle = Math.random() * 360;\n    \n    // let position = { x: Math.random() * 500-250, y: Math.random() * 500-250, z: 2 };\n    // // let position = (Math.random()*500-250, Math.random()*500-250, 2);\n    // let rotation = Math.random() * 360;\n    \n    useFrame(({ clock }) => {\n        let delta = clock.getDelta();\n        // ref.current.rotation.z = ref.current.rotation.z * Math.random();\n        // ref.current.rotation.z += rotationAngle;\n        // smokeParticles[sp].rotation.z += delta * 0.2;\n        ref.current.rotation.set( 0, 0, \n            delta * 0.2\n        );\n        ref.current.position.set(\n            1,\n            (Math.cos(clock.getElapsedTime()) * 1.5),\n            // (ref.current.position.z += 0.01) * zFactor,\n            2,\n            // xFactor,\n            // yFactor,\n            // zFactor\n        );\n    })\n        \n    console.log('ref --> ', ref);\n    // if (ref && ref.current && ref.current.parent) {\n    //     ref.current.parent.scale.z = 1.22;\n    // }\n\n    return (\n        <mesh \n            ref={ref}\n            scale={[ 1, 1, 2 ]}\n            visible \n        >\n            <planeGeometry \n                attach=\"geometry\"   \n                args={[200, 200]} \n            />\n\n            <meshLambertMaterial \n                attach=\"material\" \n                color=\"#ccbbee\"\n                transparent\n            >\n                <primitive attach=\"map\" object={texture} />\n            </ meshLambertMaterial>\n\n            \n        </mesh>\n    )\n}\n\n\nconst GenerateSmoke = () => {\n    \n    return (\n        <>\n            {new Array(80).fill().map((_, index) => <SmokeParticle key={index}  />)}\n        </>\n    )\n}\n\n// Cast the lighting\nconst Lighting = () => {\n    return (\n        <directionalLight\n            color=\"#ffffff\"\n            intensity={0.5}\n            position={[ -2, 0, 30 ]} \n        />\n    )\n}\n\n// This is the canvas. It's the lowest level element in the three/webGl chain\nconst CanvasicalSmoke = () => {\n    return (\n        <>\n            <Canvas\n                className=\"container block__three-container\" \n                camera={{ \n                    fov: 75, \n                    aspect: 0.5,\n                    near: 1,\n                    far: 10000,\n                    position: [ 0, 0, 600 ]\n                }} \n\n            >\n                <Lighting />\n                <GenerateSmoke  />\n            </Canvas> \n           \n            {/* <TextLoop  /> */}\n        </>\n    );\n}\n\nexport default CanvasicalSmoke;\n\n\n\n\n\n// // Creates a fullscreen colored plane\n// const Plane = () => {\n//     return (\n//         <mesh >\n//             <planeGeometry  attach=\"geometry\"  args={[ 32, 32, 32, 32 ]} />\n//             <meshPhysicalMaterial  attach=\"material\"  color=\"#ffffff\"  />\n//         </mesh>\n//     )\n// }\n\n\n// // A light bar\n// const LightBar = () => {\n//     // const lightBar = useRef();\n\n//     return (\n//         <>\n//             <mesh \n//                 // ref={lightBar} \n//             >\n//                 <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n//                 <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n//             </mesh>\n//         </>\n//     )\n// }\n"]},"metadata":{},"sourceType":"module"}