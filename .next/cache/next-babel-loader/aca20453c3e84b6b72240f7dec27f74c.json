{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/SmokeContainer.jsx\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  position: absolute;\\n  overflow: auto;\\n  top: 0px;\\n  width: 100%;\\n  height: 100vh;\\n  font-size: 20em;\\n  font-weight: 800;\\n  line-height: 0.9em;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport * as THREE from 'three';\nimport React, { useState, useRef, useContext, useEffect, useCallback, useMemo } from 'react';\nimport { apply as extendSpring, useSpring, a, interpolate } from 'react-spring/three';\nimport { extend as extendThree, Canvas, useFrame, useThree } from 'react-three-fiber';\nimport styled from 'styled-components'; // import data from '../../resources/data'\n\nvar data = [\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png\"]; // Import and register postprocessing classes as three-native-elements\n\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { GlitchPass } from '../../resources/postprocessing/GlitchPass';\nextendSpring({\n  EffectComposer: EffectComposer,\n  RenderPass: RenderPass,\n  GlitchPass: GlitchPass\n});\nextendThree({\n  EffectComposer: EffectComposer,\n  RenderPass: RenderPass,\n  GlitchPass: GlitchPass\n});\n/** This component loads an image and projects it onto a plane */\n\nfunction Image(_ref) {\n  var url = _ref.url,\n      opacity = _ref.opacity,\n      scale = _ref.scale,\n      props = _objectWithoutProperties(_ref, [\"url\", \"opacity\", \"scale\"]);\n\n  var texture = useMemo(function () {\n    return new THREE.TextureLoader().load(url);\n  }, [url]);\n\n  var _useState = useState(false),\n      hovered = _useState[0],\n      setHover = _useState[1];\n\n  var hover = useCallback(function () {\n    return setHover(true);\n  }, []);\n  var unhover = useCallback(function () {\n    return setHover(false);\n  }, []);\n\n  var _useSpring = useSpring({\n    factor: hovered ? 1.1 : 1\n  }),\n      factor = _useSpring.factor;\n\n  return __jsx(a.mesh, _extends({}, props, {\n    onPointerOver: hover,\n    onPointerOut: unhover,\n    scale: factor.interpolate(function (f) {\n      return [scale * f, scale * f, 1];\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }), __jsx(\"planeBufferGeometry\", {\n    attach: \"geometry\",\n    args: [5, 5],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }), __jsx(a.meshLambertMaterial, {\n    attach: \"material\",\n    transparent: true,\n    opacity: opacity,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, __jsx(\"primitive\", {\n    attach: \"map\",\n    object: texture,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  })));\n}\n/** This renders text via canvas and projects it as a sprite */\n\n\nfunction Text(_ref2) {\n  var children = _ref2.children,\n      position = _ref2.position,\n      opacity = _ref2.opacity,\n      _ref2$color = _ref2.color,\n      color = _ref2$color === void 0 ? 'white' : _ref2$color,\n      _ref2$fontSize = _ref2.fontSize,\n      fontSize = _ref2$fontSize === void 0 ? 410 : _ref2$fontSize;\n\n  var _useThree = useThree(),\n      camera = _useThree.camera,\n      _useThree$size = _useThree.size,\n      width = _useThree$size.width,\n      height = _useThree$size.height,\n      _useThree$viewport = _useThree.viewport,\n      viewportWidth = _useThree$viewport.width,\n      viewportHeight = _useThree$viewport.height;\n\n  var scale = viewportWidth > viewportHeight ? viewportWidth : viewportHeight;\n  var canvas = useMemo(function () {\n    var canvas = document.createElement('canvas');\n    canvas.width = canvas.height = 2048;\n    var context = canvas.getContext('2d');\n    context.font = \"bold \".concat(fontSize, \"px -apple-system, BlinkMacSystemFont, avenir next, avenir, helvetica neue, helvetica, ubuntu, roboto, noto, segoe ui, arial, sans-serif\");\n    context.textAlign = 'center';\n    context.textBaseline = 'middle';\n    context.fillStyle = color;\n    context.fillText(children, 1024, 1024 - 410 / 2);\n    return canvas;\n  }, [children, width, height]);\n  return __jsx(a.sprite, {\n    scale: [scale, scale, 1],\n    position: position,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, __jsx(a.spriteMaterial, {\n    attach: \"material\",\n    transparent: true,\n    opacity: opacity,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, __jsx(\"canvasTexture\", {\n    attach: \"map\",\n    image: canvas,\n    premultiplyAlpha: true,\n    onUpdate: function onUpdate(s) {\n      return s.needsUpdate = true;\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  })));\n}\n/** This component creates a fullscreen colored plane */\n\n\nfunction Background(_ref3) {\n  var color = _ref3.color;\n\n  var _useThree2 = useThree(),\n      size = _useThree2.size,\n      viewport = _useThree2.viewport;\n\n  console.log(viewport);\n  return __jsx(\"mesh\", {\n    scale: [viewport.width, viewport.height, 1],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, __jsx(\"planeBufferGeometry\", {\n    attach: \"geometry\",\n    args: [1, 1],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), __jsx(a.meshBasicMaterial, {\n    attach: \"material\",\n    color: color,\n    depthTest: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }));\n}\n/** This component rotates a bunch of stars */\n\n\nfunction Stars(_ref4) {\n  var position = _ref4.position;\n  var group = useRef();\n  var theta = 0;\n  useFrame(function () {\n    var r = 5 * Math.sin(THREE.Math.degToRad(theta += 0.01));\n    var s = Math.cos(THREE.Math.degToRad(theta * 2));\n    group.current.rotation.set(r, r, r);\n    group.current.scale.set(s, s, s);\n  });\n\n  var _useMemo = useMemo(function () {\n    var geo = new THREE.SphereBufferGeometry(1, 10, 10);\n    var mat = new THREE.MeshBasicMaterial({\n      color: new THREE.Color('peachpuff')\n    });\n    var coords = new Array(1000).fill().map(function (i) {\n      return [Math.random() * 800 - 400, Math.random() * 800 - 400, Math.random() * 800 - 400];\n    });\n    return [geo, mat, coords];\n  }, []),\n      geo = _useMemo[0],\n      mat = _useMemo[1],\n      coords = _useMemo[2];\n\n  return __jsx(a.group, {\n    ref: group,\n    position: position,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, coords.map(function (_ref5, i) {\n    var _ref6 = _slicedToArray(_ref5, 3),\n        p1 = _ref6[0],\n        p2 = _ref6[1],\n        p3 = _ref6[2];\n\n    return __jsx(\"mesh\", {\n      key: i,\n      geometry: geo,\n      material: mat,\n      position: [p1, p2, p3],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    });\n  }));\n}\n/** This component creates a glitch effect */\n\n\nvar Effects = React.memo(function (_ref7) {\n  var factor = _ref7.factor;\n\n  var _useThree3 = useThree(),\n      gl = _useThree3.gl,\n      scene = _useThree3.scene,\n      camera = _useThree3.camera,\n      size = _useThree3.size;\n\n  var composer = useRef();\n  useEffect(function () {\n    return void composer.current.setSize(size.width, size.height);\n  }, [size]); // This takes over as the main render-loop (when 2nd arg is set to true)\n\n  useFrame(function () {\n    return composer.current.render();\n  }, 1);\n  return __jsx(\"effectComposer\", {\n    ref: composer,\n    args: [gl],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, __jsx(\"renderPass\", {\n    attachArray: \"passes\",\n    args: [scene, camera],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }), __jsx(a.glitchPass, {\n    attachArray: \"passes\",\n    renderToScreen: true,\n    factor: factor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }));\n});\n/** This component creates a bunch of parallaxed images */\n\nfunction Images(_ref8) {\n  var top = _ref8.top,\n      mouse = _ref8.mouse,\n      scrollMax = _ref8.scrollMax;\n  return data.map(function (_ref9, index) {\n    var _ref10 = _slicedToArray(_ref9, 6),\n        url = _ref10[0],\n        x = _ref10[1],\n        y = _ref10[2],\n        factor = _ref10[3],\n        z = _ref10[4],\n        scale = _ref10[5];\n\n    return __jsx(Image, {\n      key: index,\n      url: url,\n      scale: scale,\n      opacity: top.interpolate([0, 500], [0, 1]),\n      position: interpolate([top, mouse], function (top, mouse) {\n        return [-mouse[0] * factor / 50000 + x, mouse[1] * factor / 50000 + y * 1.15 + top * factor / scrollMax * 2, z + top / 2000];\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    });\n  });\n}\n/** This component maintains the scene */\n\n\nfunction Scene(_ref11) {\n  var top = _ref11.top,\n      mouse = _ref11.mouse;\n\n  var _useThree4 = useThree(),\n      size = _useThree4.size;\n\n  var scrollMax = size.height * 4.5;\n  return __jsx(React.Fragment, null, __jsx(a.spotLight, {\n    intensity: 1.2,\n    color: \"white\",\n    position: mouse.interpolate(function (x, y) {\n      return [x / 100, -y / 100, 6.5];\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }), __jsx(Effects, {\n    factor: top.interpolate([0, 150], [1, 0]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }), __jsx(Background, {\n    color: top.interpolate([0, scrollMax * 0.25, scrollMax * 0.8, scrollMax], ['#27282F', '#247BA0', '#70C1B3', '#f8f3f1']),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }), __jsx(Stars, {\n    position: top.interpolate(function (top) {\n      return [0, -1 + top / 20, 0];\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }), __jsx(Images, {\n    top: top,\n    mouse: mouse,\n    scrollMax: scrollMax,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }), __jsx(Text, {\n    opacity: top.interpolate([0, 200], [1, 0]),\n    position: top.interpolate(function (top) {\n      return [0, -1 + top / 200, 0];\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, \"lorem\"), __jsx(Text, {\n    position: top.interpolate(function (top) {\n      return [0, -20 + top * 10 / scrollMax * 2, 0];\n    }),\n    color: \"black\",\n    fontSize: 150,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, \"Ipsum\"));\n}\n/** Main component */\n\n\nexport default function Main() {\n  // This tiny spring right here controlls all(!) the animations, one for scroll, the other for mouse movement ...\n  var _useSpring2 = useSpring(function () {\n    return {\n      top: 0,\n      mouse: [0, 0]\n    };\n  }),\n      _useSpring3 = _slicedToArray(_useSpring2, 2),\n      _useSpring3$ = _useSpring3[0],\n      top = _useSpring3$.top,\n      mouse = _useSpring3$.mouse,\n      set = _useSpring3[1];\n\n  var onMouseMove = useCallback(function (_ref12) {\n    var x = _ref12.clientX,\n        y = _ref12.clientY;\n    return set({\n      mouse: [x - window.innerWidth / 2, y - window.innerHeight / 2]\n    });\n  }, []);\n  var onScroll = useCallback(function (e) {\n    return set({\n      top: e.target.scrollTop\n    });\n  }, []);\n\n  var _useState2 = useState({}),\n      events = _useState2[0],\n      setEvents = _useState2[1];\n\n  return __jsx(React.Fragment, null, __jsx(Canvas, {\n    className: \"canvas\",\n    onCreated: function onCreated(_ref13) {\n      var events = _ref13.events;\n      return setEvents(events);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, __jsx(Scene, {\n    top: top,\n    mouse: mouse,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  })), __jsx(Container, _extends({\n    onScroll: onScroll,\n    onMouseMove: onMouseMove\n  }, events, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    style: {\n      height: '525vh'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  })));\n}\nvar Container = styled.div(_templateObject());","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/SmokeContainer.jsx"],"names":["apply","extend","data","extendSpring","EffectComposer","RenderPass","GlitchPass","extendThree","url","opacity","scale","props","texture","useMemo","THREE","hovered","setHover","useState","hover","useCallback","unhover","factor","useSpring","children","position","color","fontSize","camera","width","height","viewportWidth","viewportHeight","useThree","canvas","document","context","s","size","viewport","console","group","useRef","theta","useFrame","r","Math","geo","mat","coords","p1","p2","p3","Effects","gl","scene","composer","useEffect","top","mouse","scrollMax","x","y","z","interpolate","set","onMouseMove","window","onScroll","e","scrollTop","events","setEvents","Container","styled"],"mappings":"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","sourcesContent":["import * as THREE from 'three'\nimport React, { useState, useRef, useContext, useEffect, useCallback, useMemo } from 'react'\nimport { apply as extendSpring, useSpring, a, interpolate } from 'react-spring/three'\nimport { extend as extendThree, Canvas, useFrame, useThree } from 'react-three-fiber'\nimport styled from 'styled-components'\n// import data from '../../resources/data'\nconst data = [\n    \"https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png\"\n]\n// Import and register postprocessing classes as three-native-elements\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\nimport { GlitchPass } from '../../resources/postprocessing/GlitchPass'\n\nextendSpring({ EffectComposer, RenderPass, GlitchPass })\nextendThree({ EffectComposer, RenderPass, GlitchPass })\n\n/** This component loads an image and projects it onto a plane */\nfunction Image({ url, opacity, scale, ...props }) {\n  const texture = useMemo(() => new THREE.TextureLoader().load(url), [url])\n  const [hovered, setHover] = useState(false)\n  const hover = useCallback(() => setHover(true), [])\n  const unhover = useCallback(() => setHover(false), [])\n  const { factor } = useSpring({ factor: hovered ? 1.1 : 1 })\n  return (\n    <a.mesh\n      {...props}\n      onPointerOver={hover}\n      onPointerOut={unhover}\n      scale={factor.interpolate(f => [scale * f, scale * f, 1])}>\n      <planeBufferGeometry attach=\"geometry\" args={[5, 5]} />\n      <a.meshLambertMaterial attach=\"material\" transparent opacity={opacity}>\n        <primitive attach=\"map\" object={texture} />\n      </a.meshLambertMaterial>\n    </a.mesh>\n  )\n}\n\n/** This renders text via canvas and projects it as a sprite */\nfunction Text({ children, position, opacity, color = 'white', fontSize = 410 }) {\n  const {\n    camera,\n    size: { width, height },\n    viewport: { width: viewportWidth, height: viewportHeight },\n  } = useThree()\n  const scale = viewportWidth > viewportHeight ? viewportWidth : viewportHeight\n  const canvas = useMemo(() => {\n    const canvas = document.createElement('canvas')\n    canvas.width = canvas.height = 2048\n    const context = canvas.getContext('2d')\n    context.font = `bold ${fontSize}px -apple-system, BlinkMacSystemFont, avenir next, avenir, helvetica neue, helvetica, ubuntu, roboto, noto, segoe ui, arial, sans-serif`\n    context.textAlign = 'center'\n    context.textBaseline = 'middle'\n    context.fillStyle = color\n    context.fillText(children, 1024, 1024 - 410 / 2)\n    return canvas\n  }, [children, width, height])\n  return (\n    <a.sprite scale={[scale, scale, 1]} position={position}>\n      <a.spriteMaterial attach=\"material\" transparent opacity={opacity}>\n        <canvasTexture attach=\"map\" image={canvas} premultiplyAlpha onUpdate={s => (s.needsUpdate = true)} />\n      </a.spriteMaterial>\n    </a.sprite>\n  )\n}\n\n/** This component creates a fullscreen colored plane */\nfunction Background({ color }) {\n  const { size, viewport } = useThree()\n  console.log(viewport)\n  return (\n    <mesh scale={[viewport.width, viewport.height, 1]}>\n      <planeBufferGeometry attach=\"geometry\" args={[1, 1]} />\n      <a.meshBasicMaterial attach=\"material\" color={color} depthTest={false} />\n    </mesh>\n  )\n}\n\n/** This component rotates a bunch of stars */\nfunction Stars({ position }) {\n  let group = useRef()\n  let theta = 0\n  useFrame(() => {\n    const r = 5 * Math.sin(THREE.Math.degToRad((theta += 0.01)))\n    const s = Math.cos(THREE.Math.degToRad(theta * 2))\n    group.current.rotation.set(r, r, r)\n    group.current.scale.set(s, s, s)\n  })\n  const [geo, mat, coords] = useMemo(() => {\n    const geo = new THREE.SphereBufferGeometry(1, 10, 10)\n    const mat = new THREE.MeshBasicMaterial({ color: new THREE.Color('peachpuff') })\n    const coords = new Array(1000)\n      .fill()\n      .map(i => [Math.random() * 800 - 400, Math.random() * 800 - 400, Math.random() * 800 - 400])\n    return [geo, mat, coords]\n  }, [])\n  return (\n    <a.group ref={group} position={position}>\n      {coords.map(([p1, p2, p3], i) => (\n        <mesh key={i} geometry={geo} material={mat} position={[p1, p2, p3]} />\n      ))}\n    </a.group>\n  )\n}\n\n/** This component creates a glitch effect */\nconst Effects = React.memo(({ factor }) => {\n  const { gl, scene, camera, size } = useThree()\n  const composer = useRef()\n  useEffect(() => void composer.current.setSize(size.width, size.height), [size])\n  // This takes over as the main render-loop (when 2nd arg is set to true)\n  useFrame(() => composer.current.render(), 1)\n  return (\n    <effectComposer ref={composer} args={[gl]}>\n      <renderPass attachArray=\"passes\" args={[scene, camera]} />\n      <a.glitchPass attachArray=\"passes\" renderToScreen factor={factor} />\n    </effectComposer>\n  )\n})\n\n/** This component creates a bunch of parallaxed images */\nfunction Images({ top, mouse, scrollMax }) {\n  return data.map(([url, x, y, factor, z, scale], index) => (\n    <Image\n      key={index}\n      url={url}\n      scale={scale}\n      opacity={top.interpolate([0, 500], [0, 1])}\n      position={interpolate([top, mouse], (top, mouse) => [\n        (-mouse[0] * factor) / 50000 + x,\n        (mouse[1] * factor) / 50000 + y * 1.15 + ((top * factor) / scrollMax) * 2,\n        z + top / 2000,\n      ])}\n    />\n  ))\n}\n\n/** This component maintains the scene */\nfunction Scene({ top, mouse }) {\n  const { size } = useThree()\n  const scrollMax = size.height * 4.5\n  return (\n    <>\n      <a.spotLight intensity={1.2} color=\"white\" position={mouse.interpolate((x, y) => [x / 100, -y / 100, 6.5])} />\n      <Effects factor={top.interpolate([0, 150], [1, 0])} />\n      <Background\n        color={top.interpolate(\n          [0, scrollMax * 0.25, scrollMax * 0.8, scrollMax],\n          ['#27282F', '#247BA0', '#70C1B3', '#f8f3f1']\n        )}\n      />\n      <Stars position={top.interpolate(top => [0, -1 + top / 20, 0])} />\n      <Images top={top} mouse={mouse} scrollMax={scrollMax} />\n      <Text opacity={top.interpolate([0, 200], [1, 0])} position={top.interpolate(top => [0, -1 + top / 200, 0])}>\n        lorem\n      </Text>\n      <Text position={top.interpolate(top => [0, -20 + ((top * 10) / scrollMax) * 2, 0])} color=\"black\" fontSize={150}>\n        Ipsum\n      </Text>\n    </>\n  )\n}\n\n/** Main component */\nexport default function Main() {\n  // This tiny spring right here controlls all(!) the animations, one for scroll, the other for mouse movement ...\n  const [{ top, mouse }, set] = useSpring(() => ({ top: 0, mouse: [0, 0] }))\n  const onMouseMove = useCallback(\n    ({ clientX: x, clientY: y }) => set({ mouse: [x - window.innerWidth / 2, y - window.innerHeight / 2] }),\n    []\n  )\n  const onScroll = useCallback(e => set({ top: e.target.scrollTop }), [])\n  const [events, setEvents] = useState({})\n  return (\n    <>\n      <Canvas className=\"canvas\" onCreated={({ events }) => setEvents(events)}>\n        <Scene top={top} mouse={mouse} />\n      </Canvas>\n      <Container onScroll={onScroll} onMouseMove={onMouseMove} {...events}>\n        <div style={{ height: '525vh' }} />\n      </Container>\n    </>\n  )\n}\n\nconst Container = styled.div`\n  position: absolute;\n  overflow: auto;\n  top: 0px;\n  width: 100%;\n  height: 100vh;\n  font-size: 20em;\n  font-weight: 800;\n  line-height: 0.9em;\n`"]},"metadata":{},"sourceType":"module"}