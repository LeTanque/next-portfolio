{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/SmokeContainer.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef } from \"react\";\nimport { extend, Canvas, useFrame, useLoader, useResource, useThree } from \"react-three-fiber\";\nimport * as resources from './resources/index';\nimport * as THREE from 'three';\nextend(resources);\nimport TextLoop from \"../TextLoop\"; // const init = () => {\n//     stats = new Stats();\n//     clock = new THREE.Clock();\n//     renderer = new THREE.WebGLRenderer();\n//     renderer.setSize(window.innerWidth, window.innerHeight);\n//     scene = new THREE.Scene();\n//     camera = new THREE.PerspectiveCamera(\n//         75,\n//         window.innerWidth / window.innerHeight,\n//         1,\n//         10000\n//     );\n//     camera.position.z = 1000;\n//     scene.add(camera);\n//     geometry = new THREE.CubeGeometry(200, 200, 200);\n//     material = new THREE.MeshLambertMaterial({\n//         color: 0xaa6666,\n//         wireframe: false\n//     });\n//     mesh = new THREE.Mesh(geometry, material);\n//     //scene.add( mesh );\n//     cubeSineDriver = 0;\n//     smokeTexture = THREE.ImageUtils.loadTexture(\n//         \"https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png\"\n//     );\n//     smokeMaterial = new THREE.MeshLambertMaterial({\n//         color: 0x00dddd,\n//         map: smokeTexture,\n//         transparent: true\n//     });\n// }\n// const animate = () => {\n//     // note: three.js includes requestAnimationFrame shim\n//     stats.begin();\n//     delta = clock.getDelta();\n//     requestAnimationFrame(animate);\n//     evolveSmoke();\n//     render();\n//     stats.end();\n// }\n// const evolveSmoke = () => {\n//     var sp = smokeParticles.length;\n//     while (sp--) {\n//         smokeParticles[sp].rotation.z += delta * 0.2;\n//     }\n// }\n// const render = () => {\n//     mesh.rotation.x += 0.005;\n//     mesh.rotation.y += 0.01;\n//     cubeSineDriver += 0.01;\n//     mesh.position.z = 100 + Math.sin(cubeSineDriver) * 500;\n//     renderer.render(scene, camera);\n// }\n\nvar SmokeThing = function SmokeThing() {\n  var _useResource = useResource(),\n      _useResource2 = _slicedToArray(_useResource, 2),\n      geometryRef = _useResource2[0],\n      geometry = _useResource2[1];\n\n  var _useResource3 = useResource(),\n      _useResource4 = _slicedToArray(_useResource3, 2),\n      materialRef = _useResource4[0],\n      material = _useResource4[1];\n\n  var ref = useRef(); // const smokeGeo = new THREE.PlaneGeometry(300, 300);\n  // useFrame(() => (ref.current.rotation.x = ref.current.rotation.y += 0.01))\n\n  var _useLoader = useLoader(THREE.TextureLoader, [\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png\"]),\n      _useLoader2 = _slicedToArray(_useLoader, 1),\n      smokeTexture = _useLoader2[0]; // const smokeParticles = () => {\n  //     let smokeParticles = [];\n  //     for (p = 0; p < 150; p++) {\n  //         let particle = new THREE.Mesh(smokeGeo, smokeMaterial);\n  //         particle.position.set(\n  //             Math.random() * 500 - 250,\n  //             Math.random() * 500 - 250,\n  //             Math.random() * 1000 - 100\n  //         );\n  //         particle.rotation.z = Math.random() * 360;\n  //         scene.add(particle);\n  //         smokeParticles.push(particle);\n  //     }\n  //     return smokeParticles;\n  // }\n  // useFrame(({ clock }) => {\n  //     delta = clock.getDelta();\n  //     let sp = smokeParticles.length;\n  //     while (sp--) {\n  //         smokeParticles[sp].rotation.z += delta * 0.2;\n  //     }\n  // })\n\n\n  return __jsx(\"group\", {\n    ref: ref,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, __jsx(\"ambientLight\", {\n    intensity: 0.3,\n    position: [0, 0, 40],\n    penumbra: 2,\n    decay: 2,\n    color: \"#111111\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }), __jsx(\"mesh\", {\n    visible: true,\n    userData: {\n      test: 'hello'\n    },\n    position: [1, 2, 3],\n    rotation: [0, 0, 0],\n    ref: ref,\n    onClick: function onClick(e) {\n      return console.log('click');\n    },\n    onPointerOver: function onPointerOver(e) {\n      return console.log('hover');\n    },\n    onPointerOut: function onPointerOut(e) {\n      return console.log('unhover');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, __jsx(\"planeGeometry\", {\n    attach: \"geometry\",\n    args: [10000, 10000],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }), __jsx(\"meshNormalMaterial\", {\n    attach: \"material\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  })), __jsx(\"meshLambertMaterial\", {\n    ref: materialRef,\n    color: \"0x00dddd\",\n    map: smokeTexture,\n    transparent: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }));\n};\n\nvar SmokeContainer = function SmokeContainer() {\n  var _useThree = useThree(),\n      gl = _useThree.gl,\n      scene = _useThree.scene,\n      camera = _useThree.camera,\n      size = _useThree.size,\n      viewport = _useThree.viewport,\n      aspect = _useThree.aspect,\n      mouse = _useThree.mouse,\n      clock = _useThree.clock,\n      invalidate = _useThree.invalidate,\n      intersect = _useThree.intersect,\n      setDefaultCamera = _useThree.setDefaultCamera;\n\n  return __jsx(\"div\", {\n    className: \"container block__three-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, __jsx(Canvas, {\n    style: {\n      background: 'radial-gradient(at 50% 70%, #200f20 40%, #090b1f 80%, #050523 100%)'\n    },\n    camera: {\n      fov: 75,\n      position: [0, 0, 60]\n    } // children                      // Either a function child (which receives state) or regular children\n    // gl                            // Props that go into the default webGL-renderer\n    // camera                        // Props that go into the default camera\n    // raycaster                     // Props that go into the default raycaster\n    // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n    // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n    // gl2 = false                   // Enables webgl2\n    // concurrent = false            // Enables React concurrent mode\n    // resize = undefined            // Resize config, see react-use-measure's options\n    // orthographic = false          // Creates an orthographic camera if true\n    // noEvents = false              // Switch off raytracing and event support\n    // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n    // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n    // updateDefaultCamera = true    // Adjusts default camera on size changes\n    // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n    // onPointerMissed \n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, __jsx(\"rectAreaLight\", {\n    intensity: 3,\n    position: [0, 10, -10],\n    width: 30,\n    height: 30,\n    onUpdate: function onUpdate(self) {\n      return self.lookAt(new THREE.Vector3(0, 0, 0));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }), __jsx(SmokeThing, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  })), __jsx(TextLoop, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }));\n};\n\nexport default SmokeContainer;","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/SmokeContainer.jsx"],"names":["extend","SmokeThing","geometryRef","geometry","useResource","materialRef","material","ref","useRef","smokeTexture","useLoader","THREE","test","console","SmokeContainer","gl","scene","camera","size","viewport","aspect","mouse","clock","invalidate","intersect","setDefaultCamera","useThree","background","fov","position","self"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef } from \"react\";\nimport {\n    extend,\n    Canvas,\n    useFrame,\n    useLoader,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\nimport * as resources from './resources/index';\nimport * as THREE from 'three';\nextend(resources);\n\n\nimport TextLoop from \"../TextLoop\";\n\n\n\n// const init = () => {\n//     stats = new Stats();\n\n\n//     clock = new THREE.Clock();\n\n//     renderer = new THREE.WebGLRenderer();\n//     renderer.setSize(window.innerWidth, window.innerHeight);\n\n//     scene = new THREE.Scene();\n\n//     camera = new THREE.PerspectiveCamera(\n//         75,\n//         window.innerWidth / window.innerHeight,\n//         1,\n//         10000\n//     );\n//     camera.position.z = 1000;\n//     scene.add(camera);\n\n//     geometry = new THREE.CubeGeometry(200, 200, 200);\n//     material = new THREE.MeshLambertMaterial({\n//         color: 0xaa6666,\n//         wireframe: false\n//     });\n//     mesh = new THREE.Mesh(geometry, material);\n//     //scene.add( mesh );\n//     cubeSineDriver = 0;\n\n\n//     smokeTexture = THREE.ImageUtils.loadTexture(\n//         \"https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png\"\n//     );\n//     smokeMaterial = new THREE.MeshLambertMaterial({\n//         color: 0x00dddd,\n//         map: smokeTexture,\n//         transparent: true\n//     });\n    \n// }\n\n// const animate = () => {\n//     // note: three.js includes requestAnimationFrame shim\n//     stats.begin();\n//     delta = clock.getDelta();\n//     requestAnimationFrame(animate);\n//     evolveSmoke();\n//     render();\n//     stats.end();\n// }\n\n// const evolveSmoke = () => {\n//     var sp = smokeParticles.length;\n//     while (sp--) {\n//         smokeParticles[sp].rotation.z += delta * 0.2;\n//     }\n// }\n\n// const render = () => {\n//     mesh.rotation.x += 0.005;\n//     mesh.rotation.y += 0.01;\n//     cubeSineDriver += 0.01;\n//     mesh.position.z = 100 + Math.sin(cubeSineDriver) * 500;\n//     renderer.render(scene, camera);\n// }\n\n\n\n\n\nconst SmokeThing = () => {\n    const [geometryRef, geometry] = useResource();\n    const [materialRef, material] = useResource();\n    const ref = useRef();\n\n    // const smokeGeo = new THREE.PlaneGeometry(300, 300);\n    \n    // useFrame(() => (ref.current.rotation.x = ref.current.rotation.y += 0.01))\n    const [ smokeTexture ] = useLoader(THREE.TextureLoader, [\n        \"https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png\"\n    ])\n\n    // const smokeParticles = () => {\n    //     let smokeParticles = [];\n    //     for (p = 0; p < 150; p++) {\n    //         let particle = new THREE.Mesh(smokeGeo, smokeMaterial);\n    //         particle.position.set(\n    //             Math.random() * 500 - 250,\n    //             Math.random() * 500 - 250,\n    //             Math.random() * 1000 - 100\n    //         );\n    //         particle.rotation.z = Math.random() * 360;\n    //         scene.add(particle);\n    //         smokeParticles.push(particle);\n    //     }\n    //     return smokeParticles;\n    // }\n\n    // useFrame(({ clock }) => {\n    //     delta = clock.getDelta();\n    //     let sp = smokeParticles.length;\n    //     while (sp--) {\n    //         smokeParticles[sp].rotation.z += delta * 0.2;\n    //     }\n\n    // })\n\n    return (\n        <group ref={ref}>\n            <ambientLight\n                intensity={0.3} \n                position={[0, 0, 40]} \n                penumbra={2} \n                decay={2}\n                color=\"#111111\"\n            />\n\n\n\n            <mesh \n                visible \n                userData={{ test: 'hello' }} \n                position={[1, 2, 3]} \n                rotation={[0, 0, 0]}\n                ref={ref}\n                onClick={e => console.log('click')}\n                onPointerOver={e => console.log('hover')}\n                onPointerOut={e => console.log('unhover')}\n            >\n                <planeGeometry \n                    attach=\"geometry\" \n                    args={[10000, 10000]} \n                />\n                <meshNormalMaterial attach=\"material\" />\n            </mesh>\n\n            <meshLambertMaterial \n                ref={materialRef}\n                color=\"0x00dddd\"\n                map={smokeTexture}\n                transparent={true}\n            />\n\n\n        </group>\n    )\n}\n\nconst SmokeContainer = () => {\n    const {\n        gl,                           // WebGL renderer \n        scene,                        // Default scene\n        camera,                       // Default camera\n        size,                         // Bounds of the view (which stretches 100% and auto-adjusts)\n        viewport,                     // Bounds of the viewport in 3d units + factor (size/viewport)\n        aspect,                       // Aspect ratio (size.width / size.height)\n        mouse,                        // Current 2D mouse coordinates\n        clock,                        // THREE.Clock (useful for useFrame deltas)\n        invalidate,                   // Invalidates a single frame (for <Canvas invalidateFrameloop />)\n        intersect,                    // Calls onMouseMove handlers for objects underneath the cursor\n        setDefaultCamera,             // Sets the default camera\n    } = useThree();\n\n\n    return (\n        <div \n            className=\"container block__three-container\" \n        >\n            \n            <Canvas\n                style={{ background: 'radial-gradient(at 50% 70%, #200f20 40%, #090b1f 80%, #050523 100%)' }}\n                camera={{ fov: 75, position: [0, 0, 60] }} \n                // children                      // Either a function child (which receives state) or regular children\n                // gl                            // Props that go into the default webGL-renderer\n                // camera                        // Props that go into the default camera\n                // raycaster                     // Props that go into the default raycaster\n                // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n                // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n                // gl2 = false                   // Enables webgl2\n                // concurrent = false            // Enables React concurrent mode\n                // resize = undefined            // Resize config, see react-use-measure's options\n                // orthographic = false          // Creates an orthographic camera if true\n                // noEvents = false              // Switch off raytracing and event support\n                // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n                // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n                // updateDefaultCamera = true    // Adjusts default camera on size changes\n                // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n                // onPointerMissed \n            >   \n                <rectAreaLight\n                    intensity={3}\n                    position={[0, 10, -10]}\n                    width={30}\n                    height={30}\n                    onUpdate={self => self.lookAt(new THREE.Vector3(0, 0, 0))}\n                />\n                <SmokeThing />\n\n            </Canvas> \n           \n            <TextLoop  />\n\n        </div>\n    );\n}\n\nexport default SmokeContainer;\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}