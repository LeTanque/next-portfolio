{"ast":null,"code":"import _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\nimport { Material } from './Material.js';\nimport { MultiplyOperation } from '../constants.js';\nimport { Color } from '../math/Color.js';\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>\n * }\n */\n\nfunction MeshBasicMaterial(parameters) {\n  Material.call(this);\n  this.type = 'MeshBasicMaterial';\n  this.color = new Color(0xffffff); // emissive\n\n  this.map = null;\n  this.lightMap = null;\n  this.lightMapIntensity = 1.0;\n  this.aoMap = null;\n  this.aoMapIntensity = 1.0;\n  this.specularMap = null;\n  this.alphaMap = null;\n  this.envMap = null;\n  this.combine = MultiplyOperation;\n  this.reflectivity = 1;\n  this.refractionRatio = 0.98;\n  this.wireframe = false;\n  this.wireframeLinewidth = 1;\n  this.wireframeLinecap = 'round';\n  this.wireframeLinejoin = 'round';\n  this.skinning = false;\n  this.morphTargets = false;\n  this.setValues(parameters);\n}\n\nMeshBasicMaterial.prototype = _Object$create(Material.prototype);\nMeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\nMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\nMeshBasicMaterial.prototype.copy = function (source) {\n  Material.prototype.copy.call(this, source);\n  this.color.copy(source.color);\n  this.map = source.map;\n  this.lightMap = source.lightMap;\n  this.lightMapIntensity = source.lightMapIntensity;\n  this.aoMap = source.aoMap;\n  this.aoMapIntensity = source.aoMapIntensity;\n  this.specularMap = source.specularMap;\n  this.alphaMap = source.alphaMap;\n  this.envMap = source.envMap;\n  this.combine = source.combine;\n  this.reflectivity = source.reflectivity;\n  this.refractionRatio = source.refractionRatio;\n  this.wireframe = source.wireframe;\n  this.wireframeLinewidth = source.wireframeLinewidth;\n  this.wireframeLinecap = source.wireframeLinecap;\n  this.wireframeLinejoin = source.wireframeLinejoin;\n  this.skinning = source.skinning;\n  this.morphTargets = source.morphTargets;\n  return this;\n};\n\nexport { MeshBasicMaterial };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/materials/MeshBasicMaterial.js"],"names":["Material","MultiplyOperation","Color","MeshBasicMaterial","parameters","call","type","color","map","lightMap","lightMapIntensity","aoMap","aoMapIntensity","specularMap","alphaMap","envMap","combine","reflectivity","refractionRatio","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","skinning","morphTargets","setValues","prototype","constructor","isMeshBasicMaterial","copy","source"],"mappings":";AAAA,SAASA,QAAT,QAAyB,eAAzB;AACA,SAASC,iBAAT,QAAkC,iBAAlC;AACA,SAASC,KAAT,QAAsB,kBAAtB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,SAASC,iBAAT,CAA4BC,UAA5B,EAAyC;AAExCJ,EAAAA,QAAQ,CAACK,IAAT,CAAe,IAAf;AAEA,OAAKC,IAAL,GAAY,mBAAZ;AAEA,OAAKC,KAAL,GAAa,IAAIL,KAAJ,CAAW,QAAX,CAAb,CANwC,CAMJ;;AAEpC,OAAKM,GAAL,GAAW,IAAX;AAEA,OAAKC,QAAL,GAAgB,IAAhB;AACA,OAAKC,iBAAL,GAAyB,GAAzB;AAEA,OAAKC,KAAL,GAAa,IAAb;AACA,OAAKC,cAAL,GAAsB,GAAtB;AAEA,OAAKC,WAAL,GAAmB,IAAnB;AAEA,OAAKC,QAAL,GAAgB,IAAhB;AAEA,OAAKC,MAAL,GAAc,IAAd;AACA,OAAKC,OAAL,GAAef,iBAAf;AACA,OAAKgB,YAAL,GAAoB,CAApB;AACA,OAAKC,eAAL,GAAuB,IAAvB;AAEA,OAAKC,SAAL,GAAiB,KAAjB;AACA,OAAKC,kBAAL,GAA0B,CAA1B;AACA,OAAKC,gBAAL,GAAwB,OAAxB;AACA,OAAKC,iBAAL,GAAyB,OAAzB;AAEA,OAAKC,QAAL,GAAgB,KAAhB;AACA,OAAKC,YAAL,GAAoB,KAApB;AAEA,OAAKC,SAAL,CAAgBrB,UAAhB;AAEA;;AAEDD,iBAAiB,CAACuB,SAAlB,GAA8B,eAAe1B,QAAQ,CAAC0B,SAAxB,CAA9B;AACAvB,iBAAiB,CAACuB,SAAlB,CAA4BC,WAA5B,GAA0CxB,iBAA1C;AAEAA,iBAAiB,CAACuB,SAAlB,CAA4BE,mBAA5B,GAAkD,IAAlD;;AAEAzB,iBAAiB,CAACuB,SAAlB,CAA4BG,IAA5B,GAAmC,UAAWC,MAAX,EAAoB;AAEtD9B,EAAAA,QAAQ,CAAC0B,SAAT,CAAmBG,IAAnB,CAAwBxB,IAAxB,CAA8B,IAA9B,EAAoCyB,MAApC;AAEA,OAAKvB,KAAL,CAAWsB,IAAX,CAAiBC,MAAM,CAACvB,KAAxB;AAEA,OAAKC,GAAL,GAAWsB,MAAM,CAACtB,GAAlB;AAEA,OAAKC,QAAL,GAAgBqB,MAAM,CAACrB,QAAvB;AACA,OAAKC,iBAAL,GAAyBoB,MAAM,CAACpB,iBAAhC;AAEA,OAAKC,KAAL,GAAamB,MAAM,CAACnB,KAApB;AACA,OAAKC,cAAL,GAAsBkB,MAAM,CAAClB,cAA7B;AAEA,OAAKC,WAAL,GAAmBiB,MAAM,CAACjB,WAA1B;AAEA,OAAKC,QAAL,GAAgBgB,MAAM,CAAChB,QAAvB;AAEA,OAAKC,MAAL,GAAce,MAAM,CAACf,MAArB;AACA,OAAKC,OAAL,GAAec,MAAM,CAACd,OAAtB;AACA,OAAKC,YAAL,GAAoBa,MAAM,CAACb,YAA3B;AACA,OAAKC,eAAL,GAAuBY,MAAM,CAACZ,eAA9B;AAEA,OAAKC,SAAL,GAAiBW,MAAM,CAACX,SAAxB;AACA,OAAKC,kBAAL,GAA0BU,MAAM,CAACV,kBAAjC;AACA,OAAKC,gBAAL,GAAwBS,MAAM,CAACT,gBAA/B;AACA,OAAKC,iBAAL,GAAyBQ,MAAM,CAACR,iBAAhC;AAEA,OAAKC,QAAL,GAAgBO,MAAM,CAACP,QAAvB;AACA,OAAKC,YAAL,GAAoBM,MAAM,CAACN,YAA3B;AAEA,SAAO,IAAP;AAEA,CAjCD;;AAoCA,SAASrB,iBAAT","sourcesContent":["import { Material } from './Material.js';\nimport { MultiplyOperation } from '../constants.js';\nimport { Color } from '../math/Color.js';\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>\n * }\n */\n\nfunction MeshBasicMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'MeshBasicMaterial';\n\n\tthis.color = new Color( 0xffffff ); // emissive\n\n\tthis.map = null;\n\n\tthis.lightMap = null;\n\tthis.lightMapIntensity = 1.0;\n\n\tthis.aoMap = null;\n\tthis.aoMapIntensity = 1.0;\n\n\tthis.specularMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.combine = MultiplyOperation;\n\tthis.reflectivity = 1;\n\tthis.refractionRatio = 0.98;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshBasicMaterial.prototype = Object.create( Material.prototype );\nMeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\n\nMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\nMeshBasicMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.map = source.map;\n\n\tthis.lightMap = source.lightMap;\n\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\tthis.aoMap = source.aoMap;\n\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\tthis.specularMap = source.specularMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.combine = source.combine;\n\tthis.reflectivity = source.reflectivity;\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\n\treturn this;\n\n};\n\n\nexport { MeshBasicMaterial };\n"]},"metadata":{},"sourceType":"module"}