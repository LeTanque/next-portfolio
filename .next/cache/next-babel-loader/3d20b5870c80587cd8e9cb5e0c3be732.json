{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/dnd-draglayer/CustomDragLayer.jsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { DragLayer } from \"react-dnd\";\nimport ItemTypes from \"./ItemTypes\";\nimport BoxDragPreview from \"./BoxDragPreview\";\nimport snapToGrid from \"./snapToGrid\";\n\nfunction getItemStyles(props) {\n  var initialOffset = props.initialOffset,\n      currentOffset = props.currentOffset;\n\n  if (!initialOffset || !currentOffset) {\n    return {\n      display: \"none\"\n    };\n  }\n\n  var x = currentOffset.x,\n      y = currentOffset.y;\n\n  if (props.snapToGrid) {\n    x -= initialOffset.x;\n    y -= initialOffset.y;\n\n    var _snapToGrid = snapToGrid(x, y);\n\n    var _snapToGrid2 = _slicedToArray(_snapToGrid, 2);\n\n    x = _snapToGrid2[0];\n    y = _snapToGrid2[1];\n    x += initialOffset.x;\n    y += initialOffset.y;\n  }\n\n  var transform = \"translate(\".concat(x, \"px, \").concat(y, \"px)\");\n  return {\n    transform: transform,\n    WebkitTransform: transform\n  };\n}\n\nvar CustomDragLayer = function CustomDragLayer(props) {\n  var item = props.item,\n      itemType = props.itemType,\n      isDragging = props.isDragging;\n\n  var renderItem = function renderItem() {\n    switch (itemType) {\n      case ItemTypes.BOX:\n        return __jsx(BoxDragPreview, {\n          title: item.title,\n          image: item.image,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34\n          },\n          __self: this\n        });\n\n      default:\n        return null;\n    }\n  };\n\n  if (!isDragging) {\n    return null;\n  }\n\n  return __jsx(\"section\", {\n    className: \"section__custom-drag-layer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    style: getItemStyles(props),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, renderItem()));\n};\n\nexport default DragLayer(function (monitor) {\n  return {\n    item: monitor.getItem(),\n    itemType: monitor.getItemType(),\n    initialOffset: monitor.getInitialSourceClientOffset(),\n    currentOffset: monitor.getSourceClientOffset(),\n    isDragging: monitor.isDragging()\n  };\n})(CustomDragLayer);","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/dnd-draglayer/CustomDragLayer.jsx"],"names":["React","DragLayer","ItemTypes","BoxDragPreview","snapToGrid","getItemStyles","props","initialOffset","currentOffset","display","x","y","transform","WebkitTransform","CustomDragLayer","item","itemType","isDragging","renderItem","BOX","title","image","monitor","getItem","getItemType","getInitialSourceClientOffset","getSourceClientOffset"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAAA,MAClBC,aADkB,GACeD,KADf,CAClBC,aADkB;AAAA,MACHC,aADG,GACeF,KADf,CACHE,aADG;;AAE1B,MAAI,CAACD,aAAD,IAAkB,CAACC,aAAvB,EAAsC;AAClC,WAAO;AACHC,MAAAA,OAAO,EAAE;AADN,KAAP;AAGH;;AANyB,MAOpBC,CAPoB,GAOXF,aAPW,CAOpBE,CAPoB;AAAA,MAOjBC,CAPiB,GAOXH,aAPW,CAOjBG,CAPiB;;AAQ1B,MAAIL,KAAK,CAACF,UAAV,EAAsB;AAClBM,IAAAA,CAAC,IAAIH,aAAa,CAACG,CAAnB;AACAC,IAAAA,CAAC,IAAIJ,aAAa,CAACI,CAAnB;;AAFkB,sBAGTP,UAAU,CAACM,CAAD,EAAIC,CAAJ,CAHD;;AAAA;;AAGjBD,IAAAA,CAHiB;AAGdC,IAAAA,CAHc;AAIlBD,IAAAA,CAAC,IAAIH,aAAa,CAACG,CAAnB;AACAC,IAAAA,CAAC,IAAIJ,aAAa,CAACI,CAAnB;AACH;;AACD,MAAMC,SAAS,uBAAgBF,CAAhB,iBAAwBC,CAAxB,QAAf;AACA,SAAO;AACHC,IAAAA,SAAS,EAATA,SADG;AAEHC,IAAAA,eAAe,EAAED;AAFd,GAAP;AAIH;;AAED,IAAME,eAAe,GAAG,SAAlBA,eAAkB,CAAAR,KAAK,EAAI;AAAA,MACrBS,IADqB,GACUT,KADV,CACrBS,IADqB;AAAA,MACfC,QADe,GACUV,KADV,CACfU,QADe;AAAA,MACLC,UADK,GACUX,KADV,CACLW,UADK;;AAE7B,MAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACrB,YAAQF,QAAR;AACI,WAAKd,SAAS,CAACiB,GAAf;AACI,eAAO,MAAC,cAAD;AAAgB,UAAA,KAAK,EAAEJ,IAAI,CAACK,KAA5B;AAAmC,UAAA,KAAK,EAAEL,IAAI,CAACM,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;;AACJ;AACI,eAAO,IAAP;AAJR;AAMH,GAPD;;AAQA,MAAI,CAACJ,UAAL,EAAiB;AACb,WAAO,IAAP;AACH;;AACD,SACI;AAAS,IAAA,SAAS,EAAC,4BAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,KAAK,EAAEZ,aAAa,CAACC,KAAD,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmCY,UAAU,EAA7C,CADJ,CADJ;AAKH,CAlBD;;AAoBA,eAAejB,SAAS,CAAC,UAAAqB,OAAO;AAAA,SAAK;AACjCP,IAAAA,IAAI,EAAEO,OAAO,CAACC,OAAR,EAD2B;AAEjCP,IAAAA,QAAQ,EAAEM,OAAO,CAACE,WAAR,EAFuB;AAGjCjB,IAAAA,aAAa,EAAEe,OAAO,CAACG,4BAAR,EAHkB;AAIjCjB,IAAAA,aAAa,EAAEc,OAAO,CAACI,qBAAR,EAJkB;AAKjCT,IAAAA,UAAU,EAAEK,OAAO,CAACL,UAAR;AALqB,GAAL;AAAA,CAAR,CAAT,CAMXH,eANW,CAAf","sourcesContent":["import React from \"react\";\nimport { DragLayer } from \"react-dnd\";\nimport ItemTypes from \"./ItemTypes\";\nimport BoxDragPreview from \"./BoxDragPreview\";\nimport snapToGrid from \"./snapToGrid\";\n\nfunction getItemStyles(props) {\n    const { initialOffset, currentOffset } = props;\n    if (!initialOffset || !currentOffset) {\n        return {\n            display: \"none\"\n        };\n    }\n    let { x, y } = currentOffset;\n    if (props.snapToGrid) {\n        x -= initialOffset.x;\n        y -= initialOffset.y;\n        [x, y] = snapToGrid(x, y);\n        x += initialOffset.x;\n        y += initialOffset.y;\n    }\n    const transform = `translate(${x}px, ${y}px)`;\n    return {\n        transform,\n        WebkitTransform: transform\n    };\n}\n\nconst CustomDragLayer = props => {\n    const { item, itemType, isDragging } = props;\n    const renderItem = () => {\n        switch (itemType) {\n            case ItemTypes.BOX:\n                return <BoxDragPreview title={item.title} image={item.image} />;\n            default:\n                return null;\n        }\n    }\n    if (!isDragging) {\n        return null;\n    }\n    return (\n        <section className=\"section__custom-drag-layer\">\n            <div style={getItemStyles(props)}>{renderItem()}</div>\n        </section>\n    );\n};\n\nexport default DragLayer(monitor => ({\n    item: monitor.getItem(),\n    itemType: monitor.getItemType(),\n    initialOffset: monitor.getInitialSourceClientOffset(),\n    currentOffset: monitor.getSourceClientOffset(),\n    isDragging: monitor.isDragging()\n}))(CustomDragLayer);\n"]},"metadata":{},"sourceType":"module"}