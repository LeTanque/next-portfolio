{"ast":null,"code":"var _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/SmokeContainer.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef } from \"react\";\nimport { extend, Canvas, useFrame, useResource, useThree } from \"react-three-fiber\";\nimport * as resources from './resources/index';\nextend(resources);\nimport TextLoop from \"../TextLoop\";\n\nconst init = () => {\n  stats = new Stats();\n  clock = new THREE.Clock();\n  renderer = new THREE.WebGLRenderer();\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  scene = new THREE.Scene();\n  camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 10000);\n  camera.position.z = 1000;\n  scene.add(camera);\n  geometry = new THREE.CubeGeometry(200, 200, 200);\n  material = new THREE.MeshLambertMaterial({\n    color: 0xaa6666,\n    wireframe: false\n  });\n  mesh = new THREE.Mesh(geometry, material); //scene.add( mesh );\n\n  cubeSineDriver = 0;\n  textGeo = new THREE.PlaneGeometry(300, 300);\n  THREE.ImageUtils.crossOrigin = \"\"; //Need this to pull in crossdomain images from AWS\n\n  textTexture = THREE.ImageUtils.loadTexture(\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/quickText.png\");\n  textMaterial = new THREE.MeshLambertMaterial({\n    color: 0x00ffff,\n    opacity: 1,\n    map: textTexture,\n    transparent: true,\n    blending: THREE.AdditiveBlending\n  });\n  text = new THREE.Mesh(textGeo, textMaterial);\n  text.position.z = 800;\n  scene.add(text);\n  light = new THREE.DirectionalLight(0xffffff, 0.5);\n  light.position.set(-1, 0, 1);\n  scene.add(light);\n  smokeTexture = THREE.ImageUtils.loadTexture(\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png\");\n  smokeMaterial = new THREE.MeshLambertMaterial({\n    color: 0x00dddd,\n    map: smokeTexture,\n    transparent: true\n  });\n  smokeGeo = new THREE.PlaneGeometry(300, 300);\n  smokeParticles = [];\n\n  for (p = 0; p < 150; p++) {\n    var particle = new THREE.Mesh(smokeGeo, smokeMaterial);\n    particle.position.set(Math.random() * 500 - 250, Math.random() * 500 - 250, Math.random() * 1000 - 100);\n    particle.rotation.z = Math.random() * 360;\n    scene.add(particle);\n    smokeParticles.push(particle);\n  }\n\n  document.body.appendChild(renderer.domElement);\n};\n\nconst animate = () => {\n  // note: three.js includes requestAnimationFrame shim\n  stats.begin();\n  delta = clock.getDelta();\n  requestAnimationFrame(animate);\n  evolveSmoke();\n  render();\n  stats.end();\n};\n\nconst evolveSmoke = () => {\n  var sp = smokeParticles.length;\n\n  while (sp--) {\n    smokeParticles[sp].rotation.z += delta * 0.2;\n  }\n};\n\nconst render = () => {\n  mesh.rotation.x += 0.005;\n  mesh.rotation.y += 0.01;\n  cubeSineDriver += 0.01;\n  mesh.position.z = 100 + Math.sin(cubeSineDriver) * 500;\n  renderer.render(scene, camera);\n};\n\nconst SmokeThing = () => {\n  const [geometryRef, geometry] = useResource();\n  const [materialRef, material] = useResource();\n  const ref = useRef(); // useFrame(() => (ref.current.rotation.x = ref.current.rotation.y += 0.01))\n\n  smokeTexture = THREE.ImageUtils.loadTexture(\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png\");\n  return __jsx(React.Fragment, null, __jsx(\"ambientLight\", {\n    intensity: 0.3,\n    position: [0, 0, 40],\n    penumbra: 2,\n    decay: 2,\n    color: \"#111111\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }), __jsx(\"mesh\", {\n    visible: true,\n    userData: {\n      test: 'hello'\n    },\n    position: [1, 2, 3],\n    rotation: [0, 0, 0],\n    ref: ref,\n    onClick: e => console.log('click'),\n    onPointerOver: e => console.log('hover'),\n    onPointerOut: e => console.log('unhover'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, __jsx(\"planeGeometry\", {\n    attach: \"geometry\",\n    args: [10000, 10000],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }), __jsx(\"meshNormalMaterial\", {\n    attach: \"material\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  })), __jsx(\"meshLambertMaterial\", {\n    ref: materialRef,\n    color: \"0x00dddd\",\n    map: smokeTexture,\n    transparent: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }));\n};\n\nconst SmokeContainer = () => {\n  const {\n    gl,\n    // WebGL renderer \n    scene,\n    // Default scene\n    camera,\n    // Default camera\n    size,\n    // Bounds of the view (which stretches 100% and auto-adjusts)\n    viewport,\n    // Bounds of the viewport in 3d units + factor (size/viewport)\n    aspect,\n    // Aspect ratio (size.width / size.height)\n    mouse,\n    // Current 2D mouse coordinates\n    clock,\n    // THREE.Clock (useful for useFrame deltas)\n    invalidate,\n    // Invalidates a single frame (for <Canvas invalidateFrameloop />)\n    intersect,\n    // Calls onMouseMove handlers for objects underneath the cursor\n    setDefaultCamera // Sets the default camera\n\n  } = useThree();\n  return __jsx(\"div\", {\n    className: \"container block__three-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }, __jsx(Canvas, {\n    camera: {\n      fov: 75,\n      position: [0, 0, 60]\n    } // children                      // Either a function child (which receives state) or regular children\n    // gl                            // Props that go into the default webGL-renderer\n    // camera                        // Props that go into the default camera\n    // raycaster                     // Props that go into the default raycaster\n    // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n    // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n    // gl2 = false                   // Enables webgl2\n    // concurrent = false            // Enables React concurrent mode\n    // resize = undefined            // Resize config, see react-use-measure's options\n    // orthographic = false          // Creates an orthographic camera if true\n    // noEvents = false              // Switch off raytracing and event support\n    // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n    // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n    // updateDefaultCamera = true    // Adjusts default camera on size changes\n    // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n    // onPointerMissed \n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, __jsx(\"rectAreaLight\", {\n    intensity: 3,\n    position: [0, 10, -10],\n    width: 30,\n    height: 30,\n    onUpdate: self => self.lookAt(new THREE.Vector3(0, 0, 0)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }), __jsx(SmokeThing, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  })), __jsx(TextLoop, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }));\n};\n\nexport default SmokeContainer;","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/SmokeContainer.jsx"],"names":["React","useCallback","useEffect","useRef","extend","Canvas","useFrame","useResource","useThree","resources","TextLoop","init","stats","Stats","clock","THREE","Clock","renderer","WebGLRenderer","setSize","window","innerWidth","innerHeight","scene","Scene","camera","PerspectiveCamera","position","z","add","geometry","CubeGeometry","material","MeshLambertMaterial","color","wireframe","mesh","Mesh","cubeSineDriver","textGeo","PlaneGeometry","ImageUtils","crossOrigin","textTexture","loadTexture","textMaterial","opacity","map","transparent","blending","AdditiveBlending","text","light","DirectionalLight","set","smokeTexture","smokeMaterial","smokeGeo","smokeParticles","p","particle","Math","random","rotation","push","document","body","appendChild","domElement","animate","begin","delta","getDelta","requestAnimationFrame","evolveSmoke","render","end","sp","length","x","y","sin","SmokeThing","geometryRef","materialRef","ref","test","e","console","log","SmokeContainer","gl","size","viewport","aspect","mouse","invalidate","intersect","setDefaultCamera","fov","self","lookAt","Vector3"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef } from \"react\";\nimport {\n    extend,\n    Canvas,\n    useFrame,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\nimport * as resources from './resources/index';\nextend(resources);\n\n\nimport TextLoop from \"../TextLoop\";\n\n\n\nconst init = () => {\n    stats = new Stats();\n\n\n    clock = new THREE.Clock();\n\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n\n    scene = new THREE.Scene();\n\n    camera = new THREE.PerspectiveCamera(\n        75,\n        window.innerWidth / window.innerHeight,\n        1,\n        10000\n    );\n    camera.position.z = 1000;\n    scene.add(camera);\n\n    geometry = new THREE.CubeGeometry(200, 200, 200);\n    material = new THREE.MeshLambertMaterial({\n        color: 0xaa6666,\n        wireframe: false\n    });\n    mesh = new THREE.Mesh(geometry, material);\n    //scene.add( mesh );\n    cubeSineDriver = 0;\n\n    textGeo = new THREE.PlaneGeometry(300, 300);\n    THREE.ImageUtils.crossOrigin = \"\"; //Need this to pull in crossdomain images from AWS\n    textTexture = THREE.ImageUtils.loadTexture(\n        \"https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/quickText.png\"\n    );\n    textMaterial = new THREE.MeshLambertMaterial({\n        color: 0x00ffff,\n        opacity: 1,\n        map: textTexture,\n        transparent: true,\n        blending: THREE.AdditiveBlending\n    });\n    text = new THREE.Mesh(textGeo, textMaterial);\n    text.position.z = 800;\n    scene.add(text);\n\n    light = new THREE.DirectionalLight(0xffffff, 0.5);\n    light.position.set(-1, 0, 1);\n    scene.add(light);\n\n    smokeTexture = THREE.ImageUtils.loadTexture(\n        \"https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png\"\n    );\n    smokeMaterial = new THREE.MeshLambertMaterial({\n        color: 0x00dddd,\n        map: smokeTexture,\n        transparent: true\n    });\n    smokeGeo = new THREE.PlaneGeometry(300, 300);\n    smokeParticles = [];\n\n    for (p = 0; p < 150; p++) {\n        var particle = new THREE.Mesh(smokeGeo, smokeMaterial);\n        particle.position.set(\n            Math.random() * 500 - 250,\n            Math.random() * 500 - 250,\n            Math.random() * 1000 - 100\n        );\n        particle.rotation.z = Math.random() * 360;\n        scene.add(particle);\n        smokeParticles.push(particle);\n    }\n\n    document.body.appendChild(renderer.domElement);\n}\n\nconst animate = () => {\n    // note: three.js includes requestAnimationFrame shim\n    stats.begin();\n    delta = clock.getDelta();\n    requestAnimationFrame(animate);\n    evolveSmoke();\n    render();\n    stats.end();\n}\n\nconst evolveSmoke = () => {\n    var sp = smokeParticles.length;\n    while (sp--) {\n        smokeParticles[sp].rotation.z += delta * 0.2;\n    }\n}\n\nconst render = () => {\n    mesh.rotation.x += 0.005;\n    mesh.rotation.y += 0.01;\n    cubeSineDriver += 0.01;\n    mesh.position.z = 100 + Math.sin(cubeSineDriver) * 500;\n    renderer.render(scene, camera);\n}\n\n\n\n\n\nconst SmokeThing = () => {\n    const [geometryRef, geometry] = useResource();\n    const [materialRef, material] = useResource();\n    \n    const ref = useRef();\n    // useFrame(() => (ref.current.rotation.x = ref.current.rotation.y += 0.01))\n\n    smokeTexture = THREE.ImageUtils.loadTexture(\n        \"https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png\"\n    );\n\n    return (\n        <>\n            <ambientLight\n                intensity={0.3} \n                position={[0, 0, 40]} \n                penumbra={2} \n                decay={2}\n                color=\"#111111\"\n            />\n\n\n\n            <mesh \n                visible \n                userData={{ test: 'hello' }} \n                position={[1, 2, 3]} \n                rotation={[0, 0, 0]}\n                ref={ref}\n                onClick={e => console.log('click')}\n                onPointerOver={e => console.log('hover')}\n                onPointerOut={e => console.log('unhover')}\n            >\n                <planeGeometry \n                    attach=\"geometry\" \n                    args={[10000, 10000]} \n                />\n                <meshNormalMaterial attach=\"material\" />\n            </mesh>\n\n            <meshLambertMaterial \n                ref={materialRef}\n                color=\"0x00dddd\"\n                map={smokeTexture}\n                transparent={true}\n            />\n\n\n        </>\n    )\n}\n\nconst SmokeContainer = () => {\n    const {\n        gl,                           // WebGL renderer \n        scene,                        // Default scene\n        camera,                       // Default camera\n        size,                         // Bounds of the view (which stretches 100% and auto-adjusts)\n        viewport,                     // Bounds of the viewport in 3d units + factor (size/viewport)\n        aspect,                       // Aspect ratio (size.width / size.height)\n        mouse,                        // Current 2D mouse coordinates\n        clock,                        // THREE.Clock (useful for useFrame deltas)\n        invalidate,                   // Invalidates a single frame (for <Canvas invalidateFrameloop />)\n        intersect,                    // Calls onMouseMove handlers for objects underneath the cursor\n        setDefaultCamera,             // Sets the default camera\n    } = useThree();\n\n\n    return (\n        <div \n            className=\"container block__three-container\" \n        >\n            \n            <Canvas\n                camera={{ fov: 75, position: [0, 0, 60] }} \n                // children                      // Either a function child (which receives state) or regular children\n                // gl                            // Props that go into the default webGL-renderer\n                // camera                        // Props that go into the default camera\n                // raycaster                     // Props that go into the default raycaster\n                // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n                // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n                // gl2 = false                   // Enables webgl2\n                // concurrent = false            // Enables React concurrent mode\n                // resize = undefined            // Resize config, see react-use-measure's options\n                // orthographic = false          // Creates an orthographic camera if true\n                // noEvents = false              // Switch off raytracing and event support\n                // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n                // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n                // updateDefaultCamera = true    // Adjusts default camera on size changes\n                // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n                // onPointerMissed \n            >   \n                <rectAreaLight\n                    intensity={3}\n                    position={[0, 10, -10]}\n                    width={30}\n                    height={30}\n                    onUpdate={self => self.lookAt(new THREE.Vector3(0, 0, 0))}\n                />\n                <SmokeThing />\n\n            </Canvas> \n           \n            <TextLoop  />\n\n        </div>\n    );\n}\n\nexport default SmokeContainer;\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}