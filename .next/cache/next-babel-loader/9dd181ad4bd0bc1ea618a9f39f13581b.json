{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/dnd-draglayer/DraggableBox.jsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { DragSource } from \"react-dnd\";\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\nimport ItemTypes from \"./ItemTypes\";\nimport Box from \"./Box\";\n\nfunction getStyles(props) {\n  var left = props.left,\n      top = props.top,\n      isDragging = props.isDragging;\n  var transform = \"translate3d(\".concat(left, \"px, \").concat(top, \"px, 0)\");\n  return {\n    position: \"absolute\",\n    transform: transform,\n    WebkitTransform: transform,\n    // IE fallback: hide the real node using CSS when dragging\n    // because IE will ignore our custom \"empty image\" drag preview.\n    opacity: isDragging ? 0 : 1,\n    height: isDragging ? 0 : \"\"\n  };\n}\n\nvar DraggableBox =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(DraggableBox, _React$PureComponent);\n\n  function DraggableBox() {\n    _classCallCheck(this, DraggableBox);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DraggableBox).apply(this, arguments));\n  }\n\n  _createClass(DraggableBox, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var connectDragPreview = this.props.connectDragPreview;\n\n      if (connectDragPreview) {\n        // Use empty image as a drag preview so browsers don't draw it\n        // and we can draw whatever we want on the custom drag layer instead.\n        connectDragPreview(getEmptyImage(), {\n          // IE fallback: specify that we'd rather screenshot the node\n          // when it already knows it's being dragged so we can hide it with CSS.\n          captureDraggingState: true\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          image = _this$props.image,\n          title = _this$props.title,\n          connectDragSource = _this$props.connectDragSource;\n      return connectDragSource(__jsx(\"div\", {\n        style: getStyles(this.props),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, __jsx(Box, {\n        title: title,\n        image: image,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return DraggableBox;\n}(React.PureComponent);\n\nexport default DragSource(ItemTypes.BOX, {\n  beginDrag: function beginDrag(props) {\n    var id = props.id,\n        title = props.title,\n        image = props.image,\n        left = props.left,\n        top = props.top;\n    return {\n      id: id,\n      title: title,\n      image: image,\n      left: left,\n      top: top\n    };\n  }\n}, function (connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    connectDragPreview: connect.dragPreview(),\n    isDragging: monitor.isDragging()\n  };\n})(DraggableBox);","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/dnd-draglayer/DraggableBox.jsx"],"names":["React","DragSource","getEmptyImage","ItemTypes","Box","getStyles","props","left","top","isDragging","transform","position","WebkitTransform","opacity","height","DraggableBox","connectDragPreview","captureDraggingState","image","title","connectDragSource","PureComponent","BOX","beginDrag","id","connect","monitor","dragSource","dragPreview"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,WAA3B;AACA,SAASC,aAAT,QAA8B,yBAA9B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,GAAP,MAAgB,OAAhB;;AAGA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA,MACdC,IADc,GACYD,KADZ,CACdC,IADc;AAAA,MACRC,GADQ,GACYF,KADZ,CACRE,GADQ;AAAA,MACHC,UADG,GACYH,KADZ,CACHG,UADG;AAEtB,MAAMC,SAAS,yBAAkBH,IAAlB,iBAA6BC,GAA7B,WAAf;AACA,SAAO;AACHG,IAAAA,QAAQ,EAAE,UADP;AAEHD,IAAAA,SAAS,EAATA,SAFG;AAGHE,IAAAA,eAAe,EAAEF,SAHd;AAIH;AACA;AACAG,IAAAA,OAAO,EAAEJ,UAAU,GAAG,CAAH,GAAO,CANvB;AAOHK,IAAAA,MAAM,EAAEL,UAAU,GAAG,CAAH,GAAO;AAPtB,GAAP;AASH;;IAEKM,Y;;;;;;;;;;;;;wCACkB;AAAA,UACRC,kBADQ,GACe,KAAKV,KADpB,CACRU,kBADQ;;AAEhB,UAAIA,kBAAJ,EAAwB;AACpB;AACA;AACAA,QAAAA,kBAAkB,CAACd,aAAa,EAAd,EAAkB;AAChC;AACA;AACAe,UAAAA,oBAAoB,EAAE;AAHU,SAAlB,CAAlB;AAKH;AACJ;;;6BACQ;AAAA,wBACuC,KAAKX,KAD5C;AAAA,UACGY,KADH,eACGA,KADH;AAAA,UACUC,KADV,eACUA,KADV;AAAA,UACiBC,iBADjB,eACiBA,iBADjB;AAEL,aAAOA,iBAAiB,CACpB;AAAK,QAAA,KAAK,EAAEf,SAAS,CAAC,KAAKC,KAAN,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,MAAC,GAAD;AAAK,QAAA,KAAK,EAAEa,KAAZ;AAAmB,QAAA,KAAK,EAAED,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADoB,CAAxB;AAKH;;;;EApBsBlB,KAAK,CAACqB,a;;AAuBjC,eAAepB,UAAU,CACrBE,SAAS,CAACmB,GADW,EAErB;AACIC,EAAAA,SADJ,qBACcjB,KADd,EACqB;AAAA,QACLkB,EADK,GAC2BlB,KAD3B,CACLkB,EADK;AAAA,QACDL,KADC,GAC2Bb,KAD3B,CACDa,KADC;AAAA,QACMD,KADN,GAC2BZ,KAD3B,CACMY,KADN;AAAA,QACaX,IADb,GAC2BD,KAD3B,CACaC,IADb;AAAA,QACmBC,GADnB,GAC2BF,KAD3B,CACmBE,GADnB;AAEb,WAAO;AAAEgB,MAAAA,EAAE,EAAFA,EAAF;AAAML,MAAAA,KAAK,EAALA,KAAN;AAAaD,MAAAA,KAAK,EAALA,KAAb;AAAoBX,MAAAA,IAAI,EAAJA,IAApB;AAA0BC,MAAAA,GAAG,EAAHA;AAA1B,KAAP;AACH;AAJL,CAFqB,EAQrB,UAACiB,OAAD,EAAUC,OAAV;AAAA,SAAuB;AACnBN,IAAAA,iBAAiB,EAAEK,OAAO,CAACE,UAAR,EADA;AAEnBX,IAAAA,kBAAkB,EAAES,OAAO,CAACG,WAAR,EAFD;AAGnBnB,IAAAA,UAAU,EAAEiB,OAAO,CAACjB,UAAR;AAHO,GAAvB;AAAA,CARqB,CAAV,CAabM,YAba,CAAf","sourcesContent":["import React from \"react\";\nimport { DragSource } from \"react-dnd\";\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\nimport ItemTypes from \"./ItemTypes\";\nimport Box from \"./Box\";\n\n\nfunction getStyles(props) {\n    const { left, top, isDragging } = props;\n    const transform = `translate3d(${left}px, ${top}px, 0)`;\n    return {\n        position: \"absolute\",\n        transform,\n        WebkitTransform: transform,\n        // IE fallback: hide the real node using CSS when dragging\n        // because IE will ignore our custom \"empty image\" drag preview.\n        opacity: isDragging ? 0 : 1,\n        height: isDragging ? 0 : \"\"\n    };\n}\n\nclass DraggableBox extends React.PureComponent {\n    componentDidMount() {\n        const { connectDragPreview } = this.props;\n        if (connectDragPreview) {\n            // Use empty image as a drag preview so browsers don't draw it\n            // and we can draw whatever we want on the custom drag layer instead.\n            connectDragPreview(getEmptyImage(), {\n                // IE fallback: specify that we'd rather screenshot the node\n                // when it already knows it's being dragged so we can hide it with CSS.\n                captureDraggingState: true\n            });\n        }\n    }\n    render() {\n        const { image, title, connectDragSource } = this.props;\n        return connectDragSource(\n            <div style={getStyles(this.props)}>\n                <Box title={title} image={image} />\n            </div>\n        );\n    }\n}\n\nexport default DragSource(\n    ItemTypes.BOX,\n    {\n        beginDrag(props) {\n            const { id, title, image, left, top } = props;\n            return { id, title, image, left, top };\n        }\n    },\n    (connect, monitor) => ({\n        connectDragSource: connect.dragSource(),\n        connectDragPreview: connect.dragPreview(),\n        isDragging: monitor.isDragging()\n    })\n)(DraggableBox);\n"]},"metadata":{},"sourceType":"module"}