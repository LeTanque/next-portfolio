{"ast":null,"code":"var _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/Canvasical.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport * as THREE from 'three';\nimport { Canvas, extend as extendThree, useFrame, useLoader, useResource, useThree } from \"react-three-fiber\"; // Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\n\nimport { EffectComposer } from './resources/postprocessing/EffectComposer';\nimport { RenderPass } from './resources/postprocessing/RenderPass';\nimport { GlitchPass } from './resources/postprocessing/GlitchPass';\nextendThree({\n  EffectComposer,\n  RenderPass,\n  GlitchPass\n}); // import TextLoop from \"../TextLoop\";\n// const DEFAULT_LAYER = 0;\n// const OCCLUSION_LAYER = 1;\n// The canvas houses this function, the scene. Scene is where the elements come together.\n\nconst ObjectMesh = () => {\n  const ref = useRef(); // const [geometryRef, geometry] = useResource();\n  // const [materialRef, material] = useResource();\n  // useFrame(() => {\n  //     ref.current.rotation.x = ref.current.rotation.y += 0.01\n  // });\n\n  useFrame(({\n    clock\n  }) => {\n    ref.current.position.x = Math.cos(clock.getElapsedTime()) * 1.1;\n    ref.current.rotation.x = ref.current.rotation.y += 0.0008;\n    ref.current.rotation.x += 0.001;\n    ref.current.rotation.y += 0.004;\n    ref.current.rotation.z += 0.004;\n  });\n  console.log('ref in objectMeshTet --> ', ref);\n  return __jsx(React.Fragment, null, __jsx(\"mesh\", {\n    ref: ref,\n    userData: {\n      test: 'hello'\n    },\n    position: [0, 0, 2],\n    receiveShadow: true,\n    castShadow: true,\n    visible: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, __jsx(\"torusKnotBufferGeometry\", {\n    attach: \"geometry\",\n    args: [0.5, 0.15, 150, 32],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }), __jsx(\"meshPhysicalMaterial\", {\n    attach: \"material\",\n    color: \"#0077ff\",\n    roughness: 1,\n    clearcoat: 1,\n    clearcoatRoughness: 0.2,\n    dithering: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  })));\n};\n\nconst Lighting = () => __jsx(React.Fragment, null, __jsx(\"ambientLight\", {\n  color: \"#ffffff\",\n  intensity: 0.1,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 82\n  },\n  __self: this\n}), __jsx(\"pointLight\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 86\n  },\n  __self: this\n}), __jsx(\"spotLight\", {\n  color: \"#ffffff\",\n  intensity: 2.2,\n  distance: 300,\n  angle: 1.05,\n  penumbra: 1,\n  decay: 2,\n  position: [11, 15, 15],\n  castShadow: true,\n  \"shadow-mapSize-width\": 111,\n  \"shadow-mapSize-height\": 111,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 87\n  },\n  __self: this\n})); // Creates a fullscreen colored plane\n\n\nconst Plane = () => {\n  const plane = useRef();\n  return __jsx(\"mesh\", {\n    ref: plane,\n    receiveShadow: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, __jsx(\"planeGeometry\", {\n    attach: \"geometry\",\n    args: [20, 20, 32, 32],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }), __jsx(\"meshPhysicalMaterial\", {\n    attach: \"material\",\n    color: \"#000000\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }));\n}; // This is the canvas. It's the lowest level element in the three/webGl chain\n\n\nconst Canvasical = () => {\n  // const {\n  //     gl,                           // WebGL renderer \n  //     scene,                        // Default scene\n  //     camera,                       // Default camera\n  //     size,                         // Bounds of the view (which stretches 100% and auto-adjusts)\n  // } = useThree();\n  return __jsx(React.Fragment, null, __jsx(Canvas, {\n    className: \"container block__three-container\",\n    camera: {\n      fov: 75,\n      position: [0, 0, 6],\n      zoom: 1,\n      focus: 10\n    },\n    shadowMap: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, __jsx(Plane, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }), __jsx(Lighting, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }), __jsx(ObjectMesh, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  })));\n};\n\nexport default Canvasical; // // A light bar\n// const LightBar = () => {\n//     // const lightBar = useRef();\n//     return (\n//         <>\n//             <mesh \n//                 // ref={lightBar} \n//             >\n//                 <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n//                 <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n//             </mesh>\n//         </>\n//     )\n// }","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/Canvasical.jsx"],"names":["React","useCallback","useEffect","useRef","useState","THREE","Canvas","extend","extendThree","useFrame","useLoader","useResource","useThree","EffectComposer","RenderPass","GlitchPass","ObjectMesh","ref","clock","current","position","x","Math","cos","getElapsedTime","rotation","y","z","console","log","test","Lighting","Plane","plane","Canvasical","fov","zoom","focus"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport * as THREE from 'three';\nimport {\n    Canvas,\n    extend as extendThree,\n    useFrame,\n    useLoader,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\n\n// Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\nimport { EffectComposer } from './resources/postprocessing/EffectComposer';\nimport { RenderPass } from './resources/postprocessing/RenderPass';\nimport { GlitchPass } from './resources/postprocessing/GlitchPass';\nextendThree({ EffectComposer, RenderPass, GlitchPass });\n\n// import TextLoop from \"../TextLoop\";\n\n\n\n// const DEFAULT_LAYER = 0;\n// const OCCLUSION_LAYER = 1;\n\n\n\n\n// The canvas houses this function, the scene. Scene is where the elements come together.\nconst ObjectMesh = () => {\n    const ref = useRef();\n    // const [geometryRef, geometry] = useResource();\n    // const [materialRef, material] = useResource();\n    \n    // useFrame(() => {\n    //     ref.current.rotation.x = ref.current.rotation.y += 0.01\n    // });\n    useFrame(({ clock }) => {\n        ref.current.position.x = Math.cos(clock.getElapsedTime()) * 1.1\n        ref.current.rotation.x = ref.current.rotation.y += 0.0008\n        ref.current.rotation.x += 0.001\n        ref.current.rotation.y += 0.004\n        ref.current.rotation.z += 0.004\n    });\n    \n    console.log('ref in objectMeshTet --> ', ref);\n\n    return (\n        <>\n                <mesh \n                    ref={ref}\n                    userData={{ test: 'hello' }} \n                    position={[ 0, 0, 2 ]} \n                    receiveShadow\n                    castShadow\n                    visible \n                >\n                    <torusKnotBufferGeometry \n                        attach=\"geometry\" \n                        args={[ 0.5, 0.15, 150, 32 ]} \n                    />\n                    {/* <tetrahedronBufferGeometry \n                        attach=\"geometry\"\n                        radius={20}\n                    /> */}\n                    <meshPhysicalMaterial \n                        attach=\"material\" \n                        color=\"#0077ff\"\n                        roughness={1} \n                        clearcoat={1} \n                        clearcoatRoughness={0.2}\n                        dithering \n                    />\n                </mesh>\n        </>\n    )\n}\n\n\nconst Lighting = () => (\n    <>\n        <ambientLight\n            color=\"#ffffff\"\n            intensity={0.1}\n        />\n        <pointLight />\n        <spotLight\n            color=\"#ffffff\"\n            intensity={2.2}\n            distance={300}\n            angle={1.05}\n            penumbra={1}\n            decay={2}\n            position={[ 11, 15, 15 ]} \n            castShadow\n            shadow-mapSize-width={111} \n            shadow-mapSize-height={111}\n        />\n    </>\n)\n\n// Creates a fullscreen colored plane\nconst Plane = () => {\n    const plane = useRef();\n\n    return (\n        <mesh \n            ref={plane}\n            receiveShadow\n        >\n            <planeGeometry  attach=\"geometry\"  args={[ 20, 20, 32, 32 ]} />\n            <meshPhysicalMaterial  attach=\"material\"  color=\"#000000\"  />\n        </mesh>\n    )\n}\n\n// This is the canvas. It's the lowest level element in the three/webGl chain\nconst Canvasical = () => {\n    // const {\n    //     gl,                           // WebGL renderer \n    //     scene,                        // Default scene\n    //     camera,                       // Default camera\n    //     size,                         // Bounds of the view (which stretches 100% and auto-adjusts)\n    // } = useThree();\n\n    return (\n        <>\n            <Canvas\n                className=\"container block__three-container\" \n                camera={{ \n                    fov: 75, \n                    position: [ 0, 0, 6 ],\n                    zoom: 1,\n                    focus: 10\n                }} \n                shadowMap\n            >\n                <Plane />\n                <Lighting />\n                <ObjectMesh  />\n\n                {/* <LightBar /> */}\n                \n            </Canvas> \n           \n            {/* <TextLoop  /> */}\n\n        </>\n    );\n}\n\nexport default Canvasical;\n\n\n\n\n\n\n\n\n// // A light bar\n// const LightBar = () => {\n//     // const lightBar = useRef();\n\n//     return (\n//         <>\n//             <mesh \n//                 // ref={lightBar} \n//             >\n//                 <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n//                 <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n//             </mesh>\n//         </>\n//     )\n// }\n"]},"metadata":{},"sourceType":"module"}