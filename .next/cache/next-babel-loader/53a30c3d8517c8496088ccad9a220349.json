{"ast":null,"code":"/**\n * @author HypnosNova / https://www.threejs.org.cn/gallery/\n *\n * Afterimage shader\n * I created this effect inspired by a demo on codepen:\n * https://codepen.io/brunoimbrizi/pen/MoRJaN?page=1&\n */\nvar AfterimageShader = {\n  uniforms: {\n    damp: {\n      value: 0.96\n    },\n    tOld: {\n      value: null\n    },\n    tNew: {\n      value: null\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform float damp;\", \"uniform sampler2D tOld;\", \"uniform sampler2D tNew;\", \"varying vec2 vUv;\", \"vec4 when_gt( vec4 x, float y ) {\", \"return max( sign( x - y ), 0.0 );\", \"}\", \"void main() {\", \"vec4 texelOld = texture2D( tOld, vUv );\", \"vec4 texelNew = texture2D( tNew, vUv );\", \"texelOld *= damp * when_gt( texelOld, 0.1 );\", \"gl_FragColor = max(texelNew, texelOld);\", \"}\"].join(\"\\n\")\n};\nexport { AfterimageShader };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/resources/shaders/AfterimageShader.js"],"names":["AfterimageShader","uniforms","damp","value","tOld","tNew","vertexShader","fragmentShader"],"mappings":"AAAA;;;;;;;AAQA,IAAIA,gBAAgB,GAAG;AACnBC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KADA;AAENC,IAAAA,IAAI,EAAE;AAAED,MAAAA,KAAK,EAAE;AAAT,KAFA;AAGNE,IAAAA,IAAI,EAAE;AAAEF,MAAAA,KAAK,EAAE;AAAT;AAHA,GADS;AAOnBG,EAAAA,YAAY,EAAE,CAAA,mBAAA,EAAA,eAAA,EAAA,WAAA,EAAA,2EAAA,EAAA,GAAA,EAAA,IAAA,CAPK,IAOL,CAPK;AAenBC,EAAAA,cAAc,EAAE,CAAA,qBAAA,EAAA,yBAAA,EAAA,yBAAA,EAAA,mBAAA,EAAA,mCAAA,EAAA,mCAAA,EAAA,GAAA,EAAA,eAAA,EAAA,yCAAA,EAAA,yCAAA,EAAA,8CAAA,EAAA,yCAAA,EAAA,GAAA,EAAA,IAAA,CAAA,IAAA;AAfG,CAAvB;AA0CA,SAAA,gBAAA","sourcesContent":["/**\n * @author HypnosNova / https://www.threejs.org.cn/gallery/\n *\n * Afterimage shader\n * I created this effect inspired by a demo on codepen:\n * https://codepen.io/brunoimbrizi/pen/MoRJaN?page=1&\n */\n\nvar AfterimageShader = {\n    uniforms: {\n        damp: { value: 0.96 },\n        tOld: { value: null },\n        tNew: { value: null }\n    },\n\n    vertexShader: [\n        \"varying vec2 vUv;\",\n        \"void main() {\",\n        \"vUv = uv;\",\n        \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n        \"}\"\n    ].join(\"\\n\"),\n\n    fragmentShader: [\n        \"uniform float damp;\",\n\n        \"uniform sampler2D tOld;\",\n        \"uniform sampler2D tNew;\",\n\n        \"varying vec2 vUv;\",\n\n        \"vec4 when_gt( vec4 x, float y ) {\",\n\n        \"return max( sign( x - y ), 0.0 );\",\n\n        \"}\",\n\n        \"void main() {\",\n\n        \"vec4 texelOld = texture2D( tOld, vUv );\",\n        \"vec4 texelNew = texture2D( tNew, vUv );\",\n\n        \"texelOld *= damp * when_gt( texelOld, 0.1 );\",\n\n        \"gl_FragColor = max(texelNew, texelOld);\",\n\n        \"}\"\n    ].join(\"\\n\")\n};\n\nexport { AfterimageShader };\n"]},"metadata":{},"sourceType":"module"}