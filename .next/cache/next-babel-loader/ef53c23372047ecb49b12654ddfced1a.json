{"ast":null,"code":"import _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n * @author zz85 / http://github.com/zz85\n * @author bhouston / http://clara.io\n *\n * Creates an arrow for visualizing directions\n *\n * Parameters:\n *  dir - Vector3\n *  origin - Vector3\n *  length - Number\n *  color - color in hex value\n *  headLength - Number\n *  headWidth - Number\n */\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Object3D } from '../core/Object3D.js';\nimport { CylinderBufferGeometry } from '../geometries/CylinderGeometry.js';\nimport { MeshBasicMaterial } from '../materials/MeshBasicMaterial.js';\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\nimport { Mesh } from '../objects/Mesh.js';\nimport { Line } from '../objects/Line.js';\nimport { Vector3 } from '../math/Vector3.js';\n\nvar _axis = new Vector3();\n\nvar _lineGeometry, _coneGeometry;\n\nfunction ArrowHelper(dir, origin, length, color, headLength, headWidth) {\n  // dir is assumed to be normalized\n  Object3D.call(this);\n  if (dir === undefined) dir = new Vector3(0, 0, 1);\n  if (origin === undefined) origin = new Vector3(0, 0, 0);\n  if (length === undefined) length = 1;\n  if (color === undefined) color = 0xffff00;\n  if (headLength === undefined) headLength = 0.2 * length;\n  if (headWidth === undefined) headWidth = 0.2 * headLength;\n\n  if (_lineGeometry === undefined) {\n    _lineGeometry = new BufferGeometry();\n\n    _lineGeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 1, 0], 3));\n\n    _coneGeometry = new CylinderBufferGeometry(0, 0.5, 1, 5, 1);\n\n    _coneGeometry.translate(0, -0.5, 0);\n  }\n\n  this.position.copy(origin);\n  this.line = new Line(_lineGeometry, new LineBasicMaterial({\n    color: color\n  }));\n  this.line.matrixAutoUpdate = false;\n  this.add(this.line);\n  this.cone = new Mesh(_coneGeometry, new MeshBasicMaterial({\n    color: color\n  }));\n  this.cone.matrixAutoUpdate = false;\n  this.add(this.cone);\n  this.setDirection(dir);\n  this.setLength(length, headLength, headWidth);\n}\n\nArrowHelper.prototype = _Object$create(Object3D.prototype);\nArrowHelper.prototype.constructor = ArrowHelper;\n\nArrowHelper.prototype.setDirection = function (dir) {\n  // dir is assumed to be normalized\n  if (dir.y > 0.99999) {\n    this.quaternion.set(0, 0, 0, 1);\n  } else if (dir.y < -0.99999) {\n    this.quaternion.set(1, 0, 0, 0);\n  } else {\n    _axis.set(dir.z, 0, -dir.x).normalize();\n\n    var radians = Math.acos(dir.y);\n    this.quaternion.setFromAxisAngle(_axis, radians);\n  }\n};\n\nArrowHelper.prototype.setLength = function (length, headLength, headWidth) {\n  if (headLength === undefined) headLength = 0.2 * length;\n  if (headWidth === undefined) headWidth = 0.2 * headLength;\n  this.line.scale.set(1, Math.max(0.0001, length - headLength), 1); // see #17458\n\n  this.line.updateMatrix();\n  this.cone.scale.set(headWidth, headLength, headWidth);\n  this.cone.position.y = length;\n  this.cone.updateMatrix();\n};\n\nArrowHelper.prototype.setColor = function (color) {\n  this.line.material.color.set(color);\n  this.cone.material.color.set(color);\n};\n\nArrowHelper.prototype.copy = function (source) {\n  Object3D.prototype.copy.call(this, source, false);\n  this.line.copy(source.line);\n  this.cone.copy(source.cone);\n  return this;\n};\n\nArrowHelper.prototype.clone = function () {\n  return new this.constructor().copy(this);\n};\n\nexport { ArrowHelper };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/helpers/ArrowHelper.js"],"names":["Float32BufferAttribute","BufferGeometry","Object3D","CylinderBufferGeometry","MeshBasicMaterial","LineBasicMaterial","Mesh","Line","Vector3","_axis","_lineGeometry","_coneGeometry","ArrowHelper","dir","origin","length","color","headLength","headWidth","call","undefined","setAttribute","translate","position","copy","line","matrixAutoUpdate","add","cone","setDirection","setLength","prototype","constructor","y","quaternion","set","z","x","normalize","radians","Math","acos","setFromAxisAngle","scale","max","updateMatrix","setColor","material","source","clone"],"mappings":"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","sourcesContent":["/**\n * @author WestLangley / http://github.com/WestLangley\n * @author zz85 / http://github.com/zz85\n * @author bhouston / http://clara.io\n *\n * Creates an arrow for visualizing directions\n *\n * Parameters:\n *  dir - Vector3\n *  origin - Vector3\n *  length - Number\n *  color - color in hex value\n *  headLength - Number\n *  headWidth - Number\n */\n\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Object3D } from '../core/Object3D.js';\nimport { CylinderBufferGeometry } from '../geometries/CylinderGeometry.js';\nimport { MeshBasicMaterial } from '../materials/MeshBasicMaterial.js';\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\nimport { Mesh } from '../objects/Mesh.js';\nimport { Line } from '../objects/Line.js';\nimport { Vector3 } from '../math/Vector3.js';\n\nvar _axis = new Vector3();\nvar _lineGeometry, _coneGeometry;\n\nfunction ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\n\n\t// dir is assumed to be normalized\n\n\tObject3D.call( this );\n\n\tif ( dir === undefined ) dir = new Vector3( 0, 0, 1 );\n\tif ( origin === undefined ) origin = new Vector3( 0, 0, 0 );\n\tif ( length === undefined ) length = 1;\n\tif ( color === undefined ) color = 0xffff00;\n\tif ( headLength === undefined ) headLength = 0.2 * length;\n\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n\tif ( _lineGeometry === undefined ) {\n\n\t\t_lineGeometry = new BufferGeometry();\n\t\t_lineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n\t\t_coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\n\t\t_coneGeometry.translate( 0, - 0.5, 0 );\n\n\t}\n\n\tthis.position.copy( origin );\n\n\tthis.line = new Line( _lineGeometry, new LineBasicMaterial( { color: color } ) );\n\tthis.line.matrixAutoUpdate = false;\n\tthis.add( this.line );\n\n\tthis.cone = new Mesh( _coneGeometry, new MeshBasicMaterial( { color: color } ) );\n\tthis.cone.matrixAutoUpdate = false;\n\tthis.add( this.cone );\n\n\tthis.setDirection( dir );\n\tthis.setLength( length, headLength, headWidth );\n\n}\n\nArrowHelper.prototype = Object.create( Object3D.prototype );\nArrowHelper.prototype.constructor = ArrowHelper;\n\nArrowHelper.prototype.setDirection = function ( dir ) {\n\n\t// dir is assumed to be normalized\n\n\tif ( dir.y > 0.99999 ) {\n\n\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n\t} else if ( dir.y < - 0.99999 ) {\n\n\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n\t} else {\n\n\t\t_axis.set( dir.z, 0, - dir.x ).normalize();\n\n\t\tvar radians = Math.acos( dir.y );\n\n\t\tthis.quaternion.setFromAxisAngle( _axis, radians );\n\n\t}\n\n};\n\nArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\n\n\tif ( headLength === undefined ) headLength = 0.2 * length;\n\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n\tthis.line.scale.set( 1, Math.max( 0.0001, length - headLength ), 1 ); // see #17458\n\tthis.line.updateMatrix();\n\n\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\tthis.cone.position.y = length;\n\tthis.cone.updateMatrix();\n\n};\n\nArrowHelper.prototype.setColor = function ( color ) {\n\n\tthis.line.material.color.set( color );\n\tthis.cone.material.color.set( color );\n\n};\n\nArrowHelper.prototype.copy = function ( source ) {\n\n\tObject3D.prototype.copy.call( this, source, false );\n\n\tthis.line.copy( source.line );\n\tthis.cone.copy( source.cone );\n\n\treturn this;\n\n};\n\nArrowHelper.prototype.clone = function () {\n\n\treturn new this.constructor().copy( this );\n\n};\n\nexport { ArrowHelper };\n"]},"metadata":{},"sourceType":"module"}