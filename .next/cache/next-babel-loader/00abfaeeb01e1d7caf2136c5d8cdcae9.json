{"ast":null,"code":"import _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\n\n/**\n * @author oosmoxiecode / https://github.com/oosmoxiecode\n * @author WestLangley / https://github.com/WestLangley\n * @author zz85 / https://github.com/zz85\n * @author miningold / https://github.com/miningold\n * @author jonobr1 / https://github.com/jonobr1\n * @author Mugen87 / https://github.com/Mugen87\n *\n */\nimport { Geometry } from '../core/Geometry.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Vector3 } from '../math/Vector3.js'; // TubeGeometry\n\nfunction TubeGeometry(path, tubularSegments, radius, radialSegments, closed, taper) {\n  Geometry.call(this);\n  this.type = 'TubeGeometry';\n  this.parameters = {\n    path: path,\n    tubularSegments: tubularSegments,\n    radius: radius,\n    radialSegments: radialSegments,\n    closed: closed\n  };\n  if (taper !== undefined) console.warn('THREE.TubeGeometry: taper has been removed.');\n  var bufferGeometry = new TubeBufferGeometry(path, tubularSegments, radius, radialSegments, closed); // expose internals\n\n  this.tangents = bufferGeometry.tangents;\n  this.normals = bufferGeometry.normals;\n  this.binormals = bufferGeometry.binormals; // create geometry\n\n  this.fromBufferGeometry(bufferGeometry);\n  this.mergeVertices();\n}\n\nTubeGeometry.prototype = _Object$create(Geometry.prototype);\nTubeGeometry.prototype.constructor = TubeGeometry; // TubeBufferGeometry\n\nfunction TubeBufferGeometry(path, tubularSegments, radius, radialSegments, closed) {\n  BufferGeometry.call(this);\n  this.type = 'TubeBufferGeometry';\n  this.parameters = {\n    path: path,\n    tubularSegments: tubularSegments,\n    radius: radius,\n    radialSegments: radialSegments,\n    closed: closed\n  };\n  tubularSegments = tubularSegments || 64;\n  radius = radius || 1;\n  radialSegments = radialSegments || 8;\n  closed = closed || false;\n  var frames = path.computeFrenetFrames(tubularSegments, closed); // expose internals\n\n  this.tangents = frames.tangents;\n  this.normals = frames.normals;\n  this.binormals = frames.binormals; // helper variables\n\n  var vertex = new Vector3();\n  var normal = new Vector3();\n  var uv = new Vector2();\n  var P = new Vector3();\n  var i, j; // buffer\n\n  var vertices = [];\n  var normals = [];\n  var uvs = [];\n  var indices = []; // create buffer data\n\n  generateBufferData(); // build geometry\n\n  this.setIndex(indices);\n  this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n  this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n  this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // functions\n\n  function generateBufferData() {\n    for (i = 0; i < tubularSegments; i++) {\n      generateSegment(i);\n    } // if the geometry is not closed, generate the last row of vertices and normals\n    // at the regular position on the given path\n    //\n    // if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\n    generateSegment(closed === false ? tubularSegments : 0); // uvs are generated in a separate function.\n    // this makes it easy compute correct values for closed geometries\n\n    generateUVs(); // finally create faces\n\n    generateIndices();\n  }\n\n  function generateSegment(i) {\n    // we use getPointAt to sample evenly distributed points from the given path\n    P = path.getPointAt(i / tubularSegments, P); // retrieve corresponding normal and binormal\n\n    var N = frames.normals[i];\n    var B = frames.binormals[i]; // generate normals and vertices for the current segment\n\n    for (j = 0; j <= radialSegments; j++) {\n      var v = j / radialSegments * Math.PI * 2;\n      var sin = Math.sin(v);\n      var cos = -Math.cos(v); // normal\n\n      normal.x = cos * N.x + sin * B.x;\n      normal.y = cos * N.y + sin * B.y;\n      normal.z = cos * N.z + sin * B.z;\n      normal.normalize();\n      normals.push(normal.x, normal.y, normal.z); // vertex\n\n      vertex.x = P.x + radius * normal.x;\n      vertex.y = P.y + radius * normal.y;\n      vertex.z = P.z + radius * normal.z;\n      vertices.push(vertex.x, vertex.y, vertex.z);\n    }\n  }\n\n  function generateIndices() {\n    for (j = 1; j <= tubularSegments; j++) {\n      for (i = 1; i <= radialSegments; i++) {\n        var a = (radialSegments + 1) * (j - 1) + (i - 1);\n        var b = (radialSegments + 1) * j + (i - 1);\n        var c = (radialSegments + 1) * j + i;\n        var d = (radialSegments + 1) * (j - 1) + i; // faces\n\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    }\n  }\n\n  function generateUVs() {\n    for (i = 0; i <= tubularSegments; i++) {\n      for (j = 0; j <= radialSegments; j++) {\n        uv.x = i / tubularSegments;\n        uv.y = j / radialSegments;\n        uvs.push(uv.x, uv.y);\n      }\n    }\n  }\n}\n\nTubeBufferGeometry.prototype = _Object$create(BufferGeometry.prototype);\nTubeBufferGeometry.prototype.constructor = TubeBufferGeometry;\n\nTubeBufferGeometry.prototype.toJSON = function () {\n  var data = BufferGeometry.prototype.toJSON.call(this);\n  data.path = this.parameters.path.toJSON();\n  return data;\n};\n\nexport { TubeGeometry, TubeBufferGeometry };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/geometries/TubeGeometry.js"],"names":["Geometry","BufferGeometry","Float32BufferAttribute","Vector2","Vector3","TubeGeometry","path","tubularSegments","radius","radialSegments","closed","taper","call","type","parameters","undefined","console","warn","bufferGeometry","TubeBufferGeometry","tangents","normals","binormals","fromBufferGeometry","mergeVertices","prototype","constructor","frames","computeFrenetFrames","vertex","normal","uv","P","i","j","vertices","uvs","indices","generateBufferData","setIndex","setAttribute","generateSegment","generateUVs","generateIndices","getPointAt","N","B","v","Math","PI","sin","cos","x","y","z","normalize","push","a","b","c","d","toJSON","data"],"mappings":"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","sourcesContent":["/**\n * @author oosmoxiecode / https://github.com/oosmoxiecode\n * @author WestLangley / https://github.com/WestLangley\n * @author zz85 / https://github.com/zz85\n * @author miningold / https://github.com/miningold\n * @author jonobr1 / https://github.com/jonobr1\n * @author Mugen87 / https://github.com/Mugen87\n *\n */\n\nimport { Geometry } from '../core/Geometry.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Vector3 } from '../math/Vector3.js';\n\n// TubeGeometry\n\nfunction TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'TubeGeometry';\n\n\tthis.parameters = {\n\t\tpath: path,\n\t\ttubularSegments: tubularSegments,\n\t\tradius: radius,\n\t\tradialSegments: radialSegments,\n\t\tclosed: closed\n\t};\n\n\tif ( taper !== undefined ) console.warn( 'THREE.TubeGeometry: taper has been removed.' );\n\n\tvar bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );\n\n\t// expose internals\n\n\tthis.tangents = bufferGeometry.tangents;\n\tthis.normals = bufferGeometry.normals;\n\tthis.binormals = bufferGeometry.binormals;\n\n\t// create geometry\n\n\tthis.fromBufferGeometry( bufferGeometry );\n\tthis.mergeVertices();\n\n}\n\nTubeGeometry.prototype = Object.create( Geometry.prototype );\nTubeGeometry.prototype.constructor = TubeGeometry;\n\n// TubeBufferGeometry\n\nfunction TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'TubeBufferGeometry';\n\n\tthis.parameters = {\n\t\tpath: path,\n\t\ttubularSegments: tubularSegments,\n\t\tradius: radius,\n\t\tradialSegments: radialSegments,\n\t\tclosed: closed\n\t};\n\n\ttubularSegments = tubularSegments || 64;\n\tradius = radius || 1;\n\tradialSegments = radialSegments || 8;\n\tclosed = closed || false;\n\n\tvar frames = path.computeFrenetFrames( tubularSegments, closed );\n\n\t// expose internals\n\n\tthis.tangents = frames.tangents;\n\tthis.normals = frames.normals;\n\tthis.binormals = frames.binormals;\n\n\t// helper variables\n\n\tvar vertex = new Vector3();\n\tvar normal = new Vector3();\n\tvar uv = new Vector2();\n\tvar P = new Vector3();\n\n\tvar i, j;\n\n\t// buffer\n\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\tvar indices = [];\n\n\t// create buffer data\n\n\tgenerateBufferData();\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t// functions\n\n\tfunction generateBufferData() {\n\n\t\tfor ( i = 0; i < tubularSegments; i ++ ) {\n\n\t\t\tgenerateSegment( i );\n\n\t\t}\n\n\t\t// if the geometry is not closed, generate the last row of vertices and normals\n\t\t// at the regular position on the given path\n\t\t//\n\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\t\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\n\n\t\t// uvs are generated in a separate function.\n\t\t// this makes it easy compute correct values for closed geometries\n\n\t\tgenerateUVs();\n\n\t\t// finally create faces\n\n\t\tgenerateIndices();\n\n\t}\n\n\tfunction generateSegment( i ) {\n\n\t\t// we use getPointAt to sample evenly distributed points from the given path\n\n\t\tP = path.getPointAt( i / tubularSegments, P );\n\n\t\t// retrieve corresponding normal and binormal\n\n\t\tvar N = frames.normals[ i ];\n\t\tvar B = frames.binormals[ i ];\n\n\t\t// generate normals and vertices for the current segment\n\n\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\tvar sin = Math.sin( v );\n\t\t\tvar cos = - Math.cos( v );\n\n\t\t\t// normal\n\n\t\t\tnormal.x = ( cos * N.x + sin * B.x );\n\t\t\tnormal.y = ( cos * N.y + sin * B.y );\n\t\t\tnormal.z = ( cos * N.z + sin * B.z );\n\t\t\tnormal.normalize();\n\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\tvertex.z = P.z + radius * normal.z;\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t}\n\n\tfunction generateIndices() {\n\n\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction generateUVs() {\n\n\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\tuv.y = j / radialSegments;\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nTubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nTubeBufferGeometry.prototype.constructor = TubeBufferGeometry;\n\nTubeBufferGeometry.prototype.toJSON = function () {\n\n\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\tdata.path = this.parameters.path.toJSON();\n\n\treturn data;\n\n};\n\nexport { TubeGeometry, TubeBufferGeometry };\n"]},"metadata":{},"sourceType":"module"}