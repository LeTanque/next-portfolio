{"ast":null,"code":"var _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef, useState, useMemo } from \"react\";\nimport * as THREE from 'three';\nimport { Canvas, extend as extendThree, useFrame, useLoader, useResource, useThree } from \"react-three-fiber\"; // Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\n\nimport { EffectComposer } from './resources/postprocessing/EffectComposer';\nimport { RenderPass } from './resources/postprocessing/RenderPass';\nimport { GlitchPass } from './resources/postprocessing/GlitchPass';\nextendThree({\n  EffectComposer,\n  RenderPass,\n  GlitchPass\n}); // import TextLoop from \"../TextLoop\";\n// const DEFAULT_LAYER = 0;\n// const OCCLUSION_LAYER = 1;\n// The canvas houses this function, the scene. Scene is where the elements come together.\n\nconst SmokeParticle = ({\n  position,\n  rotation\n}) => {\n  const url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n  const ref = useRef();\n  const texture = useMemo(() => new THREE.TextureLoader().load(url), [url]);\n  console.log('THREE --> ', THREE);\n  console.log('ref --> ', ref);\n  useFrame(() => {\n    ref.current.position.set(position);\n    ref.current.rotation.z = rotation;\n  });\n  return __jsx(\"mesh\", {\n    ref: ref,\n    position: [0, 0, 2] // positions the object above the plane\n    ,\n    visible: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, __jsx(\"meshLambertMaterial\", {\n    attach: \"material\",\n    color: \"#ccbbee\",\n    transparent: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, __jsx(\"primitive\", {\n    attach: \"map\",\n    object: texture,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  })), __jsx(\"planeGeometry\", {\n    attach: \"geometry\",\n    args: [300, 300],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }));\n};\n\nconst GenerateSmoke = () => {\n  // const {\n  //     clock,\n  // } = useThree();\n  // let smokeParticles = [];\n  // const animate = () => {\n  //     let delta = clock.getDelta();\n  //     let sp = smokeParticles.length;\n  //     while(sp--) {\n  //         smokeParticles[sp].rotation.z += (delta * 0.2);\n  //     }\n  // }\n  for (let i = 0; i < 150; i++) {\n    let position = (Math.random() * 500 - 250, Math.random() * 500 - 250, Math.random() * 1000 - 100);\n    let rotation = Math.random() * 360;\n    return __jsx(SmokeParticle, {\n      position: position,\n      rotation: rotation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    });\n  }\n}; // Cast the lighting\n\n\nconst Lighting = () => {\n  return __jsx(\"directionalLight\", {\n    color: \"#ffffff\",\n    intensity: 0.5,\n    position: [-2, 0, 10],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  });\n}; // This is the canvas. It's the lowest level element in the three/webGl chain\n\n\nconst CanvasicalSmoke = () => {\n  return __jsx(React.Fragment, null, __jsx(Canvas, {\n    className: \"container block__three-container\",\n    camera: {\n      fov: 75,\n      aspect: 0.5,\n      near: 1,\n      far: 10000,\n      position: [0, 0, 600]\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, __jsx(GenerateSmoke, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }), __jsx(Lighting, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  })));\n};\n\nexport default CanvasicalSmoke; // // Creates a fullscreen colored plane\n// const Plane = () => {\n//     return (\n//         <mesh >\n//             <planeGeometry  attach=\"geometry\"  args={[ 32, 32, 32, 32 ]} />\n//             <meshPhysicalMaterial  attach=\"material\"  color=\"#ffffff\"  />\n//         </mesh>\n//     )\n// }\n// // A light bar\n// const LightBar = () => {\n//     // const lightBar = useRef();\n//     return (\n//         <>\n//             <mesh \n//                 // ref={lightBar} \n//             >\n//                 <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n//                 <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n//             </mesh>\n//         </>\n//     )\n// }","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx"],"names":["React","useCallback","useEffect","useRef","useState","useMemo","THREE","Canvas","extend","extendThree","useFrame","useLoader","useResource","useThree","EffectComposer","RenderPass","GlitchPass","SmokeParticle","position","rotation","url","ref","texture","TextureLoader","load","console","log","current","set","z","GenerateSmoke","i","Math","random","Lighting","CanvasicalSmoke","fov","aspect","near","far"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef, useState, useMemo } from \"react\";\nimport * as THREE from 'three';\nimport {\n    Canvas,\n    extend as extendThree,\n    useFrame,\n    useLoader,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\n\n// Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\nimport { EffectComposer } from './resources/postprocessing/EffectComposer';\nimport { RenderPass } from './resources/postprocessing/RenderPass';\nimport { GlitchPass } from './resources/postprocessing/GlitchPass';\nextendThree({ EffectComposer, RenderPass, GlitchPass });\n\n// import TextLoop from \"../TextLoop\";\n\n\n// const DEFAULT_LAYER = 0;\n// const OCCLUSION_LAYER = 1;\n\n\n// The canvas houses this function, the scene. Scene is where the elements come together.\nconst SmokeParticle = ({ position, rotation }) => {\n    const url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n    const ref = useRef();\n    const texture = useMemo(() => new THREE.TextureLoader().load(url), [url]);\n\n    console.log('THREE --> ', THREE);\n    console.log('ref --> ', ref);\n\n    useFrame(() => {\n        ref.current.position.set(position);\n        ref.current.rotation.z = rotation;\n    });\n\n    return (\n        <mesh \n            ref={ref}\n            position={[ 0, 0, 2 ]} // positions the object above the plane\n            visible \n        >\n            <meshLambertMaterial \n                attach=\"material\" \n                color=\"#ccbbee\"\n                transparent\n            >\n                <primitive attach=\"map\" object={texture} />\n            </ meshLambertMaterial>\n\n            <planeGeometry \n                attach=\"geometry\"   \n                args={[300, 300]} \n            />\n        </mesh>\n    )\n}\n\n\nconst GenerateSmoke = () => {\n    // const {\n    //     clock,\n    // } = useThree();\n    // let smokeParticles = [];\n\n    // const animate = () => {\n    //     let delta = clock.getDelta();\n    //     let sp = smokeParticles.length;\n    //     while(sp--) {\n    //         smokeParticles[sp].rotation.z += (delta * 0.2);\n    //     }\n    // }\n\n\n    for (let i = 0; i < 150; i++) {\n        let position = (Math.random()*500-250,Math.random()*500-250,Math.random()*1000-100);\n        let rotation = Math.random() * 360;\n        return (\n            <SmokeParticle position={position} rotation={rotation} />\n        )\n    }\n}\n\n// Cast the lighting\nconst Lighting = () => {\n    return (\n        <directionalLight\n            color=\"#ffffff\"\n            intensity={0.5}\n            position={[ -2, 0, 10 ]} \n        />\n    )\n}\n\n// This is the canvas. It's the lowest level element in the three/webGl chain\nconst CanvasicalSmoke = () => {\n    return (\n        <>\n            <Canvas\n                className=\"container block__three-container\" \n                camera={{ \n                    fov: 75, \n                    aspect: 0.5,\n                    near: 1,\n                    far: 10000,\n                    position: [ 0, 0, 600 ]\n                }} \n            >\n                <GenerateSmoke  />\n                <Lighting />\n            </Canvas> \n           \n            {/* <TextLoop  /> */}\n        </>\n    );\n}\n\nexport default CanvasicalSmoke;\n\n\n\n\n\n// // Creates a fullscreen colored plane\n// const Plane = () => {\n//     return (\n//         <mesh >\n//             <planeGeometry  attach=\"geometry\"  args={[ 32, 32, 32, 32 ]} />\n//             <meshPhysicalMaterial  attach=\"material\"  color=\"#ffffff\"  />\n//         </mesh>\n//     )\n// }\n\n\n// // A light bar\n// const LightBar = () => {\n//     // const lightBar = useRef();\n\n//     return (\n//         <>\n//             <mesh \n//                 // ref={lightBar} \n//             >\n//                 <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n//                 <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n//             </mesh>\n//         </>\n//     )\n// }\n"]},"metadata":{},"sourceType":"module"}