{"ast":null,"code":"import _construct from \"@babel/runtime-corejs2/helpers/esm/construct\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/SmokeContainerReal.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRef } from \"react\";\nimport * as THREE from 'three';\nimport { Canvas, useFrame // extend,\n// useLoader,\n// useResource,\n// useThree,\n} from \"react-three-fiber\";\nimport TextLoop from \"../TextLoop\";\n\nvar Thing = function Thing(props) {\n  var vertices = props.vertices;\n  var ref = useRef();\n  useFrame(function () {\n    return ref.current.rotation.x = ref.current.rotation.y += 0.01;\n  }); // useFrame(() => (console.log('ref.current --> ', ref.current)))\n\n  return __jsx(\"group\", {\n    ref: ref,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, __jsx(\"line\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, __jsx(\"geometry\", {\n    attach: \"geometry\",\n    vertices: vertices.map(function (v) {\n      return _construct(THREE.Vector3, _toConsumableArray(v));\n    }),\n    onUpdate: function onUpdate(self) {\n      return self.verticesNeedUpdate = true;\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }), __jsx(\"lineBasicMaterial\", {\n    attach: \"material\",\n    color: \"#ff0000\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  })), __jsx(\"mesh\", {\n    // a mesh combines material with geometry\n    onClick: function onClick(click) {\n      return console.log('click --> ', click);\n    },\n    onHover: function onHover(hover) {\n      return console.log('hover --> ', hover);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, __jsx(\"octahedronGeometry\", {\n    attach: \"geometry\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), __jsx(\"meshBasicMaterial\", {\n    attach: \"material\",\n    color: \"peachpuff\",\n    opacity: 0.5,\n    transparent: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  })));\n};\n\nvar SmokeContainerReal = function SmokeContainerReal() {\n  // const {\n  //     gl,                           // WebGL renderer \n  //     scene,                        // Default scene\n  //     camera,                       // Default camera\n  //     size,                         // Bounds of the view (which stretches 100% and auto-adjusts)\n  //     viewport,                     // Bounds of the viewport in 3d units + factor (size/viewport)\n  //     aspect,                       // Aspect ratio (size.width / size.height)\n  //     mouse,                        // Current 2D mouse coordinates\n  //     clock,                        // THREE.Clock (useful for useFrame deltas)\n  //     invalidate,                   // Invalidates a single frame (for <Canvas invalidateFrameloop />)\n  //     intersect,                    // Calls onMouseMove handlers for objects underneath the cursor\n  //     setDefaultCamera,             // Sets the default camera\n  // } = useThree();\n  return __jsx(\"div\", {\n    className: \"container block__three-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, __jsx(Canvas, {\n    style: {\n      background: 'radial-gradient(at 50% 70%, #200f20 40%, #090b1f 80%, #050523 100%)'\n    },\n    camera: {\n      fov: 75,\n      position: [0, 0, 60]\n    } // children                      // Either a function child (which receives state) or regular children\n    // gl                            // Props that go into the default webGL-renderer\n    // camera                        // Props that go into the default camera\n    // raycaster                     // Props that go into the default raycaster\n    // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n    // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n    // gl2 = false                   // Enables webgl2\n    // concurrent = false            // Enables React concurrent mode\n    // resize = undefined            // Resize config, see react-use-measure's options\n    // orthographic = false          // Creates an orthographic camera if true\n    // noEvents = false              // Switch off raytracing and event support\n    // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n    // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n    // updateDefaultCamera = true    // Adjusts default camera on size changes\n    // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n    // onPointerMissed \n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, __jsx(\"rectAreaLight\", {\n    intensity: 3,\n    position: [0, 10, -10],\n    width: 30,\n    height: 30,\n    onUpdate: function onUpdate(self) {\n      return self.lookAt(new THREE.Vector3(0, 0, 0));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }), __jsx(Thing, {\n    vertices: [[-1, 0, 0], [0, 1, 0], [1, 0, 0], [0, -1, 0], [-1, 0, 0]],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  })), __jsx(TextLoop, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }));\n};\n\nexport default SmokeContainerReal;","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/SmokeContainerReal.jsx"],"names":["useRef","THREE","Canvas","useFrame","TextLoop","Thing","props","vertices","ref","current","rotation","x","y","map","v","Vector3","self","verticesNeedUpdate","click","console","log","hover","SmokeContainerReal","background","fov","position","lookAt"],"mappings":"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","sourcesContent":["import { useRef } from \"react\";\nimport * as THREE from 'three';\nimport {\n    Canvas,\n    useFrame,\n    // extend,\n    // useLoader,\n    // useResource,\n    // useThree,\n} from \"react-three-fiber\";\n\nimport TextLoop from \"../TextLoop\";\n\n\n\nconst Thing = props => {\n    const { vertices } = props;\n    const ref = useRef()\n\n    useFrame(() => {\n        return ref.current.rotation.x = ref.current.rotation.y += 0.01\n    })\n\n    // useFrame(() => (console.log('ref.current --> ', ref.current)))\n    \n\n    return (\n        <group \n            ref={ref}\n        >\n\n            <line>\n                <geometry \n                    attach=\"geometry\"\n                    vertices={vertices.map( v => new THREE.Vector3(...v) )}\n                    onUpdate={self => (self.verticesNeedUpdate = true)}\n                />\n                <lineBasicMaterial   attach=\"material\"  color=\"#ff0000\" />\n            </line>\n            <mesh\n                // a mesh combines material with geometry\n                onClick={click => console.log('click --> ', click)}\n                onHover={hover => console.log('hover --> ', hover)}\n            >\n                <octahedronGeometry attach=\"geometry\"  />\n                <meshBasicMaterial  attach=\"material\"  color=\"peachpuff\" opacity={0.5} transparent={true} />\n            </mesh>\n\n        </group>\n    )\n}\n\n\n\nconst SmokeContainerReal = () => {\n    // const {\n    //     gl,                           // WebGL renderer \n    //     scene,                        // Default scene\n    //     camera,                       // Default camera\n    //     size,                         // Bounds of the view (which stretches 100% and auto-adjusts)\n    //     viewport,                     // Bounds of the viewport in 3d units + factor (size/viewport)\n    //     aspect,                       // Aspect ratio (size.width / size.height)\n    //     mouse,                        // Current 2D mouse coordinates\n    //     clock,                        // THREE.Clock (useful for useFrame deltas)\n    //     invalidate,                   // Invalidates a single frame (for <Canvas invalidateFrameloop />)\n    //     intersect,                    // Calls onMouseMove handlers for objects underneath the cursor\n    //     setDefaultCamera,             // Sets the default camera\n    // } = useThree();\n\n\n    return (\n        <div \n            className=\"container block__three-container\" \n        >\n            \n            <Canvas\n                style={{ background: 'radial-gradient(at 50% 70%, #200f20 40%, #090b1f 80%, #050523 100%)' }}\n                camera={{ fov: 75, position: [0, 0, 60] }} \n                // children                      // Either a function child (which receives state) or regular children\n                // gl                            // Props that go into the default webGL-renderer\n                // camera                        // Props that go into the default camera\n                // raycaster                     // Props that go into the default raycaster\n                // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n                // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n                // gl2 = false                   // Enables webgl2\n                // concurrent = false            // Enables React concurrent mode\n                // resize = undefined            // Resize config, see react-use-measure's options\n                // orthographic = false          // Creates an orthographic camera if true\n                // noEvents = false              // Switch off raytracing and event support\n                // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n                // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n                // updateDefaultCamera = true    // Adjusts default camera on size changes\n                // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n                // onPointerMissed \n            >   \n                <rectAreaLight\n                    intensity={3}\n                    position={[0, 10, -10]}\n                    width={30}\n                    height={30}\n                    onUpdate={self => self.lookAt(new THREE.Vector3(0, 0, 0))}\n                />\n\n                <Thing \n                    vertices={[ [ -1,0,0 ], [ 0,1,0 ], [ 1,0,0 ], [ 0,-1,0 ], [ -1,0,0 ] ]}\n                />\n\n            </Canvas> \n           \n            <TextLoop  />\n\n        </div>\n    );\n}\n\nexport default SmokeContainerReal;"]},"metadata":{},"sourceType":"module"}