{"ast":null,"code":"import _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport { Interpolant } from '../Interpolant.js';\nimport { Quaternion } from '../Quaternion.js';\n/**\n * Spherical linear unit quaternion interpolant.\n *\n * @author tschw\n */\n\nfunction QuaternionLinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n  Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n}\n\nQuaternionLinearInterpolant.prototype = _Object$assign(_Object$create(Interpolant.prototype), {\n  constructor: QuaternionLinearInterpolant,\n  interpolate_: function interpolate_(i1, t0, t, t1) {\n    var result = this.resultBuffer,\n        values = this.sampleValues,\n        stride = this.valueSize,\n        offset = i1 * stride,\n        alpha = (t - t0) / (t1 - t0);\n\n    for (var end = offset + stride; offset !== end; offset += 4) {\n      Quaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);\n    }\n\n    return result;\n  }\n});\nexport { QuaternionLinearInterpolant };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/math/interpolants/QuaternionLinearInterpolant.js"],"names":["Interpolant","Quaternion","QuaternionLinearInterpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","call","prototype","constructor","interpolate_","i1","t0","t","t1","result","values","stride","valueSize","offset","alpha","end","slerpFlat"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,mBAA5B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA;;;;;;AAMA,SAASC,2BAAT,CAAsCC,kBAAtC,EAA0DC,YAA1D,EAAwEC,UAAxE,EAAoFC,YAApF,EAAmG;AAElGN,EAAAA,WAAW,CAACO,IAAZ,CAAkB,IAAlB,EAAwBJ,kBAAxB,EAA4CC,YAA5C,EAA0DC,UAA1D,EAAsEC,YAAtE;AAEA;;AAEDJ,2BAA2B,CAACM,SAA5B,GAAwC,eAAe,eAAeR,WAAW,CAACQ,SAA3B,CAAf,EAAuD;AAE9FC,EAAAA,WAAW,EAAEP,2BAFiF;AAI9FQ,EAAAA,YAAY,EAAE,sBAAWC,EAAX,EAAeC,EAAf,EAAmBC,CAAnB,EAAsBC,EAAtB,EAA2B;AAExC,QAAIC,MAAM,GAAG,KAAKT,YAAlB;AAAA,QACCU,MAAM,GAAG,KAAKZ,YADf;AAAA,QAECa,MAAM,GAAG,KAAKC,SAFf;AAAA,QAICC,MAAM,GAAGR,EAAE,GAAGM,MAJf;AAAA,QAMCG,KAAK,GAAG,CAAEP,CAAC,GAAGD,EAAN,KAAeE,EAAE,GAAGF,EAApB,CANT;;AAQA,SAAM,IAAIS,GAAG,GAAGF,MAAM,GAAGF,MAAzB,EAAiCE,MAAM,KAAKE,GAA5C,EAAiDF,MAAM,IAAI,CAA3D,EAA+D;AAE9DlB,MAAAA,UAAU,CAACqB,SAAX,CAAsBP,MAAtB,EAA8B,CAA9B,EAAiCC,MAAjC,EAAyCG,MAAM,GAAGF,MAAlD,EAA0DD,MAA1D,EAAkEG,MAAlE,EAA0EC,KAA1E;AAEA;;AAED,WAAOL,MAAP;AAEA;AAtB6F,CAAvD,CAAxC;AA2BA,SAASb,2BAAT","sourcesContent":["import { Interpolant } from '../Interpolant.js';\nimport { Quaternion } from '../Quaternion.js';\n\n/**\n * Spherical linear unit quaternion interpolant.\n *\n * @author tschw\n */\n\nfunction QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n}\n\nQuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\tconstructor: QuaternionLinearInterpolant,\n\n\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\tvar result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\toffset = i1 * stride,\n\n\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n\t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\n\n\t\t\tQuaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n} );\n\n\nexport { QuaternionLinearInterpolant };\n"]},"metadata":{},"sourceType":"module"}