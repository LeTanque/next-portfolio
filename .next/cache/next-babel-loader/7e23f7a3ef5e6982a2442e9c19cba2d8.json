{"ast":null,"code":"import _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\nimport { Vector2 } from '../math/Vector2.js';\nimport { MeshStandardMaterial } from './MeshStandardMaterial.js';\nimport { Color } from '../math/Color.js';\n/**\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *  reflectivity: <float>\n *  clearcoat: <float>\n *  clearcoatRoughness: <float>\n *\n *  sheen: <Color>\n *\n *  clearcoatNormalScale: <Vector2>,\n *  clearcoatNormalMap: new THREE.Texture( <Image> ),\n * }\n */\n\nfunction MeshPhysicalMaterial(parameters) {\n  MeshStandardMaterial.call(this);\n  this.defines = {\n    'STANDARD': '',\n    'PHYSICAL': ''\n  };\n  this.type = 'MeshPhysicalMaterial';\n  this.reflectivity = 0.5; // maps to F0 = 0.04\n\n  this.clearcoat = 0.0;\n  this.clearcoatRoughness = 0.0;\n  this.sheen = null; // null will disable sheen bsdf\n\n  this.clearcoatNormalScale = new Vector2(1, 1);\n  this.clearcoatNormalMap = null;\n  this.transparency = 0.0;\n  this.setValues(parameters);\n}\n\nMeshPhysicalMaterial.prototype = _Object$create(MeshStandardMaterial.prototype);\nMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\nMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\nMeshPhysicalMaterial.prototype.copy = function (source) {\n  MeshStandardMaterial.prototype.copy.call(this, source);\n  this.defines = {\n    'STANDARD': '',\n    'PHYSICAL': ''\n  };\n  this.reflectivity = source.reflectivity;\n  this.clearcoat = source.clearcoat;\n  this.clearcoatRoughness = source.clearcoatRoughness;\n  if (source.sheen) this.sheen = (this.sheen || new Color()).copy(source.sheen);else this.sheen = null;\n  this.clearcoatNormalMap = source.clearcoatNormalMap;\n  this.clearcoatNormalScale.copy(source.clearcoatNormalScale);\n  this.transparency = source.transparency;\n  return this;\n};\n\nexport { MeshPhysicalMaterial };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/materials/MeshPhysicalMaterial.js"],"names":["Vector2","MeshStandardMaterial","Color","MeshPhysicalMaterial","parameters","call","defines","type","reflectivity","clearcoat","clearcoatRoughness","sheen","clearcoatNormalScale","clearcoatNormalMap","transparency","setValues","prototype","constructor","isMeshPhysicalMaterial","copy","source"],"mappings":";AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,oBAAT,QAAqC,2BAArC;AACA,SAASC,KAAT,QAAsB,kBAAtB;AAEA;;;;;;;;;;;;;;;AAeA,SAASC,oBAAT,CAA+BC,UAA/B,EAA4C;AAE3CH,EAAAA,oBAAoB,CAACI,IAArB,CAA2B,IAA3B;AAEA,OAAKC,OAAL,GAAe;AAEd,gBAAY,EAFE;AAGd,gBAAY;AAHE,GAAf;AAOA,OAAKC,IAAL,GAAY,sBAAZ;AAEA,OAAKC,YAAL,GAAoB,GAApB,CAb2C,CAalB;;AAEzB,OAAKC,SAAL,GAAiB,GAAjB;AACA,OAAKC,kBAAL,GAA0B,GAA1B;AAEA,OAAKC,KAAL,GAAa,IAAb,CAlB2C,CAkBxB;;AAEnB,OAAKC,oBAAL,GAA4B,IAAIZ,OAAJ,CAAa,CAAb,EAAgB,CAAhB,CAA5B;AACA,OAAKa,kBAAL,GAA0B,IAA1B;AAEA,OAAKC,YAAL,GAAoB,GAApB;AAEA,OAAKC,SAAL,CAAgBX,UAAhB;AAEA;;AAEDD,oBAAoB,CAACa,SAArB,GAAiC,eAAef,oBAAoB,CAACe,SAApC,CAAjC;AACAb,oBAAoB,CAACa,SAArB,CAA+BC,WAA/B,GAA6Cd,oBAA7C;AAEAA,oBAAoB,CAACa,SAArB,CAA+BE,sBAA/B,GAAwD,IAAxD;;AAEAf,oBAAoB,CAACa,SAArB,CAA+BG,IAA/B,GAAsC,UAAWC,MAAX,EAAoB;AAEzDnB,EAAAA,oBAAoB,CAACe,SAArB,CAA+BG,IAA/B,CAAoCd,IAApC,CAA0C,IAA1C,EAAgDe,MAAhD;AAEA,OAAKd,OAAL,GAAe;AAEd,gBAAY,EAFE;AAGd,gBAAY;AAHE,GAAf;AAOA,OAAKE,YAAL,GAAoBY,MAAM,CAACZ,YAA3B;AAEA,OAAKC,SAAL,GAAiBW,MAAM,CAACX,SAAxB;AACA,OAAKC,kBAAL,GAA0BU,MAAM,CAACV,kBAAjC;AAEA,MAAKU,MAAM,CAACT,KAAZ,EAAoB,KAAKA,KAAL,GAAa,CAAE,KAAKA,KAAL,IAAc,IAAIT,KAAJ,EAAhB,EAA8BiB,IAA9B,CAAoCC,MAAM,CAACT,KAA3C,CAAb,CAApB,KACK,KAAKA,KAAL,GAAa,IAAb;AAEL,OAAKE,kBAAL,GAA0BO,MAAM,CAACP,kBAAjC;AACA,OAAKD,oBAAL,CAA0BO,IAA1B,CAAgCC,MAAM,CAACR,oBAAvC;AAEA,OAAKE,YAAL,GAAoBM,MAAM,CAACN,YAA3B;AAEA,SAAO,IAAP;AAEA,CA1BD;;AA4BA,SAASX,oBAAT","sourcesContent":["import { Vector2 } from '../math/Vector2.js';\nimport { MeshStandardMaterial } from './MeshStandardMaterial.js';\nimport { Color } from '../math/Color.js';\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *  reflectivity: <float>\n *  clearcoat: <float>\n *  clearcoatRoughness: <float>\n *\n *  sheen: <Color>\n *\n *  clearcoatNormalScale: <Vector2>,\n *  clearcoatNormalMap: new THREE.Texture( <Image> ),\n * }\n */\n\nfunction MeshPhysicalMaterial( parameters ) {\n\n\tMeshStandardMaterial.call( this );\n\n\tthis.defines = {\n\n\t\t'STANDARD': '',\n\t\t'PHYSICAL': ''\n\n\t};\n\n\tthis.type = 'MeshPhysicalMaterial';\n\n\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\tthis.clearcoat = 0.0;\n\tthis.clearcoatRoughness = 0.0;\n\n\tthis.sheen = null; // null will disable sheen bsdf\n\n\tthis.clearcoatNormalScale = new Vector2( 1, 1 );\n\tthis.clearcoatNormalMap = null;\n\n\tthis.transparency = 0.0;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\nMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\nMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\nMeshPhysicalMaterial.prototype.copy = function ( source ) {\n\n\tMeshStandardMaterial.prototype.copy.call( this, source );\n\n\tthis.defines = {\n\n\t\t'STANDARD': '',\n\t\t'PHYSICAL': ''\n\n\t};\n\n\tthis.reflectivity = source.reflectivity;\n\n\tthis.clearcoat = source.clearcoat;\n\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\n\tif ( source.sheen ) this.sheen = ( this.sheen || new Color() ).copy( source.sheen );\n\telse this.sheen = null;\n\n\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\tthis.clearcoatNormalScale.copy( source.clearcoatNormalScale );\n\n\tthis.transparency = source.transparency;\n\n\treturn this;\n\n};\n\nexport { MeshPhysicalMaterial };\n"]},"metadata":{},"sourceType":"module"}