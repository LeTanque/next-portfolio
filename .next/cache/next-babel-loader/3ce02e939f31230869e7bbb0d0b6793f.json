{"ast":null,"code":"import _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\nimport { MultiplyOperation, TangentSpaceNormalMap } from '../constants.js';\nimport { Material } from './Material.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Color } from '../math/Color.js';\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  specular: <hex>,\n *  shininess: <float>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalMapType: THREE.TangentSpaceNormalMap,\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.MultiplyOperation,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nfunction MeshPhongMaterial(parameters) {\n  Material.call(this);\n  this.type = 'MeshPhongMaterial';\n  this.color = new Color(0xffffff); // diffuse\n\n  this.specular = new Color(0x111111);\n  this.shininess = 30;\n  this.map = null;\n  this.lightMap = null;\n  this.lightMapIntensity = 1.0;\n  this.aoMap = null;\n  this.aoMapIntensity = 1.0;\n  this.emissive = new Color(0x000000);\n  this.emissiveIntensity = 1.0;\n  this.emissiveMap = null;\n  this.bumpMap = null;\n  this.bumpScale = 1;\n  this.normalMap = null;\n  this.normalMapType = TangentSpaceNormalMap;\n  this.normalScale = new Vector2(1, 1);\n  this.displacementMap = null;\n  this.displacementScale = 1;\n  this.displacementBias = 0;\n  this.specularMap = null;\n  this.alphaMap = null;\n  this.envMap = null;\n  this.combine = MultiplyOperation;\n  this.reflectivity = 1;\n  this.refractionRatio = 0.98;\n  this.wireframe = false;\n  this.wireframeLinewidth = 1;\n  this.wireframeLinecap = 'round';\n  this.wireframeLinejoin = 'round';\n  this.skinning = false;\n  this.morphTargets = false;\n  this.morphNormals = false;\n  this.setValues(parameters);\n}\n\nMeshPhongMaterial.prototype = _Object$create(Material.prototype);\nMeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\nMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\nMeshPhongMaterial.prototype.copy = function (source) {\n  Material.prototype.copy.call(this, source);\n  this.color.copy(source.color);\n  this.specular.copy(source.specular);\n  this.shininess = source.shininess;\n  this.map = source.map;\n  this.lightMap = source.lightMap;\n  this.lightMapIntensity = source.lightMapIntensity;\n  this.aoMap = source.aoMap;\n  this.aoMapIntensity = source.aoMapIntensity;\n  this.emissive.copy(source.emissive);\n  this.emissiveMap = source.emissiveMap;\n  this.emissiveIntensity = source.emissiveIntensity;\n  this.bumpMap = source.bumpMap;\n  this.bumpScale = source.bumpScale;\n  this.normalMap = source.normalMap;\n  this.normalMapType = source.normalMapType;\n  this.normalScale.copy(source.normalScale);\n  this.displacementMap = source.displacementMap;\n  this.displacementScale = source.displacementScale;\n  this.displacementBias = source.displacementBias;\n  this.specularMap = source.specularMap;\n  this.alphaMap = source.alphaMap;\n  this.envMap = source.envMap;\n  this.combine = source.combine;\n  this.reflectivity = source.reflectivity;\n  this.refractionRatio = source.refractionRatio;\n  this.wireframe = source.wireframe;\n  this.wireframeLinewidth = source.wireframeLinewidth;\n  this.wireframeLinecap = source.wireframeLinecap;\n  this.wireframeLinejoin = source.wireframeLinejoin;\n  this.skinning = source.skinning;\n  this.morphTargets = source.morphTargets;\n  this.morphNormals = source.morphNormals;\n  return this;\n};\n\nexport { MeshPhongMaterial };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/materials/MeshPhongMaterial.js"],"names":["MultiplyOperation","TangentSpaceNormalMap","Material","Vector2","Color","MeshPhongMaterial","parameters","call","type","color","specular","shininess","map","lightMap","lightMapIntensity","aoMap","aoMapIntensity","emissive","emissiveIntensity","emissiveMap","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","specularMap","alphaMap","envMap","combine","reflectivity","refractionRatio","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","skinning","morphTargets","morphNormals","setValues","prototype","constructor","isMeshPhongMaterial","copy","source"],"mappings":"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","sourcesContent":["import { MultiplyOperation, TangentSpaceNormalMap } from '../constants.js';\nimport { Material } from './Material.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Color } from '../math/Color.js';\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  specular: <hex>,\n *  shininess: <float>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalMapType: THREE.TangentSpaceNormalMap,\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.MultiplyOperation,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nfunction MeshPhongMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'MeshPhongMaterial';\n\n\tthis.color = new Color( 0xffffff ); // diffuse\n\tthis.specular = new Color( 0x111111 );\n\tthis.shininess = 30;\n\n\tthis.map = null;\n\n\tthis.lightMap = null;\n\tthis.lightMapIntensity = 1.0;\n\n\tthis.aoMap = null;\n\tthis.aoMapIntensity = 1.0;\n\n\tthis.emissive = new Color( 0x000000 );\n\tthis.emissiveIntensity = 1.0;\n\tthis.emissiveMap = null;\n\n\tthis.bumpMap = null;\n\tthis.bumpScale = 1;\n\n\tthis.normalMap = null;\n\tthis.normalMapType = TangentSpaceNormalMap;\n\tthis.normalScale = new Vector2( 1, 1 );\n\n\tthis.displacementMap = null;\n\tthis.displacementScale = 1;\n\tthis.displacementBias = 0;\n\n\tthis.specularMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.combine = MultiplyOperation;\n\tthis.reflectivity = 1;\n\tthis.refractionRatio = 0.98;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\tthis.morphNormals = false;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshPhongMaterial.prototype = Object.create( Material.prototype );\nMeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\n\nMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\nMeshPhongMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\tthis.specular.copy( source.specular );\n\tthis.shininess = source.shininess;\n\n\tthis.map = source.map;\n\n\tthis.lightMap = source.lightMap;\n\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\tthis.aoMap = source.aoMap;\n\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\tthis.emissive.copy( source.emissive );\n\tthis.emissiveMap = source.emissiveMap;\n\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\tthis.bumpMap = source.bumpMap;\n\tthis.bumpScale = source.bumpScale;\n\n\tthis.normalMap = source.normalMap;\n\tthis.normalMapType = source.normalMapType;\n\tthis.normalScale.copy( source.normalScale );\n\n\tthis.displacementMap = source.displacementMap;\n\tthis.displacementScale = source.displacementScale;\n\tthis.displacementBias = source.displacementBias;\n\n\tthis.specularMap = source.specularMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.combine = source.combine;\n\tthis.reflectivity = source.reflectivity;\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\treturn this;\n\n};\n\n\nexport { MeshPhongMaterial };\n"]},"metadata":{},"sourceType":"module"}