{"ast":null,"code":"import _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport { LinearFilter, Mesh, MeshBasicMaterial, NearestFilter, OrthographicCamera, PlaneBufferGeometry, RGBAFormat, Scene, ShaderMaterial, UniformsUtils, WebGLRenderTarget } from \"three\";\nimport { AfterimageShader } from \"../shaders/AfterimageShader.js\";\nimport { Pass } from \"./Pass.js\";\n/**\n * @author HypnosNova / https://www.threejs.org.cn/gallery/\n */\n\nvar AfterimagePass = function (damp) {\n  Pass.call(this);\n  if (AfterimageShader === undefined) console.error(\"THREE.AfterimagePass relies on THREE.AfterimageShader\");\n  this.shader = AfterimageShader;\n  this.uniforms = UniformsUtils.clone(this.shader.uniforms);\n  this.factor = damp !== undefined ? damp : 0.96;\n  this.textureComp = new WebGLRenderTarget(window.innerWidth, window.innerHeight, {\n    minFilter: LinearFilter,\n    magFilter: NearestFilter,\n    format: RGBAFormat\n  });\n  this.textureOld = new WebGLRenderTarget(window.innerWidth, window.innerHeight, {\n    minFilter: LinearFilter,\n    magFilter: NearestFilter,\n    format: RGBAFormat\n  });\n  this.shaderMaterial = new ShaderMaterial({\n    uniforms: this.uniforms,\n    vertexShader: this.shader.vertexShader,\n    fragmentShader: this.shader.fragmentShader\n  });\n  this.sceneComp = new Scene();\n  this.scene = new Scene();\n  this.camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  this.camera.position.z = 1;\n  var geometry = new PlaneBufferGeometry(2, 2);\n  this.quadComp = new Mesh(geometry, this.shaderMaterial);\n  this.sceneComp.add(this.quadComp);\n  var material = new MeshBasicMaterial({\n    map: this.textureComp.texture\n  });\n  var quadScreen = new Mesh(geometry, material);\n  this.scene.add(quadScreen);\n};\n\nAfterimagePass.prototype = _Object$assign(_Object$create(Pass.prototype), {\n  constructor: AfterimagePass,\n  render: function (renderer, writeBuffer, readBuffer) {\n    this.uniforms[\"damp\"].value = this.factor;\n    this.uniforms[\"tOld\"].value = this.textureOld.texture;\n    this.uniforms[\"tNew\"].value = readBuffer.texture;\n    this.quadComp.material = this.shaderMaterial;\n    renderer.setRenderTarget(this.textureComp);\n    renderer.render(this.sceneComp, this.camera);\n    renderer.setRenderTarget(this.textureOld);\n    renderer.render(this.scene, this.camera);\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      renderer.render(this.scene, this.camera);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      renderer.render(this.scene, this.camera);\n    }\n  }\n});\nexport { AfterimagePass };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/resources/postprocessing/AfterimagePass.js"],"names":["LinearFilter","Mesh","MeshBasicMaterial","NearestFilter","OrthographicCamera","PlaneBufferGeometry","RGBAFormat","Scene","ShaderMaterial","UniformsUtils","WebGLRenderTarget","AfterimageShader","Pass","AfterimagePass","damp","call","undefined","console","error","shader","uniforms","clone","factor","textureComp","window","innerWidth","innerHeight","minFilter","magFilter","format","textureOld","shaderMaterial","vertexShader","fragmentShader","sceneComp","scene","camera","position","z","geometry","quadComp","add","material","map","texture","quadScreen","prototype","constructor","render","renderer","writeBuffer","readBuffer","value","setRenderTarget","renderToScreen","clear"],"mappings":"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","sourcesContent":["import {\n    LinearFilter,\n    Mesh,\n    MeshBasicMaterial,\n    NearestFilter,\n    OrthographicCamera,\n    PlaneBufferGeometry,\n    RGBAFormat,\n    Scene,\n    ShaderMaterial,\n    UniformsUtils,\n    WebGLRenderTarget\n} from \"three\";\nimport { AfterimageShader } from \"../shaders/AfterimageShader.js\";\nimport { Pass } from \"./Pass.js\";\n/**\n * @author HypnosNova / https://www.threejs.org.cn/gallery/\n */\n\nvar AfterimagePass = function(damp) {\n    Pass.call(this);\n\n    if (AfterimageShader === undefined)\n        console.error(\"THREE.AfterimagePass relies on THREE.AfterimageShader\");\n\n    this.shader = AfterimageShader;\n\n    this.uniforms = UniformsUtils.clone(this.shader.uniforms);\n\n    this.factor = damp !== undefined ? damp : 0.96;\n\n    this.textureComp = new WebGLRenderTarget(\n        window.innerWidth,\n        window.innerHeight,\n        {\n            minFilter: LinearFilter,\n            magFilter: NearestFilter,\n            format: RGBAFormat\n        }\n    );\n\n    this.textureOld = new WebGLRenderTarget(\n        window.innerWidth,\n        window.innerHeight,\n        {\n            minFilter: LinearFilter,\n            magFilter: NearestFilter,\n            format: RGBAFormat\n        }\n    );\n\n    this.shaderMaterial = new ShaderMaterial({\n        uniforms: this.uniforms,\n        vertexShader: this.shader.vertexShader,\n        fragmentShader: this.shader.fragmentShader\n    });\n\n    this.sceneComp = new Scene();\n    this.scene = new Scene();\n\n    this.camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    this.camera.position.z = 1;\n\n    var geometry = new PlaneBufferGeometry(2, 2);\n\n    this.quadComp = new Mesh(geometry, this.shaderMaterial);\n    this.sceneComp.add(this.quadComp);\n\n    var material = new MeshBasicMaterial({\n        map: this.textureComp.texture\n    });\n\n    var quadScreen = new Mesh(geometry, material);\n    this.scene.add(quadScreen);\n};\n\nAfterimagePass.prototype = Object.assign(Object.create(Pass.prototype), {\n    constructor: AfterimagePass,\n\n    render: function(renderer, writeBuffer, readBuffer) {\n        this.uniforms[\"damp\"].value = this.factor;\n        this.uniforms[\"tOld\"].value = this.textureOld.texture;\n        this.uniforms[\"tNew\"].value = readBuffer.texture;\n\n        this.quadComp.material = this.shaderMaterial;\n\n        renderer.setRenderTarget(this.textureComp);\n        renderer.render(this.sceneComp, this.camera);\n\n        renderer.setRenderTarget(this.textureOld);\n        renderer.render(this.scene, this.camera);\n\n        if (this.renderToScreen) {\n            renderer.setRenderTarget(null);\n            renderer.render(this.scene, this.camera);\n        } else {\n            renderer.setRenderTarget(writeBuffer);\n\n            if (this.clear) renderer.clear();\n\n            renderer.render(this.scene, this.camera);\n        }\n    }\n});\n\nexport { AfterimagePass };\n"]},"metadata":{},"sourceType":"module"}