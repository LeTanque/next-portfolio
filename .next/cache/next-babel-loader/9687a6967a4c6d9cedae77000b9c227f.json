{"ast":null,"code":"import _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _WeakMap from \"@babel/runtime-corejs2/core-js/weak-map\";\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nimport { LinearFilter, LinearMipmapLinearFilter, LinearMipmapNearestFilter, NearestFilter, NearestMipmapLinearFilter, NearestMipmapNearestFilter, RGBFormat, RGBAFormat, DepthFormat, DepthStencilFormat, UnsignedShortType, UnsignedIntType, UnsignedInt248Type, FloatType, HalfFloatType, MirroredRepeatWrapping, ClampToEdgeWrapping, RepeatWrapping } from '../../constants.js';\nimport { _Math } from '../../math/Math.js';\n\nfunction WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {\n  var _wrappingToGL, _filterToGL;\n\n  var isWebGL2 = capabilities.isWebGL2;\n  var maxTextures = capabilities.maxTextures;\n  var maxCubemapSize = capabilities.maxCubemapSize;\n  var maxTextureSize = capabilities.maxTextureSize;\n  var maxSamples = capabilities.maxSamples;\n\n  var _videoTextures = new _WeakMap();\n\n  var _canvas; // cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n  // also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n  // Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\n  var useOffscreenCanvas = false;\n\n  try {\n    useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined' && new OffscreenCanvas(1, 1).getContext(\"2d\") !== null;\n  } catch (err) {// Ignore any errors\n  }\n\n  function createCanvas(width, height) {\n    // Use OffscreenCanvas when available. Specially needed in web workers\n    return useOffscreenCanvas ? new OffscreenCanvas(width, height) : document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n  }\n\n  function resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {\n    var scale = 1; // handle case if texture exceeds max size\n\n    if (image.width > maxSize || image.height > maxSize) {\n      scale = maxSize / Math.max(image.width, image.height);\n    } // only perform resize if necessary\n\n\n    if (scale < 1 || needsPowerOfTwo === true) {\n      // only perform resize for certain image types\n      if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n        var floor = needsPowerOfTwo ? _Math.floorPowerOfTwo : Math.floor;\n        var width = floor(scale * image.width);\n        var height = floor(scale * image.height);\n        if (_canvas === undefined) _canvas = createCanvas(width, height); // cube textures can't reuse the same canvas\n\n        var canvas = needsNewCanvas ? createCanvas(width, height) : _canvas;\n        canvas.width = width;\n        canvas.height = height;\n        var context = canvas.getContext('2d');\n        context.drawImage(image, 0, 0, width, height);\n        console.warn('THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').');\n        return canvas;\n      } else {\n        if ('data' in image) {\n          console.warn('THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').');\n        }\n\n        return image;\n      }\n    }\n\n    return image;\n  }\n\n  function isPowerOfTwo(image) {\n    return _Math.isPowerOfTwo(image.width) && _Math.isPowerOfTwo(image.height);\n  }\n\n  function textureNeedsPowerOfTwo(texture) {\n    if (isWebGL2) return false;\n    return texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping || texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n  }\n\n  function textureNeedsGenerateMipmaps(texture, supportsMips) {\n    return texture.generateMipmaps && supportsMips && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n  }\n\n  function generateMipmap(target, texture, width, height) {\n    _gl.generateMipmap(target);\n\n    var textureProperties = properties.get(texture); // Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11\n\n    textureProperties.__maxMipLevel = Math.log(Math.max(width, height)) * Math.LOG2E;\n  }\n\n  function getInternalFormat(internalFormatName, glFormat, glType) {\n    if (isWebGL2 === false) return glFormat;\n\n    if (internalFormatName !== null) {\n      if (_gl[internalFormatName] !== undefined) return _gl[internalFormatName];\n      console.warn('THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'');\n    }\n\n    var internalFormat = glFormat;\n\n    if (glFormat === _gl.RED) {\n      if (glType === _gl.FLOAT) internalFormat = _gl.R32F;\n      if (glType === _gl.HALF_FLOAT) internalFormat = _gl.R16F;\n      if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.R8;\n    }\n\n    if (glFormat === _gl.RGB) {\n      if (glType === _gl.FLOAT) internalFormat = _gl.RGB32F;\n      if (glType === _gl.HALF_FLOAT) internalFormat = _gl.RGB16F;\n      if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RGB8;\n    }\n\n    if (glFormat === _gl.RGBA) {\n      if (glType === _gl.FLOAT) internalFormat = _gl.RGBA32F;\n      if (glType === _gl.HALF_FLOAT) internalFormat = _gl.RGBA16F;\n      if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RGBA8;\n    }\n\n    if (internalFormat === _gl.R16F || internalFormat === _gl.R32F || internalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F) {\n      extensions.get('EXT_color_buffer_float');\n    } else if (internalFormat === _gl.RGB16F || internalFormat === _gl.RGB32F) {\n      console.warn('THREE.WebGLRenderer: Floating point textures with RGB format not supported. Please use RGBA instead.');\n    }\n\n    return internalFormat;\n  } // Fallback filters for non-power-of-2 textures\n\n\n  function filterFallback(f) {\n    if (f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter) {\n      return _gl.NEAREST;\n    }\n\n    return _gl.LINEAR;\n  } //\n\n\n  function onTextureDispose(event) {\n    var texture = event.target;\n    texture.removeEventListener('dispose', onTextureDispose);\n    deallocateTexture(texture);\n\n    if (texture.isVideoTexture) {\n      _videoTextures[\"delete\"](texture);\n    }\n\n    info.memory.textures--;\n  }\n\n  function onRenderTargetDispose(event) {\n    var renderTarget = event.target;\n    renderTarget.removeEventListener('dispose', onRenderTargetDispose);\n    deallocateRenderTarget(renderTarget);\n    info.memory.textures--;\n  } //\n\n\n  function deallocateTexture(texture) {\n    var textureProperties = properties.get(texture);\n    if (textureProperties.__webglInit === undefined) return;\n\n    _gl.deleteTexture(textureProperties.__webglTexture);\n\n    properties.remove(texture);\n  }\n\n  function deallocateRenderTarget(renderTarget) {\n    var renderTargetProperties = properties.get(renderTarget);\n    var textureProperties = properties.get(renderTarget.texture);\n    if (!renderTarget) return;\n\n    if (textureProperties.__webglTexture !== undefined) {\n      _gl.deleteTexture(textureProperties.__webglTexture);\n    }\n\n    if (renderTarget.depthTexture) {\n      renderTarget.depthTexture.dispose();\n    }\n\n    if (renderTarget.isWebGLRenderTargetCube) {\n      for (var i = 0; i < 6; i++) {\n        _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);\n\n        if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);\n      }\n    } else {\n      _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);\n\n      if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);\n    }\n\n    if (renderTarget.isWebGLMultiviewRenderTarget) {\n      _gl.deleteTexture(renderTargetProperties.__webglColorTexture);\n\n      _gl.deleteTexture(renderTargetProperties.__webglDepthStencilTexture);\n\n      info.memory.textures -= 2;\n\n      for (var i = 0, il = renderTargetProperties.__webglViewFramebuffers.length; i < il; i++) {\n        _gl.deleteFramebuffer(renderTargetProperties.__webglViewFramebuffers[i]);\n      }\n    }\n\n    properties.remove(renderTarget.texture);\n    properties.remove(renderTarget);\n  } //\n\n\n  var textureUnits = 0;\n\n  function resetTextureUnits() {\n    textureUnits = 0;\n  }\n\n  function allocateTextureUnit() {\n    var textureUnit = textureUnits;\n\n    if (textureUnit >= maxTextures) {\n      console.warn('THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures);\n    }\n\n    textureUnits += 1;\n    return textureUnit;\n  } //\n\n\n  function setTexture2D(texture, slot) {\n    var textureProperties = properties.get(texture);\n    if (texture.isVideoTexture) updateVideoTexture(texture);\n\n    if (texture.version > 0 && textureProperties.__version !== texture.version) {\n      var image = texture.image;\n\n      if (image === undefined) {\n        console.warn('THREE.WebGLRenderer: Texture marked for update but image is undefined');\n      } else if (image.complete === false) {\n        console.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete');\n      } else {\n        uploadTexture(textureProperties, texture, slot);\n        return;\n      }\n    }\n\n    state.activeTexture(_gl.TEXTURE0 + slot);\n    state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture);\n  }\n\n  function setTexture2DArray(texture, slot) {\n    var textureProperties = properties.get(texture);\n\n    if (texture.version > 0 && textureProperties.__version !== texture.version) {\n      uploadTexture(textureProperties, texture, slot);\n      return;\n    }\n\n    state.activeTexture(_gl.TEXTURE0 + slot);\n    state.bindTexture(_gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture);\n  }\n\n  function setTexture3D(texture, slot) {\n    var textureProperties = properties.get(texture);\n\n    if (texture.version > 0 && textureProperties.__version !== texture.version) {\n      uploadTexture(textureProperties, texture, slot);\n      return;\n    }\n\n    state.activeTexture(_gl.TEXTURE0 + slot);\n    state.bindTexture(_gl.TEXTURE_3D, textureProperties.__webglTexture);\n  }\n\n  function setTextureCube(texture, slot) {\n    if (texture.image.length !== 6) return;\n    var textureProperties = properties.get(texture);\n\n    if (texture.version > 0 && textureProperties.__version !== texture.version) {\n      initTexture(textureProperties, texture);\n      state.activeTexture(_gl.TEXTURE0 + slot);\n      state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n\n      _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n\n      var isCompressed = texture && texture.isCompressedTexture;\n      var isDataTexture = texture.image[0] && texture.image[0].isDataTexture;\n      var cubeImage = [];\n\n      for (var i = 0; i < 6; i++) {\n        if (!isCompressed && !isDataTexture) {\n          cubeImage[i] = resizeImage(texture.image[i], false, true, maxCubemapSize);\n        } else {\n          cubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];\n        }\n      }\n\n      var image = cubeImage[0],\n          supportsMips = isPowerOfTwo(image) || isWebGL2,\n          glFormat = utils.convert(texture.format),\n          glType = utils.convert(texture.type),\n          glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n      setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);\n      var mipmaps;\n\n      if (isCompressed) {\n        for (var i = 0; i < 6; i++) {\n          mipmaps = cubeImage[i].mipmaps;\n\n          for (var j = 0; j < mipmaps.length; j++) {\n            var mipmap = mipmaps[j];\n\n            if (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n              if (glFormat !== null) {\n                state.compressedTexImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n              } else {\n                console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()');\n              }\n            } else {\n              state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n            }\n          }\n        }\n\n        textureProperties.__maxMipLevel = mipmaps.length - 1;\n      } else {\n        mipmaps = texture.mipmaps;\n\n        for (var i = 0; i < 6; i++) {\n          if (isDataTexture) {\n            state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[i].width, cubeImage[i].height, 0, glFormat, glType, cubeImage[i].data);\n\n            for (var j = 0; j < mipmaps.length; j++) {\n              var mipmap = mipmaps[j];\n              var mipmapImage = mipmap.image[i].image;\n              state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);\n            }\n          } else {\n            state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[i]);\n\n            for (var j = 0; j < mipmaps.length; j++) {\n              var mipmap = mipmaps[j];\n              state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[i]);\n            }\n          }\n        }\n\n        textureProperties.__maxMipLevel = mipmaps.length;\n      }\n\n      if (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n        // We assume images for cube map have the same size.\n        generateMipmap(_gl.TEXTURE_CUBE_MAP, texture, image.width, image.height);\n      }\n\n      textureProperties.__version = texture.version;\n      if (texture.onUpdate) texture.onUpdate(texture);\n    } else {\n      state.activeTexture(_gl.TEXTURE0 + slot);\n      state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n    }\n  }\n\n  function setTextureCubeDynamic(texture, slot) {\n    state.activeTexture(_gl.TEXTURE0 + slot);\n    state.bindTexture(_gl.TEXTURE_CUBE_MAP, properties.get(texture).__webglTexture);\n  }\n\n  var wrappingToGL = (_wrappingToGL = {}, _defineProperty(_wrappingToGL, RepeatWrapping, _gl.REPEAT), _defineProperty(_wrappingToGL, ClampToEdgeWrapping, _gl.CLAMP_TO_EDGE), _defineProperty(_wrappingToGL, MirroredRepeatWrapping, _gl.MIRRORED_REPEAT), _wrappingToGL);\n  var filterToGL = (_filterToGL = {}, _defineProperty(_filterToGL, NearestFilter, _gl.NEAREST), _defineProperty(_filterToGL, NearestMipmapNearestFilter, _gl.NEAREST_MIPMAP_NEAREST), _defineProperty(_filterToGL, NearestMipmapLinearFilter, _gl.NEAREST_MIPMAP_LINEAR), _defineProperty(_filterToGL, LinearFilter, _gl.LINEAR), _defineProperty(_filterToGL, LinearMipmapNearestFilter, _gl.LINEAR_MIPMAP_NEAREST), _defineProperty(_filterToGL, LinearMipmapLinearFilter, _gl.LINEAR_MIPMAP_LINEAR), _filterToGL);\n\n  function setTextureParameters(textureType, texture, supportsMips) {\n    if (supportsMips) {\n      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[texture.wrapS]);\n\n      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[texture.wrapT]);\n\n      if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {\n        _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[texture.wrapR]);\n      }\n\n      _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[texture.magFilter]);\n\n      _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[texture.minFilter]);\n    } else {\n      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE);\n\n      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE);\n\n      if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {\n        _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, _gl.CLAMP_TO_EDGE);\n      }\n\n      if (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) {\n        console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.');\n      }\n\n      _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterFallback(texture.magFilter));\n\n      _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterFallback(texture.minFilter));\n\n      if (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {\n        console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.');\n      }\n    }\n\n    var extension = extensions.get('EXT_texture_filter_anisotropic');\n\n    if (extension) {\n      if (texture.type === FloatType && extensions.get('OES_texture_float_linear') === null) return;\n      if (texture.type === HalfFloatType && (isWebGL2 || extensions.get('OES_texture_half_float_linear')) === null) return;\n\n      if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {\n        _gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));\n\n        properties.get(texture).__currentAnisotropy = texture.anisotropy;\n      }\n    }\n  }\n\n  function initTexture(textureProperties, texture) {\n    if (textureProperties.__webglInit === undefined) {\n      textureProperties.__webglInit = true;\n      texture.addEventListener('dispose', onTextureDispose);\n      textureProperties.__webglTexture = _gl.createTexture();\n      info.memory.textures++;\n    }\n  }\n\n  function uploadTexture(textureProperties, texture, slot) {\n    var textureType = _gl.TEXTURE_2D;\n    if (texture.isDataTexture2DArray) textureType = _gl.TEXTURE_2D_ARRAY;\n    if (texture.isDataTexture3D) textureType = _gl.TEXTURE_3D;\n    initTexture(textureProperties, texture);\n    state.activeTexture(_gl.TEXTURE0 + slot);\n    state.bindTexture(textureType, textureProperties.__webglTexture);\n\n    _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n\n    _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\n\n    _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\n\n    var needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo(texture.image) === false;\n    var image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);\n    var supportsMips = isPowerOfTwo(image) || isWebGL2,\n        glFormat = utils.convert(texture.format),\n        glType = utils.convert(texture.type),\n        glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n    setTextureParameters(textureType, texture, supportsMips);\n    var mipmap,\n        mipmaps = texture.mipmaps;\n\n    if (texture.isDepthTexture) {\n      // populate depth texture with dummy data\n      glInternalFormat = _gl.DEPTH_COMPONENT;\n\n      if (texture.type === FloatType) {\n        if (isWebGL2 === false) throw new Error('Float Depth Texture only supported in WebGL2.0');\n        glInternalFormat = _gl.DEPTH_COMPONENT32F;\n      } else if (isWebGL2) {\n        // WebGL 2.0 requires signed internalformat for glTexImage2D\n        glInternalFormat = _gl.DEPTH_COMPONENT16;\n      }\n\n      if (texture.format === DepthFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {\n        // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n        // DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n        // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n        if (texture.type !== UnsignedShortType && texture.type !== UnsignedIntType) {\n          console.warn('THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.');\n          texture.type = UnsignedShortType;\n          glType = utils.convert(texture.type);\n        }\n      } // Depth stencil textures need the DEPTH_STENCIL internal format\n      // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\n\n      if (texture.format === DepthStencilFormat) {\n        glInternalFormat = _gl.DEPTH_STENCIL; // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n        // DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n        // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\n        if (texture.type !== UnsignedInt248Type) {\n          console.warn('THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.');\n          texture.type = UnsignedInt248Type;\n          glType = utils.convert(texture.type);\n        }\n      }\n\n      state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);\n    } else if (texture.isDataTexture) {\n      // use manually created mipmaps if available\n      // if there are no manual mipmaps\n      // set 0 level mipmap and then use GL to generate other mipmap levels\n      if (mipmaps.length > 0 && supportsMips) {\n        for (var i = 0, il = mipmaps.length; i < il; i++) {\n          mipmap = mipmaps[i];\n          state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n        }\n\n        texture.generateMipmaps = false;\n        textureProperties.__maxMipLevel = mipmaps.length - 1;\n      } else {\n        state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);\n        textureProperties.__maxMipLevel = 0;\n      }\n    } else if (texture.isCompressedTexture) {\n      for (var i = 0, il = mipmaps.length; i < il; i++) {\n        mipmap = mipmaps[i];\n\n        if (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n          if (glFormat !== null) {\n            state.compressedTexImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n          } else {\n            console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()');\n          }\n        } else {\n          state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n        }\n      }\n\n      textureProperties.__maxMipLevel = mipmaps.length - 1;\n    } else if (texture.isDataTexture2DArray) {\n      state.texImage3D(_gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n      textureProperties.__maxMipLevel = 0;\n    } else if (texture.isDataTexture3D) {\n      state.texImage3D(_gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n      textureProperties.__maxMipLevel = 0;\n    } else {\n      // regular Texture (image, video, canvas)\n      // use manually created mipmaps if available\n      // if there are no manual mipmaps\n      // set 0 level mipmap and then use GL to generate other mipmap levels\n      if (mipmaps.length > 0 && supportsMips) {\n        for (var i = 0, il = mipmaps.length; i < il; i++) {\n          mipmap = mipmaps[i];\n          state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap);\n        }\n\n        texture.generateMipmaps = false;\n        textureProperties.__maxMipLevel = mipmaps.length - 1;\n      } else {\n        state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image);\n        textureProperties.__maxMipLevel = 0;\n      }\n    }\n\n    if (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n      generateMipmap(textureType, texture, image.width, image.height);\n    }\n\n    textureProperties.__version = texture.version;\n    if (texture.onUpdate) texture.onUpdate(texture);\n  } // Render targets\n  // Setup storage for target texture and bind it to correct framebuffer\n\n\n  function setupFrameBufferTexture(framebuffer, renderTarget, attachment, textureTarget) {\n    var glFormat = utils.convert(renderTarget.texture.format);\n    var glType = utils.convert(renderTarget.texture.type);\n    var glInternalFormat = getInternalFormat(renderTarget.texture.internalFormat, glFormat, glType);\n    state.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);\n\n    _gl.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n    _gl.framebufferTexture2D(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(renderTarget.texture).__webglTexture, 0);\n\n    _gl.bindFramebuffer(_gl.FRAMEBUFFER, null);\n  } // Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\n\n  function setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {\n    _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);\n\n    if (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {\n      if (isMultisample) {\n        var samples = getRenderTargetSamples(renderTarget);\n\n        _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height);\n      } else {\n        _gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height);\n      }\n\n      _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);\n    } else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {\n      if (isMultisample) {\n        var samples = getRenderTargetSamples(renderTarget);\n\n        _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height);\n      } else {\n        _gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height);\n      }\n\n      _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);\n    } else {\n      var glFormat = utils.convert(renderTarget.texture.format);\n      var glType = utils.convert(renderTarget.texture.type);\n      var glInternalFormat = getInternalFormat(renderTarget.texture.internalFormat, glFormat, glType);\n\n      if (isMultisample) {\n        var samples = getRenderTargetSamples(renderTarget);\n\n        _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n      } else {\n        _gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);\n      }\n    }\n\n    _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);\n  } // Setup resources for a Depth Texture for a FBO (needs an extension)\n\n\n  function setupDepthTexture(framebuffer, renderTarget) {\n    var isCube = renderTarget && renderTarget.isWebGLRenderTargetCube;\n    if (isCube) throw new Error('Depth Texture with cube render targets is not supported');\n\n    _gl.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n    if (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {\n      throw new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n    } // upload an empty depth texture with framebuffer size\n\n\n    if (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {\n      renderTarget.depthTexture.image.width = renderTarget.width;\n      renderTarget.depthTexture.image.height = renderTarget.height;\n      renderTarget.depthTexture.needsUpdate = true;\n    }\n\n    setTexture2D(renderTarget.depthTexture, 0);\n\n    var webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;\n\n    if (renderTarget.depthTexture.format === DepthFormat) {\n      _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);\n    } else if (renderTarget.depthTexture.format === DepthStencilFormat) {\n      _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);\n    } else {\n      throw new Error('Unknown depthTexture format');\n    }\n  } // Setup GL resources for a non-texture depth buffer\n\n\n  function setupDepthRenderbuffer(renderTarget) {\n    var renderTargetProperties = properties.get(renderTarget);\n    var isCube = renderTarget.isWebGLRenderTargetCube === true;\n\n    if (renderTarget.depthTexture) {\n      if (isCube) throw new Error('target.depthTexture not supported in Cube render targets');\n      setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);\n    } else {\n      if (isCube) {\n        renderTargetProperties.__webglDepthbuffer = [];\n\n        for (var i = 0; i < 6; i++) {\n          _gl.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[i]);\n\n          renderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();\n          setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget);\n        }\n      } else {\n        _gl.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n\n        renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n        setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget);\n      }\n    }\n\n    _gl.bindFramebuffer(_gl.FRAMEBUFFER, null);\n  } // Set up GL resources for the render target\n\n\n  function setupRenderTarget(renderTarget) {\n    var renderTargetProperties = properties.get(renderTarget);\n    var textureProperties = properties.get(renderTarget.texture);\n    renderTarget.addEventListener('dispose', onRenderTargetDispose);\n    textureProperties.__webglTexture = _gl.createTexture();\n    info.memory.textures++;\n    var isCube = renderTarget.isWebGLRenderTargetCube === true;\n    var isMultisample = renderTarget.isWebGLMultisampleRenderTarget === true;\n    var isMultiview = renderTarget.isWebGLMultiviewRenderTarget === true;\n    var supportsMips = isPowerOfTwo(renderTarget) || isWebGL2; // Setup framebuffer\n\n    if (isCube) {\n      renderTargetProperties.__webglFramebuffer = [];\n\n      for (var i = 0; i < 6; i++) {\n        renderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();\n      }\n    } else {\n      renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n      if (isMultisample) {\n        if (isWebGL2) {\n          renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n          renderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\n\n          _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer);\n\n          var glFormat = utils.convert(renderTarget.texture.format);\n          var glType = utils.convert(renderTarget.texture.type);\n          var glInternalFormat = getInternalFormat(renderTarget.texture.internalFormat, glFormat, glType);\n          var samples = getRenderTargetSamples(renderTarget);\n\n          _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\n          _gl.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n\n          _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer);\n\n          _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);\n\n          if (renderTarget.depthBuffer) {\n            renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n            setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);\n          }\n\n          _gl.bindFramebuffer(_gl.FRAMEBUFFER, null);\n        } else {\n          console.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');\n        }\n      } else if (isMultiview) {\n        var width = renderTarget.width;\n        var height = renderTarget.height;\n        var numViews = renderTarget.numViews;\n\n        _gl.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n\n        var ext = extensions.get('OVR_multiview2');\n        info.memory.textures += 2;\n\n        var colorTexture = _gl.createTexture();\n\n        _gl.bindTexture(_gl.TEXTURE_2D_ARRAY, colorTexture);\n\n        _gl.texParameteri(_gl.TEXTURE_2D_ARRAY, _gl.TEXTURE_MAG_FILTER, _gl.NEAREST);\n\n        _gl.texParameteri(_gl.TEXTURE_2D_ARRAY, _gl.TEXTURE_MIN_FILTER, _gl.NEAREST);\n\n        _gl.texImage3D(_gl.TEXTURE_2D_ARRAY, 0, _gl.RGBA8, width, height, numViews, 0, _gl.RGBA, _gl.UNSIGNED_BYTE, null);\n\n        ext.framebufferTextureMultiviewOVR(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, colorTexture, 0, 0, numViews);\n\n        var depthStencilTexture = _gl.createTexture();\n\n        _gl.bindTexture(_gl.TEXTURE_2D_ARRAY, depthStencilTexture);\n\n        _gl.texParameteri(_gl.TEXTURE_2D_ARRAY, _gl.TEXTURE_MAG_FILTER, _gl.NEAREST);\n\n        _gl.texParameteri(_gl.TEXTURE_2D_ARRAY, _gl.TEXTURE_MIN_FILTER, _gl.NEAREST);\n\n        _gl.texImage3D(_gl.TEXTURE_2D_ARRAY, 0, _gl.DEPTH24_STENCIL8, width, height, numViews, 0, _gl.DEPTH_STENCIL, _gl.UNSIGNED_INT_24_8, null);\n\n        ext.framebufferTextureMultiviewOVR(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, depthStencilTexture, 0, 0, numViews);\n        var viewFramebuffers = new Array(numViews);\n\n        for (var i = 0; i < numViews; ++i) {\n          viewFramebuffers[i] = _gl.createFramebuffer();\n\n          _gl.bindFramebuffer(_gl.FRAMEBUFFER, viewFramebuffers[i]);\n\n          _gl.framebufferTextureLayer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, colorTexture, 0, i);\n        }\n\n        renderTargetProperties.__webglColorTexture = colorTexture;\n        renderTargetProperties.__webglDepthStencilTexture = depthStencilTexture;\n        renderTargetProperties.__webglViewFramebuffers = viewFramebuffers;\n\n        _gl.bindFramebuffer(_gl.FRAMEBUFFER, null);\n\n        _gl.bindTexture(_gl.TEXTURE_2D_ARRAY, null);\n      }\n    } // Setup color buffer\n\n\n    if (isCube) {\n      state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n      setTextureParameters(_gl.TEXTURE_CUBE_MAP, renderTarget.texture, supportsMips);\n\n      for (var i = 0; i < 6; i++) {\n        setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i);\n      }\n\n      if (textureNeedsGenerateMipmaps(renderTarget.texture, supportsMips)) {\n        generateMipmap(_gl.TEXTURE_CUBE_MAP, renderTarget.texture, renderTarget.width, renderTarget.height);\n      }\n\n      state.bindTexture(_gl.TEXTURE_CUBE_MAP, null);\n    } else if (!isMultiview) {\n      state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture);\n      setTextureParameters(_gl.TEXTURE_2D, renderTarget.texture, supportsMips);\n      setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D);\n\n      if (textureNeedsGenerateMipmaps(renderTarget.texture, supportsMips)) {\n        generateMipmap(_gl.TEXTURE_2D, renderTarget.texture, renderTarget.width, renderTarget.height);\n      }\n\n      state.bindTexture(_gl.TEXTURE_2D, null);\n    } // Setup depth and stencil buffers\n\n\n    if (renderTarget.depthBuffer) {\n      setupDepthRenderbuffer(renderTarget);\n    }\n  }\n\n  function updateRenderTargetMipmap(renderTarget) {\n    var texture = renderTarget.texture;\n    var supportsMips = isPowerOfTwo(renderTarget) || isWebGL2;\n\n    if (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n      var target = renderTarget.isWebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\n      var webglTexture = properties.get(texture).__webglTexture;\n\n      state.bindTexture(target, webglTexture);\n      generateMipmap(target, texture, renderTarget.width, renderTarget.height);\n      state.bindTexture(target, null);\n    }\n  }\n\n  function updateMultisampleRenderTarget(renderTarget) {\n    if (renderTarget.isWebGLMultisampleRenderTarget) {\n      if (isWebGL2) {\n        var renderTargetProperties = properties.get(renderTarget);\n\n        _gl.bindFramebuffer(_gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n\n        _gl.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n\n        var width = renderTarget.width;\n        var height = renderTarget.height;\n        var mask = _gl.COLOR_BUFFER_BIT;\n        if (renderTarget.depthBuffer) mask |= _gl.DEPTH_BUFFER_BIT;\n        if (renderTarget.stencilBuffer) mask |= _gl.STENCIL_BUFFER_BIT;\n\n        _gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST);\n      } else {\n        console.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');\n      }\n    }\n  }\n\n  function getRenderTargetSamples(renderTarget) {\n    return isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ? Math.min(maxSamples, renderTarget.samples) : 0;\n  }\n\n  function updateVideoTexture(texture) {\n    var frame = info.render.frame; // Check the last frame we updated the VideoTexture\n\n    if (_videoTextures.get(texture) !== frame) {\n      _videoTextures.set(texture, frame);\n\n      texture.update();\n    }\n  } // backwards compatibility\n\n\n  var warnedTexture2D = false;\n  var warnedTextureCube = false;\n\n  function safeSetTexture2D(texture, slot) {\n    if (texture && texture.isWebGLRenderTarget) {\n      if (warnedTexture2D === false) {\n        console.warn(\"THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead.\");\n        warnedTexture2D = true;\n      }\n\n      texture = texture.texture;\n    }\n\n    setTexture2D(texture, slot);\n  }\n\n  function safeSetTextureCube(texture, slot) {\n    if (texture && texture.isWebGLRenderTargetCube) {\n      if (warnedTextureCube === false) {\n        console.warn(\"THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead.\");\n        warnedTextureCube = true;\n      }\n\n      texture = texture.texture;\n    } // currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\n    // TODO: unify these code paths\n\n\n    if (texture && texture.isCubeTexture || _Array$isArray(texture.image) && texture.image.length === 6) {\n      // CompressedTexture can have Array in image :/\n      // this function alone should take care of cube textures\n      setTextureCube(texture, slot);\n    } else {\n      // assumed: texture property of THREE.WebGLRenderTargetCube\n      setTextureCubeDynamic(texture, slot);\n    }\n  } //\n\n\n  this.allocateTextureUnit = allocateTextureUnit;\n  this.resetTextureUnits = resetTextureUnits;\n  this.setTexture2D = setTexture2D;\n  this.setTexture2DArray = setTexture2DArray;\n  this.setTexture3D = setTexture3D;\n  this.setTextureCube = setTextureCube;\n  this.setTextureCubeDynamic = setTextureCubeDynamic;\n  this.setupRenderTarget = setupRenderTarget;\n  this.updateRenderTargetMipmap = updateRenderTargetMipmap;\n  this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n  this.safeSetTexture2D = safeSetTexture2D;\n  this.safeSetTextureCube = safeSetTextureCube;\n}\n\nexport { WebGLTextures };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/renderers/webgl/WebGLTextures.js"],"names":["LinearFilter","LinearMipmapLinearFilter","LinearMipmapNearestFilter","NearestFilter","NearestMipmapLinearFilter","NearestMipmapNearestFilter","RGBFormat","RGBAFormat","DepthFormat","DepthStencilFormat","UnsignedShortType","UnsignedIntType","UnsignedInt248Type","FloatType","HalfFloatType","MirroredRepeatWrapping","ClampToEdgeWrapping","RepeatWrapping","_Math","WebGLTextures","_gl","extensions","state","properties","capabilities","utils","info","isWebGL2","maxTextures","maxCubemapSize","maxTextureSize","maxSamples","_videoTextures","_canvas","useOffscreenCanvas","OffscreenCanvas","getContext","err","createCanvas","width","height","document","createElementNS","resizeImage","image","needsPowerOfTwo","needsNewCanvas","maxSize","scale","Math","max","HTMLImageElement","HTMLCanvasElement","ImageBitmap","floor","floorPowerOfTwo","undefined","canvas","context","drawImage","console","warn","isPowerOfTwo","textureNeedsPowerOfTwo","texture","wrapS","wrapT","minFilter","textureNeedsGenerateMipmaps","supportsMips","generateMipmaps","generateMipmap","target","textureProperties","get","__maxMipLevel","log","LOG2E","getInternalFormat","internalFormatName","glFormat","glType","internalFormat","RED","FLOAT","R32F","HALF_FLOAT","R16F","UNSIGNED_BYTE","R8","RGB","RGB32F","RGB16F","RGB8","RGBA","RGBA32F","RGBA16F","RGBA8","filterFallback","f","NEAREST","LINEAR","onTextureDispose","event","removeEventListener","deallocateTexture","isVideoTexture","memory","textures","onRenderTargetDispose","renderTarget","deallocateRenderTarget","__webglInit","deleteTexture","__webglTexture","remove","renderTargetProperties","depthTexture","dispose","isWebGLRenderTargetCube","i","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","isWebGLMultiviewRenderTarget","__webglColorTexture","__webglDepthStencilTexture","il","__webglViewFramebuffers","length","textureUnits","resetTextureUnits","allocateTextureUnit","textureUnit","setTexture2D","slot","updateVideoTexture","version","__version","complete","uploadTexture","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","setTexture2DArray","TEXTURE_2D_ARRAY","setTexture3D","TEXTURE_3D","setTextureCube","initTexture","TEXTURE_CUBE_MAP","pixelStorei","UNPACK_FLIP_Y_WEBGL","flipY","isCompressed","isCompressedTexture","isDataTexture","cubeImage","convert","format","type","glInternalFormat","setTextureParameters","mipmaps","j","mipmap","compressedTexImage2D","TEXTURE_CUBE_MAP_POSITIVE_X","data","texImage2D","mipmapImage","onUpdate","setTextureCubeDynamic","wrappingToGL","REPEAT","CLAMP_TO_EDGE","MIRRORED_REPEAT","filterToGL","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","textureType","texParameteri","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_WRAP_R","wrapR","TEXTURE_MAG_FILTER","magFilter","TEXTURE_MIN_FILTER","extension","anisotropy","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","min","getMaxAnisotropy","addEventListener","createTexture","isDataTexture2DArray","isDataTexture3D","UNPACK_PREMULTIPLY_ALPHA_WEBGL","premultiplyAlpha","UNPACK_ALIGNMENT","unpackAlignment","isDepthTexture","DEPTH_COMPONENT","Error","DEPTH_COMPONENT32F","DEPTH_COMPONENT16","DEPTH_STENCIL","texImage3D","depth","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","isMultisample","bindRenderbuffer","RENDERBUFFER","depthBuffer","stencilBuffer","samples","getRenderTargetSamples","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH24_STENCIL8","DEPTH_STENCIL_ATTACHMENT","setupDepthTexture","isCube","needsUpdate","webglDepthTexture","setupDepthRenderbuffer","createRenderbuffer","setupRenderTarget","isWebGLMultisampleRenderTarget","isMultiview","createFramebuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","COLOR_ATTACHMENT0","__webglDepthRenderbuffer","numViews","ext","colorTexture","framebufferTextureMultiviewOVR","depthStencilTexture","UNSIGNED_INT_24_8","viewFramebuffers","Array","framebufferTextureLayer","updateRenderTargetMipmap","webglTexture","updateMultisampleRenderTarget","READ_FRAMEBUFFER","DRAW_FRAMEBUFFER","mask","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","blitFramebuffer","frame","render","set","update","warnedTexture2D","warnedTextureCube","safeSetTexture2D","isWebGLRenderTarget","safeSetTextureCube","isCubeTexture"],"mappings":"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","sourcesContent":["/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nimport { LinearFilter, LinearMipmapLinearFilter, LinearMipmapNearestFilter, NearestFilter, NearestMipmapLinearFilter, NearestMipmapNearestFilter, RGBFormat, RGBAFormat, DepthFormat, DepthStencilFormat, UnsignedShortType, UnsignedIntType, UnsignedInt248Type, FloatType, HalfFloatType, MirroredRepeatWrapping, ClampToEdgeWrapping, RepeatWrapping } from '../../constants.js';\nimport { _Math } from '../../math/Math.js';\n\nfunction WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {\n\n\tvar isWebGL2 = capabilities.isWebGL2;\n\tvar maxTextures = capabilities.maxTextures;\n\tvar maxCubemapSize = capabilities.maxCubemapSize;\n\tvar maxTextureSize = capabilities.maxTextureSize;\n\tvar maxSamples = capabilities.maxSamples;\n\n\tvar _videoTextures = new WeakMap();\n\tvar _canvas;\n\n\t// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n\t// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\tvar useOffscreenCanvas = false;\n\n\ttry {\n\n\t\tuseOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'\n\t\t\t&& ( new OffscreenCanvas( 1, 1 ).getContext( \"2d\" ) ) !== null;\n\n\t} catch ( err ) {\n\n\t\t// Ignore any errors\n\n\t}\n\n\tfunction createCanvas( width, height ) {\n\n\t\t// Use OffscreenCanvas when available. Specially needed in web workers\n\n\t\treturn useOffscreenCanvas ?\n\t\t\tnew OffscreenCanvas( width, height ) :\n\t\t\tdocument.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\n\t}\n\n\tfunction resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {\n\n\t\tvar scale = 1;\n\n\t\t// handle case if texture exceeds max size\n\n\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n\t\t\tscale = maxSize / Math.max( image.width, image.height );\n\n\t\t}\n\n\t\t// only perform resize if necessary\n\n\t\tif ( scale < 1 || needsPowerOfTwo === true ) {\n\n\t\t\t// only perform resize for certain image types\n\n\t\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t\t\tvar floor = needsPowerOfTwo ? _Math.floorPowerOfTwo : Math.floor;\n\n\t\t\t\tvar width = floor( scale * image.width );\n\t\t\t\tvar height = floor( scale * image.height );\n\n\t\t\t\tif ( _canvas === undefined ) _canvas = createCanvas( width, height );\n\n\t\t\t\t// cube textures can't reuse the same canvas\n\n\t\t\t\tvar canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;\n\n\t\t\t\tcanvas.width = width;\n\t\t\t\tcanvas.height = height;\n\n\t\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\t\tcontext.drawImage( image, 0, 0, width, height );\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );\n\n\t\t\t\treturn canvas;\n\n\t\t\t} else {\n\n\t\t\t\tif ( 'data' in image ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );\n\n\t\t\t\t}\n\n\t\t\t\treturn image;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\tfunction isPowerOfTwo( image ) {\n\n\t\treturn _Math.isPowerOfTwo( image.width ) && _Math.isPowerOfTwo( image.height );\n\n\t}\n\n\tfunction textureNeedsPowerOfTwo( texture ) {\n\n\t\tif ( isWebGL2 ) return false;\n\n\t\treturn ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\n\t\t\t( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\n\n\t}\n\n\tfunction textureNeedsGenerateMipmaps( texture, supportsMips ) {\n\n\t\treturn texture.generateMipmaps && supportsMips &&\n\t\t\ttexture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\n\t}\n\n\tfunction generateMipmap( target, texture, width, height ) {\n\n\t\t_gl.generateMipmap( target );\n\n\t\tvar textureProperties = properties.get( texture );\n\n\t\t// Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11\n\t\ttextureProperties.__maxMipLevel = Math.log( Math.max( width, height ) ) * Math.LOG2E;\n\n\t}\n\n\tfunction getInternalFormat( internalFormatName, glFormat, glType ) {\n\n\t\tif ( isWebGL2 === false ) return glFormat;\n\n\t\tif ( internalFormatName !== null ) {\n\n\t\t\tif ( _gl[ internalFormatName ] !== undefined ) return _gl[ internalFormatName ];\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'' );\n\n\t\t}\n\n\t\tvar internalFormat = glFormat;\n\n\t\tif ( glFormat === _gl.RED ) {\n\n\t\t\tif ( glType === _gl.FLOAT ) internalFormat = _gl.R32F;\n\t\t\tif ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.R16F;\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.R8;\n\n\t\t}\n\n\t\tif ( glFormat === _gl.RGB ) {\n\n\t\t\tif ( glType === _gl.FLOAT ) internalFormat = _gl.RGB32F;\n\t\t\tif ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.RGB16F;\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.RGB8;\n\n\t\t}\n\n\t\tif ( glFormat === _gl.RGBA ) {\n\n\t\t\tif ( glType === _gl.FLOAT ) internalFormat = _gl.RGBA32F;\n\t\t\tif ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.RGBA16F;\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.RGBA8;\n\n\t\t}\n\n\t\tif ( internalFormat === _gl.R16F || internalFormat === _gl.R32F ||\n\t\t\tinternalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F ) {\n\n\t\t\textensions.get( 'EXT_color_buffer_float' );\n\n\t\t} else if ( internalFormat === _gl.RGB16F || internalFormat === _gl.RGB32F ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Floating point textures with RGB format not supported. Please use RGBA instead.' );\n\n\t\t}\n\n\t\treturn internalFormat;\n\n\t}\n\n\t// Fallback filters for non-power-of-2 textures\n\n\tfunction filterFallback( f ) {\n\n\t\tif ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {\n\n\t\t\treturn _gl.NEAREST;\n\n\t\t}\n\n\t\treturn _gl.LINEAR;\n\n\t}\n\n\t//\n\n\tfunction onTextureDispose( event ) {\n\n\t\tvar texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tdeallocateTexture( texture );\n\n\t\tif ( texture.isVideoTexture ) {\n\n\t\t\t_videoTextures.delete( texture );\n\n\t\t}\n\n\t\tinfo.memory.textures --;\n\n\t}\n\n\tfunction onRenderTargetDispose( event ) {\n\n\t\tvar renderTarget = event.target;\n\n\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\tdeallocateRenderTarget( renderTarget );\n\n\t\tinfo.memory.textures --;\n\n\t}\n\n\t//\n\n\tfunction deallocateTexture( texture ) {\n\n\t\tvar textureProperties = properties.get( texture );\n\n\t\tif ( textureProperties.__webglInit === undefined ) return;\n\n\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\tproperties.remove( texture );\n\n\t}\n\n\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\tif ( ! renderTarget ) return;\n\n\t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\trenderTarget.depthTexture.dispose();\n\n\t\t}\n\n\t\tif ( renderTarget.isWebGLRenderTargetCube ) {\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\n\t\t}\n\n\t\tif ( renderTarget.isWebGLMultiviewRenderTarget ) {\n\n\t\t\t_gl.deleteTexture( renderTargetProperties.__webglColorTexture );\n\t\t\t_gl.deleteTexture( renderTargetProperties.__webglDepthStencilTexture );\n\n\t\t\tinfo.memory.textures -= 2;\n\n\t\t\tfor ( var i = 0, il = renderTargetProperties.__webglViewFramebuffers.length; i < il; i ++ ) {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglViewFramebuffers[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tproperties.remove( renderTarget.texture );\n\t\tproperties.remove( renderTarget );\n\n\t}\n\n\t//\n\n\tvar textureUnits = 0;\n\n\tfunction resetTextureUnits() {\n\n\t\ttextureUnits = 0;\n\n\t}\n\n\tfunction allocateTextureUnit() {\n\n\t\tvar textureUnit = textureUnits;\n\n\t\tif ( textureUnit >= maxTextures ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );\n\n\t\t}\n\n\t\ttextureUnits += 1;\n\n\t\treturn textureUnit;\n\n\t}\n\n\t//\n\n\tfunction setTexture2D( texture, slot ) {\n\n\t\tvar textureProperties = properties.get( texture );\n\n\t\tif ( texture.isVideoTexture ) updateVideoTexture( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tvar image = texture.image;\n\n\t\t\tif ( image === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined' );\n\n\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );\n\n\t\t\t} else {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n\t}\n\n\tfunction setTexture2DArray( texture, slot ) {\n\n\t\tvar textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\tstate.bindTexture( _gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture );\n\n\t}\n\n\tfunction setTexture3D( texture, slot ) {\n\n\t\tvar textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\tstate.bindTexture( _gl.TEXTURE_3D, textureProperties.__webglTexture );\n\n\t}\n\n\tfunction setTextureCube( texture, slot ) {\n\n\t\tif ( texture.image.length !== 6 ) return;\n\n\t\tvar textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tinitTexture( textureProperties, texture );\n\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\n\n\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\n\t\t\tvar isCompressed = ( texture && texture.isCompressedTexture );\n\t\t\tvar isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\n\n\t\t\tvar cubeImage = [];\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\t\tcubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar image = cubeImage[ 0 ],\n\t\t\t\tsupportsMips = isPowerOfTwo( image ) || isWebGL2,\n\t\t\t\tglFormat = utils.convert( texture.format ),\n\t\t\t\tglType = utils.convert( texture.type ),\n\t\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType );\n\n\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, supportsMips );\n\n\t\t\tvar mipmaps;\n\n\t\t\tif ( isCompressed ) {\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tmipmaps = cubeImage[ i ].mipmaps;\n\n\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t} else {\n\n\t\t\t\tmipmaps = texture.mipmaps;\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\n\t\t\t\t\t\t\tvar mipmapImage = mipmap.image[ i ].image;\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length;\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\t// We assume images for cube map have the same size.\n\t\t\t\tgenerateMipmap( _gl.TEXTURE_CUBE_MAP, texture, image.width, image.height );\n\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t} else {\n\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\n\n\t\t}\n\n\t}\n\n\tfunction setTextureCubeDynamic( texture, slot ) {\n\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );\n\n\t}\n\n\tvar wrappingToGL = {\n\t\t[ RepeatWrapping ]: _gl.REPEAT,\n\t\t[ ClampToEdgeWrapping ]: _gl.CLAMP_TO_EDGE,\n\t\t[ MirroredRepeatWrapping ]: _gl.MIRRORED_REPEAT\n\t};\n\n\tvar filterToGL = {\n\t\t[ NearestFilter ]: _gl.NEAREST,\n\t\t[ NearestMipmapNearestFilter ]: _gl.NEAREST_MIPMAP_NEAREST,\n\t\t[ NearestMipmapLinearFilter ]: _gl.NEAREST_MIPMAP_LINEAR,\n\n\t\t[ LinearFilter ]: _gl.LINEAR,\n\t\t[ LinearMipmapNearestFilter ]: _gl.LINEAR_MIPMAP_NEAREST,\n\t\t[ LinearMipmapLinearFilter ]: _gl.LINEAR_MIPMAP_LINEAR\n\t};\n\n\tfunction setTextureParameters( textureType, texture, supportsMips ) {\n\n\t\tif ( supportsMips ) {\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[ texture.wrapS ] );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[ texture.wrapT ] );\n\n\t\t\tif ( textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY ) {\n\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[ texture.wrapR ] );\n\n\t\t\t}\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[ texture.magFilter ] );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[ texture.minFilter ] );\n\n\t\t} else {\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\n\n\t\t\tif ( textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY ) {\n\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_R, _gl.CLAMP_TO_EDGE );\n\n\t\t\t}\n\n\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );\n\n\t\t\t}\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\n\n\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\tif ( extension ) {\n\n\t\t\tif ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;\n\t\t\tif ( texture.type === HalfFloatType && ( isWebGL2 || extensions.get( 'OES_texture_half_float_linear' ) ) === null ) return;\n\n\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction initTexture( textureProperties, texture ) {\n\n\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\tinfo.memory.textures ++;\n\n\t\t}\n\n\t}\n\n\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\tvar textureType = _gl.TEXTURE_2D;\n\n\t\tif ( texture.isDataTexture2DArray ) textureType = _gl.TEXTURE_2D_ARRAY;\n\t\tif ( texture.isDataTexture3D ) textureType = _gl.TEXTURE_3D;\n\n\t\tinitTexture( textureProperties, texture );\n\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\tstate.bindTexture( textureType, textureProperties.__webglTexture );\n\n\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\n\t\tvar needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( texture.image ) === false;\n\t\tvar image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );\n\n\t\tvar supportsMips = isPowerOfTwo( image ) || isWebGL2,\n\t\t\tglFormat = utils.convert( texture.format ),\n\t\t\tglType = utils.convert( texture.type ),\n\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType );\n\n\t\tsetTextureParameters( textureType, texture, supportsMips );\n\n\t\tvar mipmap, mipmaps = texture.mipmaps;\n\n\t\tif ( texture.isDepthTexture ) {\n\n\t\t\t// populate depth texture with dummy data\n\n\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT;\n\n\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\tif ( isWebGL2 === false ) throw new Error( 'Float Depth Texture only supported in WebGL2.0' );\n\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT32F;\n\n\t\t\t} else if ( isWebGL2 ) {\n\n\t\t\t\t// WebGL 2.0 requires signed internalformat for glTexImage2D\n\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT16;\n\n\t\t\t}\n\n\t\t\tif ( texture.format === DepthFormat && glInternalFormat === _gl.DEPTH_COMPONENT ) {\n\n\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\tif ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );\n\n\t\t\t\t\ttexture.type = UnsignedShortType;\n\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\tif ( texture.format === DepthStencilFormat ) {\n\n\t\t\t\tglInternalFormat = _gl.DEPTH_STENCIL;\n\n\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\tif ( texture.type !== UnsignedInt248Type ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );\n\n\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t} else if ( texture.isDataTexture ) {\n\n\t\t\t// use manually created mipmaps if available\n\t\t\t// if there are no manual mipmaps\n\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t} else {\n\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t}\n\n\t\t} else if ( texture.isCompressedTexture ) {\n\n\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t} else if ( texture.isDataTexture2DArray ) {\n\n\t\t\tstate.texImage3D( _gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t} else if ( texture.isDataTexture3D ) {\n\n\t\t\tstate.texImage3D( _gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t} else {\n\n\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t// use manually created mipmaps if available\n\t\t\t// if there are no manual mipmaps\n\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t} else {\n\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image );\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\tgenerateMipmap( textureType, texture, image.width, image.height );\n\n\t\t}\n\n\t\ttextureProperties.__version = texture.version;\n\n\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t}\n\n\t// Render targets\n\n\t// Setup storage for target texture and bind it to correct framebuffer\n\tfunction setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {\n\n\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\tvar glInternalFormat = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );\n\t\tstate.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t}\n\n\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\tfunction setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {\n\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\n\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\tif ( isMultisample ) {\n\n\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\tif ( isMultisample ) {\n\n\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t} else {\n\n\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\t\tvar glInternalFormat = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );\n\n\t\t\tif ( isMultisample ) {\n\n\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t}\n\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\n\t}\n\n\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\n\t\tvar isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );\n\t\tif ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );\n\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\tif ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\n\n\t\t\tthrow new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\n\n\t\t}\n\n\t\t// upload an empty depth texture with framebuffer size\n\t\tif ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\n\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\n\t\t}\n\n\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n\t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\n\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'Unknown depthTexture format' );\n\n\t\t}\n\n\t}\n\n\t// Setup GL resources for a non-texture depth buffer\n\tfunction setupDepthRenderbuffer( renderTarget ) {\n\n\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\tvar isCube = ( renderTarget.isWebGLRenderTargetCube === true );\n\n\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\tif ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );\n\n\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n\t\t} else {\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t}\n\n\t// Set up GL resources for the render target\n\tfunction setupRenderTarget( renderTarget ) {\n\n\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\tinfo.memory.textures ++;\n\n\t\tvar isCube = ( renderTarget.isWebGLRenderTargetCube === true );\n\t\tvar isMultisample = ( renderTarget.isWebGLMultisampleRenderTarget === true );\n\t\tvar isMultiview = ( renderTarget.isWebGLMultiviewRenderTarget === true );\n\t\tvar supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;\n\n\t\t// Setup framebuffer\n\n\t\tif ( isCube ) {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\tif ( isMultisample ) {\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\n\n\t\t\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer );\n\n\t\t\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\t\t\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\t\t\t\tvar glInternalFormat = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );\n\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\t\t\t\t\t_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer );\n\t\t\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\n\t\t\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\n\n\t\t\t\t}\n\n\t\t\t} else if ( isMultiview ) {\n\n\t\t\t\tvar width = renderTarget.width;\n\t\t\t\tvar height = renderTarget.height;\n\t\t\t\tvar numViews = renderTarget.numViews;\n\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\n\t\t\t\tvar ext = extensions.get( 'OVR_multiview2' );\n\n\t\t\t\tinfo.memory.textures += 2;\n\n\t\t\t\tvar colorTexture = _gl.createTexture();\n\t\t\t\t_gl.bindTexture( _gl.TEXTURE_2D_ARRAY, colorTexture );\n\t\t\t\t_gl.texParameteri( _gl.TEXTURE_2D_ARRAY, _gl.TEXTURE_MAG_FILTER, _gl.NEAREST );\n\t\t\t\t_gl.texParameteri( _gl.TEXTURE_2D_ARRAY, _gl.TEXTURE_MIN_FILTER, _gl.NEAREST );\n\t\t\t\t_gl.texImage3D( _gl.TEXTURE_2D_ARRAY, 0, _gl.RGBA8, width, height, numViews, 0, _gl.RGBA, _gl.UNSIGNED_BYTE, null );\n\t\t\t\text.framebufferTextureMultiviewOVR( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, colorTexture, 0, 0, numViews );\n\n\t\t\t\tvar depthStencilTexture = _gl.createTexture();\n\t\t\t\t_gl.bindTexture( _gl.TEXTURE_2D_ARRAY, depthStencilTexture );\n\t\t\t\t_gl.texParameteri( _gl.TEXTURE_2D_ARRAY, _gl.TEXTURE_MAG_FILTER, _gl.NEAREST );\n\t\t\t\t_gl.texParameteri( _gl.TEXTURE_2D_ARRAY, _gl.TEXTURE_MIN_FILTER, _gl.NEAREST );\n\t\t\t\t_gl.texImage3D( _gl.TEXTURE_2D_ARRAY, 0, _gl.DEPTH24_STENCIL8, width, height, numViews, 0, _gl.DEPTH_STENCIL, _gl.UNSIGNED_INT_24_8, null );\n\t\t\t\text.framebufferTextureMultiviewOVR( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, depthStencilTexture, 0, 0, numViews );\n\n\t\t\t\tvar viewFramebuffers = new Array( numViews );\n\t\t\t\tfor ( var i = 0; i < numViews; ++ i ) {\n\n\t\t\t\t\tviewFramebuffers[ i ] = _gl.createFramebuffer();\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, viewFramebuffers[ i ] );\n\t\t\t\t\t_gl.framebufferTextureLayer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, colorTexture, 0, i );\n\n\t\t\t\t}\n\n\t\t\t\trenderTargetProperties.__webglColorTexture = colorTexture;\n\t\t\t\trenderTargetProperties.__webglDepthStencilTexture = depthStencilTexture;\n\t\t\t\trenderTargetProperties.__webglViewFramebuffers = viewFramebuffers;\n\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\t\t\t\t_gl.bindTexture( _gl.TEXTURE_2D_ARRAY, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Setup color buffer\n\n\t\tif ( isCube ) {\n\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, supportsMips );\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\n\n\t\t} else if ( ! isMultiview ) {\n\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, supportsMips );\n\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );\n\n\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( _gl.TEXTURE_2D, renderTarget.texture, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, null );\n\n\t\t}\n\n\t\t// Setup depth and stencil buffers\n\n\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t}\n\n\t}\n\n\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\tvar texture = renderTarget.texture;\n\t\tvar supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;\n\n\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\tvar target = renderTarget.isWebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\n\n\t\t\tstate.bindTexture( target, webglTexture );\n\t\t\tgenerateMipmap( target, texture, renderTarget.width, renderTarget.height );\n\t\t\tstate.bindTexture( target, null );\n\n\t\t}\n\n\t}\n\n\tfunction updateMultisampleRenderTarget( renderTarget ) {\n\n\t\tif ( renderTarget.isWebGLMultisampleRenderTarget ) {\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\t\t\t_gl.bindFramebuffer( _gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t_gl.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\n\t\t\t\tvar width = renderTarget.width;\n\t\t\t\tvar height = renderTarget.height;\n\t\t\t\tvar mask = _gl.COLOR_BUFFER_BIT;\n\n\t\t\t\tif ( renderTarget.depthBuffer ) mask |= _gl.DEPTH_BUFFER_BIT;\n\t\t\t\tif ( renderTarget.stencilBuffer ) mask |= _gl.STENCIL_BUFFER_BIT;\n\n\t\t\t\t_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction getRenderTargetSamples( renderTarget ) {\n\n\t\treturn ( isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ) ?\n\t\t\tMath.min( maxSamples, renderTarget.samples ) : 0;\n\n\t}\n\n\tfunction updateVideoTexture( texture ) {\n\n\t\tvar frame = info.render.frame;\n\n\t\t// Check the last frame we updated the VideoTexture\n\n\t\tif ( _videoTextures.get( texture ) !== frame ) {\n\n\t\t\t_videoTextures.set( texture, frame );\n\t\t\ttexture.update();\n\n\t\t}\n\n\t}\n\n\t// backwards compatibility\n\n\tvar warnedTexture2D = false;\n\tvar warnedTextureCube = false;\n\n\tfunction safeSetTexture2D( texture, slot ) {\n\n\t\tif ( texture && texture.isWebGLRenderTarget ) {\n\n\t\t\tif ( warnedTexture2D === false ) {\n\n\t\t\t\tconsole.warn( \"THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\twarnedTexture2D = true;\n\n\t\t\t}\n\n\t\t\ttexture = texture.texture;\n\n\t\t}\n\n\t\tsetTexture2D( texture, slot );\n\n\t}\n\n\tfunction safeSetTextureCube( texture, slot ) {\n\n\t\tif ( texture && texture.isWebGLRenderTargetCube ) {\n\n\t\t\tif ( warnedTextureCube === false ) {\n\n\t\t\t\tconsole.warn( \"THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\n\t\t\t\twarnedTextureCube = true;\n\n\t\t\t}\n\n\t\t\ttexture = texture.texture;\n\n\t\t}\n\n\t\t// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\n\t\t// TODO: unify these code paths\n\t\tif ( ( texture && texture.isCubeTexture ) ||\n\t\t\t( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\n\n\t\t\t// CompressedTexture can have Array in image :/\n\n\t\t\t// this function alone should take care of cube textures\n\t\t\tsetTextureCube( texture, slot );\n\n\t\t} else {\n\n\t\t\t// assumed: texture property of THREE.WebGLRenderTargetCube\n\t\t\tsetTextureCubeDynamic( texture, slot );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tthis.allocateTextureUnit = allocateTextureUnit;\n\tthis.resetTextureUnits = resetTextureUnits;\n\n\tthis.setTexture2D = setTexture2D;\n\tthis.setTexture2DArray = setTexture2DArray;\n\tthis.setTexture3D = setTexture3D;\n\tthis.setTextureCube = setTextureCube;\n\tthis.setTextureCubeDynamic = setTextureCubeDynamic;\n\tthis.setupRenderTarget = setupRenderTarget;\n\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n\n\tthis.safeSetTexture2D = safeSetTexture2D;\n\tthis.safeSetTextureCube = safeSetTextureCube;\n\n}\n\nexport { WebGLTextures };\n"]},"metadata":{},"sourceType":"module"}