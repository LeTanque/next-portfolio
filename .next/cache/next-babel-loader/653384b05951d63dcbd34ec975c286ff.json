{"ast":null,"code":"/**\n * @author fernandojsg / http://fernandojsg.com\n * @author Takahiro https://github.com/takahirox\n */\nimport { WebGLMultiviewRenderTarget } from '../WebGLMultiviewRenderTarget.js';\nimport { Matrix3 } from '../../math/Matrix3.js';\nimport { Matrix4 } from '../../math/Matrix4.js';\nimport { Vector2 } from '../../math/Vector2.js';\n\nfunction WebGLMultiview(renderer, gl) {\n  var DEFAULT_NUMVIEWS = 2;\n  var extensions = renderer.extensions;\n  var properties = renderer.properties;\n  var renderTarget, currentRenderTarget;\n  var mat3, mat4, cameraArray, renderSize;\n  var available;\n  var maxNumViews = 0; //\n\n  function isAvailable() {\n    if (available === undefined) {\n      var extension = extensions.get('OVR_multiview2');\n      available = extension !== null && gl.getContextAttributes().antialias === false;\n\n      if (available) {\n        maxNumViews = gl.getParameter(extension.MAX_VIEWS_OVR);\n        renderTarget = new WebGLMultiviewRenderTarget(0, 0, DEFAULT_NUMVIEWS);\n        renderSize = new Vector2();\n        mat4 = [];\n        mat3 = [];\n        cameraArray = [];\n\n        for (var i = 0; i < maxNumViews; i++) {\n          mat4[i] = new Matrix4();\n          mat3[i] = new Matrix3();\n        }\n      }\n    }\n\n    return available;\n  }\n\n  function getCameraArray(camera) {\n    if (camera.isArrayCamera) return camera.cameras;\n    cameraArray[0] = camera;\n    return cameraArray;\n  }\n\n  function updateCameraProjectionMatricesUniform(camera, uniforms) {\n    var cameras = getCameraArray(camera);\n\n    for (var i = 0; i < cameras.length; i++) {\n      mat4[i].copy(cameras[i].projectionMatrix);\n    }\n\n    uniforms.setValue(gl, 'projectionMatrices', mat4);\n  }\n\n  function updateCameraViewMatricesUniform(camera, uniforms) {\n    var cameras = getCameraArray(camera);\n\n    for (var i = 0; i < cameras.length; i++) {\n      mat4[i].copy(cameras[i].matrixWorldInverse);\n    }\n\n    uniforms.setValue(gl, 'viewMatrices', mat4);\n  }\n\n  function updateObjectMatricesUniforms(object, camera, uniforms) {\n    var cameras = getCameraArray(camera);\n\n    for (var i = 0; i < cameras.length; i++) {\n      mat4[i].multiplyMatrices(cameras[i].matrixWorldInverse, object.matrixWorld);\n      mat3[i].getNormalMatrix(mat4[i]);\n    }\n\n    uniforms.setValue(gl, 'modelViewMatrices', mat4);\n    uniforms.setValue(gl, 'normalMatrices', mat3);\n  }\n\n  function isMultiviewCompatible(camera) {\n    if (camera.isArrayCamera === undefined) return true;\n    var cameras = camera.cameras;\n    if (cameras.length > maxNumViews) return false;\n\n    for (var i = 1, il = cameras.length; i < il; i++) {\n      if (cameras[0].viewport.z !== cameras[i].viewport.z || cameras[0].viewport.w !== cameras[i].viewport.w) return false;\n    }\n\n    return true;\n  }\n\n  function resizeRenderTarget(camera) {\n    if (currentRenderTarget) {\n      renderSize.set(currentRenderTarget.width, currentRenderTarget.height);\n    } else {\n      renderer.getDrawingBufferSize(renderSize);\n    }\n\n    if (camera.isArrayCamera) {\n      var viewport = camera.cameras[0].viewport;\n      renderTarget.setSize(viewport.z, viewport.w);\n      renderTarget.setNumViews(camera.cameras.length);\n    } else {\n      renderTarget.setSize(renderSize.x, renderSize.y);\n      renderTarget.setNumViews(DEFAULT_NUMVIEWS);\n    }\n  }\n\n  function attachCamera(camera) {\n    if (isMultiviewCompatible(camera) === false) return;\n    currentRenderTarget = renderer.getRenderTarget();\n    resizeRenderTarget(camera);\n    renderer.setRenderTarget(renderTarget);\n  }\n\n  function detachCamera(camera) {\n    if (renderTarget !== renderer.getRenderTarget()) return;\n    renderer.setRenderTarget(currentRenderTarget);\n    flush(camera);\n  }\n\n  function flush(camera) {\n    var srcRenderTarget = renderTarget;\n    var numViews = srcRenderTarget.numViews;\n\n    var srcFramebuffers = properties.get(srcRenderTarget).__webglViewFramebuffers;\n\n    var viewWidth = srcRenderTarget.width;\n    var viewHeight = srcRenderTarget.height;\n\n    if (camera.isArrayCamera) {\n      for (var i = 0; i < numViews; i++) {\n        var viewport = camera.cameras[i].viewport;\n        var x1 = viewport.x;\n        var y1 = viewport.y;\n        var x2 = x1 + viewport.z;\n        var y2 = y1 + viewport.w;\n        gl.bindFramebuffer(gl.READ_FRAMEBUFFER, srcFramebuffers[i]);\n        gl.blitFramebuffer(0, 0, viewWidth, viewHeight, x1, y1, x2, y2, gl.COLOR_BUFFER_BIT, gl.NEAREST);\n      }\n    } else {\n      gl.bindFramebuffer(gl.READ_FRAMEBUFFER, srcFramebuffers[0]);\n      gl.blitFramebuffer(0, 0, viewWidth, viewHeight, 0, 0, renderSize.x, renderSize.y, gl.COLOR_BUFFER_BIT, gl.NEAREST);\n    }\n  }\n\n  this.isAvailable = isAvailable;\n  this.attachCamera = attachCamera;\n  this.detachCamera = detachCamera;\n  this.updateCameraProjectionMatricesUniform = updateCameraProjectionMatricesUniform;\n  this.updateCameraViewMatricesUniform = updateCameraViewMatricesUniform;\n  this.updateObjectMatricesUniforms = updateObjectMatricesUniforms;\n}\n\nexport { WebGLMultiview };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/renderers/webgl/WebGLMultiview.js"],"names":["WebGLMultiviewRenderTarget","Matrix3","Matrix4","Vector2","WebGLMultiview","renderer","gl","DEFAULT_NUMVIEWS","extensions","properties","renderTarget","currentRenderTarget","mat3","mat4","cameraArray","renderSize","available","maxNumViews","isAvailable","undefined","extension","get","getContextAttributes","antialias","getParameter","MAX_VIEWS_OVR","i","getCameraArray","camera","isArrayCamera","cameras","updateCameraProjectionMatricesUniform","uniforms","length","copy","projectionMatrix","setValue","updateCameraViewMatricesUniform","matrixWorldInverse","updateObjectMatricesUniforms","object","multiplyMatrices","matrixWorld","getNormalMatrix","isMultiviewCompatible","il","viewport","z","w","resizeRenderTarget","set","width","height","getDrawingBufferSize","setSize","setNumViews","x","y","attachCamera","getRenderTarget","setRenderTarget","detachCamera","flush","srcRenderTarget","numViews","srcFramebuffers","__webglViewFramebuffers","viewWidth","viewHeight","x1","y1","x2","y2","bindFramebuffer","READ_FRAMEBUFFER","blitFramebuffer","COLOR_BUFFER_BIT","NEAREST"],"mappings":"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","sourcesContent":["/**\n * @author fernandojsg / http://fernandojsg.com\n * @author Takahiro https://github.com/takahirox\n */\n\nimport { WebGLMultiviewRenderTarget } from '../WebGLMultiviewRenderTarget.js';\nimport { Matrix3 } from '../../math/Matrix3.js';\nimport { Matrix4 } from '../../math/Matrix4.js';\nimport { Vector2 } from '../../math/Vector2.js';\n\nfunction WebGLMultiview( renderer, gl ) {\n\n\tvar DEFAULT_NUMVIEWS = 2;\n\n\tvar extensions = renderer.extensions;\n\tvar properties = renderer.properties;\n\n\tvar renderTarget, currentRenderTarget;\n\tvar mat3, mat4, cameraArray, renderSize;\n\n\tvar available;\n\tvar maxNumViews = 0;\n\n\t//\n\n\tfunction isAvailable() {\n\n\t\tif ( available === undefined ) {\n\n\t\t\tvar extension = extensions.get( 'OVR_multiview2' );\n\n\t\t\tavailable = extension !== null && gl.getContextAttributes().antialias === false;\n\n\t\t\tif ( available ) {\n\n\t\t\t\tmaxNumViews = gl.getParameter( extension.MAX_VIEWS_OVR );\n\t\t\t\trenderTarget = new WebGLMultiviewRenderTarget( 0, 0, DEFAULT_NUMVIEWS );\n\n\t\t\t\trenderSize = new Vector2();\n\t\t\t\tmat4 = [];\n\t\t\t\tmat3 = [];\n\t\t\t\tcameraArray = [];\n\n\t\t\t\tfor ( var i = 0; i < maxNumViews; i ++ ) {\n\n\t\t\t\t\tmat4[ i ] = new Matrix4();\n\t\t\t\t\tmat3[ i ] = new Matrix3();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn available;\n\n\t}\n\n\tfunction getCameraArray( camera ) {\n\n\t\tif ( camera.isArrayCamera ) return camera.cameras;\n\n\t\tcameraArray[ 0 ] = camera;\n\n\t\treturn cameraArray;\n\n\t}\n\n\tfunction updateCameraProjectionMatricesUniform( camera, uniforms ) {\n\n\t\tvar cameras = getCameraArray( camera );\n\n\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\n\n\t\t\tmat4[ i ].copy( cameras[ i ].projectionMatrix );\n\n\t\t}\n\n\t\tuniforms.setValue( gl, 'projectionMatrices', mat4 );\n\n\t}\n\n\tfunction updateCameraViewMatricesUniform( camera, uniforms ) {\n\n\t\tvar cameras = getCameraArray( camera );\n\n\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\n\n\t\t\tmat4[ i ].copy( cameras[ i ].matrixWorldInverse );\n\n\t\t}\n\n\t\tuniforms.setValue( gl, 'viewMatrices', mat4 );\n\n\t}\n\n\tfunction updateObjectMatricesUniforms( object, camera, uniforms ) {\n\n\t\tvar cameras = getCameraArray( camera );\n\n\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\n\n\t\t\tmat4[ i ].multiplyMatrices( cameras[ i ].matrixWorldInverse, object.matrixWorld );\n\t\t\tmat3[ i ].getNormalMatrix( mat4[ i ] );\n\n\t\t}\n\n\t\tuniforms.setValue( gl, 'modelViewMatrices', mat4 );\n\t\tuniforms.setValue( gl, 'normalMatrices', mat3 );\n\n\t}\n\n\tfunction isMultiviewCompatible( camera ) {\n\n\t\tif ( camera.isArrayCamera === undefined ) return true;\n\n\t\tvar cameras = camera.cameras;\n\n\t\tif ( cameras.length > maxNumViews ) return false;\n\n\t\tfor ( var i = 1, il = cameras.length; i < il; i ++ ) {\n\n\t\t\tif ( cameras[ 0 ].viewport.z !== cameras[ i ].viewport.z ||\n\t\t\t\tcameras[ 0 ].viewport.w !== cameras[ i ].viewport.w ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfunction resizeRenderTarget( camera ) {\n\n\t\tif ( currentRenderTarget ) {\n\n\t\t\trenderSize.set( currentRenderTarget.width, currentRenderTarget.height );\n\n\t\t} else {\n\n\t\t\trenderer.getDrawingBufferSize( renderSize );\n\n\t\t}\n\n\t\tif ( camera.isArrayCamera ) {\n\n\t\t\tvar viewport = camera.cameras[ 0 ].viewport;\n\n\t\t\trenderTarget.setSize( viewport.z, viewport.w );\n\t\t\trenderTarget.setNumViews( camera.cameras.length );\n\n\t\t} else {\n\n\t\t\trenderTarget.setSize( renderSize.x, renderSize.y );\n\t\t\trenderTarget.setNumViews( DEFAULT_NUMVIEWS );\n\n\t\t}\n\n\t}\n\n\tfunction attachCamera( camera ) {\n\n\t\tif ( isMultiviewCompatible( camera ) === false ) return;\n\n\t\tcurrentRenderTarget = renderer.getRenderTarget();\n\t\tresizeRenderTarget( camera );\n\t\trenderer.setRenderTarget( renderTarget );\n\n\t}\n\n\tfunction detachCamera( camera ) {\n\n\t\tif ( renderTarget !== renderer.getRenderTarget() ) return;\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\tflush( camera );\n\n\t}\n\n\tfunction flush( camera ) {\n\n\t\tvar srcRenderTarget = renderTarget;\n\t\tvar numViews = srcRenderTarget.numViews;\n\n\t\tvar srcFramebuffers = properties.get( srcRenderTarget ).__webglViewFramebuffers;\n\n\t\tvar viewWidth = srcRenderTarget.width;\n\t\tvar viewHeight = srcRenderTarget.height;\n\n\t\tif ( camera.isArrayCamera ) {\n\n\t\t\tfor ( var i = 0; i < numViews; i ++ ) {\n\n\t\t\t\tvar viewport = camera.cameras[ i ].viewport;\n\n\t\t\t\tvar x1 = viewport.x;\n\t\t\t\tvar y1 = viewport.y;\n\t\t\t\tvar x2 = x1 + viewport.z;\n\t\t\t\tvar y2 = y1 + viewport.w;\n\n\t\t\t\tgl.bindFramebuffer( gl.READ_FRAMEBUFFER, srcFramebuffers[ i ] );\n\t\t\t\tgl.blitFramebuffer( 0, 0, viewWidth, viewHeight, x1, y1, x2, y2, gl.COLOR_BUFFER_BIT, gl.NEAREST );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tgl.bindFramebuffer( gl.READ_FRAMEBUFFER, srcFramebuffers[ 0 ] );\n\t\t\tgl.blitFramebuffer( 0, 0, viewWidth, viewHeight, 0, 0, renderSize.x, renderSize.y, gl.COLOR_BUFFER_BIT, gl.NEAREST );\n\n\t\t}\n\n\t}\n\n\tthis.isAvailable = isAvailable;\n\tthis.attachCamera = attachCamera;\n\tthis.detachCamera = detachCamera;\n\tthis.updateCameraProjectionMatricesUniform = updateCameraProjectionMatricesUniform;\n\tthis.updateCameraViewMatricesUniform = updateCameraViewMatricesUniform;\n\tthis.updateObjectMatricesUniforms = updateObjectMatricesUniforms;\n\n}\n\nexport { WebGLMultiview };\n"]},"metadata":{},"sourceType":"module"}