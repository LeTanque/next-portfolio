{"ast":null,"code":"var _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef, useState, useMemo } from \"react\";\nimport * as THREE from 'three';\nimport { Canvas, extend as extendThree, useFrame, useLoader, useResource, useThree } from \"react-three-fiber\"; // Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\n\nimport { EffectComposer } from './resources/postprocessing/EffectComposer';\nimport { RenderPass } from './resources/postprocessing/RenderPass';\nimport { GlitchPass } from './resources/postprocessing/GlitchPass';\nextendThree({\n  EffectComposer,\n  RenderPass,\n  GlitchPass\n}); // import TextLoop from \"../TextLoop\";\n// const DEFAULT_LAYER = 0;\n// const OCCLUSION_LAYER = 1;\n// Cast the lighting\n\nconst Lighting = () => {\n  return __jsx(\"directionalLight\", {\n    color: \"#ffffff\",\n    intensity: 0.5,\n    position: [-2, 0, 30],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  });\n}; // The canvas houses this function, the scene. Scene is where the elements come together.\n\n\nconst SmokeParticle = () => {\n  // const { \n  //     scene,                        // Default scene\n  // } = useThree();\n  const url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n  const texture = useMemo(() => new THREE.TextureLoader().load(url), [url]); // let xFactor = 1;\n  // let yFactor = 1;\n  // let zFactor = 2;\n  // let rotationAngle = Math.random() * 360;\n  // let factor = 0.3;\n  // // let position = { x: Math.random() * 500-250, y: Math.random() * 500-250, z: 2 };\n  // // // let position = (Math.random()*500-250, Math.random()*500-250, 2);\n  // // let rotation = Math.random() * 360;\n  // console.log('ref --> ', ref);\n  // useFrame(({ clock }) => {\n  //     let delta = clock.getDelta();\n  //     // ref.current.rotation.z = ref.current.rotation.z * Math.random();\n  //     // ref.current.rotation.z += rotationAngle;\n  //     // smokeParticles[sp].rotation.z += delta * 0.2;\n  //     // ref.current.scale.z = 3;\n  //     ref.current.position.x = Math.sin(xFactor++) * factor;\n  //     ref.current.position.y = Math.cos(factor) * (yFactor++ * Math.random());\n  //     ref.current.position.z = 2;\n  //     ref.current.rotation.z = Math.random() * factor;\n  //     // ref.current.rotation.set( 0, 0, \n  //     //     delta * Math.cos(factor) \n  //     // );\n  //     // ref.current.position.set(\n  //     //     1,\n  //     //     (Math.cos(clock.getElapsedTime()) * 1.5),\n  //     //     // (ref.current.position.z += 0.01) * zFactor,\n  //     //     2,\n  //     //     // xFactor,\n  //     //     // yFactor,\n  //     //     // zFactor\n  //     // );\n  // })\n  // console.log('ref --> ', ref);\n  // if (ref && ref.current && ref.current.parent) {\n  //     ref.current.parent.scale.z = 1.22;\n  // }\n\n  return __jsx(React.Fragment, null, __jsx(\"planeGeometry\", {\n    attach: \"geometry\",\n    args: [200, 200],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }), __jsx(\"meshLambertMaterial\", {\n    attach: \"material\",\n    color: \"#ccbbee\",\n    transparent: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, __jsx(\"primitive\", {\n    attach: \"map\",\n    object: texture,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  })));\n};\n\nconst GenerateSmoke = ({\n  particleArray\n}) => {\n  // const { clock } = useThree();\n  const ref = useRef();\n\n  const getRandomArbitrary = (min, max) => {\n    return Math.random() * (max - min) + min;\n  }; // let xFactor = 1;\n  // let yFactor = 1;\n  // let zFactor = 2;\n  // let rotationAngle = Math.random() * 360;\n  // let factor = 0.1;\n  // let zeroTo10 = ( Math.sin(2) * (10 * Math.random()) + 2 ) * eachParticle.x;\n\n\n  let randomFactor = getRandomArbitrary(2, 3);\n  useFrame(({\n    clock\n  }) => {\n    let delta = clock.getDelta(); // let slowsThenStops = Math.tanh(clock.elapsedTime);\n    // ref.current.rotation.z = ((clock.elapsedTime) / (clock.elapsedTime - delta));\n    // ref.current.rotation.z = Math.tan(clock.elapsedTime * Math.PI / 180);\n    // ref.current.rotation.z +=  Math.tan(Math.sqrt(3)) ;\n    // ref.current.rotation.z = Math.tanh(clock.elapsedTime / 18);  // Starts, slows to eventual stop\n\n    ref.current.rotation.z = clock.elapsedTime * (delta + 0.008) * randomFactor;\n    console.log('ref.current.rotation.z --> ', ref.current.rotation.z);\n    console.log('randomFactor --> ', randomFactor, delta); // console.log('ref.current.rotation.z --> ', ref.current.rotation.z);\n    // ref.current.position.x = Math.sin(xFactor++) * factor;\n    // ref.current.position.y = Math.cos(factor) * (yFactor++ * Math.random());\n    // ref.current.position.z = 2;\n    // ref.current.rotation.z = Math.random() * factor;\n  }); // console.log('ref & particleArray --> ', ref, particleArray);\n\n  return __jsx(React.Fragment, null, __jsx(\"mesh\", {\n    ref: ref // rotation={[ 0, 0, 0 ]}\n    ,\n    visible: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, __jsx(SmokeParticle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }))) // <>\n  //     {particleArray.map((eachParticle, index) => (\n  //         <React.Fragment key={index} >\n  //             <mesh \n  //                 ref={ref}\n  //                 position={[ eachParticle.x, eachParticle.y, eachParticle.z ]}\n  //                 visible \n  //             >\n  //                 {console.log('eachParticle --> ', eachParticle)}\n  //                 <SmokeParticle  />\n  //             </mesh>\n  //         </React.Fragment>\n  //     ))}\n  // </>\n  ;\n}; // This is the canvas. It's the lowest level element in the three/webGl chain\n\n\nconst CanvasicalSmoke = () => {\n  const particleCount = 3;\n  const particleArray = [{\n    id: 0,\n    x: 0,\n    y: 0,\n    z: 2\n  }];\n  useEffect(() => {\n    if (particleArray.length === particleCount) {\n      return null;\n    } else {\n      for (let i = 0; i <= particleCount; i++) {\n        particleArray.push({\n          id: particleArray[i].id + 1,\n          x: particleArray[i].x + 1,\n          y: particleArray[i].y + 1,\n          z: 2\n        });\n      }\n    }\n  }, [particleArray]);\n  return __jsx(React.Fragment, null, __jsx(Canvas, {\n    className: \"container block__three-container\",\n    camera: {\n      fov: 75,\n      aspect: 0.5,\n      near: 1,\n      far: 10000,\n      position: [0, 0, 300]\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, __jsx(Lighting, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }), __jsx(GenerateSmoke, {\n    particleArray: particleArray,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  })));\n};\n\nexport default CanvasicalSmoke; // // Creates a fullscreen colored plane\n// const Plane = () => {\n//     return (\n//         <mesh >\n//             <planeGeometry  attach=\"geometry\"  args={[ 32, 32, 32, 32 ]} />\n//             <meshPhysicalMaterial  attach=\"material\"  color=\"#ffffff\"  />\n//         </mesh>\n//     )\n// }\n// // A light bar\n// const LightBar = () => {\n//     // const lightBar = useRef();\n//     return (\n//         <>\n//             <mesh \n//                 // ref={lightBar} \n//             >\n//                 <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n//                 <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n//             </mesh>\n//         </>\n//     )\n// }","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx"],"names":["extend","extendThree","GlitchPass","Lighting","SmokeParticle","url","texture","useMemo","THREE","GenerateSmoke","particleArray","ref","useRef","getRandomArbitrary","Math","max","randomFactor","useFrame","clock","delta","console","CanvasicalSmoke","particleCount","id","x","y","z","useEffect","i","fov","aspect","near","far","position"],"mappings":";;AAAA,OAAA,KAAA,IAAA,WAAA,EAAA,SAAA,EAAA,MAAA,EAAA,QAAA,EAAA,OAAA,QAAA,OAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,MAAA,EAEIA,MAAM,IAFV,WAAA,EAAA,QAAA,EAAA,SAAA,EAAA,WAAA,EAAA,QAAA,QAAA,mBAAA,C,CASA;AACA;;AACA,SAAA,cAAA,QAAA,2CAAA;AACA,SAAA,UAAA,QAAA,uCAAA;AACA,SAAA,UAAA,QAAA,uCAAA;AACAC,WAAW,CAAC;AAAA,EAAA,cAAA;AAAA,EAAA,UAAA;AAA8BC,EAAAA;AAA9B,CAAD,CAAXD,C,CAEA;AAGA;AACA;AAIA;;AACA,MAAME,QAAQ,GAAG,MAAM;AACnB,SACI,KAAA,CAAA,kBAAA,EAAA;AACI,IAAA,KAAK,EADT,SAAA;AAEI,IAAA,SAAS,EAFb,GAAA;AAGI,IAAA,QAAQ,EAAE,CAAE,CAAF,CAAA,EAAA,CAAA,EAHd,EAGc,CAHd;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA;AAAA,KAAA;AAAA,IAAA,MAAA,EAAA;AAAA,GAAA,CADJ;AADJ,CAAA,C,CAUA;;;AACA,MAAMC,aAAa,GAAG,MAAM;AACxB;AACA;AACA;AAEA,QAAMC,GAAG,GAAT,sEAAA;AACA,QAAMC,OAAO,GAAGC,OAAO,CAAC,MAAM,IAAIC,KAAK,CAAT,aAAA,GAAA,IAAA,CAAP,GAAO,CAAP,EAA4C,CAN3C,GAM2C,CAA5C,CAAvB,CANwB,CAQxB;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,SACI,KAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACI,KAAA,CAAA,eAAA,EAAA;AACI,IAAA,MAAM,EADV,UAAA;AAEI,IAAA,IAAI,EAAE,CAAA,GAAA,EAFV,GAEU,CAFV;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA;AAAA,KAAA;AAAA,IAAA,MAAA,EAAA;AAAA,GAAA,CADJ,EAMI,KAAA,CAAA,qBAAA,EAAA;AACI,IAAA,MAAM,EADV,UAAA;AAEI,IAAA,KAAK,EAFT,SAAA;AAGI,IAAA,WAAW,EAHf,IAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA;AAAA,KAAA;AAAA,IAAA,MAAA,EAAA;AAAA,GAAA,EAKI,KAAA,CAAA,WAAA,EAAA;AAAW,IAAA,MAAM,EAAjB,KAAA;AAAwB,IAAA,MAAM,EAA9B,OAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA;AAAA,KAAA;AAAA,IAAA,MAAA,EAAA;AAAA,GAAA,CALJ,CANJ,CADJ;AAlDJ,CAAA;;AAsEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAuB;AACzC;AACA,QAAMC,GAAG,GAAGC,MAAZ,EAAA;;AAGA,QAAMC,kBAAkB,GAAG,CAAA,GAAA,EAAA,GAAA,KAAc;AACrC,WAAOC,IAAI,CAAJA,MAAAA,MAAiBC,GAAG,GAApBD,GAAAA,IAAP,GAAA;AANqC,GAKzC,CALyC,CASzC;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAIE,YAAY,GAAGH,kBAAkB,CAAA,CAAA,EAArC,CAAqC,CAArC;AAIAI,EAAAA,QAAQ,CAAC,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAe;AACpB,QAAIC,KAAK,GAAGD,KAAK,CADG,QACRA,EAAZ,CADoB,CAEpB;AACA;AACA;AACA;AACA;;AACAP,IAAAA,GAAG,CAAHA,OAAAA,CAAAA,QAAAA,CAAAA,CAAAA,GAA0BO,KAAK,CAALA,WAAAA,IAAqBC,KAAK,GAA3B,KAACD,IAA1BP,YAAAA;AACAS,IAAAA,OAAO,CAAPA,GAAAA,CAAAA,6BAAAA,EAA2CT,GAAG,CAAHA,OAAAA,CAAAA,QAAAA,CAA3CS,CAAAA;AACAA,IAAAA,OAAO,CAAPA,GAAAA,CAAAA,mBAAAA,EAAAA,YAAAA,EAToB,KASpBA,EAToB,CAUpB;AAEA;AACA;AACA;AACA;AAlCqC,GAmBjC,CAARH,CAnByC,CAqCzC;;AAGA,SACI,KAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACI,KAAA,CAAA,MAAA,EAAA;AACI,IAAA,GAAG,EADP,GAAA,CAEI;AAFJ;AAGI,IAAA,OAAO,EAHX,IAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA;AAAA,KAAA;AAAA,IAAA,MAAA,EAAA;AAAA,GAAA,EAKI,KAAA,CAAA,aAAA,EAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA;AAAA,KAAA;AAAA,IAAA,MAAA,EAAA;AAAA,GAAA,CALJ,CADJ,CADJ,CAUI;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBJ;AAxCJ,CAAA,C,CAoEA;;;AACA,MAAMI,eAAe,GAAG,MAAM;AAC1B,QAAMC,aAAa,GAAnB,CAAA;AACA,QAAMZ,aAAa,GAAG,CAAC;AAAEa,IAAAA,EAAE,EAAJ,CAAA;AAASC,IAAAA,CAAC,EAAV,CAAA;AAAeC,IAAAA,CAAC,EAAhB,CAAA;AAAqBC,IAAAA,CAAC,EAAE;AAAxB,GAAD,CAAtB;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIjB,aAAa,CAAbA,MAAAA,KAAJ,aAAA,EAA4C;AACxC,aAAA,IAAA;AADJ,KAAA,MAEO;AACH,WAAK,IAAIkB,CAAC,GAAV,CAAA,EAAcA,CAAC,IAAf,aAAA,EAAkCA,CAAlC,EAAA,EAAuC;AACnClB,QAAAA,aAAa,CAAbA,IAAAA,CAAmB;AACfa,UAAAA,EAAE,EAAEb,aAAa,CAAbA,CAAa,CAAbA,CAAAA,EAAAA,GADW,CAAA;AAEfc,UAAAA,CAAC,EAAEd,aAAa,CAAbA,CAAa,CAAbA,CAAAA,CAAAA,GAFY,CAAA;AAGfe,UAAAA,CAAC,EAAEf,aAAa,CAAbA,CAAa,CAAbA,CAAAA,CAAAA,GAHY,CAAA;AAIfgB,UAAAA,CAAC,EAAE;AAJY,SAAnBhB;AAMH;AACJ;AAZI,GAAA,EAaN,CAbHiB,aAaG,CAbM,CAATA;AAeA,SACI,KAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACI,KAAA,CAAA,MAAA,EAAA;AACI,IAAA,SAAS,EADb,kCAAA;AAEI,IAAA,MAAM,EAAE;AACJE,MAAAA,GAAG,EADC,EAAA;AAEJC,MAAAA,MAAM,EAFF,GAAA;AAGJC,MAAAA,IAAI,EAHA,CAAA;AAIJC,MAAAA,GAAG,EAJC,KAAA;AAKJC,MAAAA,QAAQ,EAAE,CAAA,CAAA,EAAA,CAAA,EAAA,GAAA;AALN,KAFZ;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA;AAAA,KAAA;AAAA,IAAA,MAAA,EAAA;AAAA,GAAA,EAWI,KAAA,CAAA,QAAA,EAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA;AAAA,KAAA;AAAA,IAAA,MAAA,EAAA;AAAA,GAAA,CAXJ,EAYI,KAAA,CAAA,aAAA,EAAA;AAAgB,IAAA,aAAa,EAA7B,aAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA;AAAA,KAAA;AAAA,IAAA,MAAA,EAAA;AAAA,GAAA,CAZJ,CADJ,CADJ;AAnBJ,CAAA;;AAyCA,eAAA,eAAA,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useCallback, useEffect, useRef, useState, useMemo } from \"react\";\nimport * as THREE from 'three';\nimport {\n    Canvas,\n    extend as extendThree,\n    useFrame,\n    useLoader,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\n\n// Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\nimport { EffectComposer } from './resources/postprocessing/EffectComposer';\nimport { RenderPass } from './resources/postprocessing/RenderPass';\nimport { GlitchPass } from './resources/postprocessing/GlitchPass';\nextendThree({ EffectComposer, RenderPass, GlitchPass });\n\n// import TextLoop from \"../TextLoop\";\n\n\n// const DEFAULT_LAYER = 0;\n// const OCCLUSION_LAYER = 1;\n\n\n\n// Cast the lighting\nconst Lighting = () => {\n    return (\n        <directionalLight\n            color=\"#ffffff\"\n            intensity={0.5}\n            position={[ -2, 0, 30 ]} \n        />\n    )\n}\n\n// The canvas houses this function, the scene. Scene is where the elements come together.\nconst SmokeParticle = () => {\n    // const { \n    //     scene,                        // Default scene\n    // } = useThree();\n\n    const url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n    const texture = useMemo(() => new THREE.TextureLoader().load(url), [url]);\n    \n    // let xFactor = 1;\n    // let yFactor = 1;\n    // let zFactor = 2;\n    // let rotationAngle = Math.random() * 360;\n    // let factor = 0.3;\n    \n    // // let position = { x: Math.random() * 500-250, y: Math.random() * 500-250, z: 2 };\n    // // // let position = (Math.random()*500-250, Math.random()*500-250, 2);\n    // // let rotation = Math.random() * 360;\n    \n    // console.log('ref --> ', ref);\n\n\n    // useFrame(({ clock }) => {\n    //     let delta = clock.getDelta();\n    //     // ref.current.rotation.z = ref.current.rotation.z * Math.random();\n    //     // ref.current.rotation.z += rotationAngle;\n    //     // smokeParticles[sp].rotation.z += delta * 0.2;\n    //     // ref.current.scale.z = 3;\n    //     ref.current.position.x = Math.sin(xFactor++) * factor;\n    //     ref.current.position.y = Math.cos(factor) * (yFactor++ * Math.random());\n    //     ref.current.position.z = 2;\n    //     ref.current.rotation.z = Math.random() * factor;\n    //     // ref.current.rotation.set( 0, 0, \n    //     //     delta * Math.cos(factor) \n    //     // );\n    //     // ref.current.position.set(\n    //     //     1,\n    //     //     (Math.cos(clock.getElapsedTime()) * 1.5),\n    //     //     // (ref.current.position.z += 0.01) * zFactor,\n    //     //     2,\n    //     //     // xFactor,\n    //     //     // yFactor,\n    //     //     // zFactor\n    //     // );\n    // })\n        \n    // console.log('ref --> ', ref);\n    // if (ref && ref.current && ref.current.parent) {\n    //     ref.current.parent.scale.z = 1.22;\n    // }\n\n    return (\n        <>\n            <planeGeometry \n                attach=\"geometry\"   \n                args={[200, 200]} \n            />\n\n            <meshLambertMaterial \n                attach=\"material\" \n                color=\"#ccbbee\"\n                transparent\n            >\n                <primitive attach=\"map\" object={texture} />\n            </ meshLambertMaterial>\n\n        </>\n    )\n}\n\n\nconst GenerateSmoke = ({ particleArray }) => {\n    // const { clock } = useThree();\n    const ref = useRef();\n\n\n    const getRandomArbitrary = (min, max) => {\n        return Math.random() * (max - min) + min;\n    }\n    \n    // let xFactor = 1;\n    // let yFactor = 1;\n    // let zFactor = 2;\n    // let rotationAngle = Math.random() * 360;\n    // let factor = 0.1;\n    // let zeroTo10 = ( Math.sin(2) * (10 * Math.random()) + 2 ) * eachParticle.x;\n    let randomFactor = getRandomArbitrary(2, 3);\n    \n\n    \n    useFrame(({ clock }) => {\n        let delta = clock.getDelta();\n        // let slowsThenStops = Math.tanh(clock.elapsedTime);\n        // ref.current.rotation.z = ((clock.elapsedTime) / (clock.elapsedTime - delta));\n        // ref.current.rotation.z = Math.tan(clock.elapsedTime * Math.PI / 180);\n        // ref.current.rotation.z +=  Math.tan(Math.sqrt(3)) ;\n        // ref.current.rotation.z = Math.tanh(clock.elapsedTime / 18);  // Starts, slows to eventual stop\n        ref.current.rotation.z = (clock.elapsedTime * (delta + 0.008)) * randomFactor;\n        console.log('ref.current.rotation.z --> ', ref.current.rotation.z);\n        console.log('randomFactor --> ', randomFactor, delta);\n        // console.log('ref.current.rotation.z --> ', ref.current.rotation.z);\n\n        // ref.current.position.x = Math.sin(xFactor++) * factor;\n        // ref.current.position.y = Math.cos(factor) * (yFactor++ * Math.random());\n        // ref.current.position.z = 2;\n        // ref.current.rotation.z = Math.random() * factor;\n    });\n\n    // console.log('ref & particleArray --> ', ref, particleArray);\n    \n\n    return (\n        <>\n            <mesh \n                ref={ref}\n                // rotation={[ 0, 0, 0 ]}\n                visible \n            >\n                <SmokeParticle  />\n            </mesh>\n        </>\n        // <>\n        //     {particleArray.map((eachParticle, index) => (\n        //         <React.Fragment key={index} >\n        //             <mesh \n        //                 ref={ref}\n                        \n        //                 position={[ eachParticle.x, eachParticle.y, eachParticle.z ]}\n        //                 visible \n        //             >\n        //                 {console.log('eachParticle --> ', eachParticle)}\n        //                 <SmokeParticle  />\n        //             </mesh>\n        //         </React.Fragment>\n        //     ))}\n        // </>\n    )\n}\n\n// This is the canvas. It's the lowest level element in the three/webGl chain\nconst CanvasicalSmoke = () => {\n    const particleCount = 3;\n    const particleArray = [{ id: 0, x: 0, y: 0, z: 2 }];\n\n    useEffect(() => {\n        if (particleArray.length === particleCount) {\n            return null;\n        } else {\n            for (let i=0; i <= particleCount; i++) {\n                particleArray.push({ \n                    id: particleArray[i].id + 1, \n                    x: particleArray[i].x + 1, \n                    y: particleArray[i].y + 1, \n                    z: 2  \n                })\n            }\n        }\n    }, [particleArray])\n\n    return (\n        <>\n            <Canvas\n                className=\"container block__three-container\" \n                camera={{ \n                    fov: 75, \n                    aspect: 0.5,\n                    near: 1,\n                    far: 10000,\n                    position: [ 0, 0, 300 ]\n                }} \n\n            >\n                <Lighting />\n                <GenerateSmoke  particleArray={particleArray} />\n            </Canvas> \n           \n            {/* <TextLoop  /> */}\n        </>\n    );\n}\n\nexport default CanvasicalSmoke;\n\n\n// // Creates a fullscreen colored plane\n// const Plane = () => {\n//     return (\n//         <mesh >\n//             <planeGeometry  attach=\"geometry\"  args={[ 32, 32, 32, 32 ]} />\n//             <meshPhysicalMaterial  attach=\"material\"  color=\"#ffffff\"  />\n//         </mesh>\n//     )\n// }\n\n\n// // A light bar\n// const LightBar = () => {\n//     // const lightBar = useRef();\n\n//     return (\n//         <>\n//             <mesh \n//                 // ref={lightBar} \n//             >\n//                 <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n//                 <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n//             </mesh>\n//         </>\n//     )\n// }\n"]},"metadata":{},"sourceType":"module"}