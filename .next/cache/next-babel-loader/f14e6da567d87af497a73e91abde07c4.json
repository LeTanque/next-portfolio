{"ast":null,"code":"import _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\n\n/**\n * @author oosmoxiecode\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\nimport { Geometry } from '../core/Geometry.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { Vector3 } from '../math/Vector3.js'; // TorusGeometry\n\nfunction TorusGeometry(radius, tube, radialSegments, tubularSegments, arc) {\n  Geometry.call(this);\n  this.type = 'TorusGeometry';\n  this.parameters = {\n    radius: radius,\n    tube: tube,\n    radialSegments: radialSegments,\n    tubularSegments: tubularSegments,\n    arc: arc\n  };\n  this.fromBufferGeometry(new TorusBufferGeometry(radius, tube, radialSegments, tubularSegments, arc));\n  this.mergeVertices();\n}\n\nTorusGeometry.prototype = _Object$create(Geometry.prototype);\nTorusGeometry.prototype.constructor = TorusGeometry; // TorusBufferGeometry\n\nfunction TorusBufferGeometry(radius, tube, radialSegments, tubularSegments, arc) {\n  BufferGeometry.call(this);\n  this.type = 'TorusBufferGeometry';\n  this.parameters = {\n    radius: radius,\n    tube: tube,\n    radialSegments: radialSegments,\n    tubularSegments: tubularSegments,\n    arc: arc\n  };\n  radius = radius || 1;\n  tube = tube || 0.4;\n  radialSegments = Math.floor(radialSegments) || 8;\n  tubularSegments = Math.floor(tubularSegments) || 6;\n  arc = arc || Math.PI * 2; // buffers\n\n  var indices = [];\n  var vertices = [];\n  var normals = [];\n  var uvs = []; // helper variables\n\n  var center = new Vector3();\n  var vertex = new Vector3();\n  var normal = new Vector3();\n  var j, i; // generate vertices, normals and uvs\n\n  for (j = 0; j <= radialSegments; j++) {\n    for (i = 0; i <= tubularSegments; i++) {\n      var u = i / tubularSegments * arc;\n      var v = j / radialSegments * Math.PI * 2; // vertex\n\n      vertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);\n      vertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);\n      vertex.z = tube * Math.sin(v);\n      vertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n      center.x = radius * Math.cos(u);\n      center.y = radius * Math.sin(u);\n      normal.subVectors(vertex, center).normalize();\n      normals.push(normal.x, normal.y, normal.z); // uv\n\n      uvs.push(i / tubularSegments);\n      uvs.push(j / radialSegments);\n    }\n  } // generate indices\n\n\n  for (j = 1; j <= radialSegments; j++) {\n    for (i = 1; i <= tubularSegments; i++) {\n      // indices\n      var a = (tubularSegments + 1) * j + i - 1;\n      var b = (tubularSegments + 1) * (j - 1) + i - 1;\n      var c = (tubularSegments + 1) * (j - 1) + i;\n      var d = (tubularSegments + 1) * j + i; // faces\n\n      indices.push(a, b, d);\n      indices.push(b, c, d);\n    }\n  } // build geometry\n\n\n  this.setIndex(indices);\n  this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n  this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n  this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n}\n\nTorusBufferGeometry.prototype = _Object$create(BufferGeometry.prototype);\nTorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\nexport { TorusGeometry, TorusBufferGeometry };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/geometries/TorusGeometry.js"],"names":["Geometry","BufferGeometry","Float32BufferAttribute","Vector3","TorusGeometry","radius","tube","radialSegments","tubularSegments","arc","call","type","parameters","fromBufferGeometry","TorusBufferGeometry","mergeVertices","prototype","constructor","Math","floor","PI","indices","vertices","normals","uvs","center","vertex","normal","j","i","u","v","x","cos","y","sin","z","push","subVectors","normalize","a","b","c","d","setIndex","setAttribute"],"mappings":";;AAAA;;;;;AAMA,SAASA,QAAT,QAAyB,qBAAzB;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,sBAAT,QAAuC,4BAAvC;AACA,SAASC,OAAT,QAAwB,oBAAxB,C,CAEA;;AAEA,SAASC,aAAT,CAAwBC,MAAxB,EAAgCC,IAAhC,EAAsCC,cAAtC,EAAsDC,eAAtD,EAAuEC,GAAvE,EAA6E;AAE5ET,EAAAA,QAAQ,CAACU,IAAT,CAAe,IAAf;AAEA,OAAKC,IAAL,GAAY,eAAZ;AAEA,OAAKC,UAAL,GAAkB;AACjBP,IAAAA,MAAM,EAAEA,MADS;AAEjBC,IAAAA,IAAI,EAAEA,IAFW;AAGjBC,IAAAA,cAAc,EAAEA,cAHC;AAIjBC,IAAAA,eAAe,EAAEA,eAJA;AAKjBC,IAAAA,GAAG,EAAEA;AALY,GAAlB;AAQA,OAAKI,kBAAL,CAAyB,IAAIC,mBAAJ,CAAyBT,MAAzB,EAAiCC,IAAjC,EAAuCC,cAAvC,EAAuDC,eAAvD,EAAwEC,GAAxE,CAAzB;AACA,OAAKM,aAAL;AAEA;;AAEDX,aAAa,CAACY,SAAd,GAA0B,eAAehB,QAAQ,CAACgB,SAAxB,CAA1B;AACAZ,aAAa,CAACY,SAAd,CAAwBC,WAAxB,GAAsCb,aAAtC,C,CAEA;;AAEA,SAASU,mBAAT,CAA8BT,MAA9B,EAAsCC,IAAtC,EAA4CC,cAA5C,EAA4DC,eAA5D,EAA6EC,GAA7E,EAAmF;AAElFR,EAAAA,cAAc,CAACS,IAAf,CAAqB,IAArB;AAEA,OAAKC,IAAL,GAAY,qBAAZ;AAEA,OAAKC,UAAL,GAAkB;AACjBP,IAAAA,MAAM,EAAEA,MADS;AAEjBC,IAAAA,IAAI,EAAEA,IAFW;AAGjBC,IAAAA,cAAc,EAAEA,cAHC;AAIjBC,IAAAA,eAAe,EAAEA,eAJA;AAKjBC,IAAAA,GAAG,EAAEA;AALY,GAAlB;AAQAJ,EAAAA,MAAM,GAAGA,MAAM,IAAI,CAAnB;AACAC,EAAAA,IAAI,GAAGA,IAAI,IAAI,GAAf;AACAC,EAAAA,cAAc,GAAGW,IAAI,CAACC,KAAL,CAAYZ,cAAZ,KAAgC,CAAjD;AACAC,EAAAA,eAAe,GAAGU,IAAI,CAACC,KAAL,CAAYX,eAAZ,KAAiC,CAAnD;AACAC,EAAAA,GAAG,GAAGA,GAAG,IAAIS,IAAI,CAACE,EAAL,GAAU,CAAvB,CAlBkF,CAoBlF;;AAEA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,GAAG,GAAG,EAAV,CAzBkF,CA2BlF;;AAEA,MAAIC,MAAM,GAAG,IAAItB,OAAJ,EAAb;AACA,MAAIuB,MAAM,GAAG,IAAIvB,OAAJ,EAAb;AACA,MAAIwB,MAAM,GAAG,IAAIxB,OAAJ,EAAb;AAEA,MAAIyB,CAAJ,EAAOC,CAAP,CAjCkF,CAmClF;;AAEA,OAAMD,CAAC,GAAG,CAAV,EAAaA,CAAC,IAAIrB,cAAlB,EAAkCqB,CAAC,EAAnC,EAAyC;AAExC,SAAMC,CAAC,GAAG,CAAV,EAAaA,CAAC,IAAIrB,eAAlB,EAAmCqB,CAAC,EAApC,EAA0C;AAEzC,UAAIC,CAAC,GAAGD,CAAC,GAAGrB,eAAJ,GAAsBC,GAA9B;AACA,UAAIsB,CAAC,GAAGH,CAAC,GAAGrB,cAAJ,GAAqBW,IAAI,CAACE,EAA1B,GAA+B,CAAvC,CAHyC,CAKzC;;AAEAM,MAAAA,MAAM,CAACM,CAAP,GAAW,CAAE3B,MAAM,GAAGC,IAAI,GAAGY,IAAI,CAACe,GAAL,CAAUF,CAAV,CAAlB,IAAoCb,IAAI,CAACe,GAAL,CAAUH,CAAV,CAA/C;AACAJ,MAAAA,MAAM,CAACQ,CAAP,GAAW,CAAE7B,MAAM,GAAGC,IAAI,GAAGY,IAAI,CAACe,GAAL,CAAUF,CAAV,CAAlB,IAAoCb,IAAI,CAACiB,GAAL,CAAUL,CAAV,CAA/C;AACAJ,MAAAA,MAAM,CAACU,CAAP,GAAW9B,IAAI,GAAGY,IAAI,CAACiB,GAAL,CAAUJ,CAAV,CAAlB;AAEAT,MAAAA,QAAQ,CAACe,IAAT,CAAeX,MAAM,CAACM,CAAtB,EAAyBN,MAAM,CAACQ,CAAhC,EAAmCR,MAAM,CAACU,CAA1C,EAXyC,CAazC;;AAEAX,MAAAA,MAAM,CAACO,CAAP,GAAW3B,MAAM,GAAGa,IAAI,CAACe,GAAL,CAAUH,CAAV,CAApB;AACAL,MAAAA,MAAM,CAACS,CAAP,GAAW7B,MAAM,GAAGa,IAAI,CAACiB,GAAL,CAAUL,CAAV,CAApB;AACAH,MAAAA,MAAM,CAACW,UAAP,CAAmBZ,MAAnB,EAA2BD,MAA3B,EAAoCc,SAApC;AAEAhB,MAAAA,OAAO,CAACc,IAAR,CAAcV,MAAM,CAACK,CAArB,EAAwBL,MAAM,CAACO,CAA/B,EAAkCP,MAAM,CAACS,CAAzC,EAnByC,CAqBzC;;AAEAZ,MAAAA,GAAG,CAACa,IAAJ,CAAUR,CAAC,GAAGrB,eAAd;AACAgB,MAAAA,GAAG,CAACa,IAAJ,CAAUT,CAAC,GAAGrB,cAAd;AAEA;AAED,GAnEiF,CAqElF;;;AAEA,OAAMqB,CAAC,GAAG,CAAV,EAAaA,CAAC,IAAIrB,cAAlB,EAAkCqB,CAAC,EAAnC,EAAyC;AAExC,SAAMC,CAAC,GAAG,CAAV,EAAaA,CAAC,IAAIrB,eAAlB,EAAmCqB,CAAC,EAApC,EAA0C;AAEzC;AAEA,UAAIW,CAAC,GAAG,CAAEhC,eAAe,GAAG,CAApB,IAA0BoB,CAA1B,GAA8BC,CAA9B,GAAkC,CAA1C;AACA,UAAIY,CAAC,GAAG,CAAEjC,eAAe,GAAG,CAApB,KAA4BoB,CAAC,GAAG,CAAhC,IAAsCC,CAAtC,GAA0C,CAAlD;AACA,UAAIa,CAAC,GAAG,CAAElC,eAAe,GAAG,CAApB,KAA4BoB,CAAC,GAAG,CAAhC,IAAsCC,CAA9C;AACA,UAAIc,CAAC,GAAG,CAAEnC,eAAe,GAAG,CAApB,IAA0BoB,CAA1B,GAA8BC,CAAtC,CAPyC,CASzC;;AAEAR,MAAAA,OAAO,CAACgB,IAAR,CAAcG,CAAd,EAAiBC,CAAjB,EAAoBE,CAApB;AACAtB,MAAAA,OAAO,CAACgB,IAAR,CAAcI,CAAd,EAAiBC,CAAjB,EAAoBC,CAApB;AAEA;AAED,GAzFiF,CA2FlF;;;AAEA,OAAKC,QAAL,CAAevB,OAAf;AACA,OAAKwB,YAAL,CAAmB,UAAnB,EAA+B,IAAI3C,sBAAJ,CAA4BoB,QAA5B,EAAsC,CAAtC,CAA/B;AACA,OAAKuB,YAAL,CAAmB,QAAnB,EAA6B,IAAI3C,sBAAJ,CAA4BqB,OAA5B,EAAqC,CAArC,CAA7B;AACA,OAAKsB,YAAL,CAAmB,IAAnB,EAAyB,IAAI3C,sBAAJ,CAA4BsB,GAA5B,EAAiC,CAAjC,CAAzB;AAEA;;AAEDV,mBAAmB,CAACE,SAApB,GAAgC,eAAef,cAAc,CAACe,SAA9B,CAAhC;AACAF,mBAAmB,CAACE,SAApB,CAA8BC,WAA9B,GAA4CH,mBAA5C;AAGA,SAASV,aAAT,EAAwBU,mBAAxB","sourcesContent":["/**\n * @author oosmoxiecode\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nimport { Geometry } from '../core/Geometry.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { Vector3 } from '../math/Vector3.js';\n\n// TorusGeometry\n\nfunction TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'TorusGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\ttube: tube,\n\t\tradialSegments: radialSegments,\n\t\ttubularSegments: tubularSegments,\n\t\tarc: arc\n\t};\n\n\tthis.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\n\tthis.mergeVertices();\n\n}\n\nTorusGeometry.prototype = Object.create( Geometry.prototype );\nTorusGeometry.prototype.constructor = TorusGeometry;\n\n// TorusBufferGeometry\n\nfunction TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'TorusBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\ttube: tube,\n\t\tradialSegments: radialSegments,\n\t\ttubularSegments: tubularSegments,\n\t\tarc: arc\n\t};\n\n\tradius = radius || 1;\n\ttube = tube || 0.4;\n\tradialSegments = Math.floor( radialSegments ) || 8;\n\ttubularSegments = Math.floor( tubularSegments ) || 6;\n\tarc = arc || Math.PI * 2;\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// helper variables\n\n\tvar center = new Vector3();\n\tvar vertex = new Vector3();\n\tvar normal = new Vector3();\n\n\tvar j, i;\n\n\t// generate vertices, normals and uvs\n\n\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\tvar u = i / tubularSegments * arc;\n\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\tcenter.y = radius * Math.sin( u );\n\t\t\tnormal.subVectors( vertex, center ).normalize();\n\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t// uv\n\n\t\t\tuvs.push( i / tubularSegments );\n\t\t\tuvs.push( j / radialSegments );\n\n\t\t}\n\n\t}\n\n\t// generate indices\n\n\tfor ( j = 1; j <= radialSegments; j ++ ) {\n\n\t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\n\n\t\t\t// indices\n\n\t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\tvar d = ( tubularSegments + 1 ) * j + i;\n\n\t\t\t// faces\n\n\t\t\tindices.push( a, b, d );\n\t\t\tindices.push( b, c, d );\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n}\n\nTorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nTorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\n\n\nexport { TorusGeometry, TorusBufferGeometry };\n"]},"metadata":{},"sourceType":"module"}