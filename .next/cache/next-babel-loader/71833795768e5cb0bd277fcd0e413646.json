{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n *\n * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n *\n */\nfunction Cylindrical(radius, theta, y) {\n  this.radius = radius !== undefined ? radius : 1.0; // distance from the origin to a point in the x-z plane\n\n  this.theta = theta !== undefined ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\n  this.y = y !== undefined ? y : 0; // height above the x-z plane\n\n  return this;\n}\n\n_Object$assign(Cylindrical.prototype, {\n  set: function set(radius, theta, y) {\n    this.radius = radius;\n    this.theta = theta;\n    this.y = y;\n    return this;\n  },\n  clone: function clone() {\n    return new this.constructor().copy(this);\n  },\n  copy: function copy(other) {\n    this.radius = other.radius;\n    this.theta = other.theta;\n    this.y = other.y;\n    return this;\n  },\n  setFromVector3: function setFromVector3(v) {\n    return this.setFromCartesianCoords(v.x, v.y, v.z);\n  },\n  setFromCartesianCoords: function setFromCartesianCoords(x, y, z) {\n    this.radius = Math.sqrt(x * x + z * z);\n    this.theta = Math.atan2(x, z);\n    this.y = y;\n    return this;\n  }\n});\n\nexport { Cylindrical };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/math/Cylindrical.js"],"names":["Cylindrical","radius","theta","y","undefined","prototype","set","clone","constructor","copy","other","setFromVector3","v","setFromCartesianCoords","x","z","Math","sqrt","atan2"],"mappings":";;AAAA;;;;;;AAOA,SAASA,WAAT,CAAsBC,MAAtB,EAA8BC,KAA9B,EAAqCC,CAArC,EAAyC;AAExC,OAAKF,MAAL,GAAgBA,MAAM,KAAKG,SAAb,GAA2BH,MAA3B,GAAoC,GAAlD,CAFwC,CAEe;;AACvD,OAAKC,KAAL,GAAeA,KAAK,KAAKE,SAAZ,GAA0BF,KAA1B,GAAkC,CAA/C,CAHwC,CAGU;;AAClD,OAAKC,CAAL,GAAWA,CAAC,KAAKC,SAAR,GAAsBD,CAAtB,GAA0B,CAAnC,CAJwC,CAIF;;AAEtC,SAAO,IAAP;AAEA;;AAED,eAAeH,WAAW,CAACK,SAA3B,EAAsC;AAErCC,EAAAA,GAAG,EAAE,aAAWL,MAAX,EAAmBC,KAAnB,EAA0BC,CAA1B,EAA8B;AAElC,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,CAAL,GAASA,CAAT;AAEA,WAAO,IAAP;AAEA,GAVoC;AAYrCI,EAAAA,KAAK,EAAE,iBAAY;AAElB,WAAO,IAAI,KAAKC,WAAT,GAAuBC,IAAvB,CAA6B,IAA7B,CAAP;AAEA,GAhBoC;AAkBrCA,EAAAA,IAAI,EAAE,cAAWC,KAAX,EAAmB;AAExB,SAAKT,MAAL,GAAcS,KAAK,CAACT,MAApB;AACA,SAAKC,KAAL,GAAaQ,KAAK,CAACR,KAAnB;AACA,SAAKC,CAAL,GAASO,KAAK,CAACP,CAAf;AAEA,WAAO,IAAP;AAEA,GA1BoC;AA4BrCQ,EAAAA,cAAc,EAAE,wBAAWC,CAAX,EAAe;AAE9B,WAAO,KAAKC,sBAAL,CAA6BD,CAAC,CAACE,CAA/B,EAAkCF,CAAC,CAACT,CAApC,EAAuCS,CAAC,CAACG,CAAzC,CAAP;AAEA,GAhCoC;AAkCrCF,EAAAA,sBAAsB,EAAE,gCAAWC,CAAX,EAAcX,CAAd,EAAiBY,CAAjB,EAAqB;AAE5C,SAAKd,MAAL,GAAce,IAAI,CAACC,IAAL,CAAWH,CAAC,GAAGA,CAAJ,GAAQC,CAAC,GAAGA,CAAvB,CAAd;AACA,SAAKb,KAAL,GAAac,IAAI,CAACE,KAAL,CAAYJ,CAAZ,EAAeC,CAAf,CAAb;AACA,SAAKZ,CAAL,GAASA,CAAT;AAEA,WAAO,IAAP;AAEA;AA1CoC,CAAtC;;AA+CA,SAASH,WAAT","sourcesContent":["/**\n * @author Mugen87 / https://github.com/Mugen87\n *\n * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n *\n */\n\nfunction Cylindrical( radius, theta, y ) {\n\n\tthis.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane\n\tthis.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\tthis.y = ( y !== undefined ) ? y : 0; // height above the x-z plane\n\n\treturn this;\n\n}\n\nObject.assign( Cylindrical.prototype, {\n\n\tset: function ( radius, theta, y ) {\n\n\t\tthis.radius = radius;\n\t\tthis.theta = theta;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( other ) {\n\n\t\tthis.radius = other.radius;\n\t\tthis.theta = other.theta;\n\t\tthis.y = other.y;\n\n\t\treturn this;\n\n\t},\n\n\tsetFromVector3: function ( v ) {\n\n\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t},\n\n\tsetFromCartesianCoords: function ( x, y, z ) {\n\n\t\tthis.radius = Math.sqrt( x * x + z * z );\n\t\tthis.theta = Math.atan2( x, z );\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n\nexport { Cylindrical };\n"]},"metadata":{},"sourceType":"module"}