{"ast":null,"code":"var _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/Canvasical.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport * as THREE from 'three';\nimport { Canvas, extend as extendThree, useFrame, useLoader, useResource, useThree } from \"react-three-fiber\"; // Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\n\nimport { EffectComposer } from './resources/postprocessing/EffectComposer';\nimport { RenderPass } from './resources/postprocessing/RenderPass';\nimport { GlitchPass } from './resources/postprocessing/GlitchPass';\nextendThree({\n  EffectComposer,\n  RenderPass,\n  GlitchPass\n}); // import TextLoop from \"../TextLoop\";\n// // Creates a fullscreen colored plane\n// const Background = ({ color }) => {\n//     const { viewport } = useThree();\n//     return (\n//         <mesh scale={[viewport.width, viewport.height, 1]}>\n//             <planeGeometry attach=\"geometry\" args={[1, 1]} />\n//             <meshPhysicalMaterial attach=\"material\" color={color}  depthTest={false} />\n//         </mesh>\n//     )\n// }\n// The canvas houses this function, the scene. Scene is where the elements come together.\n\nconst ObjectMeshTetra = () => {\n  const ref = useRef(); // const [geometryRef, geometry] = useResource();\n  // const [materialRef, material] = useResource();\n\n  useFrame(() => {\n    return ref.current.rotation.x = ref.current.rotation.y += 0.01;\n  });\n  console.log('ref in objectMeshTet --> ', ref);\n  return __jsx(React.Fragment, null, __jsx(\"group\", {\n    ref: ref,\n    scale: [1, 1, 1],\n    visible: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, __jsx(\"mesh\", {\n    userData: {\n      test: 'hello'\n    },\n    position: [1, 2, 3],\n    rotation: [0, 0, 0],\n    scale: [2.0, 2.0, 2.0],\n    receiveShadow: true,\n    castShadow: true,\n    visible: true // radius={100}\n    // onClick={e => console.log('click')}\n    // onPointerOver={e => console.log('hover')}\n    // onPointerOut={e => console.log('unhover')}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, __jsx(\"torusKnotBufferGeometry\", {\n    attach: \"geometry\",\n    args: [0.5, 0.15, 150, 32],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }), __jsx(\"meshPhysicalMaterial\", {\n    attach: \"material\",\n    color: \"#0077ff\",\n    roughness: 1,\n    clearcoat: 1,\n    clearcoatRoughness: 0.2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }))));\n}; // const Lighting = () => {\n//     return (\n//         <>\n//             <ambientLight\n//                 color=\"#ffffff\"\n//                 intensity={0.1}\n//             />\n//             <spotLight\n//                 color=\"#ffffff\"\n//                 intensity={4}\n//                 distance={200}\n//                 angle={1}\n//                 penumbra={0}\n//                 decay={2}\n//                 position={[ 15, 40, 35 ]} \n//                 castShadow\n//                 shadow-mapSize-width={size.width} \n//                 shadow-mapSize-height={size.height}\n//             />\n//         </>\n//     )\n// }\n// This is the canvas. It's the lowest level element in the three/webGl chain\n\n\nconst Canvasical = () => {\n  const {\n    // gl,                           // WebGL renderer \n    // scene,                        // Default scene\n    // camera,                       // Default camera\n    size // Bounds of the view (which stretches 100% and auto-adjusts)\n\n  } = useThree();\n  return __jsx(React.Fragment, null, __jsx(Canvas, {\n    className: \"container block__three-container\",\n    style: {\n      backgroundColor: \"#323232\"\n    } // style={{ background: 'linear-gradient(45deg, #000f20 40%, #110020 80%, #030303 100%)' }}\n    ,\n    camera: {\n      fov: 75,\n      position: [0, 0, 15],\n      zoom: 1,\n      focus: 10\n    },\n    shadowMap: true // children                      // Either a function child (which receives state) or regular children\n    // gl                            // Props that go into the default webGL-renderer\n    // camera                        // Props that go into the default camera\n    // raycaster                     // Props that go into the default raycaster\n    // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n    // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n    // gl2 = false                   // Enables webgl2\n    // concurrent = false            // Enables React concurrent mode\n    // resize = undefined            // Resize config, see react-use-measure's options\n    // orthographic = false          // Creates an orthographic camera if true\n    // noEvents = false              // Switch off raytracing and event support\n    // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n    // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n    // updateDefaultCamera = true    // Adjusts default camera on size changes\n    // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n    // onPointerMissed \n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, __jsx(\"ambientLight\", {\n    color: \"#ffffff\",\n    intensity: 0.1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }), __jsx(\"pointLight\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }), __jsx(\"spotLight\", {\n    color: \"#ffffff\",\n    intensity: 4,\n    distance: 200 // angle={1}\n    ,\n    angle: Math.PI / 10,\n    penumbra: 0,\n    decay: 2,\n    position: [15, 40, 35],\n    castShadow: true,\n    \"shadow-mapSize-width\": 1024,\n    \"shadow-mapSize-height\": 1024,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }), __jsx(ObjectMeshTetra, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  })));\n};\n\nexport default Canvasical;","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/Canvasical.jsx"],"names":["extend","extendThree","GlitchPass","ObjectMeshTetra","ref","useRef","useFrame","console","test","Canvasical","useThree","backgroundColor","fov","position","zoom","focus","Math"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport * as THREE from 'three';\nimport {\n    Canvas,\n    extend as extendThree,\n    useFrame,\n    useLoader,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\n\n// Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\nimport { EffectComposer } from './resources/postprocessing/EffectComposer';\nimport { RenderPass } from './resources/postprocessing/RenderPass';\nimport { GlitchPass } from './resources/postprocessing/GlitchPass';\nextendThree({ EffectComposer, RenderPass, GlitchPass });\n\n// import TextLoop from \"../TextLoop\";\n\n\n\n\n\n// // Creates a fullscreen colored plane\n// const Background = ({ color }) => {\n//     const { viewport } = useThree();\n\n//     return (\n//         <mesh scale={[viewport.width, viewport.height, 1]}>\n//             <planeGeometry attach=\"geometry\" args={[1, 1]} />\n//             <meshPhysicalMaterial attach=\"material\" color={color}  depthTest={false} />\n//         </mesh>\n//     )\n// }\n\n\n\n\n\n\n// The canvas houses this function, the scene. Scene is where the elements come together.\nconst ObjectMeshTetra = () => {\n    \n    const ref = useRef();\n    // const [geometryRef, geometry] = useResource();\n    // const [materialRef, material] = useResource();\n    \n    useFrame(() => {\n        return ref.current.rotation.x = ref.current.rotation.y += 0.01\n    });\n    \n    console.log('ref in objectMeshTet --> ', ref);\n\n    return (\n        <>\n            <group \n                ref={ref}\n                scale={[ 1,1,1 ]}\n                visible\n            >\n                {/* \n                <meshLambertMaterial \n                    ref={materialRef}\n                    color=\"#00aa33\"\n                    transparent={true}\n                    opacity={0.8}\n                    // map={smokeTexture}\n                />  */}\n                {/* <dodecahedronGeometry \n                    attach=\"geometry\" \n                    // args={[10000, 10000]} \n                    detail={1}\n                /> */}\n\n                <mesh \n                    userData={{ test: 'hello' }} \n                    position={[ 1, 2, 3 ]} \n                    rotation={[ 0, 0, 0 ]}\n                    scale={[ 2.0, 2.0, 2.0 ]}\n                    receiveShadow\n                    castShadow\n                    visible \n                    // radius={100}\n                    // onClick={e => console.log('click')}\n                    // onPointerOver={e => console.log('hover')}\n                    // onPointerOut={e => console.log('unhover')}\n                >\n                    <torusKnotBufferGeometry \n                        attach=\"geometry\" \n                        args={[0.5, 0.15, 150, 32]} \n                    />\n                    <meshPhysicalMaterial \n                        attach=\"material\" \n                        color=\"#0077ff\"\n                        roughness={1} \n                        clearcoat={1} \n                        clearcoatRoughness={0.2}\n                    />\n                </mesh>\n            </group>\n        </>\n    )\n}\n\n// const Lighting = () => {\n//     return (\n//         <>\n//             <ambientLight\n//                 color=\"#ffffff\"\n//                 intensity={0.1}\n//             />\n//             <spotLight\n//                 color=\"#ffffff\"\n//                 intensity={4}\n//                 distance={200}\n//                 angle={1}\n//                 penumbra={0}\n//                 decay={2}\n//                 position={[ 15, 40, 35 ]} \n//                 castShadow\n//                 shadow-mapSize-width={size.width} \n//                 shadow-mapSize-height={size.height}\n//             />\n//         </>\n//     )\n// }\n\n\n\n\n\n// This is the canvas. It's the lowest level element in the three/webGl chain\nconst Canvasical = () => {\n    const {\n        // gl,                           // WebGL renderer \n        // scene,                        // Default scene\n        // camera,                       // Default camera\n        size,                         // Bounds of the view (which stretches 100% and auto-adjusts)\n    } = useThree();\n\n    return (\n        <>\n            <Canvas\n                className=\"container block__three-container\" \n                style={{ backgroundColor: \"#323232\" }}\n                // style={{ background: 'linear-gradient(45deg, #000f20 40%, #110020 80%, #030303 100%)' }}\n                camera={{ \n                    fov: 75, \n                    position: [ 0, 0, 15 ],\n                    zoom: 1,\n                    focus: 10,\n                }} \n                shadowMap\n                // children                      // Either a function child (which receives state) or regular children\n                // gl                            // Props that go into the default webGL-renderer\n                // camera                        // Props that go into the default camera\n                // raycaster                     // Props that go into the default raycaster\n                // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n                // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n                // gl2 = false                   // Enables webgl2\n                // concurrent = false            // Enables React concurrent mode\n                // resize = undefined            // Resize config, see react-use-measure's options\n                // orthographic = false          // Creates an orthographic camera if true\n                // noEvents = false              // Switch off raytracing and event support\n                // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n                // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n                // updateDefaultCamera = true    // Adjusts default camera on size changes\n                // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n                // onPointerMissed \n            >\n\n                <ambientLight\n                    color=\"#ffffff\"\n                    intensity={0.1}\n                />\n                <pointLight />\n                <spotLight\n                    color=\"#ffffff\"\n                    intensity={4}\n                    distance={200}\n                    // angle={1}\n                    angle={Math.PI / 10}\n                    penumbra={0}\n                    decay={2}\n                    position={[ 15, 40, 35 ]} \n                    castShadow\n                    shadow-mapSize-width={1024} \n                    shadow-mapSize-height={1024}\n                />\n\n                <ObjectMeshTetra  />\n\n            </Canvas> \n           \n            {/* <TextLoop  /> */}\n\n        </>\n    );\n}\n\nexport default Canvasical;\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}