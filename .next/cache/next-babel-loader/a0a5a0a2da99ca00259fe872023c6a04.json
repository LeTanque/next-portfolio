{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef, useState, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { Canvas, extend as extendThree, useFrame, useLoader, useResource, useThree } from \"react-three-fiber\"; // Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\n\nimport { EffectComposer } from \"./resources/postprocessing/EffectComposer\";\nimport { RenderPass } from \"./resources/postprocessing/RenderPass\";\nimport { GlitchPass } from \"./resources/postprocessing/GlitchPass\";\nextendThree({\n  EffectComposer: EffectComposer,\n  RenderPass: RenderPass,\n  GlitchPass: GlitchPass\n}); // import TextLoop from \"../TextLoop\";\n// Cast the lighting\n\nvar Lighting = function Lighting() {\n  var _useThree = useThree(),\n      mouse = _useThree.mouse;\n\n  var light = useRef();\n  useFrame(function () {\n    light.current.position.set(mouse.x / 20, -mouse.y / 20, 0);\n  });\n  return __jsx(React.Fragment, null, __jsx(\"directionalLight\", {\n    position: [-2, 0, 30],\n    intensity: 0.5,\n    color: \"#ffffff\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }), __jsx(\"pointLight\", {\n    ref: light,\n    distance: 50,\n    intensity: 1.5,\n    color: \"#ffffff\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }));\n}; // The canvas houses this function, the scene. Scene is where the elements come together.\n\n\nfunction SmokePuff(_ref) {\n  var geometry = _ref.geometry,\n      material = _ref.material,\n      particleArray = _ref.particleArray;\n  var smokePuffRef = useRef();\n  var tenToHundred = Math.random() * 100; // 10 - 99.99\n\n  var speed = 0.01 + Math.random() / 200; // 0.1 - 0.19\n\n  var factor = 20 + Math.random() * 100; // ~ 20-30\n\n  var xFactor = -50 + Math.random() * 100; // -50 - 50\n\n  var yFactor = -50 + Math.random() * 100; // -50 - 50\n\n  var zFactor = 10 + Math.random() * 10; //  10 - 20\n\n  var getRandomArbitrary = function getRandomArbitrary(min, max) {\n    return Math.random() * (max - min) + min;\n  };\n\n  var randomFactor = getRandomArbitrary(2, 3);\n  useFrame(function (_ref2) {\n    var clock = _ref2.clock;\n    tenToHundred += speed; // tenToHundred = tenToHundred + speed, plus it sets a unique new version of t.\n\n    var delta = clock.getDelta(); // Change in clock. Something like 0.0001 - 0.0099\n\n    var cosWave = Math.cos(tenToHundred); // a cosign wave\n\n    var slowAndSteady = clock.elapsedTime * (delta + 0.017) * randomFactor; // starts at ~0.0001 and slowly increases\n\n    console.log('zFactor --> ', zFactor);\n    smokePuffRef.current.scale.set(cosWave, cosWave, cosWave);\n    smokePuffRef.current.rotation.z = slowAndSteady;\n    smokePuffRef.current.position.set(xFactor + Math.cos(tenToHundred / 30 * factor) + Math.sin(tenToHundred * 1) * factor / 10, yFactor + Math.sin(tenToHundred / 20 * factor) + Math.cos(tenToHundred * 2) * factor / 10, zFactor // zFactor + Math.cos((tenToHundred/ 10) * factor) + (Math.sin(tenToHundred* 3) * factor) / 20\n    );\n  });\n  console.log('smokePuffRef --> ', smokePuffRef);\n  return __jsx(\"mesh\", {\n    ref: smokePuffRef,\n    material: material,\n    geometry: geometry,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  });\n}\n\nvar GenerateSmoke = function GenerateSmoke(_ref3) {\n  var particleArray = _ref3.particleArray;\n\n  var _useResource = useResource(),\n      _useResource2 = _slicedToArray(_useResource, 2),\n      geometryRef = _useResource2[0],\n      geometry = _useResource2[1];\n\n  var _useResource3 = useResource(),\n      _useResource4 = _slicedToArray(_useResource3, 2),\n      materialRef = _useResource4[0],\n      material = _useResource4[1];\n\n  var url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n  var texture = useMemo(function () {\n    return new THREE.TextureLoader().load(url);\n  }, [url]);\n  return __jsx(React.Fragment, null, __jsx(Lighting, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }), __jsx(\"planeGeometry\", {\n    ref: geometryRef,\n    attach: \"geometry\",\n    args: [200, 200],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }), __jsx(\"meshLambertMaterial\", {\n    ref: materialRef,\n    attach: \"material\",\n    color: \"#ccbbee\",\n    transparent: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, __jsx(\"primitive\", {\n    attach: \"map\",\n    object: texture,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  })), geometry && new Array(3).fill().map(function (_, index) {\n    return __jsx(SmokePuff, {\n      key: index,\n      material: material,\n      geometry: geometry,\n      particleArray: particleArray,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    });\n  }));\n}; // This is the canvas. It's the lowest level element in the three/webGl chain\n\n\nvar CanvasicalSmoke = function CanvasicalSmoke() {\n  var particleCount = 3;\n  var particleArray = [{\n    id: 0,\n    x: 0,\n    y: 0,\n    z: 2\n  }];\n  useEffect(function () {\n    if (particleArray.length === particleCount) {\n      return null;\n    } else {\n      for (var i = 0; i <= particleCount; i++) {\n        particleArray.push({\n          id: particleArray[i].id + 1,\n          x: particleArray[i].x + 1,\n          y: particleArray[i].y + 1,\n          z: 2\n        });\n      }\n    }\n  }, [particleArray]);\n  return __jsx(React.Fragment, null, __jsx(Canvas, {\n    className: \"container block__three-container\",\n    camera: {\n      fov: 75,\n      aspect: 0.5,\n      near: 1,\n      far: 10000,\n      position: [0, 0, 300]\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, __jsx(GenerateSmoke, {\n    particleArray: particleArray,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  })));\n};\n\nexport default CanvasicalSmoke; // // Creates a fullscreen colored plane\n// const Plane = () => {\n//     return (\n//         <mesh >\n//             <planeGeometry  attach=\"geometry\"  args={[ 32, 32, 32, 32 ]} />\n//             <meshPhysicalMaterial  attach=\"material\"  color=\"#ffffff\"  />\n//         </mesh>\n//     )\n// }\n// // A light bar\n// const LightBar = () => {\n//     // const lightBar = useRef();\n//     return (\n//         <>\n//             <mesh\n//                 // ref={lightBar}\n//             >\n//                 <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n//                 <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n//             </mesh>\n//         </>\n//     )\n// }","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx"],"names":["React","useCallback","useEffect","useRef","useState","useMemo","THREE","Canvas","extend","extendThree","useFrame","useLoader","useResource","useThree","EffectComposer","RenderPass","GlitchPass","Lighting","mouse","light","current","position","set","x","y","SmokePuff","geometry","material","particleArray","smokePuffRef","tenToHundred","Math","random","speed","factor","xFactor","yFactor","zFactor","getRandomArbitrary","min","max","randomFactor","clock","delta","getDelta","cosWave","cos","slowAndSteady","elapsedTime","console","log","scale","rotation","z","sin","GenerateSmoke","geometryRef","materialRef","url","texture","TextureLoader","load","Array","fill","map","_","index","CanvasicalSmoke","particleCount","id","length","i","push","fov","aspect","near","far"],"mappings":"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","sourcesContent":["import React, {\n    useCallback,\n    useEffect,\n    useRef,\n    useState,\n    useMemo\n} from \"react\";\nimport * as THREE from \"three\";\nimport {\n    Canvas,\n    extend as extendThree,\n    useFrame,\n    useLoader,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\n\n// Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\nimport { EffectComposer } from \"./resources/postprocessing/EffectComposer\";\nimport { RenderPass } from \"./resources/postprocessing/RenderPass\";\nimport { GlitchPass } from \"./resources/postprocessing/GlitchPass\";\nextendThree({ EffectComposer, RenderPass, GlitchPass });\n\n// import TextLoop from \"../TextLoop\";\n\n\n// Cast the lighting\nconst Lighting = () => {\n    const { mouse } = useThree();\n    const light = useRef();\n    \n    useFrame(() => {\n        light.current.position.set( mouse.x / 20, -mouse.y / 20, 0 )\n    });\n\n    return (\n        <>\n            <directionalLight\n                position={[ -2, 0, 30 ]}  intensity={0.5}  color=\"#ffffff\" \n            />\n            <pointLight \n                ref={light} distance={50} intensity={1.5} color=\"#ffffff\" \n            />\n        </>\n    );\n};\n\n// The canvas houses this function, the scene. Scene is where the elements come together.\nfunction SmokePuff({ geometry, material, particleArray }) {\n    let smokePuffRef = useRef();\n    let tenToHundred = Math.random() * 100; // 10 - 99.99\n    let speed = 0.01 + Math.random() / 200; // 0.1 - 0.19\n    let factor = 20 + Math.random() * 100;  // ~ 20-30\n    let xFactor = -50 + Math.random() * 100;  // -50 - 50\n    let yFactor = -50 + Math.random() * 100;  // -50 - 50\n    let zFactor = 10 + Math.random() * 10;  //  10 - 20\n\n    const getRandomArbitrary = (min, max) => Math.random() * (max - min) + min;\n    let randomFactor = getRandomArbitrary(2, 3);\n    \n    useFrame(({ clock }) => {\n        tenToHundred += speed; // tenToHundred = tenToHundred + speed, plus it sets a unique new version of t.\n        let delta = clock.getDelta();  // Change in clock. Something like 0.0001 - 0.0099\n        const cosWave = Math.cos(tenToHundred);  // a cosign wave\n        let slowAndSteady = (clock.elapsedTime * (delta + 0.017)) * randomFactor;  // starts at ~0.0001 and slowly increases\n        \n        console.log('zFactor --> ', zFactor);\n\n        smokePuffRef.current.scale.set(cosWave, cosWave, cosWave);\n        smokePuffRef.current.rotation.z = slowAndSteady; \n        smokePuffRef.current.position.set(\n            xFactor + Math.cos((tenToHundred/ 30) * factor) + (Math.sin(tenToHundred* 1) * factor) / 10,\n            yFactor + Math.sin((tenToHundred/ 20) * factor) + (Math.cos(tenToHundred* 2) * factor) / 10,\n            zFactor\n            // zFactor + Math.cos((tenToHundred/ 10) * factor) + (Math.sin(tenToHundred* 3) * factor) / 20\n        );\n    });\n\n    console.log('smokePuffRef --> ', smokePuffRef);\n\n    return <mesh  ref={smokePuffRef} material={material} geometry={geometry}  />;\n}\n\nconst GenerateSmoke = ({ particleArray }) => {\n    const [geometryRef, geometry] = useResource();\n    const [materialRef, material] = useResource();\n    const url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n    const texture = useMemo(() => new THREE.TextureLoader().load(url), [url]);\n    \n    return (\n        <>\n            <Lighting />\n\n            <planeGeometry \n                ref={geometryRef} \n                attach=\"geometry\"   \n                args={[200, 200]} \n            />\n            <meshLambertMaterial \n                ref={materialRef}\n                attach=\"material\" \n                color=\"#ccbbee\"\n                transparent\n            >\n                <primitive attach=\"map\" object={texture} />\n            </meshLambertMaterial>\n\n            {geometry && new Array(3).fill().map((_, index) => (\n                <SmokePuff\n                    key={index}\n                    material={material}\n                    geometry={geometry}\n                    particleArray={particleArray}\n                />\n            ))}\n        </>\n    );\n}\n\n\n// This is the canvas. It's the lowest level element in the three/webGl chain\nconst CanvasicalSmoke = () => {\n    const particleCount = 3;\n    const particleArray = [{ id: 0, x: 0, y: 0, z: 2 }];\n\n    useEffect(() => {\n        if (particleArray.length === particleCount) {\n            return null;\n        } else {\n            for (let i = 0; i <= particleCount; i++) {\n                particleArray.push({\n                    id: particleArray[i].id + 1,\n                    x: particleArray[i].x + 1,\n                    y: particleArray[i].y + 1,\n                    z: 2\n                });\n            }\n        }\n    }, [particleArray]);\n\n    return (\n        <>\n            <Canvas\n                className=\"container block__three-container\"\n                camera={{\n                    fov: 75,\n                    aspect: 0.5,\n                    near: 1,\n                    far: 10000,\n                    position: [0, 0, 300]\n                }}\n            >\n                <GenerateSmoke particleArray={particleArray} />\n            </Canvas>\n\n            {/* <TextLoop  /> */}\n        </>\n    );\n};\n\nexport default CanvasicalSmoke;\n\n// // Creates a fullscreen colored plane\n// const Plane = () => {\n//     return (\n//         <mesh >\n//             <planeGeometry  attach=\"geometry\"  args={[ 32, 32, 32, 32 ]} />\n//             <meshPhysicalMaterial  attach=\"material\"  color=\"#ffffff\"  />\n//         </mesh>\n//     )\n// }\n\n// // A light bar\n// const LightBar = () => {\n//     // const lightBar = useRef();\n\n//     return (\n//         <>\n//             <mesh\n//                 // ref={lightBar}\n//             >\n//                 <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n//                 <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n//             </mesh>\n//         </>\n//     )\n// }\n"]},"metadata":{},"sourceType":"module"}