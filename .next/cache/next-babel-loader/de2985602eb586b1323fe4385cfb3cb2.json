{"ast":null,"code":"var _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/ThreeContainer.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef } from \"react\";\nimport { extend, Canvas, useFrame, useResource, useThree } from \"react-three-fiber\";\nimport * as resources from './resources/index';\nextend(resources);\nimport TextLoop from \"../TextLoop\";\n\nconst Particle = ({\n  geometry,\n  material\n}) => {\n  let ref = useRef();\n  let t = Math.random() * 100;\n  let speed = 0.01 + Math.random() / 900;\n  let factor = 20 + Math.random() * 2;\n  let xFactor = -50 + Math.random() * 100;\n  let yFactor = -50 + Math.random() * 100;\n  let zFactor = -30 + Math.random() * 60;\n  useFrame(() => {\n    t += speed;\n    const s = Math.cos(t);\n    ref.current.scale.set(s * 10, s * 10, s * 10);\n    ref.current.rotation.set(s * 5, s * 5, s * 5);\n    ref.current.position.set(xFactor + Math.cos(t / 30 * factor) + Math.sin(t * 1) * factor / 10, yFactor + Math.sin(t / 20 * factor) + Math.cos(t * 2) * factor / 10, zFactor + Math.cos(t / 10 * factor) + Math.sin(t * 3) * factor / 20);\n  });\n  return __jsx(\"mesh\", {\n    ref: ref,\n    material: material,\n    geometry: geometry,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  });\n};\n\nconst Swarm = ({\n  mouse\n}) => {\n  const light = useRef();\n  const [geometryRef, geometry] = useResource();\n  const [materialRef, material] = useResource();\n  useFrame(() => light.current.position.set(mouse.current[0] / 20, -mouse.current[1] / 20, 0));\n  return __jsx(React.Fragment, null, __jsx(\"pointLight\", {\n    ref: light,\n    distance: 30,\n    intensity: 1,\n    color: \"#ff1111\",\n    decay: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }), __jsx(\"spotLight\", {\n    intensity: 0.3,\n    position: [0, 0, 40],\n    penumbra: 2,\n    decay: 2,\n    color: \"#aa3333\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }), __jsx(\"mesh\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, __jsx(\"planeGeometry\", {\n    attach: \"geometry\",\n    args: [10000, 10000],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), __jsx(\"meshPhongMaterial\", {\n    attach: \"material\",\n    color: \"#575757\",\n    depthTest: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  })), __jsx(\"tetrahedronBufferGeometry\", {\n    ref: geometryRef,\n    args: [0.8, 0],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }), __jsx(\"meshPhysicalMaterial\", {\n    ref: materialRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), geometry && new Array(500).fill().map((_, index) => __jsx(Particle, {\n    key: index,\n    material: material,\n    geometry: geometry,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  })));\n};\n\nconst Effect = () => {\n  const composer = useRef();\n  const {\n    scene,\n    gl,\n    size,\n    camera\n  } = useThree();\n  useEffect(() => void composer.current.setSize(size.width, size.height), [size]);\n  useFrame(({\n    gl\n  }) => void (gl.autoClear = true), 0);\n  return __jsx(\"effectComposer\", {\n    ref: composer,\n    args: [gl],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, __jsx(\"renderPass\", {\n    attachArray: \"passes\",\n    scene: scene,\n    camera: camera,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }), __jsx(\"waterPass\", {\n    attachArray: \"passes\",\n    factor: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }), __jsx(\"afterimagePass\", {\n    attachArray: \"passes\",\n    factor: 0.7,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }), __jsx(\"shaderPass\", {\n    attachArray: \"passes\",\n    args: [resources.WaterShader],\n    \"material-uniforms-resolution-value\": [1 / size.width, 1 / size.height],\n    renderToScreen: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }));\n};\n\nconst ThreeContainer = () => {\n  const mouse = useRef([0, 0]);\n  const onMouseMove = useCallback(({\n    clientX: x,\n    clientY: y\n  }) => mouse.current = [x - window.innerWidth / 2, y - window.innerHeight / 2], []);\n  return __jsx(\"div\", {\n    className: \"container block__three-container\",\n    onMouseMove: onMouseMove,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, __jsx(Canvas, {\n    camera: {\n      fov: 75,\n      position: [0, 0, 50]\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, __jsx(Swarm, {\n    mouse: mouse,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }), __jsx(Effect, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  })), __jsx(TextLoop, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }));\n};\n\nexport default ThreeContainer;","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/ThreeContainer.jsx"],"names":["extend","Particle","material","ref","useRef","t","Math","speed","factor","xFactor","yFactor","zFactor","useFrame","s","Swarm","mouse","light","useResource","geometry","Effect","composer","camera","useThree","useEffect","size","gl","resources","ThreeContainer","onMouseMove","useCallback","clientX","clientY","y","x","window","fov","position"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef } from \"react\";\nimport {\n    extend,\n    Canvas,\n    useFrame,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\nimport * as resources from './resources/index';\nextend(resources);\n\nimport TextLoop from \"../TextLoop\";\n\n\nconst Particle = ({ geometry, material }) => {\n    let ref = useRef();\n    let t = Math.random() * 100;\n    let speed = 0.01 + Math.random() / 900;\n    let factor = 20 + Math.random() * 2;\n    let xFactor = -50 + Math.random() * 100;\n    let yFactor = -50 + Math.random() * 100;\n    let zFactor = -30 + Math.random() * 60;\n    useFrame(() => {\n        t += speed;\n        const s = Math.cos(t);\n        ref.current.scale.set(s * 10, s * 10, s * 10);\n        ref.current.rotation.set(s * 5, s * 5, s * 5);\n        ref.current.position.set(\n            xFactor +\n                Math.cos((t / 30) * factor) +\n                (Math.sin(t * 1) * factor) / 10,\n            yFactor +\n                Math.sin((t / 20) * factor) +\n                (Math.cos(t * 2) * factor) / 10,\n            zFactor +\n                Math.cos((t / 10) * factor) +\n                (Math.sin(t * 3) * factor) / 20\n        );\n    });\n    return <mesh ref={ref} material={material} geometry={geometry} />;\n}\n\nconst Swarm = ({ mouse }) => {\n    const light = useRef();\n    const [geometryRef, geometry] = useResource();\n    const [materialRef, material] = useResource();\n\n    useFrame(() =>\n        light.current.position.set(\n            mouse.current[0] / 20,\n            -mouse.current[1] / 20,\n            0\n        )\n    );\n\n    return (\n        <>\n            <pointLight\n                ref={light}\n                distance={30}\n                intensity={1}\n                color=\"#ff1111\"\n                decay={2}\n            />\n            <spotLight \n                intensity={0.3} \n                position={[0, 0, 40]} \n                penumbra={2} \n                decay={2}\n                color=\"#aa3333\"\n            />\n\n            <mesh>\n                <planeGeometry attach=\"geometry\" args={[10000, 10000]} />\n                <meshPhongMaterial\n                    attach=\"material\"\n                    color=\"#575757\"\n                    depthTest={false}\n                />\n                {/* <spriteMaterial\n                    color=\"#aaaaaa\"\n                    fog={true}\n                /> */}\n            </mesh>\n\n            <tetrahedronBufferGeometry  ref={geometryRef}  args={[0.8, 0]}  />\n\n            <meshPhysicalMaterial ref={materialRef} />\n\n            {geometry &&\n                new Array(500)\n                    .fill()\n                    .map((_, index) => (\n                        <Particle\n                            key={index}\n                            material={material}\n                            geometry={geometry}\n                        />\n                    ))}\n        </>\n    );\n}\n\nconst Effect = () => {\n    const composer = useRef();\n\n    const { scene, gl, size, camera } = useThree();\n\n    useEffect(() => void composer.current.setSize(size.width, size.height), [ size ]);\n\n    useFrame(\n        ({ gl }) => void ((gl.autoClear = true)),\n        0\n    );\n\n    return (\n        <effectComposer ref={composer} args={[gl]}>\n            <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\n            <waterPass attachArray=\"passes\" factor={2} />\n            <afterimagePass attachArray=\"passes\" factor={0.7} />\n            <shaderPass\n                attachArray=\"passes\"\n                args={[resources.WaterShader]}\n                material-uniforms-resolution-value={[\n                    1 / size.width,\n                    1 / size.height\n                ]}\n                renderToScreen\n            />\n        </effectComposer>\n    );\n}\n\nconst ThreeContainer = () => {\n    const mouse = useRef([0, 0]);\n    const onMouseMove = useCallback(\n        ({ clientX: x, clientY: y }) =>\n        (mouse.current = [\n            x - window.innerWidth / 2,\n            y - window.innerHeight / 2\n        ]),\n        []\n    );\n\n    return (\n        <div \n            className=\"container block__three-container\" \n            onMouseMove={onMouseMove} \n        >\n            \n            <Canvas camera={{ fov: 75, position: [0, 0, 50] }} >\n                \n                <Swarm mouse={mouse} />\n                <Effect />\n\n            </Canvas> \n           \n            <TextLoop  />\n\n        </div>\n    );\n}\n\nexport default ThreeContainer;\n"]},"metadata":{},"sourceType":"module"}