{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/SmokeContainer.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef } from \"react\";\nimport { extend, Canvas, useFrame, useResource, useThree } from \"react-three-fiber\";\nimport * as resources from './resources/index';\nextend(resources);\nimport TextLoop from \"../TextLoop\";\n\nvar init = function init() {\n  stats = new Stats();\n  clock = new THREE.Clock();\n  renderer = new THREE.WebGLRenderer();\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  scene = new THREE.Scene();\n  camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 10000);\n  camera.position.z = 1000;\n  scene.add(camera);\n  geometry = new THREE.CubeGeometry(200, 200, 200);\n  material = new THREE.MeshLambertMaterial({\n    color: 0xaa6666,\n    wireframe: false\n  });\n  mesh = new THREE.Mesh(geometry, material); //scene.add( mesh );\n\n  cubeSineDriver = 0;\n  textGeo = new THREE.PlaneGeometry(300, 300);\n  THREE.ImageUtils.crossOrigin = \"\"; //Need this to pull in crossdomain images from AWS\n\n  textTexture = THREE.ImageUtils.loadTexture(\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/quickText.png\");\n  textMaterial = new THREE.MeshLambertMaterial({\n    color: 0x00ffff,\n    opacity: 1,\n    map: textTexture,\n    transparent: true,\n    blending: THREE.AdditiveBlending\n  });\n  text = new THREE.Mesh(textGeo, textMaterial);\n  text.position.z = 800;\n  scene.add(text);\n  light = new THREE.DirectionalLight(0xffffff, 0.5);\n  light.position.set(-1, 0, 1);\n  scene.add(light);\n  smokeTexture = THREE.ImageUtils.loadTexture(\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png\");\n  smokeMaterial = new THREE.MeshLambertMaterial({\n    color: 0x00dddd,\n    map: smokeTexture,\n    transparent: true\n  });\n  smokeGeo = new THREE.PlaneGeometry(300, 300);\n  smokeParticles = [];\n\n  for (p = 0; p < 150; p++) {\n    var particle = new THREE.Mesh(smokeGeo, smokeMaterial);\n    particle.position.set(Math.random() * 500 - 250, Math.random() * 500 - 250, Math.random() * 1000 - 100);\n    particle.rotation.z = Math.random() * 360;\n    scene.add(particle);\n    smokeParticles.push(particle);\n  }\n\n  document.body.appendChild(renderer.domElement);\n};\n\nvar animate = function animate() {\n  // note: three.js includes requestAnimationFrame shim\n  stats.begin();\n  delta = clock.getDelta();\n  requestAnimationFrame(animate);\n  evolveSmoke();\n  render();\n  stats.end();\n};\n\nvar evolveSmoke = function evolveSmoke() {\n  var sp = smokeParticles.length;\n\n  while (sp--) {\n    smokeParticles[sp].rotation.z += delta * 0.2;\n  }\n};\n\nvar render = function render() {\n  mesh.rotation.x += 0.005;\n  mesh.rotation.y += 0.01;\n  cubeSineDriver += 0.01;\n  mesh.position.z = 100 + Math.sin(cubeSineDriver) * 500;\n  renderer.render(scene, camera);\n};\n\nvar SmokeThing = function SmokeThing() {\n  var _useResource = useResource(),\n      _useResource2 = _slicedToArray(_useResource, 2),\n      geometryRef = _useResource2[0],\n      geometry = _useResource2[1];\n\n  var _useResource3 = useResource(),\n      _useResource4 = _slicedToArray(_useResource3, 2),\n      materialRef = _useResource4[0],\n      material = _useResource4[1]; // const ref = useRef();\n  // useFrame(() => (ref.current.rotation.x = ref.current.rotation.y += 0.01))\n\n\n  return __jsx(React.Fragment, null, __jsx(\"ambientLight\", {\n    intensity: 0.3,\n    position: [0, 0, 40],\n    penumbra: 2,\n    decay: 2,\n    color: \"#111111\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }), __jsx(\"mesh\", {\n    ref: ref,\n    onClick: function onClick(e) {\n      return console.log('click');\n    },\n    onPointerOver: function onPointerOver(e) {\n      return console.log('hover');\n    },\n    onPointerOut: function onPointerOut(e) {\n      return console.log('unhover');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, __jsx(\"planeGeometry\", {\n    attach: \"geometry\",\n    args: [10000, 10000],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }), __jsx(\"meshNormalMaterial\", {\n    attach: \"material\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  })));\n};\n\nvar SmokeContainer = function SmokeContainer() {\n  var _useThree = useThree(),\n      gl = _useThree.gl,\n      scene = _useThree.scene,\n      camera = _useThree.camera,\n      size = _useThree.size,\n      viewport = _useThree.viewport,\n      aspect = _useThree.aspect,\n      mouse = _useThree.mouse,\n      clock = _useThree.clock,\n      invalidate = _useThree.invalidate,\n      intersect = _useThree.intersect,\n      setDefaultCamera = _useThree.setDefaultCamera;\n\n  return __jsx(\"div\", {\n    className: \"container block__three-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, __jsx(Canvas, {\n    camera: {\n      fov: 75,\n      position: [0, 0, 60]\n    } // children                      // Either a function child (which receives state) or regular children\n    // gl                            // Props that go into the default webGL-renderer\n    // camera                        // Props that go into the default camera\n    // raycaster                     // Props that go into the default raycaster\n    // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n    // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n    // gl2 = false                   // Enables webgl2\n    // concurrent = false            // Enables React concurrent mode\n    // resize = undefined            // Resize config, see react-use-measure's options\n    // orthographic = false          // Creates an orthographic camera if true\n    // noEvents = false              // Switch off raytracing and event support\n    // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n    // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n    // updateDefaultCamera = true    // Adjusts default camera on size changes\n    // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n    // onPointerMissed \n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, __jsx(SmokeThing, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  })), __jsx(TextLoop, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }));\n};\n\nexport default SmokeContainer;","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/SmokeContainer.jsx"],"names":["extend","init","stats","clock","THREE","renderer","window","scene","camera","geometry","material","color","wireframe","mesh","cubeSineDriver","textGeo","textTexture","textMaterial","opacity","map","transparent","blending","AdditiveBlending","text","light","smokeTexture","smokeMaterial","smokeGeo","smokeParticles","p","particle","Math","document","animate","delta","requestAnimationFrame","evolveSmoke","render","sp","SmokeThing","geometryRef","useResource","materialRef","console","SmokeContainer","gl","size","viewport","aspect","mouse","invalidate","intersect","setDefaultCamera","useThree","fov","position"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef } from \"react\";\nimport {\n    extend,\n    Canvas,\n    useFrame,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\nimport * as resources from './resources/index';\nextend(resources);\n\n\nimport TextLoop from \"../TextLoop\";\n\n\n\nconst init = () => {\n    stats = new Stats();\n\n\n    clock = new THREE.Clock();\n\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n\n    scene = new THREE.Scene();\n\n    camera = new THREE.PerspectiveCamera(\n        75,\n        window.innerWidth / window.innerHeight,\n        1,\n        10000\n    );\n    camera.position.z = 1000;\n    scene.add(camera);\n\n    geometry = new THREE.CubeGeometry(200, 200, 200);\n    material = new THREE.MeshLambertMaterial({\n        color: 0xaa6666,\n        wireframe: false\n    });\n    mesh = new THREE.Mesh(geometry, material);\n    //scene.add( mesh );\n    cubeSineDriver = 0;\n\n    textGeo = new THREE.PlaneGeometry(300, 300);\n    THREE.ImageUtils.crossOrigin = \"\"; //Need this to pull in crossdomain images from AWS\n    textTexture = THREE.ImageUtils.loadTexture(\n        \"https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/quickText.png\"\n    );\n    textMaterial = new THREE.MeshLambertMaterial({\n        color: 0x00ffff,\n        opacity: 1,\n        map: textTexture,\n        transparent: true,\n        blending: THREE.AdditiveBlending\n    });\n    text = new THREE.Mesh(textGeo, textMaterial);\n    text.position.z = 800;\n    scene.add(text);\n\n    light = new THREE.DirectionalLight(0xffffff, 0.5);\n    light.position.set(-1, 0, 1);\n    scene.add(light);\n\n    smokeTexture = THREE.ImageUtils.loadTexture(\n        \"https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png\"\n    );\n    smokeMaterial = new THREE.MeshLambertMaterial({\n        color: 0x00dddd,\n        map: smokeTexture,\n        transparent: true\n    });\n    smokeGeo = new THREE.PlaneGeometry(300, 300);\n    smokeParticles = [];\n\n    for (p = 0; p < 150; p++) {\n        var particle = new THREE.Mesh(smokeGeo, smokeMaterial);\n        particle.position.set(\n            Math.random() * 500 - 250,\n            Math.random() * 500 - 250,\n            Math.random() * 1000 - 100\n        );\n        particle.rotation.z = Math.random() * 360;\n        scene.add(particle);\n        smokeParticles.push(particle);\n    }\n\n    document.body.appendChild(renderer.domElement);\n}\n\nconst animate = () => {\n    // note: three.js includes requestAnimationFrame shim\n    stats.begin();\n    delta = clock.getDelta();\n    requestAnimationFrame(animate);\n    evolveSmoke();\n    render();\n    stats.end();\n}\n\nconst evolveSmoke = () => {\n    var sp = smokeParticles.length;\n    while (sp--) {\n        smokeParticles[sp].rotation.z += delta * 0.2;\n    }\n}\n\nconst render = () => {\n    mesh.rotation.x += 0.005;\n    mesh.rotation.y += 0.01;\n    cubeSineDriver += 0.01;\n    mesh.position.z = 100 + Math.sin(cubeSineDriver) * 500;\n    renderer.render(scene, camera);\n}\n\n\n\n\n\nconst SmokeThing = () => {\n    const [geometryRef, geometry] = useResource();\n    const [materialRef, material] = useResource();\n    \n    // const ref = useRef();\n    // useFrame(() => (ref.current.rotation.x = ref.current.rotation.y += 0.01))\n\n\n    \n    return (\n        <>\n            <ambientLight\n                intensity={0.3} \n                position={[0, 0, 40]} \n                penumbra={2} \n                decay={2}\n                color=\"#111111\"\n            />\n\n\n\n            <mesh\n                ref={ref}\n                onClick={e => console.log('click')}\n                onPointerOver={e => console.log('hover')}\n                onPointerOut={e => console.log('unhover')}\n            >\n                <planeGeometry \n                    attach=\"geometry\" \n                    args={[10000, 10000]} \n                />\n                <meshNormalMaterial attach=\"material\" />\n            </mesh>\n        </>\n    )\n}\n\nconst SmokeContainer = () => {\n    const {\n        gl,                           // WebGL renderer \n        scene,                        // Default scene\n        camera,                       // Default camera\n        size,                         // Bounds of the view (which stretches 100% and auto-adjusts)\n        viewport,                     // Bounds of the viewport in 3d units + factor (size/viewport)\n        aspect,                       // Aspect ratio (size.width / size.height)\n        mouse,                        // Current 2D mouse coordinates\n        clock,                        // THREE.Clock (useful for useFrame deltas)\n        invalidate,                   // Invalidates a single frame (for <Canvas invalidateFrameloop />)\n        intersect,                    // Calls onMouseMove handlers for objects underneath the cursor\n        setDefaultCamera,             // Sets the default camera\n    } = useThree();\n\n\n    return (\n        <div \n            className=\"container block__three-container\" \n        >\n            \n            <Canvas\n                camera={{ fov: 75, position: [0, 0, 60] }} \n                // children                      // Either a function child (which receives state) or regular children\n                // gl                            // Props that go into the default webGL-renderer\n                // camera                        // Props that go into the default camera\n                // raycaster                     // Props that go into the default raycaster\n                // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n                // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n                // gl2 = false                   // Enables webgl2\n                // concurrent = false            // Enables React concurrent mode\n                // resize = undefined            // Resize config, see react-use-measure's options\n                // orthographic = false          // Creates an orthographic camera if true\n                // noEvents = false              // Switch off raytracing and event support\n                // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n                // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n                // updateDefaultCamera = true    // Adjusts default camera on size changes\n                // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n                // onPointerMissed \n            >   \n                \n                <SmokeThing />\n\n            </Canvas> \n           \n            <TextLoop  />\n\n        </div>\n    );\n}\n\nexport default SmokeContainer;\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}