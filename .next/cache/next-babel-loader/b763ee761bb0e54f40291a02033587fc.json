{"ast":null,"code":"var _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/SmokeContainer.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef } from \"react\";\nimport { extend, Canvas, useFrame, useLoader, useResource, useThree } from \"react-three-fiber\";\nimport * as resources from './resources/index';\nimport * as THREE from 'three';\nextend(resources);\nimport TextLoop from \"../TextLoop\";\n\nconst init = () => {\n  stats = new Stats();\n  clock = new THREE.Clock();\n  renderer = new THREE.WebGLRenderer();\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  scene = new THREE.Scene();\n  camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 10000);\n  camera.position.z = 1000;\n  scene.add(camera);\n  geometry = new THREE.CubeGeometry(200, 200, 200);\n  material = new THREE.MeshLambertMaterial({\n    color: 0xaa6666,\n    wireframe: false\n  });\n  mesh = new THREE.Mesh(geometry, material); //scene.add( mesh );\n\n  cubeSineDriver = 0;\n  smokeTexture = THREE.ImageUtils.loadTexture(\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png\");\n  smokeMaterial = new THREE.MeshLambertMaterial({\n    color: 0x00dddd,\n    map: smokeTexture,\n    transparent: true\n  });\n}; // const animate = () => {\n//     // note: three.js includes requestAnimationFrame shim\n//     stats.begin();\n//     delta = clock.getDelta();\n//     requestAnimationFrame(animate);\n//     evolveSmoke();\n//     render();\n//     stats.end();\n// }\n// const evolveSmoke = () => {\n//     var sp = smokeParticles.length;\n//     while (sp--) {\n//         smokeParticles[sp].rotation.z += delta * 0.2;\n//     }\n// }\n// const render = () => {\n//     mesh.rotation.x += 0.005;\n//     mesh.rotation.y += 0.01;\n//     cubeSineDriver += 0.01;\n//     mesh.position.z = 100 + Math.sin(cubeSineDriver) * 500;\n//     renderer.render(scene, camera);\n// }\n\n\nconst SmokeThing = () => {\n  const [geometryRef, geometry] = useResource();\n  const [materialRef, material] = useResource();\n  const ref = useRef();\n  const smokeGeo = new THREE.PlaneGeometry(300, 300); // useFrame(() => (ref.current.rotation.x = ref.current.rotation.y += 0.01))\n\n  const [smokeTexture] = useLoader(THREE.TextureLoader, [\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png\"]);\n\n  const smokeParticles = () => {\n    let smokeParticles = [];\n\n    for (p = 0; p < 150; p++) {\n      let particle = new THREE.Mesh(smokeGeo, smokeMaterial);\n      particle.position.set(Math.random() * 500 - 250, Math.random() * 500 - 250, Math.random() * 1000 - 100);\n      particle.rotation.z = Math.random() * 360;\n      scene.add(particle);\n      smokeParticles.push(particle);\n    }\n\n    return smokeParticles;\n  };\n\n  useFrame(({\n    clock\n  }) => {\n    delta = clock.getDelta();\n    let sp = smokeParticles.length;\n\n    while (sp--) {\n      smokeParticles[sp].rotation.z += delta * 0.2;\n    }\n  });\n  return __jsx(\"group\", {\n    ref: ref,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, __jsx(\"ambientLight\", {\n    intensity: 0.3,\n    position: [0, 0, 40],\n    penumbra: 2,\n    decay: 2,\n    color: \"#111111\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }), __jsx(\"mesh\", {\n    visible: true,\n    userData: {\n      test: 'hello'\n    },\n    position: [1, 2, 3],\n    rotation: [0, 0, 0],\n    ref: ref,\n    onClick: e => console.log('click'),\n    onPointerOver: e => console.log('hover'),\n    onPointerOut: e => console.log('unhover'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, __jsx(\"planeGeometry\", {\n    attach: \"geometry\",\n    args: [10000, 10000],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }), __jsx(\"meshNormalMaterial\", {\n    attach: \"material\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  })), __jsx(\"meshLambertMaterial\", {\n    ref: materialRef,\n    color: \"0x00dddd\",\n    map: smokeTexture,\n    transparent: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }));\n};\n\nconst SmokeContainer = () => {\n  const {\n    gl,\n    // WebGL renderer \n    scene,\n    // Default scene\n    camera,\n    // Default camera\n    size,\n    // Bounds of the view (which stretches 100% and auto-adjusts)\n    viewport,\n    // Bounds of the viewport in 3d units + factor (size/viewport)\n    aspect,\n    // Aspect ratio (size.width / size.height)\n    mouse,\n    // Current 2D mouse coordinates\n    clock,\n    // THREE.Clock (useful for useFrame deltas)\n    invalidate,\n    // Invalidates a single frame (for <Canvas invalidateFrameloop />)\n    intersect,\n    // Calls onMouseMove handlers for objects underneath the cursor\n    setDefaultCamera // Sets the default camera\n\n  } = useThree();\n  return __jsx(\"div\", {\n    className: \"container block__three-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, __jsx(Canvas, {\n    style: {\n      background: 'radial-gradient(at 50% 70%, #200f20 40%, #090b1f 80%, #050523 100%)'\n    },\n    camera: {\n      fov: 75,\n      position: [0, 0, 60]\n    } // children                      // Either a function child (which receives state) or regular children\n    // gl                            // Props that go into the default webGL-renderer\n    // camera                        // Props that go into the default camera\n    // raycaster                     // Props that go into the default raycaster\n    // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n    // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n    // gl2 = false                   // Enables webgl2\n    // concurrent = false            // Enables React concurrent mode\n    // resize = undefined            // Resize config, see react-use-measure's options\n    // orthographic = false          // Creates an orthographic camera if true\n    // noEvents = false              // Switch off raytracing and event support\n    // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n    // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n    // updateDefaultCamera = true    // Adjusts default camera on size changes\n    // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n    // onPointerMissed \n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, __jsx(\"rectAreaLight\", {\n    intensity: 3,\n    position: [0, 10, -10],\n    width: 30,\n    height: 30,\n    onUpdate: self => self.lookAt(new THREE.Vector3(0, 0, 0)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }), __jsx(SmokeThing, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  })), __jsx(TextLoop, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }));\n};\n\nexport default SmokeContainer;","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/SmokeContainer.jsx"],"names":["React","useCallback","useEffect","useRef","extend","Canvas","useFrame","useLoader","useResource","useThree","resources","THREE","TextLoop","init","stats","Stats","clock","Clock","renderer","WebGLRenderer","setSize","window","innerWidth","innerHeight","scene","Scene","camera","PerspectiveCamera","position","z","add","geometry","CubeGeometry","material","MeshLambertMaterial","color","wireframe","mesh","Mesh","cubeSineDriver","smokeTexture","ImageUtils","loadTexture","smokeMaterial","map","transparent","SmokeThing","geometryRef","materialRef","ref","smokeGeo","PlaneGeometry","TextureLoader","smokeParticles","p","particle","set","Math","random","rotation","push","delta","getDelta","sp","length","test","e","console","log","SmokeContainer","gl","size","viewport","aspect","mouse","invalidate","intersect","setDefaultCamera","background","fov","self","lookAt","Vector3"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef } from \"react\";\nimport {\n    extend,\n    Canvas,\n    useFrame,\n    useLoader,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\nimport * as resources from './resources/index';\nimport * as THREE from 'three';\nextend(resources);\n\n\nimport TextLoop from \"../TextLoop\";\n\n\n\nconst init = () => {\n    stats = new Stats();\n\n\n    clock = new THREE.Clock();\n\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n\n    scene = new THREE.Scene();\n\n    camera = new THREE.PerspectiveCamera(\n        75,\n        window.innerWidth / window.innerHeight,\n        1,\n        10000\n    );\n    camera.position.z = 1000;\n    scene.add(camera);\n\n    geometry = new THREE.CubeGeometry(200, 200, 200);\n    material = new THREE.MeshLambertMaterial({\n        color: 0xaa6666,\n        wireframe: false\n    });\n    mesh = new THREE.Mesh(geometry, material);\n    //scene.add( mesh );\n    cubeSineDriver = 0;\n\n\n    smokeTexture = THREE.ImageUtils.loadTexture(\n        \"https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png\"\n    );\n    smokeMaterial = new THREE.MeshLambertMaterial({\n        color: 0x00dddd,\n        map: smokeTexture,\n        transparent: true\n    });\n    \n}\n\n// const animate = () => {\n//     // note: three.js includes requestAnimationFrame shim\n//     stats.begin();\n//     delta = clock.getDelta();\n//     requestAnimationFrame(animate);\n//     evolveSmoke();\n//     render();\n//     stats.end();\n// }\n\n// const evolveSmoke = () => {\n//     var sp = smokeParticles.length;\n//     while (sp--) {\n//         smokeParticles[sp].rotation.z += delta * 0.2;\n//     }\n// }\n\n// const render = () => {\n//     mesh.rotation.x += 0.005;\n//     mesh.rotation.y += 0.01;\n//     cubeSineDriver += 0.01;\n//     mesh.position.z = 100 + Math.sin(cubeSineDriver) * 500;\n//     renderer.render(scene, camera);\n// }\n\n\n\n\n\nconst SmokeThing = () => {\n    const [geometryRef, geometry] = useResource();\n    const [materialRef, material] = useResource();\n    const ref = useRef();\n\n    const smokeGeo = new THREE.PlaneGeometry(300, 300);\n    \n    // useFrame(() => (ref.current.rotation.x = ref.current.rotation.y += 0.01))\n    const [ smokeTexture ] = useLoader(THREE.TextureLoader, [\n        \"https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png\"\n    ])\n\n    const smokeParticles = () => {\n        let smokeParticles = [];\n        for (p = 0; p < 150; p++) {\n            let particle = new THREE.Mesh(smokeGeo, smokeMaterial);\n            particle.position.set(\n                Math.random() * 500 - 250,\n                Math.random() * 500 - 250,\n                Math.random() * 1000 - 100\n            );\n            particle.rotation.z = Math.random() * 360;\n            scene.add(particle);\n            smokeParticles.push(particle);\n        }\n        return smokeParticles;\n    }\n\n    useFrame(({ clock }) => {\n        delta = clock.getDelta();\n        let sp = smokeParticles.length;\n        while (sp--) {\n            smokeParticles[sp].rotation.z += delta * 0.2;\n        }\n\n    })\n\n    return (\n        <group ref={ref}>\n            <ambientLight\n                intensity={0.3} \n                position={[0, 0, 40]} \n                penumbra={2} \n                decay={2}\n                color=\"#111111\"\n            />\n\n\n\n            <mesh \n                visible \n                userData={{ test: 'hello' }} \n                position={[1, 2, 3]} \n                rotation={[0, 0, 0]}\n                ref={ref}\n                onClick={e => console.log('click')}\n                onPointerOver={e => console.log('hover')}\n                onPointerOut={e => console.log('unhover')}\n            >\n                <planeGeometry \n                    attach=\"geometry\" \n                    args={[10000, 10000]} \n                />\n                <meshNormalMaterial attach=\"material\" />\n            </mesh>\n\n            <meshLambertMaterial \n                ref={materialRef}\n                color=\"0x00dddd\"\n                map={smokeTexture}\n                transparent={true}\n            />\n\n\n        </group>\n    )\n}\n\nconst SmokeContainer = () => {\n    const {\n        gl,                           // WebGL renderer \n        scene,                        // Default scene\n        camera,                       // Default camera\n        size,                         // Bounds of the view (which stretches 100% and auto-adjusts)\n        viewport,                     // Bounds of the viewport in 3d units + factor (size/viewport)\n        aspect,                       // Aspect ratio (size.width / size.height)\n        mouse,                        // Current 2D mouse coordinates\n        clock,                        // THREE.Clock (useful for useFrame deltas)\n        invalidate,                   // Invalidates a single frame (for <Canvas invalidateFrameloop />)\n        intersect,                    // Calls onMouseMove handlers for objects underneath the cursor\n        setDefaultCamera,             // Sets the default camera\n    } = useThree();\n\n\n    return (\n        <div \n            className=\"container block__three-container\" \n        >\n            \n            <Canvas\n                style={{ background: 'radial-gradient(at 50% 70%, #200f20 40%, #090b1f 80%, #050523 100%)' }}\n                camera={{ fov: 75, position: [0, 0, 60] }} \n                // children                      // Either a function child (which receives state) or regular children\n                // gl                            // Props that go into the default webGL-renderer\n                // camera                        // Props that go into the default camera\n                // raycaster                     // Props that go into the default raycaster\n                // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n                // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n                // gl2 = false                   // Enables webgl2\n                // concurrent = false            // Enables React concurrent mode\n                // resize = undefined            // Resize config, see react-use-measure's options\n                // orthographic = false          // Creates an orthographic camera if true\n                // noEvents = false              // Switch off raytracing and event support\n                // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n                // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n                // updateDefaultCamera = true    // Adjusts default camera on size changes\n                // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n                // onPointerMissed \n            >   \n                <rectAreaLight\n                    intensity={3}\n                    position={[0, 10, -10]}\n                    width={30}\n                    height={30}\n                    onUpdate={self => self.lookAt(new THREE.Vector3(0, 0, 0))}\n                />\n                <SmokeThing />\n\n            </Canvas> \n           \n            <TextLoop  />\n\n        </div>\n    );\n}\n\nexport default SmokeContainer;\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}