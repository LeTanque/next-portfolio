{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx\";\nvar __jsx = React.createElement;\nimport React, { // useCallback,\n// useEffect,\nuseRef // useState,\n, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { Canvas, extend as extendThree, useFrame // useLoader,\n, useResource, useThree } from \"react-three-fiber\"; // import { useSpring, a } from 'react-spring/three';\n// Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\n\nimport { EffectComposer } from \"./resources/postprocessing/EffectComposer\";\nimport { RenderPass } from \"./resources/postprocessing/RenderPass\";\nimport { GlitchPass } from \"./resources/postprocessing/GlitchPass\";\nextendThree({\n  EffectComposer: EffectComposer,\n  RenderPass: RenderPass,\n  GlitchPass: GlitchPass\n});\nimport TextLoop from \"../TextLoop\"; // Cast the lighting\n\nvar Lighting = function Lighting() {\n  var _useThree = useThree(),\n      mouse = _useThree.mouse;\n\n  var light = useRef();\n  useFrame(function () {\n    light.current.position.set(mouse.x / 20, -mouse.y / 20, 60);\n  });\n  console.log('mouse.x / 20 --> ', mouse.x);\n  console.log('light --> ', light);\n  return __jsx(React.Fragment, null, __jsx(\"directionalLight\", {\n    ref: light,\n    position: [-2, 0, 60],\n    intensity: 0.7,\n    color: \"#ff0000\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }));\n}; // // This renders text via canvas and projects it as a sprite\n// const Text = ({ opacity, color = 'white', fontSize = 410 }) => {\n//     return (\n//         <a.sprite scale={[ 1, 1, 1 ]} >\n//             <a.spriteMaterial attach=\"material\" transparent opacity={opacity}>\n//                 <canvasTexture attach=\"map\"   premultiplyAlpha   />\n//             </a.spriteMaterial>\n//         </a.sprite>\n//     )\n// }\n// The canvas houses this function, the scene. Scene is where the elements come together.\n\n\nvar SmokePuff = function SmokePuff(_ref) {\n  var geometry = _ref.geometry,\n      material = _ref.material;\n  var smokePuffRef = useRef(); // let tenToHundred = Math.random() * 100; // 10 - 99.99\n  // let speed = 0.01 + Math.random() / 200; // 0.1 - 0.19\n  // const cosWave = (Math.cos(tenToHundred) / 3) - 1.1;  // a cosign wave.  ~ 0.5 - 1.5\n\n  var factor = 1 + Math.random() * 2; // ~ 1-3\n\n  var xFactor = -100 + Math.random() * 200; // -100 - 100\n\n  var yFactor = -100 + Math.random() * 200; // -100 - 100\n\n  var zFactor = 10 + Math.random() * 10; //  10 - 20\n\n  var getRandomArbitrary = function getRandomArbitrary(min, max) {\n    return Math.random() * (max - min) + min;\n  };\n\n  var randomFactor = getRandomArbitrary(1.1, 2);\n  useFrame(function (_ref2) {\n    var clock = _ref2.clock; // tenToHundred += speed; // tenToHundred = tenToHundred + speed, plus it sets a unique new version of tenToHundred.\n    // let delta = clock.getDelta();  // Change in clock. Something like 0.0001 - 0.0099\n\n    var slowRotation = clock.elapsedTime * 0.017 * randomFactor + xFactor; // starts at ~0.0001 + xFactor and goes slow\n\n    var slowGrowth = Math.tanh(clock.elapsedTime / 18) + 3;\n    smokePuffRef.current.scale.set(slowGrowth, slowGrowth, 2);\n    smokePuffRef.current.rotation.z = slowRotation;\n    smokePuffRef.current.position.set(xFactor * factor, yFactor * factor, zFactor);\n  });\n  return __jsx(\"mesh\", {\n    ref: smokePuffRef,\n    material: material,\n    geometry: geometry,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  });\n};\n\nvar GenerateSmoke = function GenerateSmoke() {\n  var _useResource = useResource(),\n      _useResource2 = _slicedToArray(_useResource, 2),\n      geometryRef = _useResource2[0],\n      geometry = _useResource2[1];\n\n  var _useResource3 = useResource(),\n      _useResource4 = _slicedToArray(_useResource3, 2),\n      materialRef = _useResource4[0],\n      material = _useResource4[1];\n\n  var url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n  var texture = useMemo(function () {\n    return new THREE.TextureLoader().load(url);\n  }, [url]);\n  return __jsx(React.Fragment, null, __jsx(\"planeGeometry\", {\n    ref: geometryRef,\n    attach: \"geometry\",\n    args: [200, 200],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }), __jsx(\"meshLambertMaterial\", {\n    ref: materialRef,\n    attach: \"material\",\n    color: \"#ffffff\",\n    transparent: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, __jsx(\"primitive\", {\n    attach: \"map\",\n    object: texture,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  })), geometry && new Array(33).fill().map(function (_, index) {\n    return __jsx(SmokePuff, {\n      key: index,\n      material: material,\n      geometry: geometry,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    });\n  }));\n}; // This is the canvas. It's the lowest level element in the three/webGl chain\n\n\nvar CanvasicalSmoke = function CanvasicalSmoke() {\n  return __jsx(React.Fragment, null, __jsx(Canvas, {\n    className: \"container block__three-container\",\n    camera: {\n      fov: 75,\n      aspect: 0.5,\n      near: 1,\n      far: 10000,\n      position: [0, 0, 600]\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, __jsx(Lighting, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }), __jsx(GenerateSmoke, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  })), __jsx(TextLoop, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }));\n};\n\nexport default CanvasicalSmoke;","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx"],"names":["extend","extendThree","EffectComposer","RenderPass","GlitchPass","Lighting","mouse","useThree","light","useRef","useFrame","console","SmokePuff","geometry","material","smokePuffRef","factor","Math","xFactor","yFactor","zFactor","getRandomArbitrary","max","randomFactor","clock","slowRotation","slowGrowth","GenerateSmoke","geometryRef","useResource","materialRef","url","texture","useMemo","THREE","CanvasicalSmoke","fov","aspect","near","far","position"],"mappings":"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","sourcesContent":["import React, {\n    // useCallback,\n    // useEffect,\n    useRef,\n    // useState,\n    useMemo\n} from \"react\";\nimport * as THREE from \"three\";\nimport {\n    Canvas,\n    extend as extendThree,\n    useFrame,\n    // useLoader,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\n// import { useSpring, a } from 'react-spring/three';\n\n// Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\nimport { EffectComposer } from \"./resources/postprocessing/EffectComposer\";\nimport { RenderPass } from \"./resources/postprocessing/RenderPass\";\nimport { GlitchPass } from \"./resources/postprocessing/GlitchPass\";\nextendThree({ EffectComposer, RenderPass, GlitchPass });\n\nimport TextLoop from \"../TextLoop\";\n\n\n// Cast the lighting\nconst Lighting = () => {\n    const { mouse } = useThree();\n    const light = useRef();\n    \n    useFrame(() => {\n        light.current.position.set( mouse.x / 20, -mouse.y / 20, 60 )\n    });\n\n    console.log('mouse.x / 20 --> ', mouse.x);\n\n    console.log('light --> ', light);\n\n    return (\n        <>\n            {/* <pointLight \n                ref={light}  \n                color=\"#ff0000\" \n                position={[ -2, 0, 60 ]}  \n                distance={0}  \n                intensity={1.5} \n                decay={2}\n            /> */}\n            {/* <spotLight \n                ref={light}  \n                color=\"#ff0000\" \n                position={[ -2, 0, 60 ]}  \n                distance={0}  \n                angle={1.05}\n                intensity={1.5} \n                decay={2}\n            /> */}\n            \n            <directionalLight\n                ref={light} \n                position={[ -2, 0, 60 ]}  \n                intensity={0.7}  \n                color=\"#ff0000\" \n            /> \n           \n        </>\n    );\n};\n\n// // This renders text via canvas and projects it as a sprite\n// const Text = ({ opacity, color = 'white', fontSize = 410 }) => {\n//     return (\n//         <a.sprite scale={[ 1, 1, 1 ]} >\n//             <a.spriteMaterial attach=\"material\" transparent opacity={opacity}>\n//                 <canvasTexture attach=\"map\"   premultiplyAlpha   />\n//             </a.spriteMaterial>\n//         </a.sprite>\n//     )\n// }\n\n// The canvas houses this function, the scene. Scene is where the elements come together.\nconst SmokePuff = ({ geometry, material }) => {\n    let smokePuffRef = useRef();\n    // let tenToHundred = Math.random() * 100; // 10 - 99.99\n    // let speed = 0.01 + Math.random() / 200; // 0.1 - 0.19\n    // const cosWave = (Math.cos(tenToHundred) / 3) - 1.1;  // a cosign wave.  ~ 0.5 - 1.5\n    let factor = 1 + Math.random() * 2;  // ~ 1-3\n    let xFactor = -100 + Math.random() * 200;  // -100 - 100\n    let yFactor = -100 + Math.random() * 200;  // -100 - 100\n    let zFactor = 10 + Math.random() * 10;  //  10 - 20\n    \n    const getRandomArbitrary = (min, max) => Math.random() * (max - min) + min;\n    let randomFactor = getRandomArbitrary(1.1, 2);\n    \n    useFrame(({ clock }) => {\n        // tenToHundred += speed; // tenToHundred = tenToHundred + speed, plus it sets a unique new version of tenToHundred.\n        // let delta = clock.getDelta();  // Change in clock. Something like 0.0001 - 0.0099\n        let slowRotation = ((clock.elapsedTime * (0.017)) * randomFactor) + xFactor;  // starts at ~0.0001 + xFactor and goes slow\n        let slowGrowth = (Math.tanh(clock.elapsedTime / 18) + 3);\n\n        smokePuffRef.current.scale.set(slowGrowth, slowGrowth, 2);\n        smokePuffRef.current.rotation.z = slowRotation;\n        smokePuffRef.current.position.set(\n            xFactor * factor,\n            yFactor * factor,\n            zFactor\n        );\n    });\n\n    return <mesh  ref={smokePuffRef} material={material} geometry={geometry}  />;\n}\n\nconst GenerateSmoke = () => {\n    const [ geometryRef, geometry ] = useResource();\n    const [ materialRef, material ] = useResource();\n    const url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n    const texture = useMemo(() => new THREE.TextureLoader().load(url), [url]);\n    \n    return (\n        <>\n            \n\n            <planeGeometry \n                ref={geometryRef} \n                attach=\"geometry\"   \n                args={[200, 200]} \n            />\n            <meshLambertMaterial \n                ref={materialRef}\n                attach=\"material\" \n                color=\"#ffffff\"\n                transparent\n            >\n                <primitive attach=\"map\" object={texture} />\n            </meshLambertMaterial>\n\n            {geometry && new Array(33).fill().map((_, index) => (\n                <SmokePuff\n                    key={index}\n                    material={material}\n                    geometry={geometry}\n\n                />\n            ))}\n        </>\n    );\n}\n\n// This is the canvas. It's the lowest level element in the three/webGl chain\nconst CanvasicalSmoke = () => {\n\n    return (\n        <>\n            <Canvas\n                className=\"container block__three-container\"\n                camera={{\n                    fov: 75,\n                    aspect: 0.5,\n                    near: 1,\n                    far: 10000,\n                    position: [0, 0, 600]\n                }}\n            >\n                <Lighting />\n                <GenerateSmoke />\n                {/* <Text opacity={0.9}  color=\"black\" fontSize={150} ></Text> */}\n            </Canvas>\n            <TextLoop  />\n        </>\n    );\n};\n\nexport default CanvasicalSmoke;\n\n\n"]},"metadata":{},"sourceType":"module"}