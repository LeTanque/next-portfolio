{"ast":null,"code":"/**\n * @author mrdoob / http://mrdoob.com/\n */\nimport { BackSide, DoubleSide, CubeUVRefractionMapping, CubeUVReflectionMapping, LinearEncoding, ObjectSpaceNormalMap, TangentSpaceNormalMap, NoToneMapping } from '../../constants.js';\nimport { WebGLProgram } from './WebGLProgram.js';\n\nfunction WebGLPrograms(renderer, extensions, capabilities) {\n  var programs = [];\n  var isWebGL2 = capabilities.isWebGL2;\n  var logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n  var floatVertexTextures = capabilities.floatVertexTextures;\n  var precision = capabilities.precision;\n  var maxVertexUniforms = capabilities.maxVertexUniforms;\n  var vertexTextures = capabilities.vertexTextures;\n  var shaderIDs = {\n    MeshDepthMaterial: 'depth',\n    MeshDistanceMaterial: 'distanceRGBA',\n    MeshNormalMaterial: 'normal',\n    MeshBasicMaterial: 'basic',\n    MeshLambertMaterial: 'lambert',\n    MeshPhongMaterial: 'phong',\n    MeshToonMaterial: 'toon',\n    MeshStandardMaterial: 'physical',\n    MeshPhysicalMaterial: 'physical',\n    MeshMatcapMaterial: 'matcap',\n    LineBasicMaterial: 'basic',\n    LineDashedMaterial: 'dashed',\n    PointsMaterial: 'points',\n    ShadowMaterial: 'shadow',\n    SpriteMaterial: 'sprite'\n  };\n  var parameterNames = [\"precision\", \"isWebGL2\", \"supportsVertexTextures\", \"outputEncoding\", \"instancing\", \"numMultiviewViews\", \"map\", \"mapEncoding\", \"matcap\", \"matcapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\", \"envMapCubeUV\", \"lightMap\", \"lightMapEncoding\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"objectSpaceNormalMap\", \"tangentSpaceNormalMap\", \"clearcoatNormalMap\", \"displacementMap\", \"specularMap\", \"roughnessMap\", \"metalnessMap\", \"gradientMap\", \"alphaMap\", \"combine\", \"vertexColors\", \"vertexTangents\", \"vertexUvs\", \"uvsVertexOnly\", \"fog\", \"useFog\", \"fogExp2\", \"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\", \"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\", \"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\", \"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\", \"numRectAreaLights\", \"numDirLightShadows\", \"numPointLightShadows\", \"numSpotLightShadows\", \"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights', \"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"numClipIntersection\", \"depthPacking\", \"dithering\", \"sheen\"];\n\n  function allocateBones(object) {\n    var skeleton = object.skeleton;\n    var bones = skeleton.bones;\n\n    if (floatVertexTextures) {\n      return 1024;\n    } else {\n      // default for when object is not specified\n      // ( for example when prebuilding shader to be used with multiple objects )\n      //\n      //  - leave some extra space for other uniforms\n      //  - limit here is ANGLE's 254 max uniform vectors\n      //    (up to 54 should be safe)\n      var nVertexUniforms = maxVertexUniforms;\n      var nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);\n      var maxBones = Math.min(nVertexMatrices, bones.length);\n\n      if (maxBones < bones.length) {\n        console.warn('THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.');\n        return 0;\n      }\n\n      return maxBones;\n    }\n  }\n\n  function getTextureEncodingFromMap(map) {\n    var encoding;\n\n    if (!map) {\n      encoding = LinearEncoding;\n    } else if (map.isTexture) {\n      encoding = map.encoding;\n    } else if (map.isWebGLRenderTarget) {\n      console.warn(\"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\");\n      encoding = map.texture.encoding;\n    }\n\n    return encoding;\n  }\n\n  this.getParameters = function (material, lights, shadows, scene, nClipPlanes, nClipIntersection, object) {\n    var fog = scene.fog;\n    var environment = material.isMeshStandardMaterial ? scene.environment : null;\n    var envMap = material.envMap || environment;\n    var shaderID = shaderIDs[material.type]; // heuristics to create shader parameters according to lights in the scene\n    // (not to blow over maxLights budget)\n\n    var maxBones = object.isSkinnedMesh ? allocateBones(object) : 0;\n\n    if (material.precision !== null) {\n      precision = capabilities.getMaxPrecision(material.precision);\n\n      if (precision !== material.precision) {\n        console.warn('THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.');\n      }\n    }\n\n    var currentRenderTarget = renderer.getRenderTarget();\n    var numMultiviewViews = currentRenderTarget && currentRenderTarget.isWebGLMultiviewRenderTarget ? currentRenderTarget.numViews : 0;\n    var parameters = {\n      isWebGL2: isWebGL2,\n      shaderID: shaderID,\n      precision: precision,\n      instancing: object.isInstancedMesh === true,\n      supportsVertexTextures: vertexTextures,\n      numMultiviewViews: numMultiviewViews,\n      outputEncoding: currentRenderTarget !== null ? getTextureEncodingFromMap(currentRenderTarget.texture) : renderer.outputEncoding,\n      map: !!material.map,\n      mapEncoding: getTextureEncodingFromMap(material.map),\n      matcap: !!material.matcap,\n      matcapEncoding: getTextureEncodingFromMap(material.matcap),\n      envMap: !!envMap,\n      envMapMode: envMap && envMap.mapping,\n      envMapEncoding: getTextureEncodingFromMap(envMap),\n      envMapCubeUV: !!envMap && (envMap.mapping === CubeUVReflectionMapping || envMap.mapping === CubeUVRefractionMapping),\n      lightMap: !!material.lightMap,\n      lightMapEncoding: getTextureEncodingFromMap(material.lightMap),\n      aoMap: !!material.aoMap,\n      emissiveMap: !!material.emissiveMap,\n      emissiveMapEncoding: getTextureEncodingFromMap(material.emissiveMap),\n      bumpMap: !!material.bumpMap,\n      normalMap: !!material.normalMap,\n      objectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n      tangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n      clearcoatNormalMap: !!material.clearcoatNormalMap,\n      displacementMap: !!material.displacementMap,\n      roughnessMap: !!material.roughnessMap,\n      metalnessMap: !!material.metalnessMap,\n      specularMap: !!material.specularMap,\n      alphaMap: !!material.alphaMap,\n      gradientMap: !!material.gradientMap,\n      sheen: !!material.sheen,\n      combine: material.combine,\n      vertexTangents: material.normalMap && material.vertexTangents,\n      vertexColors: material.vertexColors,\n      vertexUvs: !!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatNormalMap || !!material.displacementMap,\n      uvsVertexOnly: !(!!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatNormalMap) && !!material.displacementMap,\n      fog: !!fog,\n      useFog: material.fog,\n      fogExp2: fog && fog.isFogExp2,\n      flatShading: material.flatShading,\n      sizeAttenuation: material.sizeAttenuation,\n      logarithmicDepthBuffer: logarithmicDepthBuffer,\n      skinning: material.skinning && maxBones > 0,\n      maxBones: maxBones,\n      useVertexTexture: floatVertexTextures,\n      morphTargets: material.morphTargets,\n      morphNormals: material.morphNormals,\n      maxMorphTargets: renderer.maxMorphTargets,\n      maxMorphNormals: renderer.maxMorphNormals,\n      numDirLights: lights.directional.length,\n      numPointLights: lights.point.length,\n      numSpotLights: lights.spot.length,\n      numRectAreaLights: lights.rectArea.length,\n      numHemiLights: lights.hemi.length,\n      numDirLightShadows: lights.directionalShadowMap.length,\n      numPointLightShadows: lights.pointShadowMap.length,\n      numSpotLightShadows: lights.spotShadowMap.length,\n      numClippingPlanes: nClipPlanes,\n      numClipIntersection: nClipIntersection,\n      dithering: material.dithering,\n      shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n      shadowMapType: renderer.shadowMap.type,\n      toneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n      physicallyCorrectLights: renderer.physicallyCorrectLights,\n      premultipliedAlpha: material.premultipliedAlpha,\n      alphaTest: material.alphaTest,\n      doubleSided: material.side === DoubleSide,\n      flipSided: material.side === BackSide,\n      depthPacking: material.depthPacking !== undefined ? material.depthPacking : false\n    };\n    return parameters;\n  };\n\n  this.getProgramCacheKey = function (material, parameters) {\n    var array = [];\n\n    if (parameters.shaderID) {\n      array.push(parameters.shaderID);\n    } else {\n      array.push(material.fragmentShader);\n      array.push(material.vertexShader);\n    }\n\n    if (material.defines !== undefined) {\n      for (var name in material.defines) {\n        array.push(name);\n        array.push(material.defines[name]);\n      }\n    }\n\n    if (material.isRawShaderMaterial === undefined) {\n      for (var i = 0; i < parameterNames.length; i++) {\n        array.push(parameters[parameterNames[i]]);\n      }\n\n      array.push(renderer.outputEncoding);\n      array.push(renderer.gammaFactor);\n    }\n\n    array.push(material.onBeforeCompile.toString());\n    return array.join();\n  };\n\n  this.acquireProgram = function (material, shader, parameters, cacheKey) {\n    var program; // Check if code has been already compiled\n\n    for (var p = 0, pl = programs.length; p < pl; p++) {\n      var preexistingProgram = programs[p];\n\n      if (preexistingProgram.cacheKey === cacheKey) {\n        program = preexistingProgram;\n        ++program.usedTimes;\n        break;\n      }\n    }\n\n    if (program === undefined) {\n      program = new WebGLProgram(renderer, extensions, cacheKey, material, shader, parameters);\n      programs.push(program);\n    }\n\n    return program;\n  };\n\n  this.releaseProgram = function (program) {\n    if (--program.usedTimes === 0) {\n      // Remove from unordered set\n      var i = programs.indexOf(program);\n      programs[i] = programs[programs.length - 1];\n      programs.pop(); // Free WebGL resources\n\n      program.destroy();\n    }\n  }; // Exposed for resource monitoring & error feedback via renderer.info:\n\n\n  this.programs = programs;\n}\n\nexport { WebGLPrograms };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/renderers/webgl/WebGLPrograms.js"],"names":["BackSide","DoubleSide","CubeUVRefractionMapping","CubeUVReflectionMapping","LinearEncoding","ObjectSpaceNormalMap","TangentSpaceNormalMap","NoToneMapping","WebGLProgram","WebGLPrograms","renderer","extensions","capabilities","programs","isWebGL2","logarithmicDepthBuffer","floatVertexTextures","precision","maxVertexUniforms","vertexTextures","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshNormalMaterial","MeshBasicMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","parameterNames","allocateBones","object","skeleton","bones","nVertexUniforms","nVertexMatrices","Math","floor","maxBones","min","length","console","warn","getTextureEncodingFromMap","map","encoding","isTexture","isWebGLRenderTarget","texture","getParameters","material","lights","shadows","scene","nClipPlanes","nClipIntersection","fog","environment","isMeshStandardMaterial","envMap","shaderID","type","isSkinnedMesh","getMaxPrecision","currentRenderTarget","getRenderTarget","numMultiviewViews","isWebGLMultiviewRenderTarget","numViews","parameters","instancing","isInstancedMesh","supportsVertexTextures","outputEncoding","mapEncoding","matcap","matcapEncoding","envMapMode","mapping","envMapEncoding","envMapCubeUV","lightMap","lightMapEncoding","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","objectSpaceNormalMap","normalMapType","tangentSpaceNormalMap","clearcoatNormalMap","displacementMap","roughnessMap","metalnessMap","specularMap","alphaMap","gradientMap","sheen","combine","vertexTangents","vertexColors","vertexUvs","uvsVertexOnly","useFog","fogExp2","isFogExp2","flatShading","sizeAttenuation","skinning","useVertexTexture","morphTargets","morphNormals","maxMorphTargets","maxMorphNormals","numDirLights","directional","numPointLights","point","numSpotLights","spot","numRectAreaLights","rectArea","numHemiLights","hemi","numDirLightShadows","directionalShadowMap","numPointLightShadows","pointShadowMap","numSpotLightShadows","spotShadowMap","numClippingPlanes","numClipIntersection","dithering","shadowMapEnabled","shadowMap","enabled","shadowMapType","toneMapping","toneMapped","physicallyCorrectLights","premultipliedAlpha","alphaTest","doubleSided","side","flipSided","depthPacking","undefined","getProgramCacheKey","array","push","fragmentShader","vertexShader","defines","name","isRawShaderMaterial","i","gammaFactor","onBeforeCompile","toString","join","acquireProgram","shader","cacheKey","program","p","pl","preexistingProgram","usedTimes","releaseProgram","indexOf","pop","destroy"],"mappings":"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","sourcesContent":["/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nimport { BackSide, DoubleSide, CubeUVRefractionMapping, CubeUVReflectionMapping, LinearEncoding, ObjectSpaceNormalMap, TangentSpaceNormalMap, NoToneMapping } from '../../constants.js';\nimport { WebGLProgram } from './WebGLProgram.js';\n\nfunction WebGLPrograms( renderer, extensions, capabilities ) {\n\n\tvar programs = [];\n\n\tvar isWebGL2 = capabilities.isWebGL2;\n\tvar logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n\tvar floatVertexTextures = capabilities.floatVertexTextures;\n\tvar precision = capabilities.precision;\n\tvar maxVertexUniforms = capabilities.maxVertexUniforms;\n\tvar vertexTextures = capabilities.vertexTextures;\n\n\tvar shaderIDs = {\n\t\tMeshDepthMaterial: 'depth',\n\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\tMeshNormalMaterial: 'normal',\n\t\tMeshBasicMaterial: 'basic',\n\t\tMeshLambertMaterial: 'lambert',\n\t\tMeshPhongMaterial: 'phong',\n\t\tMeshToonMaterial: 'toon',\n\t\tMeshStandardMaterial: 'physical',\n\t\tMeshPhysicalMaterial: 'physical',\n\t\tMeshMatcapMaterial: 'matcap',\n\t\tLineBasicMaterial: 'basic',\n\t\tLineDashedMaterial: 'dashed',\n\t\tPointsMaterial: 'points',\n\t\tShadowMaterial: 'shadow',\n\t\tSpriteMaterial: 'sprite'\n\t};\n\n\tvar parameterNames = [\n\t\t\"precision\", \"isWebGL2\", \"supportsVertexTextures\", \"outputEncoding\", \"instancing\", \"numMultiviewViews\",\n\t\t\"map\", \"mapEncoding\", \"matcap\", \"matcapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\", \"envMapCubeUV\",\n\t\t\"lightMap\", \"lightMapEncoding\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"objectSpaceNormalMap\", \"tangentSpaceNormalMap\", \"clearcoatNormalMap\", \"displacementMap\", \"specularMap\",\n\t\t\"roughnessMap\", \"metalnessMap\", \"gradientMap\",\n\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"vertexTangents\", \"vertexUvs\", \"uvsVertexOnly\", \"fog\", \"useFog\", \"fogExp2\",\n\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n\t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\", \"numRectAreaLights\",\n\t\t\"numDirLightShadows\", \"numPointLightShadows\", \"numSpotLightShadows\",\n\t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n\t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"numClipIntersection\", \"depthPacking\", \"dithering\",\n\t\t\"sheen\"\n\t];\n\n\n\tfunction allocateBones( object ) {\n\n\t\tvar skeleton = object.skeleton;\n\t\tvar bones = skeleton.bones;\n\n\t\tif ( floatVertexTextures ) {\n\n\t\t\treturn 1024;\n\n\t\t} else {\n\n\t\t\t// default for when object is not specified\n\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t//\n\t\t\t//  - leave some extra space for other uniforms\n\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t\t\t//    (up to 54 should be safe)\n\n\t\t\tvar nVertexUniforms = maxVertexUniforms;\n\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n\t\t\tvar maxBones = Math.min( nVertexMatrices, bones.length );\n\n\t\t\tif ( maxBones < bones.length ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\treturn maxBones;\n\n\t\t}\n\n\t}\n\n\tfunction getTextureEncodingFromMap( map ) {\n\n\t\tvar encoding;\n\n\t\tif ( ! map ) {\n\n\t\t\tencoding = LinearEncoding;\n\n\t\t} else if ( map.isTexture ) {\n\n\t\t\tencoding = map.encoding;\n\n\t\t} else if ( map.isWebGLRenderTarget ) {\n\n\t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\tencoding = map.texture.encoding;\n\n\t\t}\n\n\t\treturn encoding;\n\n\t}\n\n\tthis.getParameters = function ( material, lights, shadows, scene, nClipPlanes, nClipIntersection, object ) {\n\n\t\tvar fog = scene.fog;\n\t\tvar environment = material.isMeshStandardMaterial ? scene.environment : null;\n\n\t\tvar envMap = material.envMap || environment;\n\n\t\tvar shaderID = shaderIDs[ material.type ];\n\n\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t// (not to blow over maxLights budget)\n\n\t\tvar maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;\n\n\t\tif ( material.precision !== null ) {\n\n\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n\t\t\tif ( precision !== material.precision ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\t\tvar numMultiviewViews = currentRenderTarget && currentRenderTarget.isWebGLMultiviewRenderTarget ? currentRenderTarget.numViews : 0;\n\n\t\tvar parameters = {\n\n\t\t\tisWebGL2: isWebGL2,\n\n\t\t\tshaderID: shaderID,\n\n\t\t\tprecision: precision,\n\n\t\t\tinstancing: object.isInstancedMesh === true,\n\n\t\t\tsupportsVertexTextures: vertexTextures,\n\t\t\tnumMultiviewViews: numMultiviewViews,\n\t\t\toutputEncoding: ( currentRenderTarget !== null ) ? getTextureEncodingFromMap( currentRenderTarget.texture ) : renderer.outputEncoding,\n\t\t\tmap: !! material.map,\n\t\t\tmapEncoding: getTextureEncodingFromMap( material.map ),\n\t\t\tmatcap: !! material.matcap,\n\t\t\tmatcapEncoding: getTextureEncodingFromMap( material.matcap ),\n\t\t\tenvMap: !! envMap,\n\t\t\tenvMapMode: envMap && envMap.mapping,\n\t\t\tenvMapEncoding: getTextureEncodingFromMap( envMap ),\n\t\t\tenvMapCubeUV: ( !! envMap ) && ( ( envMap.mapping === CubeUVReflectionMapping ) || ( envMap.mapping === CubeUVRefractionMapping ) ),\n\t\t\tlightMap: !! material.lightMap,\n\t\t\tlightMapEncoding: getTextureEncodingFromMap( material.lightMap ),\n\t\t\taoMap: !! material.aoMap,\n\t\t\temissiveMap: !! material.emissiveMap,\n\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap ),\n\t\t\tbumpMap: !! material.bumpMap,\n\t\t\tnormalMap: !! material.normalMap,\n\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n\t\t\ttangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n\t\t\tclearcoatNormalMap: !! material.clearcoatNormalMap,\n\t\t\tdisplacementMap: !! material.displacementMap,\n\t\t\troughnessMap: !! material.roughnessMap,\n\t\t\tmetalnessMap: !! material.metalnessMap,\n\t\t\tspecularMap: !! material.specularMap,\n\t\t\talphaMap: !! material.alphaMap,\n\n\t\t\tgradientMap: !! material.gradientMap,\n\n\t\t\tsheen: !! material.sheen,\n\n\t\t\tcombine: material.combine,\n\n\t\t\tvertexTangents: ( material.normalMap && material.vertexTangents ),\n\t\t\tvertexColors: material.vertexColors,\n\t\t\tvertexUvs: !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap || !! material.displacementMap,\n\t\t\tuvsVertexOnly: ! ( !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap ) && !! material.displacementMap,\n\n\t\t\tfog: !! fog,\n\t\t\tuseFog: material.fog,\n\t\t\tfogExp2: ( fog && fog.isFogExp2 ),\n\n\t\t\tflatShading: material.flatShading,\n\n\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\t\tskinning: material.skinning && maxBones > 0,\n\t\t\tmaxBones: maxBones,\n\t\t\tuseVertexTexture: floatVertexTextures,\n\n\t\t\tmorphTargets: material.morphTargets,\n\t\t\tmorphNormals: material.morphNormals,\n\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\n\t\t\tnumDirLights: lights.directional.length,\n\t\t\tnumPointLights: lights.point.length,\n\t\t\tnumSpotLights: lights.spot.length,\n\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\tnumHemiLights: lights.hemi.length,\n\n\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\n\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\n\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\n\n\t\t\tnumClippingPlanes: nClipPlanes,\n\t\t\tnumClipIntersection: nClipIntersection,\n\n\t\t\tdithering: material.dithering,\n\n\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n\t\t\tshadowMapType: renderer.shadowMap.type,\n\n\t\t\ttoneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\n\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n\t\t\talphaTest: material.alphaTest,\n\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\tflipSided: material.side === BackSide,\n\n\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false\n\n\t\t};\n\n\t\treturn parameters;\n\n\t};\n\n\tthis.getProgramCacheKey = function ( material, parameters ) {\n\n\t\tvar array = [];\n\n\t\tif ( parameters.shaderID ) {\n\n\t\t\tarray.push( parameters.shaderID );\n\n\t\t} else {\n\n\t\t\tarray.push( material.fragmentShader );\n\t\t\tarray.push( material.vertexShader );\n\n\t\t}\n\n\t\tif ( material.defines !== undefined ) {\n\n\t\t\tfor ( var name in material.defines ) {\n\n\t\t\t\tarray.push( name );\n\t\t\t\tarray.push( material.defines[ name ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.isRawShaderMaterial === undefined ) {\n\n\t\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\n\t\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\n\t\t\t}\n\n\t\t\tarray.push( renderer.outputEncoding );\n\t\t\tarray.push( renderer.gammaFactor );\n\n\t\t}\n\n\t\tarray.push( material.onBeforeCompile.toString() );\n\n\t\treturn array.join();\n\n\t};\n\n\tthis.acquireProgram = function ( material, shader, parameters, cacheKey ) {\n\n\t\tvar program;\n\n\t\t// Check if code has been already compiled\n\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\n\t\t\tvar preexistingProgram = programs[ p ];\n\n\t\t\tif ( preexistingProgram.cacheKey === cacheKey ) {\n\n\t\t\t\tprogram = preexistingProgram;\n\t\t\t\t++ program.usedTimes;\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( program === undefined ) {\n\n\t\t\tprogram = new WebGLProgram( renderer, extensions, cacheKey, material, shader, parameters );\n\t\t\tprograms.push( program );\n\n\t\t}\n\n\t\treturn program;\n\n\t};\n\n\tthis.releaseProgram = function ( program ) {\n\n\t\tif ( -- program.usedTimes === 0 ) {\n\n\t\t\t// Remove from unordered set\n\t\t\tvar i = programs.indexOf( program );\n\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\tprograms.pop();\n\n\t\t\t// Free WebGL resources\n\t\t\tprogram.destroy();\n\n\t\t}\n\n\t};\n\n\t// Exposed for resource monitoring & error feedback via renderer.info:\n\tthis.programs = programs;\n\n}\n\n\nexport { WebGLPrograms };\n"]},"metadata":{},"sourceType":"module"}