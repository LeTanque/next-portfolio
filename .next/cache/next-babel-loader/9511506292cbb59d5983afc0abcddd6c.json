{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _parseFloat from \"@babel/runtime-corejs2/core-js/parse-float\";\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nimport { NotEqualDepth, GreaterDepth, GreaterEqualDepth, EqualDepth, LessEqualDepth, LessDepth, AlwaysDepth, NeverDepth, CullFaceFront, CullFaceBack, CullFaceNone, DoubleSide, BackSide, CustomBlending, MultiplyBlending, SubtractiveBlending, AdditiveBlending, NoBlending, NormalBlending, AddEquation, SubtractEquation, ReverseSubtractEquation, MinEquation, MaxEquation, ZeroFactor, OneFactor, SrcColorFactor, SrcAlphaFactor, SrcAlphaSaturateFactor, DstColorFactor, DstAlphaFactor, OneMinusSrcColorFactor, OneMinusSrcAlphaFactor, OneMinusDstColorFactor, OneMinusDstAlphaFactor } from '../../constants.js';\nimport { Vector4 } from '../../math/Vector4.js';\n\nfunction WebGLState(gl, extensions, capabilities) {\n  var _equationToGL, _factorToGL;\n\n  var isWebGL2 = capabilities.isWebGL2;\n\n  function ColorBuffer() {\n    var locked = false;\n    var color = new Vector4();\n    var currentColorMask = null;\n    var currentColorClear = new Vector4(0, 0, 0, 0);\n    return {\n      setMask: function setMask(colorMask) {\n        if (currentColorMask !== colorMask && !locked) {\n          gl.colorMask(colorMask, colorMask, colorMask, colorMask);\n          currentColorMask = colorMask;\n        }\n      },\n      setLocked: function setLocked(lock) {\n        locked = lock;\n      },\n      setClear: function setClear(r, g, b, a, premultipliedAlpha) {\n        if (premultipliedAlpha === true) {\n          r *= a;\n          g *= a;\n          b *= a;\n        }\n\n        color.set(r, g, b, a);\n\n        if (currentColorClear.equals(color) === false) {\n          gl.clearColor(r, g, b, a);\n          currentColorClear.copy(color);\n        }\n      },\n      reset: function reset() {\n        locked = false;\n        currentColorMask = null;\n        currentColorClear.set(-1, 0, 0, 0); // set to invalid state\n      }\n    };\n  }\n\n  function DepthBuffer() {\n    var locked = false;\n    var currentDepthMask = null;\n    var currentDepthFunc = null;\n    var currentDepthClear = null;\n    return {\n      setTest: function setTest(depthTest) {\n        if (depthTest) {\n          enable(gl.DEPTH_TEST);\n        } else {\n          disable(gl.DEPTH_TEST);\n        }\n      },\n      setMask: function setMask(depthMask) {\n        if (currentDepthMask !== depthMask && !locked) {\n          gl.depthMask(depthMask);\n          currentDepthMask = depthMask;\n        }\n      },\n      setFunc: function setFunc(depthFunc) {\n        if (currentDepthFunc !== depthFunc) {\n          if (depthFunc) {\n            switch (depthFunc) {\n              case NeverDepth:\n                gl.depthFunc(gl.NEVER);\n                break;\n\n              case AlwaysDepth:\n                gl.depthFunc(gl.ALWAYS);\n                break;\n\n              case LessDepth:\n                gl.depthFunc(gl.LESS);\n                break;\n\n              case LessEqualDepth:\n                gl.depthFunc(gl.LEQUAL);\n                break;\n\n              case EqualDepth:\n                gl.depthFunc(gl.EQUAL);\n                break;\n\n              case GreaterEqualDepth:\n                gl.depthFunc(gl.GEQUAL);\n                break;\n\n              case GreaterDepth:\n                gl.depthFunc(gl.GREATER);\n                break;\n\n              case NotEqualDepth:\n                gl.depthFunc(gl.NOTEQUAL);\n                break;\n\n              default:\n                gl.depthFunc(gl.LEQUAL);\n            }\n          } else {\n            gl.depthFunc(gl.LEQUAL);\n          }\n\n          currentDepthFunc = depthFunc;\n        }\n      },\n      setLocked: function setLocked(lock) {\n        locked = lock;\n      },\n      setClear: function setClear(depth) {\n        if (currentDepthClear !== depth) {\n          gl.clearDepth(depth);\n          currentDepthClear = depth;\n        }\n      },\n      reset: function reset() {\n        locked = false;\n        currentDepthMask = null;\n        currentDepthFunc = null;\n        currentDepthClear = null;\n      }\n    };\n  }\n\n  function StencilBuffer() {\n    var locked = false;\n    var currentStencilMask = null;\n    var currentStencilFunc = null;\n    var currentStencilRef = null;\n    var currentStencilFuncMask = null;\n    var currentStencilFail = null;\n    var currentStencilZFail = null;\n    var currentStencilZPass = null;\n    var currentStencilClear = null;\n    return {\n      setTest: function setTest(stencilTest) {\n        if (!locked) {\n          if (stencilTest) {\n            enable(gl.STENCIL_TEST);\n          } else {\n            disable(gl.STENCIL_TEST);\n          }\n        }\n      },\n      setMask: function setMask(stencilMask) {\n        if (currentStencilMask !== stencilMask && !locked) {\n          gl.stencilMask(stencilMask);\n          currentStencilMask = stencilMask;\n        }\n      },\n      setFunc: function setFunc(stencilFunc, stencilRef, stencilMask) {\n        if (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {\n          gl.stencilFunc(stencilFunc, stencilRef, stencilMask);\n          currentStencilFunc = stencilFunc;\n          currentStencilRef = stencilRef;\n          currentStencilFuncMask = stencilMask;\n        }\n      },\n      setOp: function setOp(stencilFail, stencilZFail, stencilZPass) {\n        if (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {\n          gl.stencilOp(stencilFail, stencilZFail, stencilZPass);\n          currentStencilFail = stencilFail;\n          currentStencilZFail = stencilZFail;\n          currentStencilZPass = stencilZPass;\n        }\n      },\n      setLocked: function setLocked(lock) {\n        locked = lock;\n      },\n      setClear: function setClear(stencil) {\n        if (currentStencilClear !== stencil) {\n          gl.clearStencil(stencil);\n          currentStencilClear = stencil;\n        }\n      },\n      reset: function reset() {\n        locked = false;\n        currentStencilMask = null;\n        currentStencilFunc = null;\n        currentStencilRef = null;\n        currentStencilFuncMask = null;\n        currentStencilFail = null;\n        currentStencilZFail = null;\n        currentStencilZPass = null;\n        currentStencilClear = null;\n      }\n    };\n  } //\n\n\n  var colorBuffer = new ColorBuffer();\n  var depthBuffer = new DepthBuffer();\n  var stencilBuffer = new StencilBuffer();\n  var maxVertexAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n  var newAttributes = new Uint8Array(maxVertexAttributes);\n  var enabledAttributes = new Uint8Array(maxVertexAttributes);\n  var attributeDivisors = new Uint8Array(maxVertexAttributes);\n  var enabledCapabilities = {};\n  var currentProgram = null;\n  var currentBlendingEnabled = null;\n  var currentBlending = null;\n  var currentBlendEquation = null;\n  var currentBlendSrc = null;\n  var currentBlendDst = null;\n  var currentBlendEquationAlpha = null;\n  var currentBlendSrcAlpha = null;\n  var currentBlendDstAlpha = null;\n  var currentPremultipledAlpha = false;\n  var currentFlipSided = null;\n  var currentCullFace = null;\n  var currentLineWidth = null;\n  var currentPolygonOffsetFactor = null;\n  var currentPolygonOffsetUnits = null;\n  var maxTextures = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n  var lineWidthAvailable = false;\n  var version = 0;\n  var glVersion = gl.getParameter(gl.VERSION);\n\n  if (glVersion.indexOf('WebGL') !== -1) {\n    version = _parseFloat(/^WebGL\\ ([0-9])/.exec(glVersion)[1]);\n    lineWidthAvailable = version >= 1.0;\n  } else if (glVersion.indexOf('OpenGL ES') !== -1) {\n    version = _parseFloat(/^OpenGL\\ ES\\ ([0-9])/.exec(glVersion)[1]);\n    lineWidthAvailable = version >= 2.0;\n  }\n\n  var currentTextureSlot = null;\n  var currentBoundTextures = {};\n  var currentScissor = new Vector4();\n  var currentViewport = new Vector4();\n\n  function createTexture(type, target, count) {\n    var data = new Uint8Array(4); // 4 is required to match default unpack alignment of 4.\n\n    var texture = gl.createTexture();\n    gl.bindTexture(type, texture);\n    gl.texParameteri(type, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(type, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n    for (var i = 0; i < count; i++) {\n      gl.texImage2D(target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);\n    }\n\n    return texture;\n  }\n\n  var emptyTextures = {};\n  emptyTextures[gl.TEXTURE_2D] = createTexture(gl.TEXTURE_2D, gl.TEXTURE_2D, 1);\n  emptyTextures[gl.TEXTURE_CUBE_MAP] = createTexture(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6); // init\n\n  colorBuffer.setClear(0, 0, 0, 1);\n  depthBuffer.setClear(1);\n  stencilBuffer.setClear(0);\n  enable(gl.DEPTH_TEST);\n  depthBuffer.setFunc(LessEqualDepth);\n  setFlipSided(false);\n  setCullFace(CullFaceBack);\n  enable(gl.CULL_FACE);\n  setBlending(NoBlending); //\n\n  function initAttributes() {\n    for (var i = 0, l = newAttributes.length; i < l; i++) {\n      newAttributes[i] = 0;\n    }\n  }\n\n  function enableAttribute(attribute) {\n    enableAttributeAndDivisor(attribute, 0);\n  }\n\n  function enableAttributeAndDivisor(attribute, meshPerAttribute) {\n    newAttributes[attribute] = 1;\n\n    if (enabledAttributes[attribute] === 0) {\n      gl.enableVertexAttribArray(attribute);\n      enabledAttributes[attribute] = 1;\n    }\n\n    if (attributeDivisors[attribute] !== meshPerAttribute) {\n      var extension = isWebGL2 ? gl : extensions.get('ANGLE_instanced_arrays');\n      extension[isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE'](attribute, meshPerAttribute);\n      attributeDivisors[attribute] = meshPerAttribute;\n    }\n  }\n\n  function disableUnusedAttributes() {\n    for (var i = 0, l = enabledAttributes.length; i !== l; ++i) {\n      if (enabledAttributes[i] !== newAttributes[i]) {\n        gl.disableVertexAttribArray(i);\n        enabledAttributes[i] = 0;\n      }\n    }\n  }\n\n  function enable(id) {\n    if (enabledCapabilities[id] !== true) {\n      gl.enable(id);\n      enabledCapabilities[id] = true;\n    }\n  }\n\n  function disable(id) {\n    if (enabledCapabilities[id] !== false) {\n      gl.disable(id);\n      enabledCapabilities[id] = false;\n    }\n  }\n\n  function useProgram(program) {\n    if (currentProgram !== program) {\n      gl.useProgram(program);\n      currentProgram = program;\n      return true;\n    }\n\n    return false;\n  }\n\n  var equationToGL = (_equationToGL = {}, _defineProperty(_equationToGL, AddEquation, gl.FUNC_ADD), _defineProperty(_equationToGL, SubtractEquation, gl.FUNC_SUBTRACT), _defineProperty(_equationToGL, ReverseSubtractEquation, gl.FUNC_REVERSE_SUBTRACT), _equationToGL);\n\n  if (isWebGL2) {\n    equationToGL[MinEquation] = gl.MIN;\n    equationToGL[MaxEquation] = gl.MAX;\n  } else {\n    var extension = extensions.get('EXT_blend_minmax');\n\n    if (extension !== null) {\n      equationToGL[MinEquation] = extension.MIN_EXT;\n      equationToGL[MaxEquation] = extension.MAX_EXT;\n    }\n  }\n\n  var factorToGL = (_factorToGL = {}, _defineProperty(_factorToGL, ZeroFactor, gl.ZERO), _defineProperty(_factorToGL, OneFactor, gl.ONE), _defineProperty(_factorToGL, SrcColorFactor, gl.SRC_COLOR), _defineProperty(_factorToGL, SrcAlphaFactor, gl.SRC_ALPHA), _defineProperty(_factorToGL, SrcAlphaSaturateFactor, gl.SRC_ALPHA_SATURATE), _defineProperty(_factorToGL, DstColorFactor, gl.DST_COLOR), _defineProperty(_factorToGL, DstAlphaFactor, gl.DST_ALPHA), _defineProperty(_factorToGL, OneMinusSrcColorFactor, gl.ONE_MINUS_SRC_COLOR), _defineProperty(_factorToGL, OneMinusSrcAlphaFactor, gl.ONE_MINUS_SRC_ALPHA), _defineProperty(_factorToGL, OneMinusDstColorFactor, gl.ONE_MINUS_DST_COLOR), _defineProperty(_factorToGL, OneMinusDstAlphaFactor, gl.ONE_MINUS_DST_ALPHA), _factorToGL);\n\n  function setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {\n    if (blending === NoBlending) {\n      if (currentBlendingEnabled) {\n        disable(gl.BLEND);\n        currentBlendingEnabled = false;\n      }\n\n      return;\n    }\n\n    if (!currentBlendingEnabled) {\n      enable(gl.BLEND);\n      currentBlendingEnabled = true;\n    }\n\n    if (blending !== CustomBlending) {\n      if (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {\n        if (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {\n          gl.blendEquation(gl.FUNC_ADD);\n          currentBlendEquation = AddEquation;\n          currentBlendEquationAlpha = AddEquation;\n        }\n\n        if (premultipliedAlpha) {\n          switch (blending) {\n            case NormalBlending:\n              gl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n              break;\n\n            case AdditiveBlending:\n              gl.blendFunc(gl.ONE, gl.ONE);\n              break;\n\n            case SubtractiveBlending:\n              gl.blendFuncSeparate(gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA);\n              break;\n\n            case MultiplyBlending:\n              gl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA);\n              break;\n\n            default:\n              console.error('THREE.WebGLState: Invalid blending: ', blending);\n              break;\n          }\n        } else {\n          switch (blending) {\n            case NormalBlending:\n              gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n              break;\n\n            case AdditiveBlending:\n              gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\n              break;\n\n            case SubtractiveBlending:\n              gl.blendFunc(gl.ZERO, gl.ONE_MINUS_SRC_COLOR);\n              break;\n\n            case MultiplyBlending:\n              gl.blendFunc(gl.ZERO, gl.SRC_COLOR);\n              break;\n\n            default:\n              console.error('THREE.WebGLState: Invalid blending: ', blending);\n              break;\n          }\n        }\n\n        currentBlendSrc = null;\n        currentBlendDst = null;\n        currentBlendSrcAlpha = null;\n        currentBlendDstAlpha = null;\n        currentBlending = blending;\n        currentPremultipledAlpha = premultipliedAlpha;\n      }\n\n      return;\n    } // custom blending\n\n\n    blendEquationAlpha = blendEquationAlpha || blendEquation;\n    blendSrcAlpha = blendSrcAlpha || blendSrc;\n    blendDstAlpha = blendDstAlpha || blendDst;\n\n    if (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {\n      gl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);\n      currentBlendEquation = blendEquation;\n      currentBlendEquationAlpha = blendEquationAlpha;\n    }\n\n    if (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {\n      gl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);\n      currentBlendSrc = blendSrc;\n      currentBlendDst = blendDst;\n      currentBlendSrcAlpha = blendSrcAlpha;\n      currentBlendDstAlpha = blendDstAlpha;\n    }\n\n    currentBlending = blending;\n    currentPremultipledAlpha = null;\n  }\n\n  function setMaterial(material, frontFaceCW) {\n    material.side === DoubleSide ? disable(gl.CULL_FACE) : enable(gl.CULL_FACE);\n    var flipSided = material.side === BackSide;\n    if (frontFaceCW) flipSided = !flipSided;\n    setFlipSided(flipSided);\n    material.blending === NormalBlending && material.transparent === false ? setBlending(NoBlending) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);\n    depthBuffer.setFunc(material.depthFunc);\n    depthBuffer.setTest(material.depthTest);\n    depthBuffer.setMask(material.depthWrite);\n    colorBuffer.setMask(material.colorWrite);\n    var stencilWrite = material.stencilWrite;\n    stencilBuffer.setTest(stencilWrite);\n\n    if (stencilWrite) {\n      stencilBuffer.setMask(material.stencilWriteMask);\n      stencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);\n      stencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);\n    }\n\n    setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);\n  } //\n\n\n  function setFlipSided(flipSided) {\n    if (currentFlipSided !== flipSided) {\n      if (flipSided) {\n        gl.frontFace(gl.CW);\n      } else {\n        gl.frontFace(gl.CCW);\n      }\n\n      currentFlipSided = flipSided;\n    }\n  }\n\n  function setCullFace(cullFace) {\n    if (cullFace !== CullFaceNone) {\n      enable(gl.CULL_FACE);\n\n      if (cullFace !== currentCullFace) {\n        if (cullFace === CullFaceBack) {\n          gl.cullFace(gl.BACK);\n        } else if (cullFace === CullFaceFront) {\n          gl.cullFace(gl.FRONT);\n        } else {\n          gl.cullFace(gl.FRONT_AND_BACK);\n        }\n      }\n    } else {\n      disable(gl.CULL_FACE);\n    }\n\n    currentCullFace = cullFace;\n  }\n\n  function setLineWidth(width) {\n    if (width !== currentLineWidth) {\n      if (lineWidthAvailable) gl.lineWidth(width);\n      currentLineWidth = width;\n    }\n  }\n\n  function setPolygonOffset(polygonOffset, factor, units) {\n    if (polygonOffset) {\n      enable(gl.POLYGON_OFFSET_FILL);\n\n      if (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {\n        gl.polygonOffset(factor, units);\n        currentPolygonOffsetFactor = factor;\n        currentPolygonOffsetUnits = units;\n      }\n    } else {\n      disable(gl.POLYGON_OFFSET_FILL);\n    }\n  }\n\n  function setScissorTest(scissorTest) {\n    if (scissorTest) {\n      enable(gl.SCISSOR_TEST);\n    } else {\n      disable(gl.SCISSOR_TEST);\n    }\n  } // texture\n\n\n  function activeTexture(webglSlot) {\n    if (webglSlot === undefined) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n    if (currentTextureSlot !== webglSlot) {\n      gl.activeTexture(webglSlot);\n      currentTextureSlot = webglSlot;\n    }\n  }\n\n  function bindTexture(webglType, webglTexture) {\n    if (currentTextureSlot === null) {\n      activeTexture();\n    }\n\n    var boundTexture = currentBoundTextures[currentTextureSlot];\n\n    if (boundTexture === undefined) {\n      boundTexture = {\n        type: undefined,\n        texture: undefined\n      };\n      currentBoundTextures[currentTextureSlot] = boundTexture;\n    }\n\n    if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {\n      gl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);\n      boundTexture.type = webglType;\n      boundTexture.texture = webglTexture;\n    }\n  }\n\n  function unbindTexture() {\n    var boundTexture = currentBoundTextures[currentTextureSlot];\n\n    if (boundTexture !== undefined && boundTexture.type !== undefined) {\n      gl.bindTexture(boundTexture.type, null);\n      boundTexture.type = undefined;\n      boundTexture.texture = undefined;\n    }\n  }\n\n  function compressedTexImage2D() {\n    try {\n      gl.compressedTexImage2D.apply(gl, arguments);\n    } catch (error) {\n      console.error('THREE.WebGLState:', error);\n    }\n  }\n\n  function texImage2D() {\n    try {\n      gl.texImage2D.apply(gl, arguments);\n    } catch (error) {\n      console.error('THREE.WebGLState:', error);\n    }\n  }\n\n  function texImage3D() {\n    try {\n      gl.texImage3D.apply(gl, arguments);\n    } catch (error) {\n      console.error('THREE.WebGLState:', error);\n    }\n  } //\n\n\n  function scissor(scissor) {\n    if (currentScissor.equals(scissor) === false) {\n      gl.scissor(scissor.x, scissor.y, scissor.z, scissor.w);\n      currentScissor.copy(scissor);\n    }\n  }\n\n  function viewport(viewport) {\n    if (currentViewport.equals(viewport) === false) {\n      gl.viewport(viewport.x, viewport.y, viewport.z, viewport.w);\n      currentViewport.copy(viewport);\n    }\n  } //\n\n\n  function reset() {\n    for (var i = 0; i < enabledAttributes.length; i++) {\n      if (enabledAttributes[i] === 1) {\n        gl.disableVertexAttribArray(i);\n        enabledAttributes[i] = 0;\n      }\n    }\n\n    enabledCapabilities = {};\n    currentTextureSlot = null;\n    currentBoundTextures = {};\n    currentProgram = null;\n    currentBlending = null;\n    currentFlipSided = null;\n    currentCullFace = null;\n    colorBuffer.reset();\n    depthBuffer.reset();\n    stencilBuffer.reset();\n  }\n\n  return {\n    buffers: {\n      color: colorBuffer,\n      depth: depthBuffer,\n      stencil: stencilBuffer\n    },\n    initAttributes: initAttributes,\n    enableAttribute: enableAttribute,\n    enableAttributeAndDivisor: enableAttributeAndDivisor,\n    disableUnusedAttributes: disableUnusedAttributes,\n    enable: enable,\n    disable: disable,\n    useProgram: useProgram,\n    setBlending: setBlending,\n    setMaterial: setMaterial,\n    setFlipSided: setFlipSided,\n    setCullFace: setCullFace,\n    setLineWidth: setLineWidth,\n    setPolygonOffset: setPolygonOffset,\n    setScissorTest: setScissorTest,\n    activeTexture: activeTexture,\n    bindTexture: bindTexture,\n    unbindTexture: unbindTexture,\n    compressedTexImage2D: compressedTexImage2D,\n    texImage2D: texImage2D,\n    texImage3D: texImage3D,\n    scissor: scissor,\n    viewport: viewport,\n    reset: reset\n  };\n}\n\nexport { WebGLState };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/renderers/webgl/WebGLState.js"],"names":["NotEqualDepth","GreaterDepth","GreaterEqualDepth","EqualDepth","LessEqualDepth","LessDepth","AlwaysDepth","NeverDepth","CullFaceFront","CullFaceBack","CullFaceNone","DoubleSide","BackSide","CustomBlending","MultiplyBlending","SubtractiveBlending","AdditiveBlending","NoBlending","NormalBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","SrcAlphaFactor","SrcAlphaSaturateFactor","DstColorFactor","DstAlphaFactor","OneMinusSrcColorFactor","OneMinusSrcAlphaFactor","OneMinusDstColorFactor","OneMinusDstAlphaFactor","Vector4","WebGLState","gl","extensions","capabilities","isWebGL2","ColorBuffer","locked","color","currentColorMask","currentColorClear","setMask","colorMask","setLocked","lock","setClear","r","g","b","a","premultipliedAlpha","set","equals","clearColor","copy","reset","DepthBuffer","currentDepthMask","currentDepthFunc","currentDepthClear","setTest","depthTest","enable","DEPTH_TEST","disable","depthMask","setFunc","depthFunc","NEVER","ALWAYS","LESS","LEQUAL","EQUAL","GEQUAL","GREATER","NOTEQUAL","depth","clearDepth","StencilBuffer","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","STENCIL_TEST","stencilMask","stencilFunc","stencilRef","setOp","stencilFail","stencilZFail","stencilZPass","stencilOp","stencil","clearStencil","colorBuffer","depthBuffer","stencilBuffer","maxVertexAttributes","getParameter","MAX_VERTEX_ATTRIBS","newAttributes","Uint8Array","enabledAttributes","attributeDivisors","enabledCapabilities","currentProgram","currentBlendingEnabled","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","maxTextures","MAX_COMBINED_TEXTURE_IMAGE_UNITS","lineWidthAvailable","version","glVersion","VERSION","indexOf","exec","currentTextureSlot","currentBoundTextures","currentScissor","currentViewport","createTexture","type","target","count","data","texture","bindTexture","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","i","texImage2D","RGBA","UNSIGNED_BYTE","emptyTextures","TEXTURE_2D","TEXTURE_CUBE_MAP","TEXTURE_CUBE_MAP_POSITIVE_X","setFlipSided","setCullFace","CULL_FACE","setBlending","initAttributes","l","length","enableAttribute","attribute","enableAttributeAndDivisor","meshPerAttribute","enableVertexAttribArray","extension","get","disableUnusedAttributes","disableVertexAttribArray","id","useProgram","program","equationToGL","FUNC_ADD","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","MIN","MAX","MIN_EXT","MAX_EXT","factorToGL","ZERO","ONE","SRC_COLOR","SRC_ALPHA","SRC_ALPHA_SATURATE","DST_COLOR","DST_ALPHA","ONE_MINUS_SRC_COLOR","ONE_MINUS_SRC_ALPHA","ONE_MINUS_DST_COLOR","ONE_MINUS_DST_ALPHA","blending","blendEquation","blendSrc","blendDst","blendEquationAlpha","blendSrcAlpha","blendDstAlpha","BLEND","blendFuncSeparate","blendFunc","console","error","blendEquationSeparate","setMaterial","material","frontFaceCW","side","flipSided","transparent","depthWrite","colorWrite","stencilWrite","stencilWriteMask","stencilFuncMask","setPolygonOffset","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","frontFace","CW","CCW","cullFace","BACK","FRONT","FRONT_AND_BACK","setLineWidth","width","lineWidth","factor","units","POLYGON_OFFSET_FILL","setScissorTest","scissorTest","SCISSOR_TEST","activeTexture","webglSlot","undefined","TEXTURE0","webglType","webglTexture","boundTexture","unbindTexture","compressedTexImage2D","apply","arguments","texImage3D","scissor","x","y","z","w","viewport","buffers"],"mappings":"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","sourcesContent":["/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nimport { NotEqualDepth, GreaterDepth, GreaterEqualDepth, EqualDepth, LessEqualDepth, LessDepth, AlwaysDepth, NeverDepth, CullFaceFront, CullFaceBack, CullFaceNone, DoubleSide, BackSide, CustomBlending, MultiplyBlending, SubtractiveBlending, AdditiveBlending, NoBlending, NormalBlending, AddEquation, SubtractEquation, ReverseSubtractEquation, MinEquation, MaxEquation, ZeroFactor, OneFactor, SrcColorFactor, SrcAlphaFactor, SrcAlphaSaturateFactor, DstColorFactor, DstAlphaFactor, OneMinusSrcColorFactor, OneMinusSrcAlphaFactor, OneMinusDstColorFactor, OneMinusDstAlphaFactor } from '../../constants.js';\nimport { Vector4 } from '../../math/Vector4.js';\n\nfunction WebGLState( gl, extensions, capabilities ) {\n\n\tvar isWebGL2 = capabilities.isWebGL2;\n\n\tfunction ColorBuffer() {\n\n\t\tvar locked = false;\n\n\t\tvar color = new Vector4();\n\t\tvar currentColorMask = null;\n\t\tvar currentColorClear = new Vector4( 0, 0, 0, 0 );\n\n\t\treturn {\n\n\t\t\tsetMask: function ( colorMask ) {\n\n\t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n\t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\t\t\tcurrentColorMask = colorMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( r, g, b, a, premultipliedAlpha ) {\n\n\t\t\t\tif ( premultipliedAlpha === true ) {\n\n\t\t\t\t\tr *= a; g *= a; b *= a;\n\n\t\t\t\t}\n\n\t\t\t\tcolor.set( r, g, b, a );\n\n\t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\n\t\t\t\t\tgl.clearColor( r, g, b, a );\n\t\t\t\t\tcurrentColorClear.copy( color );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentColorMask = null;\n\t\t\t\tcurrentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tfunction DepthBuffer() {\n\n\t\tvar locked = false;\n\n\t\tvar currentDepthMask = null;\n\t\tvar currentDepthFunc = null;\n\t\tvar currentDepthClear = null;\n\n\t\treturn {\n\n\t\t\tsetTest: function ( depthTest ) {\n\n\t\t\t\tif ( depthTest ) {\n\n\t\t\t\t\tenable( gl.DEPTH_TEST );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdisable( gl.DEPTH_TEST );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetMask: function ( depthMask ) {\n\n\t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n\t\t\t\t\tgl.depthMask( depthMask );\n\t\t\t\t\tcurrentDepthMask = depthMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetFunc: function ( depthFunc ) {\n\n\t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\n\t\t\t\t\tif ( depthFunc ) {\n\n\t\t\t\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\t\t\t\tcase NeverDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AlwaysDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase LessDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.LESS );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase LessEqualDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase EqualDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase GreaterDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase NotEqualDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( depth ) {\n\n\t\t\t\tif ( currentDepthClear !== depth ) {\n\n\t\t\t\t\tgl.clearDepth( depth );\n\t\t\t\t\tcurrentDepthClear = depth;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentDepthMask = null;\n\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\tcurrentDepthClear = null;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tfunction StencilBuffer() {\n\n\t\tvar locked = false;\n\n\t\tvar currentStencilMask = null;\n\t\tvar currentStencilFunc = null;\n\t\tvar currentStencilRef = null;\n\t\tvar currentStencilFuncMask = null;\n\t\tvar currentStencilFail = null;\n\t\tvar currentStencilZFail = null;\n\t\tvar currentStencilZPass = null;\n\t\tvar currentStencilClear = null;\n\n\t\treturn {\n\n\t\t\tsetTest: function ( stencilTest ) {\n\n\t\t\t\tif ( ! locked ) {\n\n\t\t\t\t\tif ( stencilTest ) {\n\n\t\t\t\t\t\tenable( gl.STENCIL_TEST );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdisable( gl.STENCIL_TEST );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetMask: function ( stencilMask ) {\n\n\t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n\t\t\t\t\tgl.stencilMask( stencilMask );\n\t\t\t\t\tcurrentStencilMask = stencilMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n\t\t\t\t     currentStencilRef \t!== stencilRef \t||\n\t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\n\t\t\t\t\tgl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n\n\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\t\t\tif ( currentStencilFail\t !== stencilFail \t||\n\t\t\t\t     currentStencilZFail !== stencilZFail ||\n\t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\n\t\t\t\t\tgl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n\n\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( stencil ) {\n\n\t\t\t\tif ( currentStencilClear !== stencil ) {\n\n\t\t\t\t\tgl.clearStencil( stencil );\n\t\t\t\t\tcurrentStencilClear = stencil;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentStencilMask = null;\n\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\tcurrentStencilRef = null;\n\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\tcurrentStencilFail = null;\n\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\tcurrentStencilClear = null;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t//\n\n\tvar colorBuffer = new ColorBuffer();\n\tvar depthBuffer = new DepthBuffer();\n\tvar stencilBuffer = new StencilBuffer();\n\n\tvar maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\tvar newAttributes = new Uint8Array( maxVertexAttributes );\n\tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\n\tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\n\n\tvar enabledCapabilities = {};\n\n\tvar currentProgram = null;\n\n\tvar currentBlendingEnabled = null;\n\tvar currentBlending = null;\n\tvar currentBlendEquation = null;\n\tvar currentBlendSrc = null;\n\tvar currentBlendDst = null;\n\tvar currentBlendEquationAlpha = null;\n\tvar currentBlendSrcAlpha = null;\n\tvar currentBlendDstAlpha = null;\n\tvar currentPremultipledAlpha = false;\n\n\tvar currentFlipSided = null;\n\tvar currentCullFace = null;\n\n\tvar currentLineWidth = null;\n\n\tvar currentPolygonOffsetFactor = null;\n\tvar currentPolygonOffsetUnits = null;\n\n\tvar maxTextures = gl.getParameter( gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS );\n\n\tvar lineWidthAvailable = false;\n\tvar version = 0;\n\tvar glVersion = gl.getParameter( gl.VERSION );\n\n\tif ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {\n\n\t\tversion = parseFloat( /^WebGL\\ ([0-9])/.exec( glVersion )[ 1 ] );\n\t\tlineWidthAvailable = ( version >= 1.0 );\n\n\t} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {\n\n\t\tversion = parseFloat( /^OpenGL\\ ES\\ ([0-9])/.exec( glVersion )[ 1 ] );\n\t\tlineWidthAvailable = ( version >= 2.0 );\n\n\t}\n\n\tvar currentTextureSlot = null;\n\tvar currentBoundTextures = {};\n\n\tvar currentScissor = new Vector4();\n\tvar currentViewport = new Vector4();\n\n\tfunction createTexture( type, target, count ) {\n\n\t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t\tvar texture = gl.createTexture();\n\n\t\tgl.bindTexture( type, texture );\n\t\tgl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t\tgl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\n\t\tfor ( var i = 0; i < count; i ++ ) {\n\n\t\t\tgl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tvar emptyTextures = {};\n\temptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );\n\temptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );\n\n\t// init\n\n\tcolorBuffer.setClear( 0, 0, 0, 1 );\n\tdepthBuffer.setClear( 1 );\n\tstencilBuffer.setClear( 0 );\n\n\tenable( gl.DEPTH_TEST );\n\tdepthBuffer.setFunc( LessEqualDepth );\n\n\tsetFlipSided( false );\n\tsetCullFace( CullFaceBack );\n\tenable( gl.CULL_FACE );\n\n\tsetBlending( NoBlending );\n\n\t//\n\n\tfunction initAttributes() {\n\n\t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\n\n\t\t\tnewAttributes[ i ] = 0;\n\n\t\t}\n\n\t}\n\n\tfunction enableAttribute( attribute ) {\n\n\t\tenableAttributeAndDivisor( attribute, 0 );\n\n\t}\n\n\tfunction enableAttributeAndDivisor( attribute, meshPerAttribute ) {\n\n\t\tnewAttributes[ attribute ] = 1;\n\n\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t}\n\n\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n\t\t\tvar extension = isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\textension[ isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );\n\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n\t\t}\n\n\t}\n\n\tfunction disableUnusedAttributes() {\n\n\t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\n\n\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction enable( id ) {\n\n\t\tif ( enabledCapabilities[ id ] !== true ) {\n\n\t\t\tgl.enable( id );\n\t\t\tenabledCapabilities[ id ] = true;\n\n\t\t}\n\n\t}\n\n\tfunction disable( id ) {\n\n\t\tif ( enabledCapabilities[ id ] !== false ) {\n\n\t\t\tgl.disable( id );\n\t\t\tenabledCapabilities[ id ] = false;\n\n\t\t}\n\n\t}\n\n\tfunction useProgram( program ) {\n\n\t\tif ( currentProgram !== program ) {\n\n\t\t\tgl.useProgram( program );\n\n\t\t\tcurrentProgram = program;\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tvar equationToGL = {\n\t\t[ AddEquation ]: gl.FUNC_ADD,\n\t\t[ SubtractEquation ]: gl.FUNC_SUBTRACT,\n\t\t[ ReverseSubtractEquation ]: gl.FUNC_REVERSE_SUBTRACT\n\t};\n\n\tif ( isWebGL2 ) {\n\n\t\tequationToGL[ MinEquation ] = gl.MIN;\n\t\tequationToGL[ MaxEquation ] = gl.MAX;\n\n\t} else {\n\n\t\tvar extension = extensions.get( 'EXT_blend_minmax' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tequationToGL[ MinEquation ] = extension.MIN_EXT;\n\t\t\tequationToGL[ MaxEquation ] = extension.MAX_EXT;\n\n\t\t}\n\n\t}\n\n\tvar factorToGL = {\n\t\t[ ZeroFactor ]: gl.ZERO,\n\t\t[ OneFactor ]: gl.ONE,\n\t\t[ SrcColorFactor ]: gl.SRC_COLOR,\n\t\t[ SrcAlphaFactor ]: gl.SRC_ALPHA,\n\t\t[ SrcAlphaSaturateFactor ]: gl.SRC_ALPHA_SATURATE,\n\t\t[ DstColorFactor ]: gl.DST_COLOR,\n\t\t[ DstAlphaFactor ]: gl.DST_ALPHA,\n\t\t[ OneMinusSrcColorFactor ]: gl.ONE_MINUS_SRC_COLOR,\n\t\t[ OneMinusSrcAlphaFactor ]: gl.ONE_MINUS_SRC_ALPHA,\n\t\t[ OneMinusDstColorFactor ]: gl.ONE_MINUS_DST_COLOR,\n\t\t[ OneMinusDstAlphaFactor ]: gl.ONE_MINUS_DST_ALPHA\n\t};\n\n\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n\t\tif ( blending === NoBlending ) {\n\n\t\t\tif ( currentBlendingEnabled ) {\n\n\t\t\t\tdisable( gl.BLEND );\n\t\t\t\tcurrentBlendingEnabled = false;\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( ! currentBlendingEnabled ) {\n\n\t\t\tenable( gl.BLEND );\n\t\t\tcurrentBlendingEnabled = true;\n\n\t\t}\n\n\t\tif ( blending !== CustomBlending ) {\n\n\t\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\n\t\t\t\tif ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {\n\n\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\n\t\t\t\t\tcurrentBlendEquation = AddEquation;\n\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\n\n\t\t\t\t}\n\n\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\tgl.blendFunc( gl.ONE, gl.ONE );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\tcurrentBlendDst = null;\n\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\tcurrentBlendDstAlpha = null;\n\n\t\t\t\tcurrentBlending = blending;\n\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// custom blending\n\n\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n\t\t\tgl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );\n\n\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t}\n\n\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n\t\t\tgl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );\n\n\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\tcurrentBlendDst = blendDst;\n\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n\t\t}\n\n\t\tcurrentBlending = blending;\n\t\tcurrentPremultipledAlpha = null;\n\n\t}\n\n\tfunction setMaterial( material, frontFaceCW ) {\n\n\t\tmaterial.side === DoubleSide\n\t\t\t? disable( gl.CULL_FACE )\n\t\t\t: enable( gl.CULL_FACE );\n\n\t\tvar flipSided = ( material.side === BackSide );\n\t\tif ( frontFaceCW ) flipSided = ! flipSided;\n\n\t\tsetFlipSided( flipSided );\n\n\t\t( material.blending === NormalBlending && material.transparent === false )\n\t\t\t? setBlending( NoBlending )\n\t\t\t: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\n\n\t\tdepthBuffer.setFunc( material.depthFunc );\n\t\tdepthBuffer.setTest( material.depthTest );\n\t\tdepthBuffer.setMask( material.depthWrite );\n\t\tcolorBuffer.setMask( material.colorWrite );\n\n\t\tvar stencilWrite = material.stencilWrite;\n\t\tstencilBuffer.setTest( stencilWrite );\n\t\tif ( stencilWrite ) {\n\n\t\t\tstencilBuffer.setMask( material.stencilWriteMask );\n\t\t\tstencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );\n\t\t\tstencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );\n\n\t\t}\n\n\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t}\n\n\t//\n\n\tfunction setFlipSided( flipSided ) {\n\n\t\tif ( currentFlipSided !== flipSided ) {\n\n\t\t\tif ( flipSided ) {\n\n\t\t\t\tgl.frontFace( gl.CW );\n\n\t\t\t} else {\n\n\t\t\t\tgl.frontFace( gl.CCW );\n\n\t\t\t}\n\n\t\t\tcurrentFlipSided = flipSided;\n\n\t\t}\n\n\t}\n\n\tfunction setCullFace( cullFace ) {\n\n\t\tif ( cullFace !== CullFaceNone ) {\n\n\t\t\tenable( gl.CULL_FACE );\n\n\t\t\tif ( cullFace !== currentCullFace ) {\n\n\t\t\t\tif ( cullFace === CullFaceBack ) {\n\n\t\t\t\t\tgl.cullFace( gl.BACK );\n\n\t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\n\t\t\t\t\tgl.cullFace( gl.FRONT );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.cullFace( gl.FRONT_AND_BACK );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdisable( gl.CULL_FACE );\n\n\t\t}\n\n\t\tcurrentCullFace = cullFace;\n\n\t}\n\n\tfunction setLineWidth( width ) {\n\n\t\tif ( width !== currentLineWidth ) {\n\n\t\t\tif ( lineWidthAvailable ) gl.lineWidth( width );\n\n\t\t\tcurrentLineWidth = width;\n\n\t\t}\n\n\t}\n\n\tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\n\t\tif ( polygonOffset ) {\n\n\t\t\tenable( gl.POLYGON_OFFSET_FILL );\n\n\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n\t\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\tcurrentPolygonOffsetUnits = units;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdisable( gl.POLYGON_OFFSET_FILL );\n\n\t\t}\n\n\t}\n\n\tfunction setScissorTest( scissorTest ) {\n\n\t\tif ( scissorTest ) {\n\n\t\t\tenable( gl.SCISSOR_TEST );\n\n\t\t} else {\n\n\t\t\tdisable( gl.SCISSOR_TEST );\n\n\t\t}\n\n\t}\n\n\t// texture\n\n\tfunction activeTexture( webglSlot ) {\n\n\t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\tgl.activeTexture( webglSlot );\n\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t}\n\n\t}\n\n\tfunction bindTexture( webglType, webglTexture ) {\n\n\t\tif ( currentTextureSlot === null ) {\n\n\t\t\tactiveTexture();\n\n\t\t}\n\n\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\tif ( boundTexture === undefined ) {\n\n\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\n\t\t}\n\n\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n\t\t\tboundTexture.type = webglType;\n\t\t\tboundTexture.texture = webglTexture;\n\n\t\t}\n\n\t}\n\n\tfunction unbindTexture() {\n\n\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\tif ( boundTexture !== undefined && boundTexture.type !== undefined ) {\n\n\t\t\tgl.bindTexture( boundTexture.type, null );\n\n\t\t\tboundTexture.type = undefined;\n\t\t\tboundTexture.texture = undefined;\n\n\t\t}\n\n\t}\n\n\tfunction compressedTexImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.texImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texImage3D() {\n\n\t\ttry {\n\n\t\t\tgl.texImage3D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction scissor( scissor ) {\n\n\t\tif ( currentScissor.equals( scissor ) === false ) {\n\n\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t\t\tcurrentScissor.copy( scissor );\n\n\t\t}\n\n\t}\n\n\tfunction viewport( viewport ) {\n\n\t\tif ( currentViewport.equals( viewport ) === false ) {\n\n\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t\t\tcurrentViewport.copy( viewport );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction reset() {\n\n\t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\n\n\t\t\tif ( enabledAttributes[ i ] === 1 ) {\n\n\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tenabledCapabilities = {};\n\n\t\tcurrentTextureSlot = null;\n\t\tcurrentBoundTextures = {};\n\n\t\tcurrentProgram = null;\n\n\t\tcurrentBlending = null;\n\n\t\tcurrentFlipSided = null;\n\t\tcurrentCullFace = null;\n\n\t\tcolorBuffer.reset();\n\t\tdepthBuffer.reset();\n\t\tstencilBuffer.reset();\n\n\t}\n\n\treturn {\n\n\t\tbuffers: {\n\t\t\tcolor: colorBuffer,\n\t\t\tdepth: depthBuffer,\n\t\t\tstencil: stencilBuffer\n\t\t},\n\n\t\tinitAttributes: initAttributes,\n\t\tenableAttribute: enableAttribute,\n\t\tenableAttributeAndDivisor: enableAttributeAndDivisor,\n\t\tdisableUnusedAttributes: disableUnusedAttributes,\n\t\tenable: enable,\n\t\tdisable: disable,\n\n\t\tuseProgram: useProgram,\n\n\t\tsetBlending: setBlending,\n\t\tsetMaterial: setMaterial,\n\n\t\tsetFlipSided: setFlipSided,\n\t\tsetCullFace: setCullFace,\n\n\t\tsetLineWidth: setLineWidth,\n\t\tsetPolygonOffset: setPolygonOffset,\n\n\t\tsetScissorTest: setScissorTest,\n\n\t\tactiveTexture: activeTexture,\n\t\tbindTexture: bindTexture,\n\t\tunbindTexture: unbindTexture,\n\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\ttexImage2D: texImage2D,\n\t\ttexImage3D: texImage3D,\n\n\t\tscissor: scissor,\n\t\tviewport: viewport,\n\n\t\treset: reset\n\n\t};\n\n}\n\nexport { WebGLState };\n"]},"metadata":{},"sourceType":"module"}