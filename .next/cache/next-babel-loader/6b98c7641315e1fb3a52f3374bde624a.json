{"ast":null,"code":"import _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport { Interpolant } from '../Interpolant.js';\n/**\n * @author tschw\n */\n\nfunction LinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n  Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n}\n\nLinearInterpolant.prototype = _Object$assign(_Object$create(Interpolant.prototype), {\n  constructor: LinearInterpolant,\n  interpolate_: function (i1, t0, t, t1) {\n    var result = this.resultBuffer,\n        values = this.sampleValues,\n        stride = this.valueSize,\n        offset1 = i1 * stride,\n        offset0 = offset1 - stride,\n        weight1 = (t - t0) / (t1 - t0),\n        weight0 = 1 - weight1;\n\n    for (var i = 0; i !== stride; ++i) {\n      result[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;\n    }\n\n    return result;\n  }\n});\nexport { LinearInterpolant };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/math/interpolants/LinearInterpolant.js"],"names":["Interpolant","LinearInterpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","call","prototype","constructor","interpolate_","i1","t0","t","t1","result","values","stride","valueSize","offset1","offset0","weight1","weight0","i"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,mBAA5B;AAEA;;;;AAIA,SAASC,iBAAT,CAA4BC,kBAA5B,EAAgDC,YAAhD,EAA8DC,UAA9D,EAA0EC,YAA1E,EAAyF;AAExFL,EAAAA,WAAW,CAACM,IAAZ,CAAkB,IAAlB,EAAwBJ,kBAAxB,EAA4CC,YAA5C,EAA0DC,UAA1D,EAAsEC,YAAtE;AAEA;;AAEDJ,iBAAiB,CAACM,SAAlB,GAA8B,eAAe,eAAeP,WAAW,CAACO,SAA3B,CAAf,EAAuD;AAEpFC,EAAAA,WAAW,EAAEP,iBAFuE;AAIpFQ,EAAAA,YAAY,EAAE,UAAWC,EAAX,EAAeC,EAAf,EAAmBC,CAAnB,EAAsBC,EAAtB,EAA2B;AAExC,QAAIC,MAAM,GAAG,KAAKT,YAAlB;AAAA,QACCU,MAAM,GAAG,KAAKZ,YADf;AAAA,QAECa,MAAM,GAAG,KAAKC,SAFf;AAAA,QAICC,OAAO,GAAGR,EAAE,GAAGM,MAJhB;AAAA,QAKCG,OAAO,GAAGD,OAAO,GAAGF,MALrB;AAAA,QAOCI,OAAO,GAAG,CAAER,CAAC,GAAGD,EAAN,KAAeE,EAAE,GAAGF,EAApB,CAPX;AAAA,QAQCU,OAAO,GAAG,IAAID,OARf;;AAUA,SAAM,IAAIE,CAAC,GAAG,CAAd,EAAiBA,CAAC,KAAKN,MAAvB,EAA+B,EAAGM,CAAlC,EAAsC;AAErCR,MAAAA,MAAM,CAAEQ,CAAF,CAAN,GACEP,MAAM,CAAEI,OAAO,GAAGG,CAAZ,CAAN,GAAwBD,OAAxB,GACAN,MAAM,CAAEG,OAAO,GAAGI,CAAZ,CAAN,GAAwBF,OAF1B;AAIA;;AAED,WAAON,MAAP;AAEA;AA1BmF,CAAvD,CAA9B;AA+BA,SAASb,iBAAT","sourcesContent":["import { Interpolant } from '../Interpolant.js';\n\n/**\n * @author tschw\n */\n\nfunction LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n}\n\nLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\tconstructor: LinearInterpolant,\n\n\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\tvar result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\toffset1 = i1 * stride,\n\t\t\toffset0 = offset1 - stride,\n\n\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t\t\tweight0 = 1 - weight1;\n\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] =\n\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n} );\n\n\nexport { LinearInterpolant };\n"]},"metadata":{},"sourceType":"module"}