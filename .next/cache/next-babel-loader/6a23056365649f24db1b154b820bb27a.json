{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef, useState, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { Canvas, extend as extendThree, useFrame, useLoader, useResource, useThree } from \"react-three-fiber\"; // Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\n\nimport { EffectComposer } from \"./resources/postprocessing/EffectComposer\";\nimport { RenderPass } from \"./resources/postprocessing/RenderPass\";\nimport { GlitchPass } from \"./resources/postprocessing/GlitchPass\";\nextendThree({\n  EffectComposer: EffectComposer,\n  RenderPass: RenderPass,\n  GlitchPass: GlitchPass\n}); // import TextLoop from \"../TextLoop\";\n// const DEFAULT_LAYER = 0;\n// const OCCLUSION_LAYER = 1;\n// Cast the lighting\n\nvar Lighting = function Lighting() {\n  var _useThree = useThree(),\n      mouse = _useThree.mouse;\n\n  var light = useRef();\n  useFrame(function () {\n    return light.current.position.set(mouse.current[0] / 20, -mouse.current[1] / 20, 0);\n  });\n  return __jsx(React.Fragment, null, __jsx(\"directionalLight\", {\n    color: \"#ffffff\",\n    intensity: 0.5,\n    position: [-2, 0, 30],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }), __jsx(\"pointLight\", {\n    ref: light,\n    distance: 50,\n    intensity: 1.5,\n    color: \"white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), __jsx(\"spotLight\", {\n    intensity: 0.5,\n    position: [10, 10, 40],\n    penumbra: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }));\n}; // The canvas houses this function, the scene. Scene is where the elements come together.\n\n\nfunction SmokePuff(_ref) {\n  var geometry = _ref.geometry,\n      material = _ref.material,\n      particleArray = _ref.particleArray;\n  var ref = useRef();\n  var t = Math.random() * 100;\n  var speed = 0.01 + Math.random() / 200;\n  var factor = 20 + Math.random() * 100;\n  var xFactor = -50 + Math.random() * 100;\n  var yFactor = -50 + Math.random() * 100;\n  var zFactor = -30 + Math.random() * 60;\n  useFrame(function () {\n    t += speed;\n    var s = Math.cos(t);\n    ref.current.scale.set(s, s, s);\n    ref.current.rotation.set(s * 5, s * 5, s * 5);\n    ref.current.position.set(xFactor + Math.cos(t / 30 * factor) + Math.sin(t * 1) * factor / 10, yFactor + Math.sin(t / 20 * factor) + Math.cos(t * 2) * factor / 10, zFactor + Math.cos(t / 10 * factor) + Math.sin(t * 3) * factor / 20);\n  });\n  return __jsx(\"mesh\", {\n    ref: ref,\n    material: material,\n    geometry: geometry,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  });\n}\n\nvar GenerateSmoke = function GenerateSmoke(_ref2) {\n  var particleArray = _ref2.particleArray;\n\n  var _useResource = useResource(),\n      _useResource2 = _slicedToArray(_useResource, 2),\n      geometryRef = _useResource2[0],\n      geometry = _useResource2[1];\n\n  var _useResource3 = useResource(),\n      _useResource4 = _slicedToArray(_useResource3, 2),\n      materialRef = _useResource4[0],\n      material = _useResource4[1];\n\n  var url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n  var texture = useMemo(function () {\n    return new THREE.TextureLoader().load(url);\n  }, [url]);\n  return __jsx(React.Fragment, null, __jsx(\"planeGeometry\", {\n    ref: geometryRef,\n    attach: \"geometry\",\n    args: [200, 200],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }), __jsx(\"meshLambertMaterial\", {\n    ref: materialRef,\n    attach: \"material\",\n    color: \"#ccbbee\",\n    transparent: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, __jsx(\"primitive\", {\n    attach: \"map\",\n    object: texture,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  })), geometry && new Array(2000).fill().map(function (_, index) {\n    return __jsx(SmokePuff, {\n      key: index,\n      material: material,\n      geometry: geometry,\n      particleArray: particleArray,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    });\n  }));\n}; // This is the canvas. It's the lowest level element in the three/webGl chain\n\n\nvar CanvasicalSmoke = function CanvasicalSmoke() {\n  var particleCount = 3;\n  var particleArray = [{\n    id: 0,\n    x: 0,\n    y: 0,\n    z: 2\n  }];\n  useEffect(function () {\n    if (particleArray.length === particleCount) {\n      return null;\n    } else {\n      for (var i = 0; i <= particleCount; i++) {\n        particleArray.push({\n          id: particleArray[i].id + 1,\n          x: particleArray[i].x + 1,\n          y: particleArray[i].y + 1,\n          z: 2\n        });\n      }\n    }\n  }, [particleArray]);\n  return __jsx(React.Fragment, null, __jsx(Canvas, {\n    className: \"container block__three-container\",\n    camera: {\n      fov: 75,\n      aspect: 0.5,\n      near: 1,\n      far: 10000,\n      position: [0, 0, 300]\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, __jsx(Lighting, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }), __jsx(GenerateSmoke, {\n    particleArray: particleArray,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  })));\n};\n\nexport default CanvasicalSmoke; // // Creates a fullscreen colored plane\n// const Plane = () => {\n//     return (\n//         <mesh >\n//             <planeGeometry  attach=\"geometry\"  args={[ 32, 32, 32, 32 ]} />\n//             <meshPhysicalMaterial  attach=\"material\"  color=\"#ffffff\"  />\n//         </mesh>\n//     )\n// }\n// // A light bar\n// const LightBar = () => {\n//     // const lightBar = useRef();\n//     return (\n//         <>\n//             <mesh\n//                 // ref={lightBar}\n//             >\n//                 <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n//                 <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n//             </mesh>\n//         </>\n//     )\n// }","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx"],"names":["extend","extendThree","EffectComposer","RenderPass","GlitchPass","Lighting","mouse","useThree","light","useRef","useFrame","geometry","material","particleArray","ref","t","Math","speed","factor","xFactor","yFactor","zFactor","s","GenerateSmoke","geometryRef","useResource","materialRef","url","texture","useMemo","THREE","CanvasicalSmoke","particleCount","id","x","y","z","useEffect","i","fov","aspect","near","far","position"],"mappings":"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","sourcesContent":["import React, {\n    useCallback,\n    useEffect,\n    useRef,\n    useState,\n    useMemo\n} from \"react\";\nimport * as THREE from \"three\";\nimport {\n    Canvas,\n    extend as extendThree,\n    useFrame,\n    useLoader,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\n\n// Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\nimport { EffectComposer } from \"./resources/postprocessing/EffectComposer\";\nimport { RenderPass } from \"./resources/postprocessing/RenderPass\";\nimport { GlitchPass } from \"./resources/postprocessing/GlitchPass\";\nextendThree({ EffectComposer, RenderPass, GlitchPass });\n\n// import TextLoop from \"../TextLoop\";\n\n// const DEFAULT_LAYER = 0;\n// const OCCLUSION_LAYER = 1;\n\n// Cast the lighting\nconst Lighting = () => {\n    const { mouse } = useThree();\n    const light = useRef();\n    useFrame(() => light.current.position.set( mouse.current[0] / 20, -mouse.current[1] / 20, 0 ));\n    return (\n        <>\n            <directionalLight\n                color=\"#ffffff\"\n                intensity={0.5}\n                position={[-2, 0, 30]}\n            />\n            <pointLight\n                ref={light}\n                distance={50}\n                intensity={1.5}\n                color=\"white\"\n            />\n            <spotLight intensity={0.5} position={[10, 10, 40]} penumbra={1} />\n        </>\n    );\n};\n\n// The canvas houses this function, the scene. Scene is where the elements come together.\nfunction SmokePuff({ geometry, material, particleArray }) {\n    let ref = useRef();\n    let t = Math.random() * 100;\n    let speed = 0.01 + Math.random() / 200;\n    let factor = 20 + Math.random() * 100;\n    let xFactor = -50 + Math.random() * 100;\n    let yFactor = -50 + Math.random() * 100;\n    let zFactor = -30 + Math.random() * 60;\n    \n    useFrame(() => {\n        t += speed;\n        const s = Math.cos(t);\n        ref.current.scale.set(s, s, s);\n        ref.current.rotation.set(s * 5, s * 5, s * 5);\n        ref.current.position.set(\n            xFactor +\n                Math.cos((t / 30) * factor) +\n                (Math.sin(t * 1) * factor) / 10,\n            yFactor +\n                Math.sin((t / 20) * factor) +\n                (Math.cos(t * 2) * factor) / 10,\n            zFactor +\n                Math.cos((t / 10) * factor) +\n                (Math.sin(t * 3) * factor) / 20\n        );\n    });\n\n    return <mesh ref={ref} material={material} geometry={geometry} />;\n}\n\nconst GenerateSmoke = ({ particleArray }) => {\n    const [geometryRef, geometry] = useResource();\n    const [materialRef, material] = useResource();\n    const url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n    const texture = useMemo(() => new THREE.TextureLoader().load(url), [url]);\n    \n    return (\n        <>\n            <planeGeometry \n                ref={geometryRef} \n                attach=\"geometry\"   \n                args={[200, 200]} \n            />\n            <meshLambertMaterial \n                ref={materialRef}\n                attach=\"material\" \n                color=\"#ccbbee\"\n                transparent\n            >\n                <primitive attach=\"map\" object={texture} />\n            </meshLambertMaterial>\n\n            {geometry && new Array(2000).fill().map((_, index) => (\n                <SmokePuff\n                    key={index}\n                    material={material}\n                    geometry={geometry}\n                    particleArray={particleArray}\n                />\n            ))}\n        </>\n    );\n}\n\n\n// This is the canvas. It's the lowest level element in the three/webGl chain\nconst CanvasicalSmoke = () => {\n    const particleCount = 3;\n    const particleArray = [{ id: 0, x: 0, y: 0, z: 2 }];\n\n    useEffect(() => {\n        if (particleArray.length === particleCount) {\n            return null;\n        } else {\n            for (let i = 0; i <= particleCount; i++) {\n                particleArray.push({\n                    id: particleArray[i].id + 1,\n                    x: particleArray[i].x + 1,\n                    y: particleArray[i].y + 1,\n                    z: 2\n                });\n            }\n        }\n    }, [particleArray]);\n\n    return (\n        <>\n            <Canvas\n                className=\"container block__three-container\"\n                camera={{\n                    fov: 75,\n                    aspect: 0.5,\n                    near: 1,\n                    far: 10000,\n                    position: [0, 0, 300]\n                }}\n            >\n                <Lighting />\n                <GenerateSmoke particleArray={particleArray} />\n            </Canvas>\n\n            {/* <TextLoop  /> */}\n        </>\n    );\n};\n\nexport default CanvasicalSmoke;\n\n// // Creates a fullscreen colored plane\n// const Plane = () => {\n//     return (\n//         <mesh >\n//             <planeGeometry  attach=\"geometry\"  args={[ 32, 32, 32, 32 ]} />\n//             <meshPhysicalMaterial  attach=\"material\"  color=\"#ffffff\"  />\n//         </mesh>\n//     )\n// }\n\n// // A light bar\n// const LightBar = () => {\n//     // const lightBar = useRef();\n\n//     return (\n//         <>\n//             <mesh\n//                 // ref={lightBar}\n//             >\n//                 <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n//                 <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n//             </mesh>\n//         </>\n//     )\n// }\n"]},"metadata":{},"sourceType":"module"}