{"ast":null,"code":"var _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport * as THREE from 'three';\nimport { Canvas, extend as extendThree, useFrame, useLoader, useResource, useThree } from \"react-three-fiber\"; // Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\n\nimport { EffectComposer } from './resources/postprocessing/EffectComposer';\nimport { RenderPass } from './resources/postprocessing/RenderPass';\nimport { GlitchPass } from './resources/postprocessing/GlitchPass';\nextendThree({\n  EffectComposer: EffectComposer,\n  RenderPass: RenderPass,\n  GlitchPass: GlitchPass\n}); // import TextLoop from \"../TextLoop\";\n// const DEFAULT_LAYER = 0;\n// const OCCLUSION_LAYER = 1;\n// The canvas houses this function, the scene. Scene is where the elements come together.\n\nvar ObjectMesh = function ObjectMesh() {\n  var ref = useRef(); // const [geometryRef, geometry] = useResource();\n  // const [materialRef, material] = useResource();\n  // useFrame(() => {\n  //     ref.current.rotation.x = ref.current.rotation.y += 0.01\n  // });\n\n  useFrame(function (_ref) {\n    // ref.current.position.x = Math.cos(clock.getElapsedTime()) * 1.1\n    // ref.current.rotation.x = ref.current.rotation.y += 0.0008\n    // ref.current.rotation.x += 0.001\n    // ref.current.rotation.y += 0.004\n    // ref.current.rotation.z += 0.004\n    var clock = _ref.clock;\n  });\n  return __jsx(React.Fragment, null, __jsx(\"mesh\", {\n    ref: ref,\n    position: [0, 0, 2] // positions the object above the plane\n    ,\n    receiveShadow: true,\n    castShadow: true,\n    visible: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, __jsx(\"torusKnotBufferGeometry\", {\n    attach: \"geometry\",\n    args: [0.5, 0.15, 150, 32],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }), __jsx(\"meshPhysicalMaterial\", {\n    attach: \"material\",\n    color: \"#0077ff\",\n    roughness: 1,\n    clearcoat: 1,\n    clearcoatRoughness: 0.2,\n    dithering: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  })));\n}; // Cast the lighting\n\n\nvar Lighting = function Lighting() {\n  var _useThree = useThree(),\n      size = _useThree.size;\n\n  return __jsx(React.Fragment, null, __jsx(\"ambientLight\", {\n    color: \"#ffffff\",\n    intensity: 0.1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }), __jsx(\"pointLight\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }), __jsx(\"spotLight\", {\n    color: \"#ffffff\",\n    intensity: 2.2,\n    distance: 300,\n    angle: 1.05,\n    penumbra: 1,\n    decay: 2,\n    position: [11, 15, 15],\n    castShadow: true,\n    \"shadow-mapSize-width\": size.width,\n    \"shadow-mapSize-height\": size.height,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }));\n}; // Creates a fullscreen colored plane\n\n\nvar Plane = function Plane() {\n  var plane = useRef();\n  return __jsx(\"mesh\", {\n    ref: plane,\n    receiveShadow: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, __jsx(\"planeGeometry\", {\n    attach: \"geometry\",\n    args: [20, 20, 32, 32],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }), __jsx(\"meshPhysicalMaterial\", {\n    attach: \"material\",\n    color: \"#000000\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }));\n}; // This is the canvas. It's the lowest level element in the three/webGl chain\n\n\nvar CanvasicalSmoke = function CanvasicalSmoke() {\n  // const {\n  //     gl,                           // WebGL renderer \n  //     scene,                        // Default scene\n  //     camera,                       // Default camera\n  //     size,                         // Bounds of the view (which stretches 100% and auto-adjusts)\n  // } = useThree();\n  return __jsx(React.Fragment, null, __jsx(Canvas, {\n    className: \"container block__three-container\",\n    camera: {\n      fov: 75,\n      position: [0, 0, 6],\n      zoom: 1,\n      focus: 10\n    },\n    shadowMap: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, __jsx(Plane, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }), __jsx(Lighting, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }), __jsx(ObjectMesh, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  })));\n};\n\nexport default CanvasicalSmoke; // // A light bar\n// const LightBar = () => {\n//     // const lightBar = useRef();\n//     return (\n//         <>\n//             <mesh \n//                 // ref={lightBar} \n//             >\n//                 <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n//                 <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n//             </mesh>\n//         </>\n//     )\n// }","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx"],"names":["extend","extendThree","EffectComposer","RenderPass","GlitchPass","ObjectMesh","ref","useRef","useFrame","clock","Lighting","size","useThree","Plane","plane","CanvasicalSmoke","fov","position","zoom","focus"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport * as THREE from 'three';\nimport {\n    Canvas,\n    extend as extendThree,\n    useFrame,\n    useLoader,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\n\n// Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\nimport { EffectComposer } from './resources/postprocessing/EffectComposer';\nimport { RenderPass } from './resources/postprocessing/RenderPass';\nimport { GlitchPass } from './resources/postprocessing/GlitchPass';\nextendThree({ EffectComposer, RenderPass, GlitchPass });\n\n// import TextLoop from \"../TextLoop\";\n\n\n\n// const DEFAULT_LAYER = 0;\n// const OCCLUSION_LAYER = 1;\n\n\n\n\n// The canvas houses this function, the scene. Scene is where the elements come together.\nconst ObjectMesh = () => {\n    const ref = useRef();\n    // const [geometryRef, geometry] = useResource();\n    // const [materialRef, material] = useResource();\n    \n    // useFrame(() => {\n    //     ref.current.rotation.x = ref.current.rotation.y += 0.01\n    // });\n    useFrame(({ clock }) => {\n        // ref.current.position.x = Math.cos(clock.getElapsedTime()) * 1.1\n        // ref.current.rotation.x = ref.current.rotation.y += 0.0008\n        // ref.current.rotation.x += 0.001\n        // ref.current.rotation.y += 0.004\n        // ref.current.rotation.z += 0.004\n    });\n    \n\n\n    return (\n        <>\n                <mesh \n                    ref={ref}\n                    position={[ 0, 0, 2 ]} // positions the object above the plane\n                    receiveShadow\n                    castShadow\n                    visible \n                >\n                    <torusKnotBufferGeometry \n                        attach=\"geometry\" \n                        args={[ 0.5, 0.15, 150, 32 ]} \n                    />\n                    {/* <tetrahedronBufferGeometry \n                        attach=\"geometry\"\n                        radius={20}\n                    /> */}\n                    <meshPhysicalMaterial \n                        attach=\"material\" \n                        color=\"#0077ff\"\n                        roughness={1} \n                        clearcoat={1} \n                        clearcoatRoughness={0.2}\n                        dithering \n                    />\n                </mesh>\n        </>\n    )\n}\n\n// Cast the lighting\nconst Lighting = () => {\n    const {\n        size,\n    } = useThree();\n    \n    return (\n        <>\n            <ambientLight\n                color=\"#ffffff\"\n                intensity={0.1}\n            />\n            <pointLight />\n            <spotLight\n                color=\"#ffffff\"\n                intensity={2.2}\n                distance={300}\n                angle={1.05}\n                penumbra={1}\n                decay={2}\n                position={[ 11, 15, 15 ]} \n                castShadow\n                shadow-mapSize-width={size.width} \n                shadow-mapSize-height={size.height}\n            />\n        </>\n    )\n}\n\n// Creates a fullscreen colored plane\nconst Plane = () => {\n    const plane = useRef();\n\n    return (\n        <mesh \n            ref={plane}\n            receiveShadow\n        >\n            <planeGeometry  attach=\"geometry\"  args={[ 20, 20, 32, 32 ]} />\n            <meshPhysicalMaterial  attach=\"material\"  color=\"#000000\"  />\n        </mesh>\n    )\n}\n\n// This is the canvas. It's the lowest level element in the three/webGl chain\nconst CanvasicalSmoke = () => {\n    // const {\n    //     gl,                           // WebGL renderer \n    //     scene,                        // Default scene\n    //     camera,                       // Default camera\n    //     size,                         // Bounds of the view (which stretches 100% and auto-adjusts)\n    // } = useThree();\n\n    return (\n        <>\n            <Canvas\n                className=\"container block__three-container\" \n                camera={{ \n                    fov: 75, \n                    position: [ 0, 0, 6 ],\n                    zoom: 1,\n                    focus: 10\n                }} \n                shadowMap\n            >\n                <Plane />\n                <Lighting />\n                <ObjectMesh  />\n\n                {/* <LightBar /> */}\n                \n            </Canvas> \n           \n            {/* <TextLoop  /> */}\n\n        </>\n    );\n}\n\nexport default CanvasicalSmoke;\n\n\n\n\n\n\n\n\n// // A light bar\n// const LightBar = () => {\n//     // const lightBar = useRef();\n\n//     return (\n//         <>\n//             <mesh \n//                 // ref={lightBar} \n//             >\n//                 <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n//                 <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n//             </mesh>\n//         </>\n//     )\n// }\n"]},"metadata":{},"sourceType":"module"}