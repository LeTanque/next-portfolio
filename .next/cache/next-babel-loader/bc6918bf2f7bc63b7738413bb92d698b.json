{"ast":null,"code":"/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction WebGLIndexedBufferRenderer(gl, extensions, info, capabilities) {\n  var isWebGL2 = capabilities.isWebGL2;\n  var mode;\n\n  function setMode(value) {\n    mode = value;\n  }\n\n  var type, bytesPerElement;\n\n  function setIndex(value) {\n    type = value.type;\n    bytesPerElement = value.bytesPerElement;\n  }\n\n  function render(start, count) {\n    gl.drawElements(mode, count, type, start * bytesPerElement);\n    info.update(count, mode);\n  }\n\n  function renderInstances(geometry, start, count, primcount) {\n    if (primcount === 0) return;\n    var extension, methodName;\n\n    if (isWebGL2) {\n      extension = gl;\n      methodName = 'drawElementsInstanced';\n    } else {\n      extension = extensions.get('ANGLE_instanced_arrays');\n      methodName = 'drawElementsInstancedANGLE';\n\n      if (extension === null) {\n        console.error('THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n        return;\n      }\n    }\n\n    extension[methodName](mode, count, type, start * bytesPerElement, primcount);\n    info.update(count, mode, primcount);\n  } //\n\n\n  this.setMode = setMode;\n  this.setIndex = setIndex;\n  this.render = render;\n  this.renderInstances = renderInstances;\n}\n\nexport { WebGLIndexedBufferRenderer };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/renderers/webgl/WebGLIndexedBufferRenderer.js"],"names":["WebGLIndexedBufferRenderer","gl","extensions","info","capabilities","isWebGL2","mode","setMode","value","type","bytesPerElement","setIndex","render","start","count","drawElements","update","renderInstances","geometry","primcount","extension","methodName","get","console","error"],"mappings":"AAAA;;;AAIA,SAASA,0BAAT,CAAqCC,EAArC,EAAyCC,UAAzC,EAAqDC,IAArD,EAA2DC,YAA3D,EAA0E;AAEzE,MAAIC,QAAQ,GAAGD,YAAY,CAACC,QAA5B;AAEA,MAAIC,IAAJ;;AAEA,WAASC,OAAT,CAAkBC,KAAlB,EAA0B;AAEzBF,IAAAA,IAAI,GAAGE,KAAP;AAEA;;AAED,MAAIC,IAAJ,EAAUC,eAAV;;AAEA,WAASC,QAAT,CAAmBH,KAAnB,EAA2B;AAE1BC,IAAAA,IAAI,GAAGD,KAAK,CAACC,IAAb;AACAC,IAAAA,eAAe,GAAGF,KAAK,CAACE,eAAxB;AAEA;;AAED,WAASE,MAAT,CAAiBC,KAAjB,EAAwBC,KAAxB,EAAgC;AAE/Bb,IAAAA,EAAE,CAACc,YAAH,CAAiBT,IAAjB,EAAuBQ,KAAvB,EAA8BL,IAA9B,EAAoCI,KAAK,GAAGH,eAA5C;AAEAP,IAAAA,IAAI,CAACa,MAAL,CAAaF,KAAb,EAAoBR,IAApB;AAEA;;AAED,WAASW,eAAT,CAA0BC,QAA1B,EAAoCL,KAApC,EAA2CC,KAA3C,EAAkDK,SAAlD,EAA8D;AAE7D,QAAKA,SAAS,KAAK,CAAnB,EAAuB;AAEvB,QAAIC,SAAJ,EAAeC,UAAf;;AAEA,QAAKhB,QAAL,EAAgB;AAEfe,MAAAA,SAAS,GAAGnB,EAAZ;AACAoB,MAAAA,UAAU,GAAG,uBAAb;AAEA,KALD,MAKO;AAEND,MAAAA,SAAS,GAAGlB,UAAU,CAACoB,GAAX,CAAgB,wBAAhB,CAAZ;AACAD,MAAAA,UAAU,GAAG,4BAAb;;AAEA,UAAKD,SAAS,KAAK,IAAnB,EAA0B;AAEzBG,QAAAA,OAAO,CAACC,KAAR,CAAe,uIAAf;AACA;AAEA;AAED;;AAEDJ,IAAAA,SAAS,CAAEC,UAAF,CAAT,CAAyBf,IAAzB,EAA+BQ,KAA/B,EAAsCL,IAAtC,EAA4CI,KAAK,GAAGH,eAApD,EAAqES,SAArE;AAEAhB,IAAAA,IAAI,CAACa,MAAL,CAAaF,KAAb,EAAoBR,IAApB,EAA0Ba,SAA1B;AAEA,GA1DwE,CA4DzE;;;AAEA,OAAKZ,OAAL,GAAeA,OAAf;AACA,OAAKI,QAAL,GAAgBA,QAAhB;AACA,OAAKC,MAAL,GAAcA,MAAd;AACA,OAAKK,eAAL,GAAuBA,eAAvB;AAEA;;AAGD,SAASjB,0BAAT","sourcesContent":["/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {\n\n\tvar isWebGL2 = capabilities.isWebGL2;\n\n\tvar mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tvar type, bytesPerElement;\n\n\tfunction setIndex( value ) {\n\n\t\ttype = value.type;\n\t\tbytesPerElement = value.bytesPerElement;\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\tgl.drawElements( mode, count, type, start * bytesPerElement );\n\n\t\tinfo.update( count, mode );\n\n\t}\n\n\tfunction renderInstances( geometry, start, count, primcount ) {\n\n\t\tif ( primcount === 0 ) return;\n\n\t\tvar extension, methodName;\n\n\t\tif ( isWebGL2 ) {\n\n\t\t\textension = gl;\n\t\t\tmethodName = 'drawElementsInstanced';\n\n\t\t} else {\n\n\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\tmethodName = 'drawElementsInstancedANGLE';\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\textension[ methodName ]( mode, count, type, start * bytesPerElement, primcount );\n\n\t\tinfo.update( count, mode, primcount );\n\n\t}\n\n\t//\n\n\tthis.setMode = setMode;\n\tthis.setIndex = setIndex;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\n}\n\n\nexport { WebGLIndexedBufferRenderer };\n"]},"metadata":{},"sourceType":"module"}