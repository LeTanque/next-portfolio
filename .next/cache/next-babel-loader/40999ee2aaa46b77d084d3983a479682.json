{"ast":null,"code":"import _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport { Vector3 } from '../math/Vector3.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Sphere } from '../math/Sphere.js';\nimport { Ray } from '../math/Ray.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { Object3D } from '../core/Object3D.js';\nimport { Triangle } from '../math/Triangle.js';\nimport { Face3 } from '../core/Face3.js';\nimport { DoubleSide, BackSide } from '../constants.js';\nimport { MeshBasicMaterial } from '../materials/MeshBasicMaterial.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author jonobr1 / http://jonobr1.com/\n */\n\nvar _inverseMatrix = new Matrix4();\n\nvar _ray = new Ray();\n\nvar _sphere = new Sphere();\n\nvar _vA = new Vector3();\n\nvar _vB = new Vector3();\n\nvar _vC = new Vector3();\n\nvar _tempA = new Vector3();\n\nvar _tempB = new Vector3();\n\nvar _tempC = new Vector3();\n\nvar _morphA = new Vector3();\n\nvar _morphB = new Vector3();\n\nvar _morphC = new Vector3();\n\nvar _uvA = new Vector2();\n\nvar _uvB = new Vector2();\n\nvar _uvC = new Vector2();\n\nvar _intersectionPoint = new Vector3();\n\nvar _intersectionPointWorld = new Vector3();\n\nfunction Mesh(geometry, material) {\n  Object3D.call(this);\n  this.type = 'Mesh';\n  this.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n  this.material = material !== undefined ? material : new MeshBasicMaterial({\n    color: Math.random() * 0xffffff\n  });\n  this.updateMorphTargets();\n}\n\nMesh.prototype = _Object$assign(_Object$create(Object3D.prototype), {\n  constructor: Mesh,\n  isMesh: true,\n  copy: function (source) {\n    Object3D.prototype.copy.call(this, source);\n\n    if (source.morphTargetInfluences !== undefined) {\n      this.morphTargetInfluences = source.morphTargetInfluences.slice();\n    }\n\n    if (source.morphTargetDictionary !== undefined) {\n      this.morphTargetDictionary = _Object$assign({}, source.morphTargetDictionary);\n    }\n\n    return this;\n  },\n  updateMorphTargets: function () {\n    var geometry = this.geometry;\n    var m, ml, name;\n\n    if (geometry.isBufferGeometry) {\n      var morphAttributes = geometry.morphAttributes;\n\n      var keys = _Object$keys(morphAttributes);\n\n      if (keys.length > 0) {\n        var morphAttribute = morphAttributes[keys[0]];\n\n        if (morphAttribute !== undefined) {\n          this.morphTargetInfluences = [];\n          this.morphTargetDictionary = {};\n\n          for (m = 0, ml = morphAttribute.length; m < ml; m++) {\n            name = morphAttribute[m].name || String(m);\n            this.morphTargetInfluences.push(0);\n            this.morphTargetDictionary[name] = m;\n          }\n        }\n      }\n    } else {\n      var morphTargets = geometry.morphTargets;\n\n      if (morphTargets !== undefined && morphTargets.length > 0) {\n        console.error('THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n      }\n    }\n  },\n  raycast: function (raycaster, intersects) {\n    var geometry = this.geometry;\n    var material = this.material;\n    var matrixWorld = this.matrixWorld;\n    if (material === undefined) return; // Checking boundingSphere distance to ray\n\n    if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n    _sphere.copy(geometry.boundingSphere);\n\n    _sphere.applyMatrix4(matrixWorld);\n\n    if (raycaster.ray.intersectsSphere(_sphere) === false) return; //\n\n    _inverseMatrix.getInverse(matrixWorld);\n\n    _ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix); // Check boundingBox before continuing\n\n\n    if (geometry.boundingBox !== null) {\n      if (_ray.intersectsBox(geometry.boundingBox) === false) return;\n    }\n\n    var intersection;\n\n    if (geometry.isBufferGeometry) {\n      var a, b, c;\n      var index = geometry.index;\n      var position = geometry.attributes.position;\n      var morphPosition = geometry.morphAttributes.position;\n      var morphTargetsRelative = geometry.morphTargetsRelative;\n      var uv = geometry.attributes.uv;\n      var uv2 = geometry.attributes.uv2;\n      var groups = geometry.groups;\n      var drawRange = geometry.drawRange;\n      var i, j, il, jl;\n      var group, groupMaterial;\n      var start, end;\n\n      if (index !== null) {\n        // indexed buffer geometry\n        if (_Array$isArray(material)) {\n          for (i = 0, il = groups.length; i < il; i++) {\n            group = groups[i];\n            groupMaterial = material[group.materialIndex];\n            start = Math.max(group.start, drawRange.start);\n            end = Math.min(group.start + group.count, drawRange.start + drawRange.count);\n\n            for (j = start, jl = end; j < jl; j += 3) {\n              a = index.getX(j);\n              b = index.getX(j + 1);\n              c = index.getX(j + 2);\n              intersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n              if (intersection) {\n                intersection.faceIndex = Math.floor(j / 3); // triangle number in indexed buffer semantics\n\n                intersection.face.materialIndex = group.materialIndex;\n                intersects.push(intersection);\n              }\n            }\n          }\n        } else {\n          start = Math.max(0, drawRange.start);\n          end = Math.min(index.count, drawRange.start + drawRange.count);\n\n          for (i = start, il = end; i < il; i += 3) {\n            a = index.getX(i);\n            b = index.getX(i + 1);\n            c = index.getX(i + 2);\n            intersection = checkBufferGeometryIntersection(this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n            if (intersection) {\n              intersection.faceIndex = Math.floor(i / 3); // triangle number in indexed buffer semantics\n\n              intersects.push(intersection);\n            }\n          }\n        }\n      } else if (position !== undefined) {\n        // non-indexed buffer geometry\n        if (_Array$isArray(material)) {\n          for (i = 0, il = groups.length; i < il; i++) {\n            group = groups[i];\n            groupMaterial = material[group.materialIndex];\n            start = Math.max(group.start, drawRange.start);\n            end = Math.min(group.start + group.count, drawRange.start + drawRange.count);\n\n            for (j = start, jl = end; j < jl; j += 3) {\n              a = j;\n              b = j + 1;\n              c = j + 2;\n              intersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n              if (intersection) {\n                intersection.faceIndex = Math.floor(j / 3); // triangle number in non-indexed buffer semantics\n\n                intersection.face.materialIndex = group.materialIndex;\n                intersects.push(intersection);\n              }\n            }\n          }\n        } else {\n          start = Math.max(0, drawRange.start);\n          end = Math.min(position.count, drawRange.start + drawRange.count);\n\n          for (i = start, il = end; i < il; i += 3) {\n            a = i;\n            b = i + 1;\n            c = i + 2;\n            intersection = checkBufferGeometryIntersection(this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n            if (intersection) {\n              intersection.faceIndex = Math.floor(i / 3); // triangle number in non-indexed buffer semantics\n\n              intersects.push(intersection);\n            }\n          }\n        }\n      }\n    } else if (geometry.isGeometry) {\n      var fvA, fvB, fvC;\n\n      var isMultiMaterial = _Array$isArray(material);\n\n      var vertices = geometry.vertices;\n      var faces = geometry.faces;\n      var uvs;\n      var faceVertexUvs = geometry.faceVertexUvs[0];\n      if (faceVertexUvs.length > 0) uvs = faceVertexUvs;\n\n      for (var f = 0, fl = faces.length; f < fl; f++) {\n        var face = faces[f];\n        var faceMaterial = isMultiMaterial ? material[face.materialIndex] : material;\n        if (faceMaterial === undefined) continue;\n        fvA = vertices[face.a];\n        fvB = vertices[face.b];\n        fvC = vertices[face.c];\n        intersection = checkIntersection(this, faceMaterial, raycaster, _ray, fvA, fvB, fvC, _intersectionPoint);\n\n        if (intersection) {\n          if (uvs && uvs[f]) {\n            var uvs_f = uvs[f];\n\n            _uvA.copy(uvs_f[0]);\n\n            _uvB.copy(uvs_f[1]);\n\n            _uvC.copy(uvs_f[2]);\n\n            intersection.uv = Triangle.getUV(_intersectionPoint, fvA, fvB, fvC, _uvA, _uvB, _uvC, new Vector2());\n          }\n\n          intersection.face = face;\n          intersection.faceIndex = f;\n          intersects.push(intersection);\n        }\n      }\n    }\n  },\n  clone: function () {\n    return new this.constructor(this.geometry, this.material).copy(this);\n  }\n});\n\nfunction checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {\n  var intersect;\n\n  if (material.side === BackSide) {\n    intersect = ray.intersectTriangle(pC, pB, pA, true, point);\n  } else {\n    intersect = ray.intersectTriangle(pA, pB, pC, material.side !== DoubleSide, point);\n  }\n\n  if (intersect === null) return null;\n\n  _intersectionPointWorld.copy(point);\n\n  _intersectionPointWorld.applyMatrix4(object.matrixWorld);\n\n  var distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);\n  if (distance < raycaster.near || distance > raycaster.far) return null;\n  return {\n    distance: distance,\n    point: _intersectionPointWorld.clone(),\n    object: object\n  };\n}\n\nfunction checkBufferGeometryIntersection(object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c) {\n  _vA.fromBufferAttribute(position, a);\n\n  _vB.fromBufferAttribute(position, b);\n\n  _vC.fromBufferAttribute(position, c);\n\n  var morphInfluences = object.morphTargetInfluences;\n\n  if (material.morphTargets && morphPosition && morphInfluences) {\n    _morphA.set(0, 0, 0);\n\n    _morphB.set(0, 0, 0);\n\n    _morphC.set(0, 0, 0);\n\n    for (var i = 0, il = morphPosition.length; i < il; i++) {\n      var influence = morphInfluences[i];\n      var morphAttribute = morphPosition[i];\n      if (influence === 0) continue;\n\n      _tempA.fromBufferAttribute(morphAttribute, a);\n\n      _tempB.fromBufferAttribute(morphAttribute, b);\n\n      _tempC.fromBufferAttribute(morphAttribute, c);\n\n      if (morphTargetsRelative) {\n        _morphA.addScaledVector(_tempA, influence);\n\n        _morphB.addScaledVector(_tempB, influence);\n\n        _morphC.addScaledVector(_tempC, influence);\n      } else {\n        _morphA.addScaledVector(_tempA.sub(_vA), influence);\n\n        _morphB.addScaledVector(_tempB.sub(_vB), influence);\n\n        _morphC.addScaledVector(_tempC.sub(_vC), influence);\n      }\n    }\n\n    _vA.add(_morphA);\n\n    _vB.add(_morphB);\n\n    _vC.add(_morphC);\n  }\n\n  var intersection = checkIntersection(object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint);\n\n  if (intersection) {\n    if (uv) {\n      _uvA.fromBufferAttribute(uv, a);\n\n      _uvB.fromBufferAttribute(uv, b);\n\n      _uvC.fromBufferAttribute(uv, c);\n\n      intersection.uv = Triangle.getUV(_intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2());\n    }\n\n    if (uv2) {\n      _uvA.fromBufferAttribute(uv2, a);\n\n      _uvB.fromBufferAttribute(uv2, b);\n\n      _uvC.fromBufferAttribute(uv2, c);\n\n      intersection.uv2 = Triangle.getUV(_intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2());\n    }\n\n    var face = new Face3(a, b, c);\n    Triangle.getNormal(_vA, _vB, _vC, face.normal);\n    intersection.face = face;\n  }\n\n  return intersection;\n}\n\nexport { Mesh };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/objects/Mesh.js"],"names":["Vector3","Vector2","Sphere","Ray","Matrix4","Object3D","Triangle","Face3","DoubleSide","BackSide","MeshBasicMaterial","BufferGeometry","_inverseMatrix","_ray","_sphere","_vA","_vB","_vC","_tempA","_tempB","_tempC","_morphA","_morphB","_morphC","_uvA","_uvB","_uvC","_intersectionPoint","_intersectionPointWorld","Mesh","geometry","material","call","type","undefined","color","Math","random","updateMorphTargets","prototype","constructor","isMesh","copy","source","morphTargetInfluences","slice","morphTargetDictionary","m","ml","name","isBufferGeometry","morphAttributes","keys","length","morphAttribute","String","push","morphTargets","console","error","raycast","raycaster","intersects","matrixWorld","boundingSphere","computeBoundingSphere","applyMatrix4","ray","intersectsSphere","getInverse","boundingBox","intersectsBox","intersection","a","b","c","index","position","attributes","morphPosition","morphTargetsRelative","uv","uv2","groups","drawRange","i","j","il","jl","group","groupMaterial","start","end","materialIndex","max","min","count","getX","checkBufferGeometryIntersection","faceIndex","floor","face","isGeometry","fvA","fvB","fvC","isMultiMaterial","vertices","faces","uvs","faceVertexUvs","f","fl","faceMaterial","checkIntersection","uvs_f","getUV","clone","object","pA","pB","pC","point","intersect","side","intersectTriangle","distance","origin","distanceTo","near","far","fromBufferAttribute","morphInfluences","set","influence","addScaledVector","sub","add","getNormal","normal"],"mappings":"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","sourcesContent":["import { Vector3 } from '../math/Vector3.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Sphere } from '../math/Sphere.js';\nimport { Ray } from '../math/Ray.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { Object3D } from '../core/Object3D.js';\nimport { Triangle } from '../math/Triangle.js';\nimport { Face3 } from '../core/Face3.js';\nimport { DoubleSide, BackSide } from '../constants.js';\nimport { MeshBasicMaterial } from '../materials/MeshBasicMaterial.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author jonobr1 / http://jonobr1.com/\n */\n\nvar _inverseMatrix = new Matrix4();\nvar _ray = new Ray();\nvar _sphere = new Sphere();\n\nvar _vA = new Vector3();\nvar _vB = new Vector3();\nvar _vC = new Vector3();\n\nvar _tempA = new Vector3();\nvar _tempB = new Vector3();\nvar _tempC = new Vector3();\n\nvar _morphA = new Vector3();\nvar _morphB = new Vector3();\nvar _morphC = new Vector3();\n\nvar _uvA = new Vector2();\nvar _uvB = new Vector2();\nvar _uvC = new Vector2();\n\nvar _intersectionPoint = new Vector3();\nvar _intersectionPointWorld = new Vector3();\n\nfunction Mesh( geometry, material ) {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Mesh';\n\n\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\tthis.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );\n\n\tthis.updateMorphTargets();\n\n}\n\nMesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Mesh,\n\n\tisMesh: true,\n\n\tcopy: function ( source ) {\n\n\t\tObject3D.prototype.copy.call( this, source );\n\n\t\tif ( source.morphTargetInfluences !== undefined ) {\n\n\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\n\t\t}\n\n\t\tif ( source.morphTargetDictionary !== undefined ) {\n\n\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tupdateMorphTargets: function () {\n\n\t\tvar geometry = this.geometry;\n\t\tvar m, ml, name;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\tvar keys = Object.keys( morphAttributes );\n\n\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\tfor ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\tname = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\traycast: function ( raycaster, intersects ) {\n\n\t\tvar geometry = this.geometry;\n\t\tvar material = this.material;\n\t\tvar matrixWorld = this.matrixWorld;\n\n\t\tif ( material === undefined ) return;\n\n\t\t// Checking boundingSphere distance to ray\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere.copy( geometry.boundingSphere );\n\t\t_sphere.applyMatrix4( matrixWorld );\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere ) === false ) return;\n\n\t\t//\n\n\t\t_inverseMatrix.getInverse( matrixWorld );\n\t\t_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\n\n\t\t// Check boundingBox before continuing\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tif ( _ray.intersectsBox( geometry.boundingBox ) === false ) return;\n\n\t\t}\n\n\t\tvar intersection;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tvar a, b, c;\n\t\t\tvar index = geometry.index;\n\t\t\tvar position = geometry.attributes.position;\n\t\t\tvar morphPosition = geometry.morphAttributes.position;\n\t\t\tvar morphTargetsRelative = geometry.morphTargetsRelative;\n\t\t\tvar uv = geometry.attributes.uv;\n\t\t\tvar uv2 = geometry.attributes.uv2;\n\t\t\tvar groups = geometry.groups;\n\t\t\tvar drawRange = geometry.drawRange;\n\t\t\tvar i, j, il, jl;\n\t\t\tvar group, groupMaterial;\n\t\t\tvar start, end;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\t// indexed buffer geometry\n\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tgroup = groups[ i ];\n\t\t\t\t\t\tgroupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\ta = index.getX( j );\n\t\t\t\t\t\t\tb = index.getX( j + 1 );\n\t\t\t\t\t\t\tc = index.getX( j + 2 );\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\t\t\tend = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\t\ta = index.getX( i );\n\t\t\t\t\t\tb = index.getX( i + 1 );\n\t\t\t\t\t\tc = index.getX( i + 2 );\n\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( position !== undefined ) {\n\n\t\t\t\t// non-indexed buffer geometry\n\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tgroup = groups[ i ];\n\t\t\t\t\t\tgroupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\ta = j;\n\t\t\t\t\t\t\tb = j + 1;\n\t\t\t\t\t\t\tc = j + 2;\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\t\t\tend = Math.min( position.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\t\ta = i;\n\t\t\t\t\t\tb = i + 1;\n\t\t\t\t\t\tc = i + 2;\n\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\tvar fvA, fvB, fvC;\n\t\t\tvar isMultiMaterial = Array.isArray( material );\n\n\t\t\tvar vertices = geometry.vertices;\n\t\t\tvar faces = geometry.faces;\n\t\t\tvar uvs;\n\n\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t\t\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\n\n\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\tvar face = faces[ f ];\n\t\t\t\tvar faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;\n\n\t\t\t\tif ( faceMaterial === undefined ) continue;\n\n\t\t\t\tfvA = vertices[ face.a ];\n\t\t\t\tfvB = vertices[ face.b ];\n\t\t\t\tfvC = vertices[ face.c ];\n\n\t\t\t\tintersection = checkIntersection( this, faceMaterial, raycaster, _ray, fvA, fvB, fvC, _intersectionPoint );\n\n\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\tif ( uvs && uvs[ f ] ) {\n\n\t\t\t\t\t\tvar uvs_f = uvs[ f ];\n\t\t\t\t\t\t_uvA.copy( uvs_f[ 0 ] );\n\t\t\t\t\t\t_uvB.copy( uvs_f[ 1 ] );\n\t\t\t\t\t\t_uvC.copy( uvs_f[ 2 ] );\n\n\t\t\t\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, fvA, fvB, fvC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tintersection.face = face;\n\t\t\t\t\tintersection.faceIndex = f;\n\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t}\n\n} );\n\nfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\n\n\tvar intersect;\n\n\tif ( material.side === BackSide ) {\n\n\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t} else {\n\n\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\n\t}\n\n\tif ( intersect === null ) return null;\n\n\t_intersectionPointWorld.copy( point );\n\t_intersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\tvar distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );\n\n\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n\treturn {\n\t\tdistance: distance,\n\t\tpoint: _intersectionPointWorld.clone(),\n\t\tobject: object\n\t};\n\n}\n\nfunction checkBufferGeometryIntersection( object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c ) {\n\n\t_vA.fromBufferAttribute( position, a );\n\t_vB.fromBufferAttribute( position, b );\n\t_vC.fromBufferAttribute( position, c );\n\n\tvar morphInfluences = object.morphTargetInfluences;\n\n\tif ( material.morphTargets && morphPosition && morphInfluences ) {\n\n\t\t_morphA.set( 0, 0, 0 );\n\t\t_morphB.set( 0, 0, 0 );\n\t\t_morphC.set( 0, 0, 0 );\n\n\t\tfor ( var i = 0, il = morphPosition.length; i < il; i ++ ) {\n\n\t\t\tvar influence = morphInfluences[ i ];\n\t\t\tvar morphAttribute = morphPosition[ i ];\n\n\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t_tempA.fromBufferAttribute( morphAttribute, a );\n\t\t\t_tempB.fromBufferAttribute( morphAttribute, b );\n\t\t\t_tempC.fromBufferAttribute( morphAttribute, c );\n\n\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t_morphA.addScaledVector( _tempA, influence );\n\t\t\t\t_morphB.addScaledVector( _tempB, influence );\n\t\t\t\t_morphC.addScaledVector( _tempC, influence );\n\n\t\t\t} else {\n\n\t\t\t\t_morphA.addScaledVector( _tempA.sub( _vA ), influence );\n\t\t\t\t_morphB.addScaledVector( _tempB.sub( _vB ), influence );\n\t\t\t\t_morphC.addScaledVector( _tempC.sub( _vC ), influence );\n\n\t\t\t}\n\n\t\t}\n\n\t\t_vA.add( _morphA );\n\t\t_vB.add( _morphB );\n\t\t_vC.add( _morphC );\n\n\t}\n\n\tvar intersection = checkIntersection( object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint );\n\n\tif ( intersection ) {\n\n\t\tif ( uv ) {\n\n\t\t\t_uvA.fromBufferAttribute( uv, a );\n\t\t\t_uvB.fromBufferAttribute( uv, b );\n\t\t\t_uvC.fromBufferAttribute( uv, c );\n\n\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t}\n\n\t\tif ( uv2 ) {\n\n\t\t\t_uvA.fromBufferAttribute( uv2, a );\n\t\t\t_uvB.fromBufferAttribute( uv2, b );\n\t\t\t_uvC.fromBufferAttribute( uv2, c );\n\n\t\t\tintersection.uv2 = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t}\n\n\t\tvar face = new Face3( a, b, c );\n\t\tTriangle.getNormal( _vA, _vB, _vC, face.normal );\n\n\t\tintersection.face = face;\n\n\t}\n\n\treturn intersection;\n\n}\n\nexport { Mesh };\n"]},"metadata":{},"sourceType":"module"}