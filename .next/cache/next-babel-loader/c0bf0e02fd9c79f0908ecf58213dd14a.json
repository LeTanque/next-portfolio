{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/dnd-draglayer/Container.jsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { DropTarget } from \"react-dnd\";\nimport ItemTypes from \"./ItemTypes\";\nimport DraggableBox from \"./DraggableBox\";\nimport snapToGrid from \"./snapToGrid\";\nimport update from \"immutability-helper\";\n\nvar Container =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(Container, _React$PureComponent);\n\n  function Container() {\n    var _this;\n\n    _classCallCheck(this, Container);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Container).apply(this, arguments));\n    _this.state = {\n      boxes: {\n        a: {\n          top: 20,\n          left: 80,\n          rotation: 45,\n          title: \"Lakeside Herbal\",\n          image: \"/static/project/lakeside-logo-dark(1080x1080).png\"\n        },\n        b: {\n          top: 180,\n          left: 20,\n          rotation: 35,\n          title: \"Magic cards\",\n          image: \"/static/project/magical-screenshot.png\"\n        }\n      }\n    };\n    return _this;\n  }\n\n  _createClass(Container, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var connectDropTarget = this.props.connectDropTarget;\n      var boxes = this.state.boxes;\n      return connectDropTarget(__jsx(\"main\", {\n        className: \"main__drag-layer-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, _Object$keys(boxes).map(function (key) {\n        return _this2.renderBox(boxes[key], key);\n      })));\n    }\n  }, {\n    key: \"getRandomInt\",\n    value: function getRandomInt(min, max) {\n      min = Math.ceil(min);\n      max = Math.floor(max);\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n  }, {\n    key: \"moveBox\",\n    value: function moveBox(id, left, top) {\n      this.setState(update(this.state, {\n        boxes: _defineProperty({}, id, {\n          $merge: {\n            left: left,\n            top: top\n          },\n          rotation: {\n            $set: this.getRandomInt(-25, 25)\n          }\n        })\n      }));\n    }\n  }, {\n    key: \"renderBox\",\n    value: function renderBox(item, key) {\n      return __jsx(DraggableBox, _extends({\n        key: key,\n        id: key\n      }, item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Container;\n}(React.PureComponent);\n\nexport default DropTarget(ItemTypes.BOX, {\n  drop: function drop(props, monitor, component) {\n    if (!component) {\n      return;\n    }\n\n    var delta = monitor.getDifferenceFromInitialOffset();\n    var item = monitor.getItem();\n    var left = Math.round(item.left + delta.x);\n    var top = Math.round(item.top + delta.y);\n\n    if (props.snapToGrid) {\n      var _snapToGrid = snapToGrid(left, top);\n\n      var _snapToGrid2 = _slicedToArray(_snapToGrid, 2);\n\n      left = _snapToGrid2[0];\n      top = _snapToGrid2[1];\n    }\n\n    component.moveBox(item.id, left, top);\n  }\n}, function (connect) {\n  return {\n    connectDropTarget: connect.dropTarget()\n  };\n})(Container);","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/dnd-draglayer/Container.jsx"],"names":["React","DropTarget","ItemTypes","DraggableBox","snapToGrid","update","Container","arguments","state","boxes","a","top","left","rotation","title","image","b","connectDropTarget","props","map","key","renderBox","min","max","Math","ceil","floor","random","id","setState","$merge","$set","getRandomInt","item","PureComponent","BOX","drop","monitor","component","delta","getDifferenceFromInitialOffset","getItem","round","x","y","moveBox","connect","dropTarget"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { DropTarget } from \"react-dnd\";\nimport ItemTypes from \"./ItemTypes\";\nimport DraggableBox from \"./DraggableBox\";\nimport snapToGrid from \"./snapToGrid\";\nimport update from \"immutability-helper\";\n\n\n\nclass Container extends React.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            boxes: {\n                a: { top: 20, left: 80, rotation: 45, title: \"Lakeside Herbal\", image: \"/static/project/lakeside-logo-dark(1080x1080).png\" },\n                b: { top: 180, left: 20, rotation: 35, title: \"Magic cards\", image: \"/static/project/magical-screenshot.png\" }\n            }\n        };\n    }\n    \n    render() {\n        const { connectDropTarget } = this.props;\n        const { boxes } = this.state;\n\n        return connectDropTarget(\n            <main className=\"main__drag-layer-container\">\n                {Object.keys(boxes).map(key => this.renderBox(boxes[key], key))}\n            </main>\n        );\n    }\n\n    getRandomInt(min, max) {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    moveBox(id, left, top) {\n        this.setState(\n            update(this.state, {\n                boxes: {\n                    [id]: {\n                        $merge: { left, top },\n                        rotation: { $set: this.getRandomInt(-25, 25) }\n                    }\n                }\n            })\n        );\n    }\n    renderBox(item, key) {\n        return <DraggableBox key={key} id={key} {...item} />;\n    }\n}\n\nexport default DropTarget(\n    ItemTypes.BOX,\n    {\n        drop(props, monitor, component) {\n            if (!component) {\n                return;\n            }\n            const delta = monitor.getDifferenceFromInitialOffset();\n            const item = monitor.getItem();\n            let left = Math.round(item.left + delta.x);\n            let top = Math.round(item.top + delta.y);\n            if (props.snapToGrid) {\n                [left, top] = snapToGrid(left, top);\n            }\n            component.moveBox(item.id, left, top);\n        }\n    },\n    connect => ({\n        connectDropTarget: connect.dropTarget()\n    })\n)(Container);\n"]},"metadata":{},"sourceType":"module"}