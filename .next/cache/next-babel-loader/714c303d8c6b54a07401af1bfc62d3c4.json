{"ast":null,"code":"import _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author mrdoob / http://mrdoob.com/\n */\nimport { ShapePath } from './ShapePath.js';\n\nfunction Font(data) {\n  this.type = 'Font';\n  this.data = data;\n}\n\n_Object$assign(Font.prototype, {\n  isFont: true,\n  generateShapes: function (text, size) {\n    if (size === undefined) size = 100;\n    var shapes = [];\n    var paths = createPaths(text, size, this.data);\n\n    for (var p = 0, pl = paths.length; p < pl; p++) {\n      Array.prototype.push.apply(shapes, paths[p].toShapes());\n    }\n\n    return shapes;\n  }\n});\n\nfunction createPaths(text, size, data) {\n  var chars = _Array$from ? _Array$from(text) : String(text).split(''); // see #13988\n\n  var scale = size / data.resolution;\n  var line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;\n  var paths = [];\n  var offsetX = 0,\n      offsetY = 0;\n\n  for (var i = 0; i < chars.length; i++) {\n    var char = chars[i];\n\n    if (char === '\\n') {\n      offsetX = 0;\n      offsetY -= line_height;\n    } else {\n      var ret = createPath(char, scale, offsetX, offsetY, data);\n      offsetX += ret.offsetX;\n      paths.push(ret.path);\n    }\n  }\n\n  return paths;\n}\n\nfunction createPath(char, scale, offsetX, offsetY, data) {\n  var glyph = data.glyphs[char] || data.glyphs['?'];\n\n  if (!glyph) {\n    console.error('THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.');\n    return;\n  }\n\n  var path = new ShapePath();\n  var x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n  if (glyph.o) {\n    var outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(' '));\n\n    for (var i = 0, l = outline.length; i < l;) {\n      var action = outline[i++];\n\n      switch (action) {\n        case 'm':\n          // moveTo\n          x = outline[i++] * scale + offsetX;\n          y = outline[i++] * scale + offsetY;\n          path.moveTo(x, y);\n          break;\n\n        case 'l':\n          // lineTo\n          x = outline[i++] * scale + offsetX;\n          y = outline[i++] * scale + offsetY;\n          path.lineTo(x, y);\n          break;\n\n        case 'q':\n          // quadraticCurveTo\n          cpx = outline[i++] * scale + offsetX;\n          cpy = outline[i++] * scale + offsetY;\n          cpx1 = outline[i++] * scale + offsetX;\n          cpy1 = outline[i++] * scale + offsetY;\n          path.quadraticCurveTo(cpx1, cpy1, cpx, cpy);\n          break;\n\n        case 'b':\n          // bezierCurveTo\n          cpx = outline[i++] * scale + offsetX;\n          cpy = outline[i++] * scale + offsetY;\n          cpx1 = outline[i++] * scale + offsetX;\n          cpy1 = outline[i++] * scale + offsetY;\n          cpx2 = outline[i++] * scale + offsetX;\n          cpy2 = outline[i++] * scale + offsetY;\n          path.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);\n          break;\n      }\n    }\n  }\n\n  return {\n    offsetX: glyph.ha * scale,\n    path: path\n  };\n}\n\nexport { Font };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/extras/core/Font.js"],"names":["ShapePath","Font","data","type","prototype","isFont","generateShapes","text","size","undefined","shapes","paths","createPaths","p","pl","length","Array","push","apply","toShapes","chars","String","split","scale","resolution","line_height","boundingBox","yMax","yMin","underlineThickness","offsetX","offsetY","i","char","ret","createPath","path","glyph","glyphs","console","error","familyName","x","y","cpx","cpy","cpx1","cpy1","cpx2","cpy2","o","outline","_cachedOutline","l","action","moveTo","lineTo","quadraticCurveTo","bezierCurveTo","ha"],"mappings":"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","sourcesContent":["/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author mrdoob / http://mrdoob.com/\n */\n\nimport { ShapePath } from './ShapePath.js';\n\n\nfunction Font( data ) {\n\n\tthis.type = 'Font';\n\n\tthis.data = data;\n\n}\n\nObject.assign( Font.prototype, {\n\n\tisFont: true,\n\n\tgenerateShapes: function ( text, size ) {\n\n\t\tif ( size === undefined ) size = 100;\n\n\t\tvar shapes = [];\n\t\tvar paths = createPaths( text, size, this.data );\n\n\t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\n\t\t}\n\n\t\treturn shapes;\n\n\t}\n\n} );\n\nfunction createPaths( text, size, data ) {\n\n\tvar chars = Array.from ? Array.from( text ) : String( text ).split( '' ); // see #13988\n\tvar scale = size / data.resolution;\n\tvar line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\n\n\tvar paths = [];\n\n\tvar offsetX = 0, offsetY = 0;\n\n\tfor ( var i = 0; i < chars.length; i ++ ) {\n\n\t\tvar char = chars[ i ];\n\n\t\tif ( char === '\\n' ) {\n\n\t\t\toffsetX = 0;\n\t\t\toffsetY -= line_height;\n\n\t\t} else {\n\n\t\t\tvar ret = createPath( char, scale, offsetX, offsetY, data );\n\t\t\toffsetX += ret.offsetX;\n\t\t\tpaths.push( ret.path );\n\n\t\t}\n\n\t}\n\n\treturn paths;\n\n}\n\nfunction createPath( char, scale, offsetX, offsetY, data ) {\n\n\tvar glyph = data.glyphs[ char ] || data.glyphs[ '?' ];\n\n\tif ( ! glyph ) {\n\n\t\tconsole.error( 'THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.' );\n\n\t\treturn;\n\n\t}\n\n\tvar path = new ShapePath();\n\n\tvar x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\tif ( glyph.o ) {\n\n\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\tfor ( var i = 0, l = outline.length; i < l; ) {\n\n\t\t\tvar action = outline[ i ++ ];\n\n\t\t\tswitch ( action ) {\n\n\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn { offsetX: glyph.ha * scale, path: path };\n\n}\n\nexport { Font };\n"]},"metadata":{},"sourceType":"module"}