{"ast":null,"code":"var _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/SmokeContainerReal.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport * as THREE from 'three';\nimport { Canvas // extend,\n// useFrame,\n// useLoader,\n// useResource,\n// useThree,\n} from \"react-three-fiber\";\nimport TextLoop from \"../TextLoop\";\n\nconst Thing = props => {\n  const {\n    vertices\n  } = props;\n  return __jsx(\"group\", {\n    ref: ref => console.log(\"we have the ref in thing\", ref),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, __jsx(\"line\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, __jsx(\"geometry\", {\n    name: \"geometry\",\n    vertices: vertices.map(v => new THREE.Vector3(...v)),\n    onUpdate: self => self.verticesNeedUpdate = true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }), __jsx(\"lineBasicMaterial\", {\n    name: \"material\",\n    color: \"#ff0000\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  })), __jsx(\"mesh\", {\n    // a mesh combines material with geometry\n    onClick: click => console.log('click --> ', click),\n    onHover: hover => console.log('hover --> ', hover),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, __jsx(\"octahedronGeometry\", {\n    name: \"geometry\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), __jsx(\"meshBasicMaterial\", {\n    name: \"material\",\n    color: \"peachpuff\",\n    opacity: 0.5,\n    transparent: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  })));\n};\n\nconst SmokeContainerReal = () => {\n  // const {\n  //     gl,                           // WebGL renderer \n  //     scene,                        // Default scene\n  //     camera,                       // Default camera\n  //     size,                         // Bounds of the view (which stretches 100% and auto-adjusts)\n  //     viewport,                     // Bounds of the viewport in 3d units + factor (size/viewport)\n  //     aspect,                       // Aspect ratio (size.width / size.height)\n  //     mouse,                        // Current 2D mouse coordinates\n  //     clock,                        // THREE.Clock (useful for useFrame deltas)\n  //     invalidate,                   // Invalidates a single frame (for <Canvas invalidateFrameloop />)\n  //     intersect,                    // Calls onMouseMove handlers for objects underneath the cursor\n  //     setDefaultCamera,             // Sets the default camera\n  // } = useThree();\n  return __jsx(\"div\", {\n    className: \"container block__three-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, __jsx(Canvas, {\n    style: {\n      background: 'radial-gradient(at 50% 70%, #200f20 40%, #090b1f 80%, #050523 100%)'\n    },\n    camera: {\n      fov: 75,\n      position: [0, 0, 60]\n    } // children                      // Either a function child (which receives state) or regular children\n    // gl                            // Props that go into the default webGL-renderer\n    // camera                        // Props that go into the default camera\n    // raycaster                     // Props that go into the default raycaster\n    // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n    // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n    // gl2 = false                   // Enables webgl2\n    // concurrent = false            // Enables React concurrent mode\n    // resize = undefined            // Resize config, see react-use-measure's options\n    // orthographic = false          // Creates an orthographic camera if true\n    // noEvents = false              // Switch off raytracing and event support\n    // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n    // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n    // updateDefaultCamera = true    // Adjusts default camera on size changes\n    // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n    // onPointerMissed \n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, __jsx(\"rectAreaLight\", {\n    intensity: 3,\n    position: [0, 10, -10],\n    width: 30,\n    height: 30,\n    onUpdate: self => self.lookAt(new THREE.Vector3(0, 0, 0)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), __jsx(Thing, {\n    vertices: [[-1, 0, 0], [0, 1, 0], [1, 0, 0], [0, -1, 0], [-1, 0, 0]],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  })), __jsx(TextLoop, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }));\n};\n\nexport default SmokeContainerReal;","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/SmokeContainerReal.jsx"],"names":["THREE","Canvas","TextLoop","Thing","props","vertices","ref","console","log","map","v","Vector3","self","verticesNeedUpdate","click","hover","SmokeContainerReal","background","fov","position","lookAt"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nimport {\n    Canvas,\n    // extend,\n    // useFrame,\n    // useLoader,\n    // useResource,\n    // useThree,\n} from \"react-three-fiber\";\n\nimport TextLoop from \"../TextLoop\";\n\n\n\nconst Thing = props => {\n    const { vertices } = props;\n\n\n    return (\n        <group ref={ref => console.log(\"we have the ref in thing\", ref)} >\n\n            <line>\n                <geometry \n                    name=\"geometry\"\n                    vertices={vertices.map( v => new THREE.Vector3(...v) )}\n                    onUpdate={self => (self.verticesNeedUpdate = true)}\n                />\n                <lineBasicMaterial   name=\"material\"  color=\"#ff0000\" />\n            </line>\n            <mesh\n                // a mesh combines material with geometry\n                onClick={click => console.log('click --> ', click)}\n                onHover={hover => console.log('hover --> ', hover)}\n\n            >\n                <octahedronGeometry name=\"geometry\"  />\n                <meshBasicMaterial  name=\"material\"  color=\"peachpuff\" opacity={0.5} transparent={true} />\n            </mesh>\n\n        </group>\n    )\n}\n\n\n\nconst SmokeContainerReal = () => {\n    // const {\n    //     gl,                           // WebGL renderer \n    //     scene,                        // Default scene\n    //     camera,                       // Default camera\n    //     size,                         // Bounds of the view (which stretches 100% and auto-adjusts)\n    //     viewport,                     // Bounds of the viewport in 3d units + factor (size/viewport)\n    //     aspect,                       // Aspect ratio (size.width / size.height)\n    //     mouse,                        // Current 2D mouse coordinates\n    //     clock,                        // THREE.Clock (useful for useFrame deltas)\n    //     invalidate,                   // Invalidates a single frame (for <Canvas invalidateFrameloop />)\n    //     intersect,                    // Calls onMouseMove handlers for objects underneath the cursor\n    //     setDefaultCamera,             // Sets the default camera\n    // } = useThree();\n\n\n    return (\n        <div \n            className=\"container block__three-container\" \n        >\n            \n            <Canvas\n                style={{ background: 'radial-gradient(at 50% 70%, #200f20 40%, #090b1f 80%, #050523 100%)' }}\n                camera={{ fov: 75, position: [0, 0, 60] }} \n                // children                      // Either a function child (which receives state) or regular children\n                // gl                            // Props that go into the default webGL-renderer\n                // camera                        // Props that go into the default camera\n                // raycaster                     // Props that go into the default raycaster\n                // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n                // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n                // gl2 = false                   // Enables webgl2\n                // concurrent = false            // Enables React concurrent mode\n                // resize = undefined            // Resize config, see react-use-measure's options\n                // orthographic = false          // Creates an orthographic camera if true\n                // noEvents = false              // Switch off raytracing and event support\n                // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n                // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n                // updateDefaultCamera = true    // Adjusts default camera on size changes\n                // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n                // onPointerMissed \n            >   \n                <rectAreaLight\n                    intensity={3}\n                    position={[0, 10, -10]}\n                    width={30}\n                    height={30}\n                    onUpdate={self => self.lookAt(new THREE.Vector3(0, 0, 0))}\n                />\n\n                <Thing \n                    vertices={[ [ -1,0,0 ], [ 0,1,0 ], [ 1,0,0 ], [ 0,-1,0 ], [ -1,0,0 ] ]}\n                />\n\n            </Canvas> \n           \n            <TextLoop  />\n\n        </div>\n    );\n}\n\nexport default SmokeContainerReal;"]},"metadata":{},"sourceType":"module"}