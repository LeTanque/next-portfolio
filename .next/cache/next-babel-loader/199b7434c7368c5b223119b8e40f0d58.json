{"ast":null,"code":"var _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/SmokeContainerReal.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRef, useState } from \"react\";\nimport * as THREE from 'three';\nimport { Canvas, useFrame, extend, useResource // useLoader,\n// useThree,\n} from \"react-three-fiber\";\nimport * as resources from './resources/index';\nextend(resources);\nimport TextLoop from \"../TextLoop\"; // This component creates a fullscreen colored plane \n// const Background = ({ color }) => {\n//     const { viewport } = useThree();\n//     return (\n//         <mesh scale={[viewport.width, viewport.height, 1]}>\n//             <planeGeometry attach=\"geometry\" args={[1, 1]} />\n//             <a.meshBasicMaterial attach=\"material\" color={color} depthTest={false} />\n//         </mesh>\n//     )\n// }\n// // This component loads an image and projects it onto a plane\n// function Image({ url, opacity, scale, ...props }) {\n//     const texture = useMemo(() => new THREE.TextureLoader().load(url), [url])\n//     const [hovered, setHover] = useState(false)\n//     const hover = useCallback(() => setHover(true), [])\n//     const unhover = useCallback(() => setHover(false), [])\n//     const { factor } = useSpring({ factor: hovered ? 1.1 : 1 })\n//     return (\n//         <a.mesh {...props} onHover={hover} onUnhover={unhover} scale={factor.interpolate(f => [scale * f, scale * f, 1])}>\n//             <planeBufferGeometry attach=\"geometry\" args={[5, 5]} />\n//             <a.meshLambertMaterial attach=\"material\" transparent opacity={opacity}>\n//                 <primitive attach=\"map\" object={texture} />\n//             </a.meshLambertMaterial>\n//         </a.mesh>\n//     )\n// }\n// const Thing = props => {\n//     const { vertices } = props;\n//     const [ geometryRef, geometry ] = useResource();\n//     const ref = useRef();\n//     console.log('geometryRef AND geometry --> ', geometryRef, geometry);\n//     useFrame(() => {\n//         return ref.current.rotation.x = ref.current.rotation.y += 0.01\n//     })\n//     // useFrame(() => (console.log('ref.current --> ', ref.current)))\n//     return (\n//         <group \n//             ref={ref}\n//         >\n//             <line>\n//                 <geometry \n//                     attach=\"geometry\"\n//                     vertices={vertices.map( v => new THREE.Vector3(...v) )}\n//                     onUpdate={self => (self.verticesNeedUpdate = true)}\n//                 />\n//                 <lineBasicMaterial   attach=\"material\"  color=\"#ff0000\" />\n//             </line>\n//             <mesh       // a mesh combines material with geometry\n//                 // onClick={click => console.log('click --> ', click)}\n//                 // onHover={hover => console.log('hover --> ', hover)}\n//             >\n//                 <octahedronGeometry \n//                     attach=\"geometry\"  \n//                     args={[10000, 10000]}\n//                     parameters={{ a: 0 }}\n//                 />\n//                 <meshBasicMaterial  \n//                     attach=\"material\"  \n//                     color=\"peachpuff\" \n//                     opacity={0.5} \n//                     transparent={true} \n//                 />\n//             </mesh>\n//         </group>\n//     )\n// }\n// This component maintains the scene \n\nvar Scene = function Scene(_ref) {\n  var mouse = _ref.mouse;\n\n  var _useThree = useThree(),\n      size = _useThree.size;\n\n  var scrollMax = size.height * 4.5;\n  return __jsx(React.Fragment, null, __jsx(a.spotLight, {\n    intensity: 1.2,\n    color: \"white\",\n    position: mouse.interpolate(function (x, y) {\n      return [x / 100, -y / 100, 6.5];\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }), __jsx(Background, {\n    color: top.interpolate([0, 0.25, 0.8, 1], ['#27282F', '#247BA0', '#70C1B3', '#f8f3f1']),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }), __jsx(Thing, {\n    vertices: [[-1, 0, 0], [0, 1, 0], [1, 0, 0], [0, -1, 0], [-1, 0, 0]],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }));\n}; // Main container\n\n\nvar SmokeContainerReal = function SmokeContainerReal() {\n  var _useState = useState({\n    mouse: [0, 0]\n  }),\n      mouseState = _useState[0],\n      setMouseState = _useState[1];\n\n  useFrame(function (_ref2) {\n    var x = _ref2.clientX,\n        y = _ref2.clientY;\n    setMouseState({\n      mouse: [x - window.innerWidth / 2, y - window.innerHeight / 2]\n    });\n  });\n  return __jsx(\"div\", {\n    className: \"container block__three-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, __jsx(Canvas, {\n    style: {\n      background: 'radial-gradient(at 50% 70%, #200f20 40%, #090b1f 80%, #050523 100%)'\n    },\n    camera: {\n      fov: 75,\n      position: [0, 0, 60]\n    } // children                      // Either a function child (which receives state) or regular children\n    // gl                            // Props that go into the default webGL-renderer\n    // camera                        // Props that go into the default camera\n    // raycaster                     // Props that go into the default raycaster\n    // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n    // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n    // gl2 = false                   // Enables webgl2\n    // concurrent = false            // Enables React concurrent mode\n    // resize = undefined            // Resize config, see react-use-measure's options\n    // orthographic = false          // Creates an orthographic camera if true\n    // noEvents = false              // Switch off raytracing and event support\n    // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n    // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n    // updateDefaultCamera = true    // Adjusts default camera on size changes\n    // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n    // onPointerMissed \n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, __jsx(\"rectAreaLight\", {\n    intensity: 3,\n    position: [0, 10, -10],\n    width: 30,\n    height: 30,\n    onUpdate: function onUpdate(self) {\n      return self.lookAt(new THREE.Vector3(0, 0, 0));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }), __jsx(TextLoop, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  })));\n};\n\nexport default SmokeContainerReal;","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/SmokeContainerReal.jsx"],"names":["extend","Scene","mouse","size","useThree","scrollMax","x","top","SmokeContainerReal","mouseState","setMouseState","useState","useFrame","clientX","clientY","y","window","background","fov","position","self","THREE"],"mappings":"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","sourcesContent":["import { useRef, useState } from \"react\";\nimport * as THREE from 'three';\nimport {\n    Canvas,\n    useFrame,\n    extend,\n    useResource,\n    // useLoader,\n    // useThree,\n} from \"react-three-fiber\";\nimport * as resources from './resources/index';\nextend(resources);\n\nimport TextLoop from \"../TextLoop\";\n\n\n\n\n\n\n// This component creates a fullscreen colored plane \n// const Background = ({ color }) => {\n//     const { viewport } = useThree();\n\n//     return (\n//         <mesh scale={[viewport.width, viewport.height, 1]}>\n//             <planeGeometry attach=\"geometry\" args={[1, 1]} />\n//             <a.meshBasicMaterial attach=\"material\" color={color} depthTest={false} />\n//         </mesh>\n//     )\n// }\n\n\n\n// // This component loads an image and projects it onto a plane\n// function Image({ url, opacity, scale, ...props }) {\n//     const texture = useMemo(() => new THREE.TextureLoader().load(url), [url])\n//     const [hovered, setHover] = useState(false)\n//     const hover = useCallback(() => setHover(true), [])\n//     const unhover = useCallback(() => setHover(false), [])\n//     const { factor } = useSpring({ factor: hovered ? 1.1 : 1 })\n//     return (\n//         <a.mesh {...props} onHover={hover} onUnhover={unhover} scale={factor.interpolate(f => [scale * f, scale * f, 1])}>\n//             <planeBufferGeometry attach=\"geometry\" args={[5, 5]} />\n//             <a.meshLambertMaterial attach=\"material\" transparent opacity={opacity}>\n//                 <primitive attach=\"map\" object={texture} />\n//             </a.meshLambertMaterial>\n//         </a.mesh>\n//     )\n// }\n\n\n\n\n\n\n// const Thing = props => {\n//     const { vertices } = props;\n//     const [ geometryRef, geometry ] = useResource();\n//     const ref = useRef();\n\n//     console.log('geometryRef AND geometry --> ', geometryRef, geometry);\n\n//     useFrame(() => {\n//         return ref.current.rotation.x = ref.current.rotation.y += 0.01\n//     })\n\n//     // useFrame(() => (console.log('ref.current --> ', ref.current)))\n    \n//     return (\n//         <group \n//             ref={ref}\n//         >\n//             <line>\n//                 <geometry \n//                     attach=\"geometry\"\n//                     vertices={vertices.map( v => new THREE.Vector3(...v) )}\n//                     onUpdate={self => (self.verticesNeedUpdate = true)}\n//                 />\n//                 <lineBasicMaterial   attach=\"material\"  color=\"#ff0000\" />\n//             </line>\n                \n//             <mesh       // a mesh combines material with geometry\n//                 // onClick={click => console.log('click --> ', click)}\n//                 // onHover={hover => console.log('hover --> ', hover)}\n//             >\n//                 <octahedronGeometry \n//                     attach=\"geometry\"  \n//                     args={[10000, 10000]}\n//                     parameters={{ a: 0 }}\n//                 />\n//                 <meshBasicMaterial  \n//                     attach=\"material\"  \n//                     color=\"peachpuff\" \n//                     opacity={0.5} \n//                     transparent={true} \n//                 />\n//             </mesh>\n//         </group>\n//     )\n// }\n\n\n// This component maintains the scene \nconst Scene = ({ mouse }) => {\n    const { size } = useThree();\n    const scrollMax = size.height * 4.5;\n\n    return (\n        <>\n            <a.spotLight intensity={1.2} color=\"white\" position={mouse.interpolate((x, y) => [x / 100, -y / 100, 6.5])} />\n            {/* <Effects factor={top.interpolate([0, 150], [1, 0])} /> */}\n            <Background color={top.interpolate([0, 0.25, 0.8, 1], ['#27282F', '#247BA0', '#70C1B3', '#f8f3f1'])} />\n\n            <Thing   vertices={[ [ -1,0,0 ], [ 0,1,0 ], [ 1,0,0 ], [ 0,-1,0 ], [ -1,0,0 ] ]}  />\n\n            \n        </>\n    )\n}\n\n// Main container\nconst SmokeContainerReal = () => {\n    const [ mouseState, setMouseState ] = useState({ mouse: [ 0, 0 ] });\n\n    useFrame(({ clientX: x, clientY: y }) => {\n        setMouseState({ mouse: [x - window.innerWidth / 2, y - window.innerHeight / 2] });\n    })\n\n    return (\n        <div  className=\"container block__three-container\" >\n            <Canvas\n                style={{ background: 'radial-gradient(at 50% 70%, #200f20 40%, #090b1f 80%, #050523 100%)' }}\n                camera={{ fov: 75, position: [0, 0, 60] }} \n                // children                      // Either a function child (which receives state) or regular children\n                // gl                            // Props that go into the default webGL-renderer\n                // camera                        // Props that go into the default camera\n                // raycaster                     // Props that go into the default raycaster\n                // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n                // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n                // gl2 = false                   // Enables webgl2\n                // concurrent = false            // Enables React concurrent mode\n                // resize = undefined            // Resize config, see react-use-measure's options\n                // orthographic = false          // Creates an orthographic camera if true\n                // noEvents = false              // Switch off raytracing and event support\n                // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n                // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n                // updateDefaultCamera = true    // Adjusts default camera on size changes\n                // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n                // onPointerMissed \n            >   \n                <rectAreaLight\n                    intensity={3}\n                    position={[0, 10, -10]}\n                    width={30}\n                    height={30}\n                    onUpdate={self => self.lookAt(new THREE.Vector3(0, 0, 0))}\n                />\n\n                <TextLoop  />\n                {/* <Scene  mouse={mouseState} /> */}\n\n            </Canvas> \n        </div>\n    );\n}\n\nexport default SmokeContainerReal;"]},"metadata":{},"sourceType":"module"}