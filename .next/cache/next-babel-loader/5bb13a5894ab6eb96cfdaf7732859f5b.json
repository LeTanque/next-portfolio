{"ast":null,"code":"import _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport { EventDispatcher } from '../core/EventDispatcher.js';\nimport { Texture } from '../textures/Texture.js';\nimport { LinearFilter } from '../constants.js';\nimport { Vector4 } from '../math/Vector4.js';\n/**\n * @author szimek / https://github.com/szimek/\n * @author alteredq / http://alteredqualia.com/\n * @author Marius Kintel / https://github.com/kintel\n */\n\n/*\n In options, we can specify:\n * Texture parameters for an auto-generated target texture\n * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n*/\n\nfunction WebGLRenderTarget(width, height, options) {\n  this.width = width;\n  this.height = height;\n  this.scissor = new Vector4(0, 0, width, height);\n  this.scissorTest = false;\n  this.viewport = new Vector4(0, 0, width, height);\n  options = options || {};\n  this.texture = new Texture(undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);\n  this.texture.image = {};\n  this.texture.image.width = width;\n  this.texture.image.height = height;\n  this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n  this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n  this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n  this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n  this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n}\n\nWebGLRenderTarget.prototype = _Object$assign(_Object$create(EventDispatcher.prototype), {\n  constructor: WebGLRenderTarget,\n  isWebGLRenderTarget: true,\n  setSize: function (width, height) {\n    if (this.width !== width || this.height !== height) {\n      this.width = width;\n      this.height = height;\n      this.texture.image.width = width;\n      this.texture.image.height = height;\n      this.dispose();\n    }\n\n    this.viewport.set(0, 0, width, height);\n    this.scissor.set(0, 0, width, height);\n  },\n  clone: function () {\n    return new this.constructor().copy(this);\n  },\n  copy: function (source) {\n    this.width = source.width;\n    this.height = source.height;\n    this.viewport.copy(source.viewport);\n    this.texture = source.texture.clone();\n    this.depthBuffer = source.depthBuffer;\n    this.stencilBuffer = source.stencilBuffer;\n    this.depthTexture = source.depthTexture;\n    return this;\n  },\n  dispose: function () {\n    this.dispatchEvent({\n      type: 'dispose'\n    });\n  }\n});\nexport { WebGLRenderTarget };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/renderers/WebGLRenderTarget.js"],"names":["EventDispatcher","Texture","LinearFilter","Vector4","WebGLRenderTarget","width","height","options","scissor","scissorTest","viewport","texture","undefined","wrapS","wrapT","magFilter","minFilter","format","type","anisotropy","encoding","image","generateMipmaps","depthBuffer","stencilBuffer","depthTexture","prototype","constructor","isWebGLRenderTarget","setSize","dispose","set","clone","copy","source","dispatchEvent"],"mappings":"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","sourcesContent":["import { EventDispatcher } from '../core/EventDispatcher.js';\nimport { Texture } from '../textures/Texture.js';\nimport { LinearFilter } from '../constants.js';\nimport { Vector4 } from '../math/Vector4.js';\n\n/**\n * @author szimek / https://github.com/szimek/\n * @author alteredq / http://alteredqualia.com/\n * @author Marius Kintel / https://github.com/kintel\n */\n\n/*\n In options, we can specify:\n * Texture parameters for an auto-generated target texture\n * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n*/\nfunction WebGLRenderTarget( width, height, options ) {\n\n\tthis.width = width;\n\tthis.height = height;\n\n\tthis.scissor = new Vector4( 0, 0, width, height );\n\tthis.scissorTest = false;\n\n\tthis.viewport = new Vector4( 0, 0, width, height );\n\n\toptions = options || {};\n\n\tthis.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\n\tthis.texture.image = {};\n\tthis.texture.image.width = width;\n\tthis.texture.image.height = height;\n\n\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\n\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\n}\n\nWebGLRenderTarget.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\tconstructor: WebGLRenderTarget,\n\n\tisWebGLRenderTarget: true,\n\n\tsetSize: function ( width, height ) {\n\n\t\tif ( this.width !== width || this.height !== height ) {\n\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\n\t\t\tthis.texture.image.width = width;\n\t\t\tthis.texture.image.height = height;\n\n\t\t\tthis.dispose();\n\n\t\t}\n\n\t\tthis.viewport.set( 0, 0, width, height );\n\t\tthis.scissor.set( 0, 0, width, height );\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\n\t\tthis.viewport.copy( source.viewport );\n\n\t\tthis.texture = source.texture.clone();\n\n\t\tthis.depthBuffer = source.depthBuffer;\n\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\tthis.depthTexture = source.depthTexture;\n\n\t\treturn this;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n} );\n\n\nexport { WebGLRenderTarget };\n"]},"metadata":{},"sourceType":"module"}