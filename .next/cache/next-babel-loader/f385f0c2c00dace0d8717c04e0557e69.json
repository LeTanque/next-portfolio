{"ast":null,"code":"import _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\nimport { Mesh } from '../objects/Mesh.js';\nimport { MeshBasicMaterial } from '../materials/MeshBasicMaterial.js';\nimport { SphereBufferGeometry } from '../geometries/SphereGeometry.js';\n\nfunction PointLightHelper(light, sphereSize, color) {\n  this.light = light;\n  this.light.updateMatrixWorld();\n  this.color = color;\n  var geometry = new SphereBufferGeometry(sphereSize, 4, 2);\n  var material = new MeshBasicMaterial({\n    wireframe: true,\n    fog: false\n  });\n  Mesh.call(this, geometry, material);\n  this.matrix = this.light.matrixWorld;\n  this.matrixAutoUpdate = false;\n  this.update();\n  /*\n  var distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );\n  var distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n  \tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n  this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n  \tvar d = light.distance;\n  \tif ( d === 0.0 ) {\n  \t\tthis.lightDistance.visible = false;\n  \t} else {\n  \t\tthis.lightDistance.scale.set( d, d, d );\n  \t}\n  \tthis.add( this.lightDistance );\n  */\n}\n\nPointLightHelper.prototype = _Object$create(Mesh.prototype);\nPointLightHelper.prototype.constructor = PointLightHelper;\n\nPointLightHelper.prototype.dispose = function () {\n  this.geometry.dispose();\n  this.material.dispose();\n};\n\nPointLightHelper.prototype.update = function () {\n  if (this.color !== undefined) {\n    this.material.color.set(this.color);\n  } else {\n    this.material.color.copy(this.light.color);\n  }\n  /*\n  var d = this.light.distance;\n  \tif ( d === 0.0 ) {\n  \t\tthis.lightDistance.visible = false;\n  \t} else {\n  \t\tthis.lightDistance.visible = true;\n  \tthis.lightDistance.scale.set( d, d, d );\n  \t}\n  */\n\n};\n\nexport { PointLightHelper };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/helpers/PointLightHelper.js"],"names":["Mesh","MeshBasicMaterial","SphereBufferGeometry","PointLightHelper","light","sphereSize","color","updateMatrixWorld","geometry","material","wireframe","fog","call","matrix","matrixWorld","matrixAutoUpdate","update","prototype","constructor","dispose","undefined","set","copy"],"mappings":";;AAAA;;;;AAKA,SAASA,IAAT,QAAqB,oBAArB;AACA,SAASC,iBAAT,QAAkC,mCAAlC;AACA,SAASC,oBAAT,QAAqC,iCAArC;;AAEA,SAASC,gBAAT,CAA2BC,KAA3B,EAAkCC,UAAlC,EAA8CC,KAA9C,EAAsD;AAErD,OAAKF,KAAL,GAAaA,KAAb;AACA,OAAKA,KAAL,CAAWG,iBAAX;AAEA,OAAKD,KAAL,GAAaA,KAAb;AAEA,MAAIE,QAAQ,GAAG,IAAIN,oBAAJ,CAA0BG,UAA1B,EAAsC,CAAtC,EAAyC,CAAzC,CAAf;AACA,MAAII,QAAQ,GAAG,IAAIR,iBAAJ,CAAuB;AAAES,IAAAA,SAAS,EAAE,IAAb;AAAmBC,IAAAA,GAAG,EAAE;AAAxB,GAAvB,CAAf;AAEAX,EAAAA,IAAI,CAACY,IAAL,CAAW,IAAX,EAAiBJ,QAAjB,EAA2BC,QAA3B;AAEA,OAAKI,MAAL,GAAc,KAAKT,KAAL,CAAWU,WAAzB;AACA,OAAKC,gBAAL,GAAwB,KAAxB;AAEA,OAAKC,MAAL;AAGA;;;;;;;;;;;;;AAsBA;;AAEDb,gBAAgB,CAACc,SAAjB,GAA6B,eAAejB,IAAI,CAACiB,SAApB,CAA7B;AACAd,gBAAgB,CAACc,SAAjB,CAA2BC,WAA3B,GAAyCf,gBAAzC;;AAEAA,gBAAgB,CAACc,SAAjB,CAA2BE,OAA3B,GAAqC,YAAY;AAEhD,OAAKX,QAAL,CAAcW,OAAd;AACA,OAAKV,QAAL,CAAcU,OAAd;AAEA,CALD;;AAOAhB,gBAAgB,CAACc,SAAjB,CAA2BD,MAA3B,GAAoC,YAAY;AAE/C,MAAK,KAAKV,KAAL,KAAec,SAApB,EAAgC;AAE/B,SAAKX,QAAL,CAAcH,KAAd,CAAoBe,GAApB,CAAyB,KAAKf,KAA9B;AAEA,GAJD,MAIO;AAEN,SAAKG,QAAL,CAAcH,KAAd,CAAoBgB,IAApB,CAA0B,KAAKlB,KAAL,CAAWE,KAArC;AAEA;AAED;;;;;;;;;;AAeA,CA3BD;;AA8BA,SAASH,gBAAT","sourcesContent":["/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nimport { Mesh } from '../objects/Mesh.js';\nimport { MeshBasicMaterial } from '../materials/MeshBasicMaterial.js';\nimport { SphereBufferGeometry } from '../geometries/SphereGeometry.js';\n\nfunction PointLightHelper( light, sphereSize, color ) {\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.color = color;\n\n\tvar geometry = new SphereBufferGeometry( sphereSize, 4, 2 );\n\tvar material = new MeshBasicMaterial( { wireframe: true, fog: false } );\n\n\tMesh.call( this, geometry, material );\n\n\tthis.matrix = this.light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.update();\n\n\n\t/*\n\tvar distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );\n\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\tvar d = light.distance;\n\n\tif ( d === 0.0 ) {\n\n\t\tthis.lightDistance.visible = false;\n\n\t} else {\n\n\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t}\n\n\tthis.add( this.lightDistance );\n\t*/\n\n}\n\nPointLightHelper.prototype = Object.create( Mesh.prototype );\nPointLightHelper.prototype.constructor = PointLightHelper;\n\nPointLightHelper.prototype.dispose = function () {\n\n\tthis.geometry.dispose();\n\tthis.material.dispose();\n\n};\n\nPointLightHelper.prototype.update = function () {\n\n\tif ( this.color !== undefined ) {\n\n\t\tthis.material.color.set( this.color );\n\n\t} else {\n\n\t\tthis.material.color.copy( this.light.color );\n\n\t}\n\n\t/*\n\tvar d = this.light.distance;\n\n\tif ( d === 0.0 ) {\n\n\t\tthis.lightDistance.visible = false;\n\n\t} else {\n\n\t\tthis.lightDistance.visible = true;\n\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t}\n\t*/\n\n};\n\n\nexport { PointLightHelper };\n"]},"metadata":{},"sourceType":"module"}