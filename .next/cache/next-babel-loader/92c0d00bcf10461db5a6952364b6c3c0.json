{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/ThreeContainer.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef } from \"react\"; // import {\n//     applyProps,\n//     // Canvas,\n//     render,\n//     useResource,\n//     useThree\n// } from \"react-three-fiber\";\n// import * as resources from \"./resources/index\";\n// applyProps(resources);\n\nimport TextLoop from \"../TextLoop\";\n\nvar Particle = function Particle(_ref) {\n  var geometry = _ref.geometry,\n      material = _ref.material;\n  var ref = useRef();\n  var t = Math.random() * 100;\n  var speed = 0.01 + Math.random() / 200;\n  var factor = 20 + Math.random() * 100;\n  var xFactor = -50 + Math.random() * 100;\n  var yFactor = -50 + Math.random() * 100;\n  var zFactor = -30 + Math.random() * 60;\n  render(function () {\n    t += speed;\n    var s = Math.cos(t);\n    ref.current.scale.set(s, s, s);\n    ref.current.rotation.set(s * 5, s * 5, s * 5);\n    ref.current.position.set(xFactor + Math.cos(t / 30 * factor) + Math.sin(t * 1) * factor / 10, yFactor + Math.sin(t / 20 * factor) + Math.cos(t * 2) * factor / 10, zFactor + Math.cos(t / 10 * factor) + Math.sin(t * 3) * factor / 20);\n  });\n  return __jsx(\"mesh\", {\n    ref: ref,\n    material: material,\n    geometry: geometry,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  });\n};\n\nvar Swarm = function Swarm(_ref2) {\n  var mouse = _ref2.mouse;\n  var light = useRef();\n\n  var _useResource = useResource(),\n      _useResource2 = _slicedToArray(_useResource, 2),\n      geometryRef = _useResource2[0],\n      geometry = _useResource2[1];\n\n  var _useResource3 = useResource(),\n      _useResource4 = _slicedToArray(_useResource3, 2),\n      materialRef = _useResource4[0],\n      material = _useResource4[1];\n\n  render(function () {\n    return light.current.position.set(mouse.current[0] / 20, -mouse.current[1] / 20, 0);\n  });\n  return __jsx(React.Fragment, null, __jsx(\"pointLight\", {\n    ref: light,\n    distance: 50,\n    intensity: 1.5,\n    color: \"white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), __jsx(\"spotLight\", {\n    intensity: 0.5,\n    position: [10, 10, 40],\n    penumbra: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), __jsx(\"mesh\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, __jsx(\"planeGeometry\", {\n    attach: \"geometry\",\n    args: [10000, 10000],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), __jsx(\"meshPhongMaterial\", {\n    attach: \"material\",\n    color: \"#575757\",\n    depthTest: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  })), __jsx(\"dodecahedronBufferGeometry\", {\n    ref: geometryRef,\n    args: [0.8, 0],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), __jsx(\"meshPhysicalMaterial\", {\n    ref: materialRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), geometry && new Array(2000).fill().map(function (_, index) {\n    return __jsx(Particle, {\n      key: index,\n      material: material,\n      geometry: geometry,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    });\n  }));\n};\n\nvar Effect = function Effect() {\n  var composer = useRef();\n\n  var _useThree = useThree(),\n      scene = _useThree.scene,\n      gl = _useThree.gl,\n      size = _useThree.size,\n      camera = _useThree.camera;\n\n  useEffect(function () {\n    return void composer.current.setSize(size.width, size.height);\n  }, [size]);\n  render(function (_ref3) {\n    var gl = _ref3.gl;\n    return void (gl.autoClear = true, composer.current.render());\n  }, true);\n  return __jsx(\"effectComposer\", {\n    ref: composer,\n    args: [gl],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, __jsx(\"renderPass\", {\n    attachArray: \"passes\",\n    scene: scene,\n    camera: camera,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }), __jsx(\"waterPass\", {\n    attachArray: \"passes\",\n    factor: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }), __jsx(\"afterimagePass\", {\n    attachArray: \"passes\",\n    factor: 0.7,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }), __jsx(\"shaderPass\", {\n    attachArray: \"passes\",\n    args: [resources.FXAAShader],\n    \"material-uniforms-resolution-value\": [1 / size.width, 1 / size.height],\n    renderToScreen: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }));\n};\n\nvar ThreeContainer = function ThreeContainer() {\n  var mouse = useRef([0, 0]);\n  var onMouseMove = useCallback(function (_ref4) {\n    var x = _ref4.clientX,\n        y = _ref4.clientY;\n    return mouse.current = [x - window.innerWidth / 2, y - window.innerHeight / 2];\n  }, []);\n  return __jsx(\"div\", {\n    className: \"block__three-container\",\n    onMouseMove: onMouseMove,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, __jsx(TextLoop, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }));\n};\n\nexport default ThreeContainer;","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/ThreeContainer.jsx"],"names":["React","useCallback","useEffect","useRef","TextLoop","Particle","geometry","material","ref","t","Math","random","speed","factor","xFactor","yFactor","zFactor","render","s","cos","current","scale","set","rotation","position","sin","Swarm","mouse","light","useResource","geometryRef","materialRef","Array","fill","map","_","index","Effect","composer","useThree","scene","gl","size","camera","setSize","width","height","autoClear","resources","FXAAShader","ThreeContainer","onMouseMove","x","clientX","y","clientY","window","innerWidth","innerHeight"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef } from \"react\";\n// import {\n//     applyProps,\n//     // Canvas,\n//     render,\n//     useResource,\n//     useThree\n// } from \"react-three-fiber\";\n// import * as resources from \"./resources/index\";\n// applyProps(resources);\nimport TextLoop from \"../TextLoop\";\n\n\nconst Particle = ({ geometry, material }) => {\n    let ref = useRef();\n    let t = Math.random() * 100;\n    let speed = 0.01 + Math.random() / 200;\n    let factor = 20 + Math.random() * 100;\n    let xFactor = -50 + Math.random() * 100;\n    let yFactor = -50 + Math.random() * 100;\n    let zFactor = -30 + Math.random() * 60;\n    render(() => {\n        t += speed;\n        const s = Math.cos(t);\n        ref.current.scale.set(s, s, s);\n        ref.current.rotation.set(s * 5, s * 5, s * 5);\n        ref.current.position.set(\n            xFactor +\n                Math.cos((t / 30) * factor) +\n                (Math.sin(t * 1) * factor) / 10,\n            yFactor +\n                Math.sin((t / 20) * factor) +\n                (Math.cos(t * 2) * factor) / 10,\n            zFactor +\n                Math.cos((t / 10) * factor) +\n                (Math.sin(t * 3) * factor) / 20\n        );\n    });\n    return <mesh ref={ref} material={material} geometry={geometry} />;\n}\n\nconst Swarm = ({ mouse }) => {\n    const light = useRef();\n    const [geometryRef, geometry] = useResource();\n    const [materialRef, material] = useResource();\n    render(() =>\n        light.current.position.set(\n            mouse.current[0] / 20,\n            -mouse.current[1] / 20,\n            0\n        )\n    );\n    return (\n        <>\n            <pointLight\n                ref={light}\n                distance={50}\n                intensity={1.5}\n                color=\"white\"\n            />\n            <spotLight intensity={0.5} position={[10, 10, 40]} penumbra={1} />\n            <mesh>\n                <planeGeometry attach=\"geometry\" args={[10000, 10000]} />\n                <meshPhongMaterial\n                    attach=\"material\"\n                    color=\"#575757\"\n                    depthTest={false}\n                />\n            </mesh>\n            <dodecahedronBufferGeometry ref={geometryRef} args={[0.8, 0]} />\n            <meshPhysicalMaterial ref={materialRef} />\n            {geometry &&\n                new Array(2000)\n                    .fill()\n                    .map((_, index) => (\n                        <Particle\n                            key={index}\n                            material={material}\n                            geometry={geometry}\n                        />\n                    ))}\n        </>\n    );\n}\n\nconst Effect = () => {\n    const composer = useRef();\n    const { scene, gl, size, camera } = useThree();\n    useEffect(() => void composer.current.setSize(size.width, size.height), [\n        size\n    ]);\n    render(\n        ({ gl }) => void ((gl.autoClear = true), composer.current.render()),\n        true\n    );\n    return (\n        <effectComposer ref={composer} args={[gl]}>\n            <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\n            <waterPass attachArray=\"passes\" factor={2} />\n            <afterimagePass attachArray=\"passes\" factor={0.7} />\n            <shaderPass\n                attachArray=\"passes\"\n                args={[resources.FXAAShader]}\n                material-uniforms-resolution-value={[\n                    1 / size.width,\n                    1 / size.height\n                ]}\n                renderToScreen\n            />\n        </effectComposer>\n    );\n}\n\nconst ThreeContainer = () => {\n\n\n    const mouse = useRef([0, 0]);\n    const onMouseMove = useCallback(\n        ({ clientX: x, clientY: y }) =>\n            (mouse.current = [\n                x - window.innerWidth / 2,\n                y - window.innerHeight / 2\n            ]),\n        []\n    );\n    return (\n        <div className=\"block__three-container\" onMouseMove={onMouseMove}>\n            {/* \n            <Canvas camera={{ fov: 75, position: [0, 0, 50] }}>\n                <Swarm mouse={mouse} />\n                <Effect />\n            </Canvas> \n            */}\n\n            <TextLoop  />\n\n        </div>\n    );\n}\n\nexport default ThreeContainer;\n"]},"metadata":{},"sourceType":"module"}