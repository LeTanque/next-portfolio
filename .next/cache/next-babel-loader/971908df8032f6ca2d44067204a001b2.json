{"ast":null,"code":"var _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/pages/skills.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useLayoutEffect, useState, useEffect } from \"react\"; // import ProgressiveImage from \"react-progressive-image-loading\";\n// import { Random } from \"react-animated-text\";\n// import { FaReact } from \"react-icons/fa\";\n// import { DiDebian, DiHtml5, DiCss3, DiJsBadge, DiRasberryPi, DiPython, DiIllustrator, DiSass } from \"react-icons/di\";\n\nimport SimpleIcons from 'simple-icons-react-component';\nimport TextLoop from \"react-text-loop\"; // This is the body of the skills page\n// const SkillsBody = () => {\n// This hook listens for resize events, updates the above state with results\n// useLayoutEffect(() => {\n//     // Check to see whether the client is a browser or not\n//     if (process.browser) {\n//         // Add the event listener looking for resize. Set the hook.\n//         window.addEventListener('resize', () => {\n//             setWidth(window.innerWidth)\n//         });\n//         setWidth(window.innerWidth);\n//     }\n//     if (width <= 800) {\n//         setSkillsBlockHeight(\"300px\")\n//     } else if (width <= 1200 && width >= 801) {\n//         setSkillsBlockHeight(\"200px\")\n//     } else {\n//         setSkillsBlockHeight(\"100%\")\n//     }\n// }, [width])\n// return(\n//     <section className=\"block--skills-wrapper\" >\n//         <div className=\"block--skills\">\n//             <p></p>\n//         </div>\n//     </section>\n// )}\n\nvar Skills = function Skills() {\n  var namesOfSkills = [\"websites\", \"Next.js\", \"React\", \"Redux\", \"GraphQL\", \"Node.js\", \"PostgreSQL\", \"Apache\", \"Docker\", \"Debian\", \"GNOME\", \"Adobe Illustrator\", \"GIMP\", \"Sass\", \"Ripple\", \"Mapbox\"];\n  var characters = \"日アイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワヲンあいうえおかきくけこさしすせそたちつてとなにぬねのはひふへほまみむめもやゆよらりるれろわをん\";\n  useEffect(function () {}, []);\n\n  var getRandomInt = function getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  };\n\n  var getNumberOfRandomCharacters = function getNumberOfRandomCharacters(number) {\n    if (!number) number = 9;\n    return characters.substr(getRandomInt(0, characters.length - number), number + 1);\n  };\n\n  var getListSkillsWithCharacters = function getListSkillsWithCharacters(skills, chars) {\n    var skillCharArr = [];\n\n    for (var i = 0; i <= 88; i++) {\n      var selectSkill = skills[getRandomInt(0, namesOfSkills.length - 1)];\n      var createChars = getNumberOfRandomCharacters(selectSkill.length - 1);\n      skillCharArr.push(selectSkill, createChars);\n    }\n\n    ;\n    console.log('skillCharArr --> ', skillCharArr);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"section\", {\n    className: \"section__skills\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"block__skill-icons\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, namesOfSkills.map(function (eachSkill, index) {\n    return __jsx(SimpleIcons, {\n      key: index,\n      name: eachSkill,\n      className: \"icon--skills\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    });\n  })), __jsx(\"main\", {\n    className: \"main__textlooper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    className: \"span__title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"I love building \"), __jsx(TextLoop, {\n    interval: [600, 1700] // interval={textLoopInterval}\n    // children={textLoopChildren}\n    ,\n    delay: 0,\n    mask: true,\n    fade: true,\n    noWrap: true,\n    springConfig: {\n      stiffness: 70,\n      damping: 31,\n      precision: 0.01\n    },\n    adjustingSpeed: 150,\n    className: \"text-loop\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"namesOfSkills characters\", getListSkillsWithCharacters(namesOfSkills, characters)))));\n};\n\nexport default Skills;","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/pages/skills.jsx"],"names":["useLayoutEffect","useState","useEffect","SimpleIcons","TextLoop","Skills","namesOfSkills","characters","getRandomInt","min","max","Math","ceil","floor","random","getNumberOfRandomCharacters","number","substr","length","getListSkillsWithCharacters","skills","chars","skillCharArr","i","selectSkill","createChars","push","console","log","map","eachSkill","index","stiffness","damping","precision"],"mappings":"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","sourcesContent":["import { useLayoutEffect, useState, useEffect } from \"react\";\n// import ProgressiveImage from \"react-progressive-image-loading\";\n// import { Random } from \"react-animated-text\";\n// import { FaReact } from \"react-icons/fa\";\n// import { DiDebian, DiHtml5, DiCss3, DiJsBadge, DiRasberryPi, DiPython, DiIllustrator, DiSass } from \"react-icons/di\";\nimport SimpleIcons from 'simple-icons-react-component';\nimport TextLoop from \"react-text-loop\";\n\n\n\n\n// This is the body of the skills page\n// const SkillsBody = () => {\n// This hook listens for resize events, updates the above state with results\n// useLayoutEffect(() => {\n//     // Check to see whether the client is a browser or not\n//     if (process.browser) {\n//         // Add the event listener looking for resize. Set the hook.\n//         window.addEventListener('resize', () => {\n//             setWidth(window.innerWidth)\n//         });\n//         setWidth(window.innerWidth);\n//     }\n//     if (width <= 800) {\n//         setSkillsBlockHeight(\"300px\")\n//     } else if (width <= 1200 && width >= 801) {\n//         setSkillsBlockHeight(\"200px\")\n//     } else {\n//         setSkillsBlockHeight(\"100%\")\n//     }\n// }, [width])\n// return(\n//     <section className=\"block--skills-wrapper\" >\n//         <div className=\"block--skills\">\n//             <p></p>\n//         </div>\n//     </section>\n// )}\n\n\n\n\n\nconst Skills = () => {\n    const namesOfSkills = [ \"websites\", \"Next.js\", \"React\", \"Redux\", \"GraphQL\", \"Node.js\", \"PostgreSQL\", \"Apache\", \"Docker\", \"Debian\", \"GNOME\", \"Adobe Illustrator\", \"GIMP\", \"Sass\", \"Ripple\", \"Mapbox\" ] \n    const characters = \"日アイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワヲンあいうえおかきくけこさしすせそたちつてとなにぬねのはひふへほまみむめもやゆよらりるれろわをん\";\n    \n    useEffect(() => {\n\n\n    }, [])\n    \n    \n    const getRandomInt = (min, max) => {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    const getNumberOfRandomCharacters = (number) => {\n        if (!number) number = 9;\n        return characters.substr(getRandomInt(0, characters.length - number), number + 1)\n    }\n\n    const getListSkillsWithCharacters = (skills, chars) => {\n        let skillCharArr = [];\n        for (let i=0; i<=88; i++) {\n            let selectSkill = skills[getRandomInt(0, namesOfSkills.length - 1)];\n            let createChars = getNumberOfRandomCharacters(selectSkill.length - 1)\n            skillCharArr.push(selectSkill, createChars);\n        };\n        \n        console.log('skillCharArr --> ', skillCharArr);\n    }\n\n    return (\n        <>\n            <section className=\"section__skills\" >\n\n                <div className=\"block__skill-icons\">\n                    {namesOfSkills.map((eachSkill, index) => (\n                        <SimpleIcons \n                            key={index}\n                            name={eachSkill}\n                            className=\"icon--skills\"\n                        />\n                    ))}\n                </div>\n\n                <main className=\"main__textlooper\">\n                    <span className=\"span__title\">I love building </span>\n                    <TextLoop \n                        interval={[600, 1700]}\n                        // interval={textLoopInterval}\n                        // children={textLoopChildren}\n                        delay={0}\n                        mask={true} \n                        fade={true}\n                        noWrap={true}\n                        springConfig={{ stiffness: 70, damping: 31, precision: 0.01 }}\n                        adjustingSpeed={150}\n                        className=\"text-loop\"\n                    >namesOfSkills\n                    characters\n                        {getListSkillsWithCharacters(namesOfSkills, characters)}\n                        {/* <span>{selectedSkill}</span>\n                        <span>{charactersToMatchSkill}</span> */}\n                    </TextLoop >\n                </main>\n\n            </section>\n\n\n\n            {/* <Random\n                text={characters}\n                paused={state.paused}\n                iterations={1}\n                effect=\"verticalFadeIn\"\n                effectChange={2}\n                effectDirection=\"up\"\n            /> */}\n\n\n            {/* <ProgressiveImage\n                preview=\"/static/bogomil-mihaylov-small.jpg\"\n                src=\"/static/bogomil-mihaylov-wVTLXWM-Gh0-unsplash.jpg\"\n                transitionTime={700}\n                transitionFunction=\"ease\"\n                render={(src, style) => (\n                    <section className=\"section__skills\" style={Object.assign(style, { backgroundImage: `url(${src})` })} >\n                        {style.filter === \"blur(0px)\" ? (\n                            <SkillsBody   />\n                        ) : null}\n                    </section>\n                )}\n            /> */}\n\n        </>\n    );\n}\n\n\nexport default Skills;\n\n"]},"metadata":{},"sourceType":"module"}