{"ast":null,"code":"import _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author alteredq / http://alteredqualia.com/\n *\n * Text = 3D Text\n *\n * parameters = {\n *  font: <THREE.Font>, // font\n *\n *  size: <float>, // size of the text\n *  height: <float>, // thickness to extrude text\n *  curveSegments: <int>, // number of points on the curves\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into text bevel goes\n *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\n *  bevelOffset: <float> // how far from text outline does bevel start\n * }\n */\nimport { Geometry } from '../core/Geometry.js';\nimport { ExtrudeBufferGeometry } from './ExtrudeGeometry.js'; // TextGeometry\n\nfunction TextGeometry(text, parameters) {\n  Geometry.call(this);\n  this.type = 'TextGeometry';\n  this.parameters = {\n    text: text,\n    parameters: parameters\n  };\n  this.fromBufferGeometry(new TextBufferGeometry(text, parameters));\n  this.mergeVertices();\n}\n\nTextGeometry.prototype = _Object$create(Geometry.prototype);\nTextGeometry.prototype.constructor = TextGeometry; // TextBufferGeometry\n\nfunction TextBufferGeometry(text, parameters) {\n  parameters = parameters || {};\n  var font = parameters.font;\n\n  if (!(font && font.isFont)) {\n    console.error('THREE.TextGeometry: font parameter is not an instance of THREE.Font.');\n    return new Geometry();\n  }\n\n  var shapes = font.generateShapes(text, parameters.size); // translate parameters to ExtrudeGeometry API\n\n  parameters.depth = parameters.height !== undefined ? parameters.height : 50; // defaults\n\n  if (parameters.bevelThickness === undefined) parameters.bevelThickness = 10;\n  if (parameters.bevelSize === undefined) parameters.bevelSize = 8;\n  if (parameters.bevelEnabled === undefined) parameters.bevelEnabled = false;\n  ExtrudeBufferGeometry.call(this, shapes, parameters);\n  this.type = 'TextBufferGeometry';\n}\n\nTextBufferGeometry.prototype = _Object$create(ExtrudeBufferGeometry.prototype);\nTextBufferGeometry.prototype.constructor = TextBufferGeometry;\nexport { TextGeometry, TextBufferGeometry };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/geometries/TextGeometry.js"],"names":["Geometry","ExtrudeBufferGeometry","TextGeometry","text","parameters","call","type","fromBufferGeometry","TextBufferGeometry","mergeVertices","prototype","constructor","font","isFont","console","error","shapes","generateShapes","size","depth","height","undefined","bevelThickness","bevelSize","bevelEnabled"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;AAoBA,SAASA,QAAT,QAAyB,qBAAzB;AACA,SAASC,qBAAT,QAAsC,sBAAtC,C,CAEA;;AAEA,SAASC,YAAT,CAAuBC,IAAvB,EAA6BC,UAA7B,EAA0C;AAEzCJ,EAAAA,QAAQ,CAACK,IAAT,CAAe,IAAf;AAEA,OAAKC,IAAL,GAAY,cAAZ;AAEA,OAAKF,UAAL,GAAkB;AACjBD,IAAAA,IAAI,EAAEA,IADW;AAEjBC,IAAAA,UAAU,EAAEA;AAFK,GAAlB;AAKA,OAAKG,kBAAL,CAAyB,IAAIC,kBAAJ,CAAwBL,IAAxB,EAA8BC,UAA9B,CAAzB;AACA,OAAKK,aAAL;AAEA;;AAEDP,YAAY,CAACQ,SAAb,GAAyB,eAAeV,QAAQ,CAACU,SAAxB,CAAzB;AACAR,YAAY,CAACQ,SAAb,CAAuBC,WAAvB,GAAqCT,YAArC,C,CAEA;;AAEA,SAASM,kBAAT,CAA6BL,IAA7B,EAAmCC,UAAnC,EAAgD;AAE/CA,EAAAA,UAAU,GAAGA,UAAU,IAAI,EAA3B;AAEA,MAAIQ,IAAI,GAAGR,UAAU,CAACQ,IAAtB;;AAEA,MAAK,EAAIA,IAAI,IAAIA,IAAI,CAACC,MAAjB,CAAL,EAAiC;AAEhCC,IAAAA,OAAO,CAACC,KAAR,CAAe,sEAAf;AACA,WAAO,IAAIf,QAAJ,EAAP;AAEA;;AAED,MAAIgB,MAAM,GAAGJ,IAAI,CAACK,cAAL,CAAqBd,IAArB,EAA2BC,UAAU,CAACc,IAAtC,CAAb,CAb+C,CAe/C;;AAEAd,EAAAA,UAAU,CAACe,KAAX,GAAmBf,UAAU,CAACgB,MAAX,KAAsBC,SAAtB,GAAkCjB,UAAU,CAACgB,MAA7C,GAAsD,EAAzE,CAjB+C,CAmB/C;;AAEA,MAAKhB,UAAU,CAACkB,cAAX,KAA8BD,SAAnC,EAA+CjB,UAAU,CAACkB,cAAX,GAA4B,EAA5B;AAC/C,MAAKlB,UAAU,CAACmB,SAAX,KAAyBF,SAA9B,EAA0CjB,UAAU,CAACmB,SAAX,GAAuB,CAAvB;AAC1C,MAAKnB,UAAU,CAACoB,YAAX,KAA4BH,SAAjC,EAA6CjB,UAAU,CAACoB,YAAX,GAA0B,KAA1B;AAE7CvB,EAAAA,qBAAqB,CAACI,IAAtB,CAA4B,IAA5B,EAAkCW,MAAlC,EAA0CZ,UAA1C;AAEA,OAAKE,IAAL,GAAY,oBAAZ;AAEA;;AAEDE,kBAAkB,CAACE,SAAnB,GAA+B,eAAeT,qBAAqB,CAACS,SAArC,CAA/B;AACAF,kBAAkB,CAACE,SAAnB,CAA6BC,WAA7B,GAA2CH,kBAA3C;AAGA,SAASN,YAAT,EAAuBM,kBAAvB","sourcesContent":["/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author alteredq / http://alteredqualia.com/\n *\n * Text = 3D Text\n *\n * parameters = {\n *  font: <THREE.Font>, // font\n *\n *  size: <float>, // size of the text\n *  height: <float>, // thickness to extrude text\n *  curveSegments: <int>, // number of points on the curves\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into text bevel goes\n *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\n *  bevelOffset: <float> // how far from text outline does bevel start\n * }\n */\n\nimport { Geometry } from '../core/Geometry.js';\nimport { ExtrudeBufferGeometry } from './ExtrudeGeometry.js';\n\n// TextGeometry\n\nfunction TextGeometry( text, parameters ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'TextGeometry';\n\n\tthis.parameters = {\n\t\ttext: text,\n\t\tparameters: parameters\n\t};\n\n\tthis.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );\n\tthis.mergeVertices();\n\n}\n\nTextGeometry.prototype = Object.create( Geometry.prototype );\nTextGeometry.prototype.constructor = TextGeometry;\n\n// TextBufferGeometry\n\nfunction TextBufferGeometry( text, parameters ) {\n\n\tparameters = parameters || {};\n\n\tvar font = parameters.font;\n\n\tif ( ! ( font && font.isFont ) ) {\n\n\t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\n\t\treturn new Geometry();\n\n\t}\n\n\tvar shapes = font.generateShapes( text, parameters.size );\n\n\t// translate parameters to ExtrudeGeometry API\n\n\tparameters.depth = parameters.height !== undefined ? parameters.height : 50;\n\n\t// defaults\n\n\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\n\tExtrudeBufferGeometry.call( this, shapes, parameters );\n\n\tthis.type = 'TextBufferGeometry';\n\n}\n\nTextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );\nTextBufferGeometry.prototype.constructor = TextBufferGeometry;\n\n\nexport { TextGeometry, TextBufferGeometry };\n"]},"metadata":{},"sourceType":"module"}