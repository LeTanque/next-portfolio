{"ast":null,"code":"var _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef, useState, useMemo } from \"react\";\nimport * as THREE from 'three';\nimport { Canvas, extend as extendThree, useFrame, useLoader, useResource, useThree } from \"react-three-fiber\"; // Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\n\nimport { EffectComposer } from './resources/postprocessing/EffectComposer';\nimport { RenderPass } from './resources/postprocessing/RenderPass';\nimport { GlitchPass } from './resources/postprocessing/GlitchPass';\nextendThree({\n  EffectComposer: EffectComposer,\n  RenderPass: RenderPass,\n  GlitchPass: GlitchPass\n}); // import TextLoop from \"../TextLoop\";\n// const DEFAULT_LAYER = 0;\n// const OCCLUSION_LAYER = 1;\n// The canvas houses this function, the scene. Scene is where the elements come together.\n\nvar SmokeParticle = function SmokeParticle(_ref) {\n  var index = _ref.index;\n\n  var _useThree = useThree(),\n      scene = _useThree.scene;\n\n  var ref = useRef();\n  var url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n  var texture = useMemo(function () {\n    return new THREE.TextureLoader().load(url);\n  }, [url]);\n  var xFactor = 1;\n  var yFactor = 1;\n  var zFactor = 2;\n  var rotationAngle = Math.random() * 360;\n  var factor = 0.3; // let position = { x: Math.random() * 500-250, y: Math.random() * 500-250, z: 2 };\n  // // let position = (Math.random()*500-250, Math.random()*500-250, 2);\n  // let rotation = Math.random() * 360;\n\n  console.log('ref --> ', ref);\n  useFrame(function (_ref2) {\n    var clock = _ref2.clock;\n    var delta = clock.getDelta(); // ref.current.rotation.z = ref.current.rotation.z * Math.random();\n    // ref.current.rotation.z += rotationAngle;\n    // smokeParticles[sp].rotation.z += delta * 0.2;\n    // ref.current.scale.z = 3;\n\n    ref.current.position.x = Math.sin(xFactor++) * factor;\n    ref.current.position.y = Math.cos(yFactor++) * factor;\n    ref.current.position.z = 2;\n    ref.current.rotation.set(0, 0, delta * 8); // ref.current.position.set(\n    //     1,\n    //     (Math.cos(clock.getElapsedTime()) * 1.5),\n    //     // (ref.current.position.z += 0.01) * zFactor,\n    //     2,\n    //     // xFactor,\n    //     // yFactor,\n    //     // zFactor\n    // );\n  }); // console.log('ref --> ', ref);\n  // if (ref && ref.current && ref.current.parent) {\n  //     ref.current.parent.scale.z = 1.22;\n  // }\n\n  return __jsx(\"mesh\", {\n    ref: ref,\n    scale: [1, 1, 3],\n    visible: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, __jsx(\"planeGeometry\", {\n    attach: \"geometry\",\n    args: [200, 200],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), __jsx(\"meshLambertMaterial\", {\n    attach: \"material\",\n    color: \"#ccbbee\",\n    transparent: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, __jsx(\"primitive\", {\n    attach: \"map\",\n    object: texture,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  })));\n};\n\nvar GenerateSmoke = function GenerateSmoke() {\n  return __jsx(React.Fragment, null, new Array(2).fill().map(function (_, index) {\n    return __jsx(SmokeParticle, {\n      key: index,\n      index: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    });\n  }));\n}; // Cast the lighting\n\n\nvar Lighting = function Lighting() {\n  return __jsx(\"directionalLight\", {\n    color: \"#ffffff\",\n    intensity: 0.5,\n    position: [-2, 0, 30],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  });\n}; // This is the canvas. It's the lowest level element in the three/webGl chain\n\n\nvar CanvasicalSmoke = function CanvasicalSmoke() {\n  return __jsx(React.Fragment, null, __jsx(Canvas, {\n    className: \"container block__three-container\",\n    camera: {\n      fov: 75,\n      aspect: 0.5,\n      near: 1,\n      far: 10000,\n      position: [0, 0, 600]\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, __jsx(Lighting, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }), __jsx(GenerateSmoke, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  })));\n};\n\nexport default CanvasicalSmoke; // // Creates a fullscreen colored plane\n// const Plane = () => {\n//     return (\n//         <mesh >\n//             <planeGeometry  attach=\"geometry\"  args={[ 32, 32, 32, 32 ]} />\n//             <meshPhysicalMaterial  attach=\"material\"  color=\"#ffffff\"  />\n//         </mesh>\n//     )\n// }\n// // A light bar\n// const LightBar = () => {\n//     // const lightBar = useRef();\n//     return (\n//         <>\n//             <mesh \n//                 // ref={lightBar} \n//             >\n//                 <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n//                 <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n//             </mesh>\n//         </>\n//     )\n// }","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx"],"names":["extend","extendThree","EffectComposer","RenderPass","GlitchPass","SmokeParticle","index","scene","useThree","ref","useRef","url","texture","useMemo","THREE","xFactor","yFactor","zFactor","rotationAngle","Math","factor","console","useFrame","clock","delta","GenerateSmoke","Lighting","CanvasicalSmoke","fov","aspect","near","far","position"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef, useState, useMemo } from \"react\";\nimport * as THREE from 'three';\nimport {\n    Canvas,\n    extend as extendThree,\n    useFrame,\n    useLoader,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\n\n// Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\nimport { EffectComposer } from './resources/postprocessing/EffectComposer';\nimport { RenderPass } from './resources/postprocessing/RenderPass';\nimport { GlitchPass } from './resources/postprocessing/GlitchPass';\nextendThree({ EffectComposer, RenderPass, GlitchPass });\n\n// import TextLoop from \"../TextLoop\";\n\n\n// const DEFAULT_LAYER = 0;\n// const OCCLUSION_LAYER = 1;\n\n\n// The canvas houses this function, the scene. Scene is where the elements come together.\nconst SmokeParticle = ({ index }) => {\n    const { \n        scene,                        // Default scene\n    } = useThree();\n    const ref = useRef();\n    const url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n    const texture = useMemo(() => new THREE.TextureLoader().load(url), [url]);\n    \n    let xFactor = 1;\n    let yFactor = 1;\n    let zFactor = 2;\n    let rotationAngle = Math.random() * 360;\n    let factor = 0.3;\n    \n    // let position = { x: Math.random() * 500-250, y: Math.random() * 500-250, z: 2 };\n    // // let position = (Math.random()*500-250, Math.random()*500-250, 2);\n    // let rotation = Math.random() * 360;\n    \n    console.log('ref --> ', ref);\n\n\n    useFrame(({ clock }) => {\n        let delta = clock.getDelta();\n        // ref.current.rotation.z = ref.current.rotation.z * Math.random();\n        // ref.current.rotation.z += rotationAngle;\n        // smokeParticles[sp].rotation.z += delta * 0.2;\n        // ref.current.scale.z = 3;\n        ref.current.position.x = Math.sin(xFactor++) * factor;\n        ref.current.position.y = Math.cos(yFactor++) * factor;\n        ref.current.position.z = 2;\n        ref.current.rotation.set( 0, 0, \n            delta * 8\n        );\n        // ref.current.position.set(\n        //     1,\n        //     (Math.cos(clock.getElapsedTime()) * 1.5),\n        //     // (ref.current.position.z += 0.01) * zFactor,\n        //     2,\n        //     // xFactor,\n        //     // yFactor,\n        //     // zFactor\n        // );\n    })\n        \n    // console.log('ref --> ', ref);\n    // if (ref && ref.current && ref.current.parent) {\n    //     ref.current.parent.scale.z = 1.22;\n    // }\n\n    return (\n        <mesh \n            ref={ref}\n            scale={[ 1, 1, 3 ]}\n            visible \n        >\n            <planeGeometry \n                attach=\"geometry\"   \n                args={[200, 200]} \n            />\n\n            <meshLambertMaterial \n                attach=\"material\" \n                color=\"#ccbbee\"\n                transparent\n            >\n                <primitive attach=\"map\" object={texture} />\n            </ meshLambertMaterial>\n\n            \n        </mesh>\n    )\n}\n\n\nconst GenerateSmoke = () => {\n    \n    return (\n        <>\n            {new Array(2).fill().map((_, index) => <SmokeParticle key={index} index={index}  />)}\n        </>\n    )\n}\n\n// Cast the lighting\nconst Lighting = () => {\n    return (\n        <directionalLight\n            color=\"#ffffff\"\n            intensity={0.5}\n            position={[ -2, 0, 30 ]} \n        />\n    )\n}\n\n// This is the canvas. It's the lowest level element in the three/webGl chain\nconst CanvasicalSmoke = () => {\n    return (\n        <>\n            <Canvas\n                className=\"container block__three-container\" \n                camera={{ \n                    fov: 75, \n                    aspect: 0.5,\n                    near: 1,\n                    far: 10000,\n                    position: [ 0, 0, 600 ]\n                }} \n\n            >\n                <Lighting />\n                <GenerateSmoke  />\n            </Canvas> \n           \n            {/* <TextLoop  /> */}\n        </>\n    );\n}\n\nexport default CanvasicalSmoke;\n\n\n\n\n\n// // Creates a fullscreen colored plane\n// const Plane = () => {\n//     return (\n//         <mesh >\n//             <planeGeometry  attach=\"geometry\"  args={[ 32, 32, 32, 32 ]} />\n//             <meshPhysicalMaterial  attach=\"material\"  color=\"#ffffff\"  />\n//         </mesh>\n//     )\n// }\n\n\n// // A light bar\n// const LightBar = () => {\n//     // const lightBar = useRef();\n\n//     return (\n//         <>\n//             <mesh \n//                 // ref={lightBar} \n//             >\n//                 <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n//                 <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n//             </mesh>\n//         </>\n//     )\n// }\n"]},"metadata":{},"sourceType":"module"}