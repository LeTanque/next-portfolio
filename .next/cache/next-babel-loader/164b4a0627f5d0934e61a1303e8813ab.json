{"ast":null,"code":"var _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef, useState, useMemo } from \"react\";\nimport * as THREE from 'three';\nimport { Canvas, extend as extendThree, useFrame, useLoader, useResource, useThree } from \"react-three-fiber\"; // Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\n\nimport { EffectComposer } from './resources/postprocessing/EffectComposer';\nimport { RenderPass } from './resources/postprocessing/RenderPass';\nimport { GlitchPass } from './resources/postprocessing/GlitchPass';\nextendThree({\n  EffectComposer,\n  RenderPass,\n  GlitchPass\n}); // import TextLoop from \"../TextLoop\";\n// const DEFAULT_LAYER = 0;\n// const OCCLUSION_LAYER = 1;\n// The canvas houses this function, the scene. Scene is where the elements come together.\n\nconst Particle = () => {\n  const url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n  const ref = useRef();\n  const texture = useMemo(() => new THREE.TextureLoader().load(url), [url]);\n  console.log('THREE --> ', THREE);\n  console.log('ref --> ', ref);\n  useFrame(({\n    clock\n  }) => {// ref.current.position.x = Math.cos(clock.getElapsedTime()) * 1.1\n    // ref.current.rotation.x = ref.current.rotation.y += 0.0008\n    // ref.current.rotation.x += 0.001\n    // ref.current.rotation.y += 0.004\n    // ref.current.rotation.z += 0.004\n  });\n  return __jsx(\"mesh\", {\n    ref: ref,\n    position: [0, 0, 2] // positions the object above the plane\n    ,\n    visible: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, __jsx(\"meshLambertMaterial\", {\n    attach: \"material\",\n    color: \"#ccbbee\",\n    transparent: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, __jsx(\"primitive\", {\n    attach: \"map\",\n    object: texture,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  })), __jsx(\"planeBufferGeometry\", {\n    attach: \"geometry\",\n    args: [300, 300],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }));\n}; // Cast the lighting\n\n\nconst Lighting = () => {\n  return __jsx(React.Fragment, null, __jsx(\"directionalLight\", {\n    color: \"#ffffff\",\n    intensity: 0.5,\n    position: [-1, 0, 0] // distance={300}\n    // angle={1.05}\n    // penumbra={1}\n    // decay={2}\n    // castShadow\n    // shadow-mapSize-width={size.width} \n    // shadow-mapSize-height={size.height}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }));\n}; // Creates a fullscreen colored plane\n\n\nconst Plane = () => {\n  return __jsx(\"mesh\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, __jsx(\"planeGeometry\", {\n    attach: \"geometry\",\n    args: [20, 20, 32, 32],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), __jsx(\"meshPhysicalMaterial\", {\n    attach: \"material\",\n    color: \"#ffffff\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }));\n}; // This is the canvas. It's the lowest level element in the three/webGl chain\n\n\nconst CanvasicalSmoke = () => {\n  // const {\n  //     // gl,                           // WebGL renderer \n  //     // scene,                        // Default scene\n  //     // camera,                       // Default camera\n  //     size,                         // Bounds of the view (which stretches 100% and auto-adjusts)\n  // } = useThree();\n  return __jsx(React.Fragment, null, __jsx(Canvas, {\n    className: \"container block__three-container\",\n    camera: {\n      fov: 75,\n      // aspect: size.width / size.height,\n      near: 1,\n      far: 10000\n    },\n    position: [0, 0, 0],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, __jsx(Plane, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }), __jsx(Lighting, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }), __jsx(Particle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  })));\n};\n\nexport default CanvasicalSmoke; // // A light bar\n// const LightBar = () => {\n//     // const lightBar = useRef();\n//     return (\n//         <>\n//             <mesh \n//                 // ref={lightBar} \n//             >\n//                 <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n//                 <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n//             </mesh>\n//         </>\n//     )\n// }","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx"],"names":["React","useCallback","useEffect","useRef","useState","useMemo","THREE","Canvas","extend","extendThree","useFrame","useLoader","useResource","useThree","EffectComposer","RenderPass","GlitchPass","Particle","url","ref","texture","TextureLoader","load","console","log","clock","Lighting","Plane","CanvasicalSmoke","fov","near","far"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef, useState, useMemo } from \"react\";\nimport * as THREE from 'three';\nimport {\n    Canvas,\n    extend as extendThree,\n    useFrame,\n    useLoader,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\n\n// Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\nimport { EffectComposer } from './resources/postprocessing/EffectComposer';\nimport { RenderPass } from './resources/postprocessing/RenderPass';\nimport { GlitchPass } from './resources/postprocessing/GlitchPass';\nextendThree({ EffectComposer, RenderPass, GlitchPass });\n\n// import TextLoop from \"../TextLoop\";\n\n\n// const DEFAULT_LAYER = 0;\n// const OCCLUSION_LAYER = 1;\n\n\n// The canvas houses this function, the scene. Scene is where the elements come together.\nconst Particle = () => {\n    const url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n    const ref = useRef();\n    const texture = useMemo(() => new THREE.TextureLoader().load(url), [url]);\n\n    console.log('THREE --> ', THREE);\n    console.log('ref --> ', ref);\n\n    useFrame(({ clock }) => {\n        // ref.current.position.x = Math.cos(clock.getElapsedTime()) * 1.1\n        // ref.current.rotation.x = ref.current.rotation.y += 0.0008\n        // ref.current.rotation.x += 0.001\n        // ref.current.rotation.y += 0.004\n        // ref.current.rotation.z += 0.004\n    });\n\n    return (\n        <mesh \n            ref={ref}\n            position={[ 0, 0, 2 ]} // positions the object above the plane\n            visible \n        >\n            <meshLambertMaterial \n                attach=\"material\" \n                color=\"#ccbbee\"\n                transparent\n            >\n                <primitive attach=\"map\" object={texture} />\n            </ meshLambertMaterial>\n            <planeBufferGeometry attach=\"geometry\" args={[300, 300]} />\n        </mesh>\n    )\n}\n\n// Cast the lighting\nconst Lighting = () => {\n    \n    return (\n        <>\n            <directionalLight\n                color=\"#ffffff\"\n                intensity={0.5}\n                position={[ -1, 0, 0 ]} \n                // distance={300}\n                // angle={1.05}\n                // penumbra={1}\n                // decay={2}\n                // castShadow\n                // shadow-mapSize-width={size.width} \n                // shadow-mapSize-height={size.height}\n            />\n        </>\n    )\n}\n\n// Creates a fullscreen colored plane\nconst Plane = () => {\n\n    return (\n        <mesh >\n            <planeGeometry  attach=\"geometry\"  args={[ 20, 20, 32, 32 ]} />\n            <meshPhysicalMaterial  attach=\"material\"  color=\"#ffffff\"  />\n        </mesh>\n    )\n}\n\n// This is the canvas. It's the lowest level element in the three/webGl chain\nconst CanvasicalSmoke = () => {\n    // const {\n    //     // gl,                           // WebGL renderer \n    //     // scene,                        // Default scene\n    //     // camera,                       // Default camera\n    //     size,                         // Bounds of the view (which stretches 100% and auto-adjusts)\n    // } = useThree();\n\n    return (\n        <>\n            <Canvas\n                className=\"container block__three-container\" \n                camera={{ \n                    fov: 75, \n                    // aspect: size.width / size.height,\n                    near: 1,\n                    far: 10000,\n                }} \n                position={[ 0, 0, 0 ]}\n            >\n                <Plane />\n                <Lighting />\n                <Particle  />\n\n                {/* <LightBar /> */}\n                \n            </Canvas> \n           \n            {/* <TextLoop  /> */}\n\n        </>\n    );\n}\n\nexport default CanvasicalSmoke;\n\n\n\n\n\n\n\n\n// // A light bar\n// const LightBar = () => {\n//     // const lightBar = useRef();\n\n//     return (\n//         <>\n//             <mesh \n//                 // ref={lightBar} \n//             >\n//                 <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n//                 <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n//             </mesh>\n//         </>\n//     )\n// }\n"]},"metadata":{},"sourceType":"module"}