{"ast":null,"code":"import _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport { Color } from '../math/Color.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { Vector4 } from '../math/Vector4.js';\nimport { Matrix3 } from '../math/Matrix3.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { FileLoader } from './FileLoader.js';\nimport { Loader } from './Loader.js';\nimport * as Materials from '../materials/Materials.js';\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction MaterialLoader(manager) {\n  Loader.call(this, manager);\n  this.textures = {};\n}\n\nMaterialLoader.prototype = _Object$assign(_Object$create(Loader.prototype), {\n  constructor: MaterialLoader,\n  load: function load(url, onLoad, onProgress, onError) {\n    var scope = this;\n    var loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.load(url, function (text) {\n      onLoad(scope.parse(JSON.parse(text)));\n    }, onProgress, onError);\n  },\n  parse: function parse(json) {\n    var textures = this.textures;\n\n    function getTexture(name) {\n      if (textures[name] === undefined) {\n        console.warn('THREE.MaterialLoader: Undefined texture', name);\n      }\n\n      return textures[name];\n    }\n\n    var material = new Materials[json.type]();\n    if (json.uuid !== undefined) material.uuid = json.uuid;\n    if (json.name !== undefined) material.name = json.name;\n    if (json.color !== undefined) material.color.setHex(json.color);\n    if (json.roughness !== undefined) material.roughness = json.roughness;\n    if (json.metalness !== undefined) material.metalness = json.metalness;\n    if (json.sheen !== undefined) material.sheen = new Color().setHex(json.sheen);\n    if (json.emissive !== undefined) material.emissive.setHex(json.emissive);\n    if (json.specular !== undefined) material.specular.setHex(json.specular);\n    if (json.shininess !== undefined) material.shininess = json.shininess;\n    if (json.clearcoat !== undefined) material.clearcoat = json.clearcoat;\n    if (json.clearcoatRoughness !== undefined) material.clearcoatRoughness = json.clearcoatRoughness;\n    if (json.vertexColors !== undefined) material.vertexColors = json.vertexColors;\n    if (json.fog !== undefined) material.fog = json.fog;\n    if (json.flatShading !== undefined) material.flatShading = json.flatShading;\n    if (json.blending !== undefined) material.blending = json.blending;\n    if (json.combine !== undefined) material.combine = json.combine;\n    if (json.side !== undefined) material.side = json.side;\n    if (json.opacity !== undefined) material.opacity = json.opacity;\n    if (json.transparent !== undefined) material.transparent = json.transparent;\n    if (json.alphaTest !== undefined) material.alphaTest = json.alphaTest;\n    if (json.depthTest !== undefined) material.depthTest = json.depthTest;\n    if (json.depthWrite !== undefined) material.depthWrite = json.depthWrite;\n    if (json.colorWrite !== undefined) material.colorWrite = json.colorWrite;\n    if (json.stencilWrite !== undefined) material.stencilWrite = json.stencilWrite;\n    if (json.stencilWriteMask !== undefined) material.stencilWriteMask = json.stencilWriteMask;\n    if (json.stencilFunc !== undefined) material.stencilFunc = json.stencilFunc;\n    if (json.stencilRef !== undefined) material.stencilRef = json.stencilRef;\n    if (json.stencilFuncMask !== undefined) material.stencilFuncMask = json.stencilFuncMask;\n    if (json.stencilFail !== undefined) material.stencilFail = json.stencilFail;\n    if (json.stencilZFail !== undefined) material.stencilZFail = json.stencilZFail;\n    if (json.stencilZPass !== undefined) material.stencilZPass = json.stencilZPass;\n    if (json.wireframe !== undefined) material.wireframe = json.wireframe;\n    if (json.wireframeLinewidth !== undefined) material.wireframeLinewidth = json.wireframeLinewidth;\n    if (json.wireframeLinecap !== undefined) material.wireframeLinecap = json.wireframeLinecap;\n    if (json.wireframeLinejoin !== undefined) material.wireframeLinejoin = json.wireframeLinejoin;\n    if (json.rotation !== undefined) material.rotation = json.rotation;\n    if (json.linewidth !== 1) material.linewidth = json.linewidth;\n    if (json.dashSize !== undefined) material.dashSize = json.dashSize;\n    if (json.gapSize !== undefined) material.gapSize = json.gapSize;\n    if (json.scale !== undefined) material.scale = json.scale;\n    if (json.polygonOffset !== undefined) material.polygonOffset = json.polygonOffset;\n    if (json.polygonOffsetFactor !== undefined) material.polygonOffsetFactor = json.polygonOffsetFactor;\n    if (json.polygonOffsetUnits !== undefined) material.polygonOffsetUnits = json.polygonOffsetUnits;\n    if (json.skinning !== undefined) material.skinning = json.skinning;\n    if (json.morphTargets !== undefined) material.morphTargets = json.morphTargets;\n    if (json.morphNormals !== undefined) material.morphNormals = json.morphNormals;\n    if (json.dithering !== undefined) material.dithering = json.dithering;\n    if (json.visible !== undefined) material.visible = json.visible;\n    if (json.toneMapped !== undefined) material.toneMapped = json.toneMapped;\n    if (json.userData !== undefined) material.userData = json.userData; // Shader Material\n\n    if (json.uniforms !== undefined) {\n      for (var name in json.uniforms) {\n        var uniform = json.uniforms[name];\n        material.uniforms[name] = {};\n\n        switch (uniform.type) {\n          case 't':\n            material.uniforms[name].value = getTexture(uniform.value);\n            break;\n\n          case 'c':\n            material.uniforms[name].value = new Color().setHex(uniform.value);\n            break;\n\n          case 'v2':\n            material.uniforms[name].value = new Vector2().fromArray(uniform.value);\n            break;\n\n          case 'v3':\n            material.uniforms[name].value = new Vector3().fromArray(uniform.value);\n            break;\n\n          case 'v4':\n            material.uniforms[name].value = new Vector4().fromArray(uniform.value);\n            break;\n\n          case 'm3':\n            material.uniforms[name].value = new Matrix3().fromArray(uniform.value);\n\n          case 'm4':\n            material.uniforms[name].value = new Matrix4().fromArray(uniform.value);\n            break;\n\n          default:\n            material.uniforms[name].value = uniform.value;\n        }\n      }\n    }\n\n    if (json.defines !== undefined) material.defines = json.defines;\n    if (json.vertexShader !== undefined) material.vertexShader = json.vertexShader;\n    if (json.fragmentShader !== undefined) material.fragmentShader = json.fragmentShader;\n\n    if (json.extensions !== undefined) {\n      for (var key in json.extensions) {\n        material.extensions[key] = json.extensions[key];\n      }\n    } // Deprecated\n\n\n    if (json.shading !== undefined) material.flatShading = json.shading === 1; // THREE.FlatShading\n    // for PointsMaterial\n\n    if (json.size !== undefined) material.size = json.size;\n    if (json.sizeAttenuation !== undefined) material.sizeAttenuation = json.sizeAttenuation; // maps\n\n    if (json.map !== undefined) material.map = getTexture(json.map);\n    if (json.matcap !== undefined) material.matcap = getTexture(json.matcap);\n\n    if (json.alphaMap !== undefined) {\n      material.alphaMap = getTexture(json.alphaMap);\n      material.transparent = true;\n    }\n\n    if (json.bumpMap !== undefined) material.bumpMap = getTexture(json.bumpMap);\n    if (json.bumpScale !== undefined) material.bumpScale = json.bumpScale;\n    if (json.normalMap !== undefined) material.normalMap = getTexture(json.normalMap);\n    if (json.normalMapType !== undefined) material.normalMapType = json.normalMapType;\n\n    if (json.normalScale !== undefined) {\n      var normalScale = json.normalScale;\n\n      if (_Array$isArray(normalScale) === false) {\n        // Blender exporter used to export a scalar. See #7459\n        normalScale = [normalScale, normalScale];\n      }\n\n      material.normalScale = new Vector2().fromArray(normalScale);\n    }\n\n    if (json.displacementMap !== undefined) material.displacementMap = getTexture(json.displacementMap);\n    if (json.displacementScale !== undefined) material.displacementScale = json.displacementScale;\n    if (json.displacementBias !== undefined) material.displacementBias = json.displacementBias;\n    if (json.roughnessMap !== undefined) material.roughnessMap = getTexture(json.roughnessMap);\n    if (json.metalnessMap !== undefined) material.metalnessMap = getTexture(json.metalnessMap);\n    if (json.emissiveMap !== undefined) material.emissiveMap = getTexture(json.emissiveMap);\n    if (json.emissiveIntensity !== undefined) material.emissiveIntensity = json.emissiveIntensity;\n    if (json.specularMap !== undefined) material.specularMap = getTexture(json.specularMap);\n    if (json.envMap !== undefined) material.envMap = getTexture(json.envMap);\n    if (json.envMapIntensity !== undefined) material.envMapIntensity = json.envMapIntensity;\n    if (json.reflectivity !== undefined) material.reflectivity = json.reflectivity;\n    if (json.refractionRatio !== undefined) material.refractionRatio = json.refractionRatio;\n    if (json.lightMap !== undefined) material.lightMap = getTexture(json.lightMap);\n    if (json.lightMapIntensity !== undefined) material.lightMapIntensity = json.lightMapIntensity;\n    if (json.aoMap !== undefined) material.aoMap = getTexture(json.aoMap);\n    if (json.aoMapIntensity !== undefined) material.aoMapIntensity = json.aoMapIntensity;\n    if (json.gradientMap !== undefined) material.gradientMap = getTexture(json.gradientMap);\n    if (json.clearcoatNormalMap !== undefined) material.clearcoatNormalMap = getTexture(json.clearcoatNormalMap);\n    if (json.clearcoatNormalScale !== undefined) material.clearcoatNormalScale = new Vector2().fromArray(json.clearcoatNormalScale);\n    return material;\n  },\n  setTextures: function setTextures(value) {\n    this.textures = value;\n    return this;\n  }\n});\nexport { MaterialLoader };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/loaders/MaterialLoader.js"],"names":["Color","Vector2","Vector3","Vector4","Matrix3","Matrix4","FileLoader","Loader","Materials","MaterialLoader","manager","call","textures","prototype","constructor","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","text","parse","JSON","json","getTexture","name","undefined","console","warn","material","type","uuid","color","setHex","roughness","metalness","sheen","emissive","specular","shininess","clearcoat","clearcoatRoughness","vertexColors","fog","flatShading","blending","combine","side","opacity","transparent","alphaTest","depthTest","depthWrite","colorWrite","stencilWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","rotation","linewidth","dashSize","gapSize","scale","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","skinning","morphTargets","morphNormals","dithering","visible","toneMapped","userData","uniforms","uniform","value","fromArray","defines","vertexShader","fragmentShader","extensions","key","shading","size","sizeAttenuation","map","matcap","alphaMap","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","emissiveIntensity","specularMap","envMap","envMapIntensity","reflectivity","refractionRatio","lightMap","lightMapIntensity","aoMap","aoMapIntensity","gradientMap","clearcoatNormalMap","clearcoatNormalScale","setTextures"],"mappings":"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","sourcesContent":["import { Color } from '../math/Color.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { Vector4 } from '../math/Vector4.js';\nimport { Matrix3 } from '../math/Matrix3.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { FileLoader } from './FileLoader.js';\nimport { Loader } from './Loader.js';\nimport * as Materials from '../materials/Materials.js';\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction MaterialLoader( manager ) {\n\n\tLoader.call( this, manager );\n\n\tthis.textures = {};\n\n}\n\nMaterialLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: MaterialLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tparse: function ( json ) {\n\n\t\tvar textures = this.textures;\n\n\t\tfunction getTexture( name ) {\n\n\t\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t\t}\n\n\t\t\treturn textures[ name ];\n\n\t\t}\n\n\t\tvar material = new Materials[ json.type ]();\n\n\t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n\t\tif ( json.name !== undefined ) material.name = json.name;\n\t\tif ( json.color !== undefined ) material.color.setHex( json.color );\n\t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n\t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n\t\tif ( json.sheen !== undefined ) material.sheen = new Color().setHex( json.sheen );\n\t\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\n\t\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\n\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n\t\tif ( json.clearcoat !== undefined ) material.clearcoat = json.clearcoat;\n\t\tif ( json.clearcoatRoughness !== undefined ) material.clearcoatRoughness = json.clearcoatRoughness;\n\t\tif ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\n\t\tif ( json.fog !== undefined ) material.fog = json.fog;\n\t\tif ( json.flatShading !== undefined ) material.flatShading = json.flatShading;\n\t\tif ( json.blending !== undefined ) material.blending = json.blending;\n\t\tif ( json.combine !== undefined ) material.combine = json.combine;\n\t\tif ( json.side !== undefined ) material.side = json.side;\n\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n\t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n\n\t\tif ( json.stencilWrite !== undefined ) material.stencilWrite = json.stencilWrite;\n\t\tif ( json.stencilWriteMask !== undefined ) material.stencilWriteMask = json.stencilWriteMask;\n\t\tif ( json.stencilFunc !== undefined ) material.stencilFunc = json.stencilFunc;\n\t\tif ( json.stencilRef !== undefined ) material.stencilRef = json.stencilRef;\n\t\tif ( json.stencilFuncMask !== undefined ) material.stencilFuncMask = json.stencilFuncMask;\n\t\tif ( json.stencilFail !== undefined ) material.stencilFail = json.stencilFail;\n\t\tif ( json.stencilZFail !== undefined ) material.stencilZFail = json.stencilZFail;\n\t\tif ( json.stencilZPass !== undefined ) material.stencilZPass = json.stencilZPass;\n\n\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\n\t\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\n\n\t\tif ( json.rotation !== undefined ) material.rotation = json.rotation;\n\n\t\tif ( json.linewidth !== 1 ) material.linewidth = json.linewidth;\n\t\tif ( json.dashSize !== undefined ) material.dashSize = json.dashSize;\n\t\tif ( json.gapSize !== undefined ) material.gapSize = json.gapSize;\n\t\tif ( json.scale !== undefined ) material.scale = json.scale;\n\n\t\tif ( json.polygonOffset !== undefined ) material.polygonOffset = json.polygonOffset;\n\t\tif ( json.polygonOffsetFactor !== undefined ) material.polygonOffsetFactor = json.polygonOffsetFactor;\n\t\tif ( json.polygonOffsetUnits !== undefined ) material.polygonOffsetUnits = json.polygonOffsetUnits;\n\n\t\tif ( json.skinning !== undefined ) material.skinning = json.skinning;\n\t\tif ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;\n\t\tif ( json.morphNormals !== undefined ) material.morphNormals = json.morphNormals;\n\t\tif ( json.dithering !== undefined ) material.dithering = json.dithering;\n\n\t\tif ( json.visible !== undefined ) material.visible = json.visible;\n\n\t\tif ( json.toneMapped !== undefined ) material.toneMapped = json.toneMapped;\n\n\t\tif ( json.userData !== undefined ) material.userData = json.userData;\n\n\t\t// Shader Material\n\n\t\tif ( json.uniforms !== undefined ) {\n\n\t\t\tfor ( var name in json.uniforms ) {\n\n\t\t\t\tvar uniform = json.uniforms[ name ];\n\n\t\t\t\tmaterial.uniforms[ name ] = {};\n\n\t\t\t\tswitch ( uniform.type ) {\n\n\t\t\t\t\tcase 't':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = getTexture( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'c':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Color().setHex( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector2().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector3().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector4().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'm3':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );\n\n\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = uniform.value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json.defines !== undefined ) material.defines = json.defines;\n\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n\n\t\tif ( json.extensions !== undefined ) {\n\n\t\t\tfor ( var key in json.extensions ) {\n\n\t\t\t\tmaterial.extensions[ key ] = json.extensions[ key ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Deprecated\n\n\t\tif ( json.shading !== undefined ) material.flatShading = json.shading === 1; // THREE.FlatShading\n\n\t\t// for PointsMaterial\n\n\t\tif ( json.size !== undefined ) material.size = json.size;\n\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\n\t\t// maps\n\n\t\tif ( json.map !== undefined ) material.map = getTexture( json.map );\n\t\tif ( json.matcap !== undefined ) material.matcap = getTexture( json.matcap );\n\n\t\tif ( json.alphaMap !== undefined ) {\n\n\t\t\tmaterial.alphaMap = getTexture( json.alphaMap );\n\t\t\tmaterial.transparent = true;\n\n\t\t}\n\n\t\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\n\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\n\t\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\n\t\tif ( json.normalMapType !== undefined ) material.normalMapType = json.normalMapType;\n\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\tvar normalScale = json.normalScale;\n\n\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t}\n\n\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n\t\t}\n\n\t\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\n\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\n\t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\n\t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\n\n\t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\n\t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\n\t\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\n\n\t\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\n\t\tif ( json.envMapIntensity !== undefined ) material.envMapIntensity = json.envMapIntensity;\n\n\t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\t\tif ( json.refractionRatio !== undefined ) material.refractionRatio = json.refractionRatio;\n\n\t\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\n\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\n\t\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\n\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\n\t\tif ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );\n\n\t\tif ( json.clearcoatNormalMap !== undefined ) material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap );\n\t\tif ( json.clearcoatNormalScale !== undefined ) material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale );\n\n\t\treturn material;\n\n\t},\n\n\tsetTextures: function ( value ) {\n\n\t\tthis.textures = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n\nexport { MaterialLoader };\n"]},"metadata":{},"sourceType":"module"}