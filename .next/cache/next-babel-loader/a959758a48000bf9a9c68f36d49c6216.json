{"ast":null,"code":"import _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\nimport { TangentSpaceNormalMap } from '../constants.js';\nimport { Material } from './Material.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Color } from '../math/Color.js';\n/**\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  matcap: new THREE.Texture( <Image> ),\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalMapType: THREE.TangentSpaceNormalMap,\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nfunction MeshMatcapMaterial(parameters) {\n  Material.call(this);\n  this.defines = {\n    'MATCAP': ''\n  };\n  this.type = 'MeshMatcapMaterial';\n  this.color = new Color(0xffffff); // diffuse\n\n  this.matcap = null;\n  this.map = null;\n  this.bumpMap = null;\n  this.bumpScale = 1;\n  this.normalMap = null;\n  this.normalMapType = TangentSpaceNormalMap;\n  this.normalScale = new Vector2(1, 1);\n  this.displacementMap = null;\n  this.displacementScale = 1;\n  this.displacementBias = 0;\n  this.alphaMap = null;\n  this.skinning = false;\n  this.morphTargets = false;\n  this.morphNormals = false;\n  this.setValues(parameters);\n}\n\nMeshMatcapMaterial.prototype = _Object$create(Material.prototype);\nMeshMatcapMaterial.prototype.constructor = MeshMatcapMaterial;\nMeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;\n\nMeshMatcapMaterial.prototype.copy = function (source) {\n  Material.prototype.copy.call(this, source);\n  this.defines = {\n    'MATCAP': ''\n  };\n  this.color.copy(source.color);\n  this.matcap = source.matcap;\n  this.map = source.map;\n  this.bumpMap = source.bumpMap;\n  this.bumpScale = source.bumpScale;\n  this.normalMap = source.normalMap;\n  this.normalMapType = source.normalMapType;\n  this.normalScale.copy(source.normalScale);\n  this.displacementMap = source.displacementMap;\n  this.displacementScale = source.displacementScale;\n  this.displacementBias = source.displacementBias;\n  this.alphaMap = source.alphaMap;\n  this.skinning = source.skinning;\n  this.morphTargets = source.morphTargets;\n  this.morphNormals = source.morphNormals;\n  return this;\n};\n\nexport { MeshMatcapMaterial };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/materials/MeshMatcapMaterial.js"],"names":["TangentSpaceNormalMap","Material","Vector2","Color","MeshMatcapMaterial","parameters","call","defines","type","color","matcap","map","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","alphaMap","skinning","morphTargets","morphNormals","setValues","prototype","constructor","isMeshMatcapMaterial","copy","source"],"mappings":";AAAA,SAASA,qBAAT,QAAsC,iBAAtC;AACA,SAASC,QAAT,QAAyB,eAAzB;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,SAASC,kBAAT,CAA6BC,UAA7B,EAA0C;AAEzCJ,EAAAA,QAAQ,CAACK,IAAT,CAAe,IAAf;AAEA,OAAKC,OAAL,GAAe;AAAE,cAAU;AAAZ,GAAf;AAEA,OAAKC,IAAL,GAAY,oBAAZ;AAEA,OAAKC,KAAL,GAAa,IAAIN,KAAJ,CAAW,QAAX,CAAb,CARyC,CAQL;;AAEpC,OAAKO,MAAL,GAAc,IAAd;AAEA,OAAKC,GAAL,GAAW,IAAX;AAEA,OAAKC,OAAL,GAAe,IAAf;AACA,OAAKC,SAAL,GAAiB,CAAjB;AAEA,OAAKC,SAAL,GAAiB,IAAjB;AACA,OAAKC,aAAL,GAAqBf,qBAArB;AACA,OAAKgB,WAAL,GAAmB,IAAId,OAAJ,CAAa,CAAb,EAAgB,CAAhB,CAAnB;AAEA,OAAKe,eAAL,GAAuB,IAAvB;AACA,OAAKC,iBAAL,GAAyB,CAAzB;AACA,OAAKC,gBAAL,GAAwB,CAAxB;AAEA,OAAKC,QAAL,GAAgB,IAAhB;AAEA,OAAKC,QAAL,GAAgB,KAAhB;AACA,OAAKC,YAAL,GAAoB,KAApB;AACA,OAAKC,YAAL,GAAoB,KAApB;AAEA,OAAKC,SAAL,CAAgBnB,UAAhB;AAEA;;AAEDD,kBAAkB,CAACqB,SAAnB,GAA+B,eAAexB,QAAQ,CAACwB,SAAxB,CAA/B;AACArB,kBAAkB,CAACqB,SAAnB,CAA6BC,WAA7B,GAA2CtB,kBAA3C;AAEAA,kBAAkB,CAACqB,SAAnB,CAA6BE,oBAA7B,GAAoD,IAApD;;AAEAvB,kBAAkB,CAACqB,SAAnB,CAA6BG,IAA7B,GAAoC,UAAWC,MAAX,EAAoB;AAEvD5B,EAAAA,QAAQ,CAACwB,SAAT,CAAmBG,IAAnB,CAAwBtB,IAAxB,CAA8B,IAA9B,EAAoCuB,MAApC;AAEA,OAAKtB,OAAL,GAAe;AAAE,cAAU;AAAZ,GAAf;AAEA,OAAKE,KAAL,CAAWmB,IAAX,CAAiBC,MAAM,CAACpB,KAAxB;AAEA,OAAKC,MAAL,GAAcmB,MAAM,CAACnB,MAArB;AAEA,OAAKC,GAAL,GAAWkB,MAAM,CAAClB,GAAlB;AAEA,OAAKC,OAAL,GAAeiB,MAAM,CAACjB,OAAtB;AACA,OAAKC,SAAL,GAAiBgB,MAAM,CAAChB,SAAxB;AAEA,OAAKC,SAAL,GAAiBe,MAAM,CAACf,SAAxB;AACA,OAAKC,aAAL,GAAqBc,MAAM,CAACd,aAA5B;AACA,OAAKC,WAAL,CAAiBY,IAAjB,CAAuBC,MAAM,CAACb,WAA9B;AAEA,OAAKC,eAAL,GAAuBY,MAAM,CAACZ,eAA9B;AACA,OAAKC,iBAAL,GAAyBW,MAAM,CAACX,iBAAhC;AACA,OAAKC,gBAAL,GAAwBU,MAAM,CAACV,gBAA/B;AAEA,OAAKC,QAAL,GAAgBS,MAAM,CAACT,QAAvB;AAEA,OAAKC,QAAL,GAAgBQ,MAAM,CAACR,QAAvB;AACA,OAAKC,YAAL,GAAoBO,MAAM,CAACP,YAA3B;AACA,OAAKC,YAAL,GAAoBM,MAAM,CAACN,YAA3B;AAEA,SAAO,IAAP;AAEA,CA/BD;;AAkCA,SAASnB,kBAAT","sourcesContent":["import { TangentSpaceNormalMap } from '../constants.js';\nimport { Material } from './Material.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Color } from '../math/Color.js';\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  matcap: new THREE.Texture( <Image> ),\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalMapType: THREE.TangentSpaceNormalMap,\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nfunction MeshMatcapMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.defines = { 'MATCAP': '' };\n\n\tthis.type = 'MeshMatcapMaterial';\n\n\tthis.color = new Color( 0xffffff ); // diffuse\n\n\tthis.matcap = null;\n\n\tthis.map = null;\n\n\tthis.bumpMap = null;\n\tthis.bumpScale = 1;\n\n\tthis.normalMap = null;\n\tthis.normalMapType = TangentSpaceNormalMap;\n\tthis.normalScale = new Vector2( 1, 1 );\n\n\tthis.displacementMap = null;\n\tthis.displacementScale = 1;\n\tthis.displacementBias = 0;\n\n\tthis.alphaMap = null;\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\tthis.morphNormals = false;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshMatcapMaterial.prototype = Object.create( Material.prototype );\nMeshMatcapMaterial.prototype.constructor = MeshMatcapMaterial;\n\nMeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;\n\nMeshMatcapMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.defines = { 'MATCAP': '' };\n\n\tthis.color.copy( source.color );\n\n\tthis.matcap = source.matcap;\n\n\tthis.map = source.map;\n\n\tthis.bumpMap = source.bumpMap;\n\tthis.bumpScale = source.bumpScale;\n\n\tthis.normalMap = source.normalMap;\n\tthis.normalMapType = source.normalMapType;\n\tthis.normalScale.copy( source.normalScale );\n\n\tthis.displacementMap = source.displacementMap;\n\tthis.displacementScale = source.displacementScale;\n\tthis.displacementBias = source.displacementBias;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\treturn this;\n\n};\n\n\nexport { MeshMatcapMaterial };\n"]},"metadata":{},"sourceType":"module"}