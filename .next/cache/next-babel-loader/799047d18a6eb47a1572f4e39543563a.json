{"ast":null,"code":"import _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport { Pass } from \"./Pass.js\";\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nvar MaskPass = function MaskPass(scene, camera) {\n  Pass.call(this);\n  this.scene = scene;\n  this.camera = camera;\n  this.clear = true;\n  this.needsSwap = false;\n  this.inverse = false;\n};\n\nMaskPass.prototype = _Object$assign(_Object$create(Pass.prototype), {\n  constructor: MaskPass,\n  render: function render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    var context = renderer.context;\n    var state = renderer.state; // don't update color or depth\n\n    state.buffers.color.setMask(false);\n    state.buffers.depth.setMask(false); // lock buffers\n\n    state.buffers.color.setLocked(true);\n    state.buffers.depth.setLocked(true); // set up stencil\n\n    var writeValue, clearValue;\n\n    if (this.inverse) {\n      writeValue = 0;\n      clearValue = 1;\n    } else {\n      writeValue = 1;\n      clearValue = 0;\n    }\n\n    state.buffers.stencil.setTest(true);\n    state.buffers.stencil.setOp(context.REPLACE, context.REPLACE, context.REPLACE);\n    state.buffers.stencil.setFunc(context.ALWAYS, writeValue, 0xffffffff);\n    state.buffers.stencil.setClear(clearValue); // draw into the stencil buffer\n\n    renderer.setRenderTarget(readBuffer);\n    if (this.clear) renderer.clear();\n    renderer.render(this.scene, this.camera);\n    renderer.setRenderTarget(writeBuffer);\n    if (this.clear) renderer.clear();\n    renderer.render(this.scene, this.camera); // unlock color and depth buffer for subsequent rendering\n\n    state.buffers.color.setLocked(false);\n    state.buffers.depth.setLocked(false); // only render where stencil is set to 1\n\n    state.buffers.stencil.setFunc(context.EQUAL, 1, 0xffffffff); // draw if == 1\n\n    state.buffers.stencil.setOp(context.KEEP, context.KEEP, context.KEEP);\n  }\n});\n\nvar ClearMaskPass = function ClearMaskPass() {\n  Pass.call(this);\n  this.needsSwap = false;\n};\n\nClearMaskPass.prototype = _Object$create(Pass.prototype);\n\n_Object$assign(ClearMaskPass.prototype, {\n  render: function render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    renderer.state.buffers.stencil.setTest(false);\n  }\n});\n\nexport { ClearMaskPass, MaskPass };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/resources/postprocessing/MaskPass.js"],"names":["Pass","MaskPass","scene","camera","call","clear","needsSwap","inverse","prototype","constructor","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","context","state","buffers","color","setMask","depth","setLocked","writeValue","clearValue","stencil","setTest","setOp","REPLACE","setFunc","ALWAYS","setClear","setRenderTarget","EQUAL","KEEP","ClearMaskPass"],"mappings":"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","sourcesContent":["import { Pass } from \"./Pass.js\";\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nvar MaskPass = function(scene, camera) {\n    Pass.call(this);\n\n    this.scene = scene;\n    this.camera = camera;\n\n    this.clear = true;\n    this.needsSwap = false;\n\n    this.inverse = false;\n};\n\nMaskPass.prototype = Object.assign(Object.create(Pass.prototype), {\n    constructor: MaskPass,\n\n    render: function(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n        var context = renderer.context;\n        var state = renderer.state;\n\n        // don't update color or depth\n\n        state.buffers.color.setMask(false);\n        state.buffers.depth.setMask(false);\n\n        // lock buffers\n\n        state.buffers.color.setLocked(true);\n        state.buffers.depth.setLocked(true);\n\n        // set up stencil\n\n        var writeValue, clearValue;\n\n        if (this.inverse) {\n            writeValue = 0;\n            clearValue = 1;\n        } else {\n            writeValue = 1;\n            clearValue = 0;\n        }\n\n        state.buffers.stencil.setTest(true);\n        state.buffers.stencil.setOp(\n            context.REPLACE,\n            context.REPLACE,\n            context.REPLACE\n        );\n        state.buffers.stencil.setFunc(context.ALWAYS, writeValue, 0xffffffff);\n        state.buffers.stencil.setClear(clearValue);\n\n        // draw into the stencil buffer\n\n        renderer.setRenderTarget(readBuffer);\n        if (this.clear) renderer.clear();\n        renderer.render(this.scene, this.camera);\n\n        renderer.setRenderTarget(writeBuffer);\n        if (this.clear) renderer.clear();\n        renderer.render(this.scene, this.camera);\n\n        // unlock color and depth buffer for subsequent rendering\n\n        state.buffers.color.setLocked(false);\n        state.buffers.depth.setLocked(false);\n\n        // only render where stencil is set to 1\n\n        state.buffers.stencil.setFunc(context.EQUAL, 1, 0xffffffff); // draw if == 1\n        state.buffers.stencil.setOp(context.KEEP, context.KEEP, context.KEEP);\n    }\n});\n\nvar ClearMaskPass = function() {\n    Pass.call(this);\n\n    this.needsSwap = false;\n};\n\nClearMaskPass.prototype = Object.create(Pass.prototype);\n\nObject.assign(ClearMaskPass.prototype, {\n    render: function(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n        renderer.state.buffers.stencil.setTest(false);\n    }\n});\n\nexport { ClearMaskPass, MaskPass };\n"]},"metadata":{},"sourceType":"module"}