{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nvar _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/dnd-draglayer/Container.jsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { DropTarget } from \"react-dnd\";\nimport ItemTypes from \"./ItemTypes\";\nimport DraggableBox from \"./DraggableBox\";\nimport snapToGrid from \"./snapToGrid\";\nimport update from \"immutability-helper\";\n\nclass Container extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      boxes: {\n        a: {\n          top: 0,\n          left: 600,\n          rotation: 0,\n          title: \"Lakeside Herbal\",\n          image: \"/static/project/lakeside-logo-dark(1080x1080).png\"\n        },\n        b: {\n          top: 180,\n          left: 120,\n          rotation: 12,\n          title: \"Magic cards\",\n          image: \"/static/project/magical-screenshot.png\"\n        },\n        c: {\n          top: 180,\n          left: 180,\n          rotation: -23,\n          title: \"Lambda Notes\",\n          image: \"/static/project/lambdanotes-screenshot.png\"\n        },\n        d: {\n          top: 180,\n          left: 300,\n          rotation: -10,\n          title: \"Triple C\",\n          image: \"/static/project/triplec-screenshot.png\"\n        }\n      }\n    };\n  }\n\n  render() {\n    const {\n      connectDropTarget\n    } = this.props;\n    const {\n      boxes\n    } = this.state;\n    return connectDropTarget(__jsx(\"main\", {\n      className: \"main__drag-layer-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, _Object$keys(boxes).map(key => this.renderBox(boxes[key], key))));\n  }\n\n  getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  moveBox(id, left, top) {\n    this.setState(update(this.state, {\n      boxes: {\n        [id]: {\n          $merge: {\n            left,\n            top\n          },\n          rotation: {\n            $set: this.getRandomInt(-25, 25)\n          }\n        }\n      }\n    }));\n  }\n\n  renderBox(item, key) {\n    return __jsx(DraggableBox, _extends({\n      key: key,\n      id: key\n    }, item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default DropTarget(ItemTypes.BOX, {\n  drop(props, monitor, component) {\n    if (!component) {\n      return;\n    }\n\n    const delta = monitor.getDifferenceFromInitialOffset();\n    const item = monitor.getItem();\n    let left = Math.round(item.left + delta.x);\n    let top = Math.round(item.top + delta.y);\n\n    if (props.snapToGrid) {\n      [left, top] = snapToGrid(left, top);\n    }\n\n    component.moveBox(item.id, left, top);\n  }\n\n}, connect => ({\n  connectDropTarget: connect.dropTarget()\n}))(Container);","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/dnd-draglayer/Container.jsx"],"names":["React","DropTarget","ItemTypes","DraggableBox","snapToGrid","update","Container","PureComponent","constructor","arguments","state","boxes","a","top","left","rotation","title","image","b","c","d","render","connectDropTarget","props","map","key","renderBox","getRandomInt","min","max","Math","ceil","floor","random","moveBox","id","setState","$merge","$set","item","BOX","drop","monitor","component","delta","getDifferenceFromInitialOffset","getItem","round","x","y","connect","dropTarget"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { DropTarget } from \"react-dnd\";\nimport ItemTypes from \"./ItemTypes\";\nimport DraggableBox from \"./DraggableBox\";\nimport snapToGrid from \"./snapToGrid\";\nimport update from \"immutability-helper\";\n\n\n\nclass Container extends React.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            boxes: {\n                a: { top: 0, left: 600, rotation: 0, title: \"Lakeside Herbal\", image: \"/static/project/lakeside-logo-dark(1080x1080).png\" },\n                b: { top: 180, left: 120, rotation: 12, title: \"Magic cards\", image: \"/static/project/magical-screenshot.png\" },\n                c: { top: 180, left: 180, rotation: -23, title: \"Lambda Notes\", image: \"/static/project/lambdanotes-screenshot.png\" },\n                d: { top: 180, left: 300, rotation: -10, title: \"Triple C\", image: \"/static/project/triplec-screenshot.png\" },\n            }\n        };\n    }\n    \n    render() {\n        const { connectDropTarget } = this.props;\n        const { boxes } = this.state;\n\n        return connectDropTarget(\n            <main className=\"main__drag-layer-container\">\n                {Object.keys(boxes).map(key => this.renderBox(boxes[key], key))}\n            </main>\n        );\n    }\n\n    getRandomInt(min, max) {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    moveBox(id, left, top) {\n        this.setState(\n            update(this.state, {\n                boxes: {\n                    [id]: {\n                        $merge: { left, top },\n                        rotation: { $set: this.getRandomInt(-25, 25) }\n                    }\n                }\n            })\n        );\n    }\n    renderBox(item, key) {\n        return <DraggableBox key={key} id={key} {...item} />;\n    }\n}\n\nexport default DropTarget(\n    ItemTypes.BOX,\n    {\n        drop(props, monitor, component) {\n            if (!component) {\n                return;\n            }\n            const delta = monitor.getDifferenceFromInitialOffset();\n            const item = monitor.getItem();\n            let left = Math.round(item.left + delta.x);\n            let top = Math.round(item.top + delta.y);\n            if (props.snapToGrid) {\n                [left, top] = snapToGrid(left, top);\n            }\n            component.moveBox(item.id, left, top);\n        }\n    },\n    connect => ({\n        connectDropTarget: connect.dropTarget()\n    })\n)(Container);\n"]},"metadata":{},"sourceType":"module"}