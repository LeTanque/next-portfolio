{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport { Vector3 } from './Vector3.js';\n/**\n * @author bhouston / http://clara.io\n * @author WestLangley / http://github.com/WestLangley\n *\n * Primary reference:\n *   https://graphics.stanford.edu/papers/envmap/envmap.pdf\n *\n * Secondary reference:\n *   https://www.ppsloan.org/publications/StupidSH36.pdf\n */\n// 3-band SH defined by 9 coefficients\n\nfunction SphericalHarmonics3() {\n  this.coefficients = [];\n\n  for (var i = 0; i < 9; i++) {\n    this.coefficients.push(new Vector3());\n  }\n}\n\n_Object$assign(SphericalHarmonics3.prototype, {\n  isSphericalHarmonics3: true,\n  set: function set(coefficients) {\n    for (var i = 0; i < 9; i++) {\n      this.coefficients[i].copy(coefficients[i]);\n    }\n\n    return this;\n  },\n  zero: function zero() {\n    for (var i = 0; i < 9; i++) {\n      this.coefficients[i].set(0, 0, 0);\n    }\n\n    return this;\n  },\n  // get the radiance in the direction of the normal\n  // target is a Vector3\n  getAt: function getAt(normal, target) {\n    // normal is assumed to be unit length\n    var x = normal.x,\n        y = normal.y,\n        z = normal.z;\n    var coeff = this.coefficients; // band 0\n\n    target.copy(coeff[0]).multiplyScalar(0.282095); // band 1\n\n    target.addScale(coeff[1], 0.488603 * y);\n    target.addScale(coeff[2], 0.488603 * z);\n    target.addScale(coeff[3], 0.488603 * x); // band 2\n\n    target.addScale(coeff[4], 1.092548 * (x * y));\n    target.addScale(coeff[5], 1.092548 * (y * z));\n    target.addScale(coeff[6], 0.315392 * (3.0 * z * z - 1.0));\n    target.addScale(coeff[7], 1.092548 * (x * z));\n    target.addScale(coeff[8], 0.546274 * (x * x - y * y));\n    return target;\n  },\n  // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n  // target is a Vector3\n  // https://graphics.stanford.edu/papers/envmap/envmap.pdf\n  getIrradianceAt: function getIrradianceAt(normal, target) {\n    // normal is assumed to be unit length\n    var x = normal.x,\n        y = normal.y,\n        z = normal.z;\n    var coeff = this.coefficients; // band 0\n\n    target.copy(coeff[0]).multiplyScalar(0.886227); // π * 0.282095\n    // band 1\n\n    target.addScale(coeff[1], 2.0 * 0.511664 * y); // ( 2 * π / 3 ) * 0.488603\n\n    target.addScale(coeff[2], 2.0 * 0.511664 * z);\n    target.addScale(coeff[3], 2.0 * 0.511664 * x); // band 2\n\n    target.addScale(coeff[4], 2.0 * 0.429043 * x * y); // ( π / 4 ) * 1.092548\n\n    target.addScale(coeff[5], 2.0 * 0.429043 * y * z);\n    target.addScale(coeff[6], 0.743125 * z * z - 0.247708); // ( π / 4 ) * 0.315392 * 3\n\n    target.addScale(coeff[7], 2.0 * 0.429043 * x * z);\n    target.addScale(coeff[8], 0.429043 * (x * x - y * y)); // ( π / 4 ) * 0.546274\n\n    return target;\n  },\n  add: function add(sh) {\n    for (var i = 0; i < 9; i++) {\n      this.coefficients[i].add(sh.coefficients[i]);\n    }\n\n    return this;\n  },\n  scale: function scale(s) {\n    for (var i = 0; i < 9; i++) {\n      this.coefficients[i].multiplyScalar(s);\n    }\n\n    return this;\n  },\n  lerp: function lerp(sh, alpha) {\n    for (var i = 0; i < 9; i++) {\n      this.coefficients[i].lerp(sh.coefficients[i], alpha);\n    }\n\n    return this;\n  },\n  equals: function equals(sh) {\n    for (var i = 0; i < 9; i++) {\n      if (!this.coefficients[i].equals(sh.coefficients[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n  copy: function copy(sh) {\n    return this.set(sh.coefficients);\n  },\n  clone: function clone() {\n    return new this.constructor().copy(this);\n  },\n  fromArray: function fromArray(array, offset) {\n    if (offset === undefined) offset = 0;\n    var coefficients = this.coefficients;\n\n    for (var i = 0; i < 9; i++) {\n      coefficients[i].fromArray(array, offset + i * 3);\n    }\n\n    return this;\n  },\n  toArray: function toArray(array, offset) {\n    if (array === undefined) array = [];\n    if (offset === undefined) offset = 0;\n    var coefficients = this.coefficients;\n\n    for (var i = 0; i < 9; i++) {\n      coefficients[i].toArray(array, offset + i * 3);\n    }\n\n    return array;\n  }\n});\n\n_Object$assign(SphericalHarmonics3, {\n  // evaluate the basis functions\n  // shBasis is an Array[ 9 ]\n  getBasisAt: function getBasisAt(normal, shBasis) {\n    // normal is assumed to be unit length\n    var x = normal.x,\n        y = normal.y,\n        z = normal.z; // band 0\n\n    shBasis[0] = 0.282095; // band 1\n\n    shBasis[1] = 0.488603 * y;\n    shBasis[2] = 0.488603 * z;\n    shBasis[3] = 0.488603 * x; // band 2\n\n    shBasis[4] = 1.092548 * x * y;\n    shBasis[5] = 1.092548 * y * z;\n    shBasis[6] = 0.315392 * (3 * z * z - 1);\n    shBasis[7] = 1.092548 * x * z;\n    shBasis[8] = 0.546274 * (x * x - y * y);\n  }\n});\n\nexport { SphericalHarmonics3 };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/math/SphericalHarmonics3.js"],"names":["Vector3","SphericalHarmonics3","coefficients","i","push","prototype","isSphericalHarmonics3","set","copy","zero","getAt","normal","target","x","y","z","coeff","multiplyScalar","addScale","getIrradianceAt","add","sh","scale","s","lerp","alpha","equals","clone","constructor","fromArray","array","offset","undefined","toArray","getBasisAt","shBasis"],"mappings":"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","sourcesContent":["import { Vector3 } from './Vector3.js';\n\n/**\n * @author bhouston / http://clara.io\n * @author WestLangley / http://github.com/WestLangley\n *\n * Primary reference:\n *   https://graphics.stanford.edu/papers/envmap/envmap.pdf\n *\n * Secondary reference:\n *   https://www.ppsloan.org/publications/StupidSH36.pdf\n */\n\n// 3-band SH defined by 9 coefficients\n\nfunction SphericalHarmonics3() {\n\n\tthis.coefficients = [];\n\n\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\tthis.coefficients.push( new Vector3() );\n\n\t}\n\n}\n\nObject.assign( SphericalHarmonics3.prototype, {\n\n\tisSphericalHarmonics3: true,\n\n\tset: function ( coefficients ) {\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].copy( coefficients[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tzero: function () {\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].set( 0, 0, 0 );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// get the radiance in the direction of the normal\n\t// target is a Vector3\n\tgetAt: function ( normal, target ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tvar x = normal.x, y = normal.y, z = normal.z;\n\n\t\tvar coeff = this.coefficients;\n\n\t\t// band 0\n\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );\n\n\t\t// band 1\n\t\ttarget.addScale( coeff[ 1 ], 0.488603 * y );\n\t\ttarget.addScale( coeff[ 2 ], 0.488603 * z );\n\t\ttarget.addScale( coeff[ 3 ], 0.488603 * x );\n\n\t\t// band 2\n\t\ttarget.addScale( coeff[ 4 ], 1.092548 * ( x * y ) );\n\t\ttarget.addScale( coeff[ 5 ], 1.092548 * ( y * z ) );\n\t\ttarget.addScale( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );\n\t\ttarget.addScale( coeff[ 7 ], 1.092548 * ( x * z ) );\n\t\ttarget.addScale( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );\n\n\t\treturn target;\n\n\t},\n\n\t// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n\t// target is a Vector3\n\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\tgetIrradianceAt: function ( normal, target ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tvar x = normal.x, y = normal.y, z = normal.z;\n\n\t\tvar coeff = this.coefficients;\n\n\t\t// band 0\n\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095\n\n\t\t// band 1\n\t\ttarget.addScale( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603\n\t\ttarget.addScale( coeff[ 2 ], 2.0 * 0.511664 * z );\n\t\ttarget.addScale( coeff[ 3 ], 2.0 * 0.511664 * x );\n\n\t\t// band 2\n\t\ttarget.addScale( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548\n\t\ttarget.addScale( coeff[ 5 ], 2.0 * 0.429043 * y * z );\n\t\ttarget.addScale( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3\n\t\ttarget.addScale( coeff[ 7 ], 2.0 * 0.429043 * x * z );\n\t\ttarget.addScale( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274\n\n\t\treturn target;\n\n\t},\n\n\tadd: function ( sh ) {\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].add( sh.coefficients[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\n\tscale: function ( s ) {\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].multiplyScalar( s );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tlerp: function ( sh, alpha ) {\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( sh ) {\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tif ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tcopy: function ( sh ) {\n\n\t\treturn this.set( sh.coefficients );\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tvar coefficients = this.coefficients;\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tcoefficients[ i ].fromArray( array, offset + ( i * 3 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tvar coefficients = this.coefficients;\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tcoefficients[ i ].toArray( array, offset + ( i * 3 ) );\n\n\t\t}\n\n\t\treturn array;\n\n\t}\n\n} );\n\nObject.assign( SphericalHarmonics3, {\n\n\t// evaluate the basis functions\n\t// shBasis is an Array[ 9 ]\n\tgetBasisAt: function ( normal, shBasis ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tvar x = normal.x, y = normal.y, z = normal.z;\n\n\t\t// band 0\n\t\tshBasis[ 0 ] = 0.282095;\n\n\t\t// band 1\n\t\tshBasis[ 1 ] = 0.488603 * y;\n\t\tshBasis[ 2 ] = 0.488603 * z;\n\t\tshBasis[ 3 ] = 0.488603 * x;\n\n\t\t// band 2\n\t\tshBasis[ 4 ] = 1.092548 * x * y;\n\t\tshBasis[ 5 ] = 1.092548 * y * z;\n\t\tshBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );\n\t\tshBasis[ 7 ] = 1.092548 * x * z;\n\t\tshBasis[ 8 ] = 0.546274 * ( x * x - y * y );\n\n\t}\n\n} );\n\nexport { SphericalHarmonics3 };\n"]},"metadata":{},"sourceType":"module"}