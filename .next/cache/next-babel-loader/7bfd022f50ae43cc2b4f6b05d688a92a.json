{"ast":null,"code":"var _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef, useState, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { Canvas, extend as extendThree, useFrame // useLoader,\n, useResource, useThree } from \"react-three-fiber\";\nimport { a } from 'react-spring/three'; // Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\n\nimport { EffectComposer } from \"./resources/postprocessing/EffectComposer\";\nimport { RenderPass } from \"./resources/postprocessing/RenderPass\";\nimport { GlitchPass } from \"./resources/postprocessing/GlitchPass\";\nextendThree({\n  EffectComposer,\n  RenderPass,\n  GlitchPass\n}); // import TextLoop from \"../TextLoop\";\n// Cast the lighting\n\nconst Lighting = () => {\n  const {\n    mouse\n  } = useThree();\n  const light = useRef();\n  useFrame(() => {\n    light.current.position.set(mouse.x / 20, -mouse.y / 20, 0);\n  });\n  return __jsx(React.Fragment, null, __jsx(\"directionalLight\", {\n    position: [-2, 0, 30],\n    intensity: 0.5,\n    color: \"#ffffff\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), __jsx(\"pointLight\", {\n    ref: light,\n    distance: 50,\n    intensity: 1.5,\n    color: \"#ffffff\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }));\n}; // This renders text via canvas and projects it as a sprite\n\n\nconst Text = ({\n  children,\n  position,\n  opacity,\n  color = 'white',\n  fontSize = 410\n}) => {\n  const {\n    size: {\n      width,\n      height\n    },\n    viewport: {\n      width: viewportWidth,\n      height: viewportHeight\n    }\n  } = useThree();\n  const scale = viewportWidth > viewportHeight ? viewportWidth : viewportHeight;\n  const canvas = useMemo(() => {\n    const canvas = document.createElement('canvas');\n    canvas.width = canvas.height = 2048;\n    const context = canvas.getContext('2d');\n    context.font = `bold ${fontSize}px -apple-system, BlinkMacSystemFont, avenir next, avenir, helvetica neue, helvetica, ubuntu, roboto, noto, segoe ui, arial, sans-serif`;\n    context.textAlign = 'center';\n    context.textBaseline = 'middle';\n    context.fillStyle = color;\n    context.fillText(children, 1024, 1024 - 410 / 2);\n    return canvas;\n  }, [children, width, height]);\n  return __jsx(a.sprite, {\n    scale: [scale, scale, 1],\n    position: position,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, __jsx(a.spriteMaterial, {\n    attach: \"material\",\n    transparent: true,\n    opacity: opacity,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, __jsx(\"canvasTexture\", {\n    attach: \"map\",\n    image: canvas,\n    premultiplyAlpha: true,\n    onUpdate: s => s.needsUpdate = true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  })));\n}; // The canvas houses this function, the scene. Scene is where the elements come together.\n\n\nconst SmokePuff = ({\n  geometry,\n  material\n}) => {\n  let smokePuffRef = useRef(); // let tenToHundred = Math.random() * 100; // 10 - 99.99\n  // let speed = 0.01 + Math.random() / 200; // 0.1 - 0.19\n  // const cosWave = (Math.cos(tenToHundred) / 3) - 1.1;  // a cosign wave.  ~ 0.5 - 1.5\n\n  let factor = 1 + Math.random() * 2; // ~ 1-3\n\n  let xFactor = -100 + Math.random() * 200; // -100 - 100\n\n  let yFactor = -100 + Math.random() * 200; // -100 - 100\n\n  let zFactor = 10 + Math.random() * 10; //  10 - 20\n\n  const getRandomArbitrary = (min, max) => Math.random() * (max - min) + min;\n\n  let randomFactor = getRandomArbitrary(1.1, 2);\n  useFrame(({\n    clock\n  }) => {\n    // tenToHundred += speed; // tenToHundred = tenToHundred + speed, plus it sets a unique new version of tenToHundred.\n    // let delta = clock.getDelta();  // Change in clock. Something like 0.0001 - 0.0099\n    let slowRotation = clock.elapsedTime * 0.017 * randomFactor + xFactor; // starts at ~0.0001 + xFactor and goes slow\n\n    let slowGrowth = Math.tanh(clock.elapsedTime / 18) + 3;\n    smokePuffRef.current.scale.set(slowGrowth, slowGrowth, 2);\n    smokePuffRef.current.rotation.z = slowRotation;\n    smokePuffRef.current.position.set(xFactor * factor, yFactor * factor, zFactor // xFactor + Math.cos((tenToHundred/ 30) * factor) + (Math.sin(tenToHundred* 1) * factor) / 10,\n    // yFactor + Math.sin((tenToHundred/ 20) * factor) + (Math.cos(tenToHundred* 2) * factor) / 10,\n    // zFactor + Math.cos((tenToHundred/ 10) * factor) + (Math.sin(tenToHundred* 3) * factor) / 20\n    );\n  });\n  return __jsx(\"mesh\", {\n    ref: smokePuffRef,\n    material: material,\n    geometry: geometry,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  });\n};\n\nconst GenerateSmoke = () => {\n  const [geometryRef, geometry] = useResource();\n  const [materialRef, material] = useResource();\n  const url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n  const texture = useMemo(() => new THREE.TextureLoader().load(url), [url]);\n  return __jsx(React.Fragment, null, __jsx(Lighting, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }), __jsx(\"planeGeometry\", {\n    ref: geometryRef,\n    attach: \"geometry\",\n    args: [200, 200],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }), __jsx(\"meshLambertMaterial\", {\n    ref: materialRef,\n    attach: \"material\",\n    color: \"#ccbbee\",\n    transparent: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, __jsx(\"primitive\", {\n    attach: \"map\",\n    object: texture,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  })), geometry && new Array(33).fill().map((_, index) => __jsx(SmokePuff, {\n    key: index,\n    material: material,\n    geometry: geometry,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  })));\n}; // This is the canvas. It's the lowest level element in the three/webGl chain\n\n\nconst CanvasicalSmoke = () => {\n  // const particleCount = 3;\n  // const particleArray = [{ id: 0, x: 0, y: 0, z: 2 }];\n  // useEffect(() => {\n  //     if (particleArray.length === particleCount) {\n  //         return null;\n  //     } else {\n  //         for (let i = 0; i <= particleCount; i++) {\n  //             particleArray.push({\n  //                 id: particleArray[i].id + 1,\n  //                 x: particleArray[i].x + 1,\n  //                 y: particleArray[i].y + 1,\n  //                 z: 2\n  //             });\n  //         }\n  //     }\n  // }, [particleArray]);\n  return __jsx(React.Fragment, null, __jsx(Canvas, {\n    className: \"container block__three-container\",\n    camera: {\n      fov: 75,\n      aspect: 0.5,\n      near: 1,\n      far: 10000,\n      position: [0, 0, 600]\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, __jsx(GenerateSmoke, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }), __jsx(Text, {\n    opacity: top.interpolate([0, 200], [1, 0]),\n    position: top.interpolate(top => [0, -1 + top / 200, 0]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, \"lorem\"), __jsx(Text, {\n    position: top.interpolate(top => [0, -20 + top * 10 / scrollMax * 2, 0]),\n    color: \"black\",\n    fontSize: 150,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, \"Ipsum\")));\n};\n\nexport default CanvasicalSmoke; // // Creates a fullscreen colored plane\n// const Plane = () => {\n//     return (\n//         <mesh >\n//             <planeGeometry  attach=\"geometry\"  args={[ 32, 32, 32, 32 ]} />\n//             <meshPhysicalMaterial  attach=\"material\"  color=\"#ffffff\"  />\n//         </mesh>\n//     )\n// }\n// // A light bar\n// const LightBar = () => {\n//     // const lightBar = useRef();\n//     return (\n//         <>\n//             <mesh\n//                 // ref={lightBar}\n//             >\n//                 <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n//                 <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n//             </mesh>\n//         </>\n//     )\n// }","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx"],"names":["React","useCallback","useEffect","useRef","useState","useMemo","THREE","Canvas","extend","extendThree","useFrame","useResource","useThree","a","EffectComposer","RenderPass","GlitchPass","Lighting","mouse","light","current","position","set","x","y","Text","children","opacity","color","fontSize","size","width","height","viewport","viewportWidth","viewportHeight","scale","canvas","document","createElement","context","getContext","font","textAlign","textBaseline","fillStyle","fillText","s","needsUpdate","SmokePuff","geometry","material","smokePuffRef","factor","Math","random","xFactor","yFactor","zFactor","getRandomArbitrary","min","max","randomFactor","clock","slowRotation","elapsedTime","slowGrowth","tanh","rotation","z","GenerateSmoke","geometryRef","materialRef","url","texture","TextureLoader","load","Array","fill","map","_","index","CanvasicalSmoke","fov","aspect","near","far","top","interpolate","scrollMax"],"mappings":"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","sourcesContent":["import React, {\n    useCallback,\n    useEffect,\n    useRef,\n    useState,\n    useMemo\n} from \"react\";\nimport * as THREE from \"three\";\nimport {\n    Canvas,\n    extend as extendThree,\n    useFrame,\n    // useLoader,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\nimport { a } from 'react-spring/three';\n\n// Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\nimport { EffectComposer } from \"./resources/postprocessing/EffectComposer\";\nimport { RenderPass } from \"./resources/postprocessing/RenderPass\";\nimport { GlitchPass } from \"./resources/postprocessing/GlitchPass\";\nextendThree({ EffectComposer, RenderPass, GlitchPass });\n\n// import TextLoop from \"../TextLoop\";\n\n\n// Cast the lighting\nconst Lighting = () => {\n    const { mouse } = useThree();\n    const light = useRef();\n    \n    useFrame(() => {\n        light.current.position.set( mouse.x / 20, -mouse.y / 20, 0 )\n    });\n\n    return (\n        <>\n            <directionalLight\n                position={[ -2, 0, 30 ]}  intensity={0.5}  color=\"#ffffff\" \n            />\n            <pointLight \n                ref={light} distance={50} intensity={1.5} color=\"#ffffff\" \n            />\n        </>\n    );\n};\n\n// This renders text via canvas and projects it as a sprite\nconst Text = ({ children, position, opacity, color = 'white', fontSize = 410 }) => {\n    const {\n        size: { width, height },\n        viewport: { width: viewportWidth, height: viewportHeight }\n    } = useThree()\n\n    const scale = viewportWidth > viewportHeight ? viewportWidth : viewportHeight\n    const canvas = useMemo(() => {\n        const canvas = document.createElement('canvas')\n        canvas.width = canvas.height = 2048\n        const context = canvas.getContext('2d')\n        context.font = `bold ${fontSize}px -apple-system, BlinkMacSystemFont, avenir next, avenir, helvetica neue, helvetica, ubuntu, roboto, noto, segoe ui, arial, sans-serif`\n        context.textAlign = 'center'\n        context.textBaseline = 'middle'\n        context.fillStyle = color\n        context.fillText(children, 1024, 1024 - 410 / 2)\n        return canvas\n    }, [children, width, height])\n\n    return (\n        <a.sprite scale={[scale, scale, 1]} position={position}>\n            <a.spriteMaterial attach=\"material\" transparent opacity={opacity}>\n                <canvasTexture attach=\"map\" image={canvas} premultiplyAlpha onUpdate={s => (s.needsUpdate = true)} />\n            </a.spriteMaterial>\n        </a.sprite>\n    )\n}\n\n// The canvas houses this function, the scene. Scene is where the elements come together.\nconst SmokePuff = ({ geometry, material }) => {\n    let smokePuffRef = useRef();\n    // let tenToHundred = Math.random() * 100; // 10 - 99.99\n    // let speed = 0.01 + Math.random() / 200; // 0.1 - 0.19\n    // const cosWave = (Math.cos(tenToHundred) / 3) - 1.1;  // a cosign wave.  ~ 0.5 - 1.5\n    let factor = 1 + Math.random() * 2;  // ~ 1-3\n    let xFactor = -100 + Math.random() * 200;  // -100 - 100\n    let yFactor = -100 + Math.random() * 200;  // -100 - 100\n    let zFactor = 10 + Math.random() * 10;  //  10 - 20\n    \n    const getRandomArbitrary = (min, max) => Math.random() * (max - min) + min;\n    let randomFactor = getRandomArbitrary(1.1, 2);\n    \n    useFrame(({ clock }) => {\n        // tenToHundred += speed; // tenToHundred = tenToHundred + speed, plus it sets a unique new version of tenToHundred.\n        // let delta = clock.getDelta();  // Change in clock. Something like 0.0001 - 0.0099\n        let slowRotation = ((clock.elapsedTime * (0.017)) * randomFactor) + xFactor;  // starts at ~0.0001 + xFactor and goes slow\n        let slowGrowth = (Math.tanh(clock.elapsedTime / 18) + 3);\n\n        smokePuffRef.current.scale.set(slowGrowth, slowGrowth, 2);\n        smokePuffRef.current.rotation.z = slowRotation;\n        smokePuffRef.current.position.set(\n            xFactor * factor,\n            yFactor * factor,\n            zFactor\n            // xFactor + Math.cos((tenToHundred/ 30) * factor) + (Math.sin(tenToHundred* 1) * factor) / 10,\n            // yFactor + Math.sin((tenToHundred/ 20) * factor) + (Math.cos(tenToHundred* 2) * factor) / 10,\n            // zFactor + Math.cos((tenToHundred/ 10) * factor) + (Math.sin(tenToHundred* 3) * factor) / 20\n        );\n    });\n\n    return <mesh  ref={smokePuffRef} material={material} geometry={geometry}  />;\n}\n\nconst GenerateSmoke = () => {\n    const [geometryRef, geometry] = useResource();\n    const [materialRef, material] = useResource();\n    const url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n    const texture = useMemo(() => new THREE.TextureLoader().load(url), [url]);\n    \n    return (\n        <>\n            <Lighting />\n\n            <planeGeometry \n                ref={geometryRef} \n                attach=\"geometry\"   \n                args={[200, 200]} \n            />\n            <meshLambertMaterial \n                ref={materialRef}\n                attach=\"material\" \n                color=\"#ccbbee\"\n                transparent\n            >\n                <primitive attach=\"map\" object={texture} />\n            </meshLambertMaterial>\n\n            {geometry && new Array(33).fill().map((_, index) => (\n                <SmokePuff\n                    key={index}\n                    material={material}\n                    geometry={geometry}\n\n                />\n            ))}\n        </>\n    );\n}\n\n\n// This is the canvas. It's the lowest level element in the three/webGl chain\nconst CanvasicalSmoke = () => {\n    // const particleCount = 3;\n    // const particleArray = [{ id: 0, x: 0, y: 0, z: 2 }];\n\n    // useEffect(() => {\n    //     if (particleArray.length === particleCount) {\n    //         return null;\n    //     } else {\n    //         for (let i = 0; i <= particleCount; i++) {\n    //             particleArray.push({\n    //                 id: particleArray[i].id + 1,\n    //                 x: particleArray[i].x + 1,\n    //                 y: particleArray[i].y + 1,\n    //                 z: 2\n    //             });\n    //         }\n    //     }\n    // }, [particleArray]);\n\n    return (\n        <>\n            <Canvas\n                className=\"container block__three-container\"\n                camera={{\n                    fov: 75,\n                    aspect: 0.5,\n                    near: 1,\n                    far: 10000,\n                    position: [0, 0, 600]\n                }}\n            >\n                <GenerateSmoke />\n                <Text opacity={top.interpolate([0, 200], [1, 0])} position={top.interpolate(top => [0, -1 + top / 200, 0])}>\n                    lorem\n                </Text>\n                <Text position={top.interpolate(top => [0, -20 + ((top * 10) / scrollMax) * 2, 0])} color=\"black\" fontSize={150}>\n                    Ipsum\n                </Text>\n            </Canvas>\n            {/* <TextLoop  /> */}\n        </>\n    );\n};\n\nexport default CanvasicalSmoke;\n\n// // Creates a fullscreen colored plane\n// const Plane = () => {\n//     return (\n//         <mesh >\n//             <planeGeometry  attach=\"geometry\"  args={[ 32, 32, 32, 32 ]} />\n//             <meshPhysicalMaterial  attach=\"material\"  color=\"#ffffff\"  />\n//         </mesh>\n//     )\n// }\n\n// // A light bar\n// const LightBar = () => {\n//     // const lightBar = useRef();\n\n//     return (\n//         <>\n//             <mesh\n//                 // ref={lightBar}\n//             >\n//                 <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n//                 <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n//             </mesh>\n//         </>\n//     )\n// }\n"]},"metadata":{},"sourceType":"module"}