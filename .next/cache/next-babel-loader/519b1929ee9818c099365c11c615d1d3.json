{"ast":null,"code":"var _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/Canvasical.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport * as THREE from 'three';\nimport { Canvas, extend as extendThree, useFrame, useLoader, useResource, useThree } from \"react-three-fiber\"; // Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\n\nimport { EffectComposer } from './resources/postprocessing/EffectComposer';\nimport { RenderPass } from './resources/postprocessing/RenderPass';\nimport { GlitchPass } from './resources/postprocessing/GlitchPass';\nextendThree({\n  EffectComposer: EffectComposer,\n  RenderPass: RenderPass,\n  GlitchPass: GlitchPass\n}); // import TextLoop from \"../TextLoop\";\n// const DEFAULT_LAYER = 0;\n// const OCCLUSION_LAYER = 1;\n// The canvas houses this function, the scene. Scene is where the elements come together.\n\nvar ObjectMeshTetra = function ObjectMeshTetra() {\n  var ref = useRef(); // const [geometryRef, geometry] = useResource();\n  // const [materialRef, material] = useResource();\n  // useFrame(() => {\n  //     ref.current.rotation.x = ref.current.rotation.y += 0.01\n  // });\n\n  useFrame(function (_ref) {\n    var clock = _ref.clock;\n    ref.current.position.x = Math.cos(clock.getElapsedTime()) * 1.1;\n    ref.current.rotation.x = ref.current.rotation.y += 0.001;\n    ref.current.rotation.x += 0.001;\n    ref.current.rotation.y += 0.005;\n    ref.current.rotation.z += 0.005;\n  });\n  console.log('ref in objectMeshTet --> ', ref);\n  return __jsx(React.Fragment, null, __jsx(\"mesh\", {\n    ref: ref,\n    userData: {\n      test: 'hello'\n    } // position={[ 0, 0, 2 ]} \n    ,\n    receiveShadow: true,\n    castShadow: true,\n    visible: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, __jsx(\"torusKnotBufferGeometry\", {\n    attach: \"geometry\",\n    args: [0.5, 0.15, 150, 32],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), __jsx(\"meshPhysicalMaterial\", {\n    attach: \"material\",\n    color: \"#0077ff\",\n    roughness: 1,\n    clearcoat: 1,\n    clearcoatRoughness: 0.2,\n    dithering: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  })));\n};\n\nvar LightBar = function LightBar() {\n  // const lightBar = useRef();\n  return __jsx(React.Fragment, null, __jsx(\"mesh\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, __jsx(\"boxBufferGeometry\", {\n    attach: \"geometry\",\n    args: [0.5, 20, 1],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), __jsx(\"meshBasicMaterial\", {\n    attach: \"material\",\n    color: \"lightblue\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  })));\n}; // Creates a fullscreen colored plane\n\n\nvar Plane = function Plane() {\n  var plane = useRef();\n  return __jsx(\"mesh\", {\n    ref: plane,\n    receiveShadow: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, __jsx(\"planeGeometry\", {\n    attach: \"geometry\",\n    args: [20, 20, 32, 32],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }), __jsx(\"meshPhysicalMaterial\", {\n    attach: \"material\",\n    color: \"#000000\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }));\n}; // This is the canvas. It's the lowest level element in the three/webGl chain\n\n\nvar Canvasical = function Canvasical() {\n  // const {\n  //     gl,                           // WebGL renderer \n  //     scene,                        // Default scene\n  //     camera,                       // Default camera\n  //     size,                         // Bounds of the view (which stretches 100% and auto-adjusts)\n  // } = useThree();\n  return __jsx(React.Fragment, null, __jsx(Canvas, {\n    className: \"container block__three-container\" // style={{ backgroundColor: \"#212121\" }}\n    // style={{ background: 'linear-gradient(45deg, #000f20 40%, #110020 80%, #030303 100%)' }}\n    ,\n    camera: {\n      fov: 75,\n      position: [0, 0, 6],\n      zoom: 1,\n      focus: 10\n    },\n    shadowMap: true // children                      // Either a function child (which receives state) or regular children\n    // gl                            // Props that go into the default webGL-renderer\n    // camera                        // Props that go into the default camera\n    // raycaster                     // Props that go into the default raycaster\n    // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n    // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n    // gl2 = false                   // Enables webgl2\n    // concurrent = false            // Enables React concurrent mode\n    // resize = undefined            // Resize config, see react-use-measure's options\n    // orthographic = false          // Creates an orthographic camera if true\n    // noEvents = false              // Switch off raytracing and event support\n    // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n    // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n    // updateDefaultCamera = true    // Adjusts default camera on size changes\n    // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n    // onPointerMissed \n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, __jsx(Plane, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }), __jsx(\"ambientLight\", {\n    color: \"#ffffff\",\n    intensity: 0.1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }), __jsx(\"pointLight\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }), __jsx(\"spotLight\", {\n    color: \"#ffffff\",\n    intensity: 4,\n    distance: 200 // angle={1}\n    ,\n    angle: 1.05,\n    penumbra: 0,\n    decay: 2,\n    position: [11, 15, 15],\n    castShadow: true,\n    \"shadow-mapSize-width\": 2048,\n    \"shadow-mapSize-height\": 2048,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }), __jsx(ObjectMeshTetra, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  })));\n};\n\nexport default Canvasical;","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/Canvasical.jsx"],"names":["extend","extendThree","EffectComposer","RenderPass","GlitchPass","ObjectMeshTetra","ref","useRef","useFrame","clock","Math","console","test","LightBar","Plane","plane","Canvasical","fov","position","zoom","focus"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport * as THREE from 'three';\nimport {\n    Canvas,\n    extend as extendThree,\n    useFrame,\n    useLoader,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\n\n// Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\nimport { EffectComposer } from './resources/postprocessing/EffectComposer';\nimport { RenderPass } from './resources/postprocessing/RenderPass';\nimport { GlitchPass } from './resources/postprocessing/GlitchPass';\nextendThree({ EffectComposer, RenderPass, GlitchPass });\n\n// import TextLoop from \"../TextLoop\";\n\n\n\n// const DEFAULT_LAYER = 0;\n// const OCCLUSION_LAYER = 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// The canvas houses this function, the scene. Scene is where the elements come together.\nconst ObjectMeshTetra = () => {\n    const ref = useRef();\n    // const [geometryRef, geometry] = useResource();\n    // const [materialRef, material] = useResource();\n    \n    // useFrame(() => {\n    //     ref.current.rotation.x = ref.current.rotation.y += 0.01\n    // });\n    useFrame(({ clock }) => {\n        ref.current.position.x = Math.cos(clock.getElapsedTime()) * 1.1\n        ref.current.rotation.x = ref.current.rotation.y += 0.001\n        ref.current.rotation.x += 0.001\n        ref.current.rotation.y += 0.005\n        ref.current.rotation.z += 0.005\n    });\n    \n    console.log('ref in objectMeshTet --> ', ref);\n\n    return (\n        <>\n                <mesh \n                    ref={ref}\n                    userData={{ test: 'hello' }} \n                    // position={[ 0, 0, 2 ]} \n                    receiveShadow\n                    castShadow\n                    visible \n                >\n                    <torusKnotBufferGeometry \n                        attach=\"geometry\" \n                        args={[ 0.5, 0.15, 150, 32 ]} \n                    />\n                    {/* <tetrahedronBufferGeometry \n                        attach=\"geometry\"\n                        radius={20}\n                    /> */}\n                    <meshPhysicalMaterial \n                        attach=\"material\" \n                        color=\"#0077ff\"\n                        roughness={1} \n                        clearcoat={1} \n                        clearcoatRoughness={0.2}\n                        dithering \n                    />\n                </mesh>\n        </>\n    )\n}\n\nconst LightBar = () => {\n    // const lightBar = useRef();\n\n    return (\n        <>\n            <mesh \n                // ref={lightBar} \n            >\n                <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n                <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n            </mesh>\n        </>\n    )\n}\n\n\n\n\n// Creates a fullscreen colored plane\nconst Plane = () => {\n    const plane = useRef();\n\n    return (\n        <mesh \n            ref={plane}\n            receiveShadow\n        >\n            <planeGeometry  attach=\"geometry\"  args={[ 20, 20, 32, 32 ]} />\n            <meshPhysicalMaterial  attach=\"material\"  color=\"#000000\"  />\n        </mesh>\n    )\n}\n\n// This is the canvas. It's the lowest level element in the three/webGl chain\nconst Canvasical = () => {\n    // const {\n    //     gl,                           // WebGL renderer \n    //     scene,                        // Default scene\n    //     camera,                       // Default camera\n    //     size,                         // Bounds of the view (which stretches 100% and auto-adjusts)\n    // } = useThree();\n\n\n\n    return (\n        <>\n            <Canvas\n                className=\"container block__three-container\" \n                // style={{ backgroundColor: \"#212121\" }}\n                // style={{ background: 'linear-gradient(45deg, #000f20 40%, #110020 80%, #030303 100%)' }}\n                camera={{ \n                    fov: 75, \n                    position: [ 0, 0, 6 ],\n                    zoom: 1,\n                    focus: 10\n                }} \n                shadowMap\n                // children                      // Either a function child (which receives state) or regular children\n                // gl                            // Props that go into the default webGL-renderer\n                // camera                        // Props that go into the default camera\n                // raycaster                     // Props that go into the default raycaster\n                // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n                // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n                // gl2 = false                   // Enables webgl2\n                // concurrent = false            // Enables React concurrent mode\n                // resize = undefined            // Resize config, see react-use-measure's options\n                // orthographic = false          // Creates an orthographic camera if true\n                // noEvents = false              // Switch off raytracing and event support\n                // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n                // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n                // updateDefaultCamera = true    // Adjusts default camera on size changes\n                // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n                // onPointerMissed \n            >\n                <Plane />\n                <ambientLight\n                    color=\"#ffffff\"\n                    intensity={0.1}\n                />\n                <pointLight />\n                <spotLight\n                    color=\"#ffffff\"\n                    intensity={4}\n                    distance={200}\n                    // angle={1}\n                    angle={1.05}\n                    penumbra={0}\n                    decay={2}\n                    position={[ 11, 15, 15 ]} \n                    castShadow\n                    shadow-mapSize-width={2048} \n                    shadow-mapSize-height={2048}\n                />\n                \n                <ObjectMeshTetra  />\n\n                {/* <LightBar /> */}\n                \n            </Canvas> \n           \n            {/* <TextLoop  /> */}\n\n        </>\n    );\n}\n\nexport default Canvasical;\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}