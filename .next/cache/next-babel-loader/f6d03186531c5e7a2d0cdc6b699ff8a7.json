{"ast":null,"code":"import _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport { Mesh, OrthographicCamera, PlaneBufferGeometry, Scene, ShaderMaterial, UniformsUtils } from \"three/src/Three\";\nimport { Pass } from \"./Pass.js\";\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nvar ShaderPass = function ShaderPass(shader, textureID) {\n  Pass.call(this);\n  this.textureID = textureID !== undefined ? textureID : \"tDiffuse\";\n\n  if (shader instanceof ShaderMaterial) {\n    this.uniforms = shader.uniforms;\n    this.material = shader;\n  } else if (shader) {\n    this.uniforms = UniformsUtils.clone(shader.uniforms);\n    this.material = new ShaderMaterial({\n      defines: _Object$assign({}, shader.defines),\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n  }\n\n  this.camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  this.scene = new Scene();\n  this.quad = new Mesh(new PlaneBufferGeometry(2, 2), null);\n  this.quad.frustumCulled = false; // Avoid getting clipped\n\n  this.scene.add(this.quad);\n};\n\nShaderPass.prototype = _Object$assign(_Object$create(Pass.prototype), {\n  constructor: ShaderPass,\n  render: function render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    if (this.uniforms[this.textureID]) {\n      this.uniforms[this.textureID].value = readBuffer.texture;\n    }\n\n    this.quad.material = this.material;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      renderer.render(this.scene, this.camera);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      renderer.render(this.scene, this.camera);\n    }\n  }\n});\nexport { ShaderPass };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/resources/postprocessing/ShaderPass.js"],"names":["Mesh","OrthographicCamera","PlaneBufferGeometry","Scene","ShaderMaterial","UniformsUtils","Pass","ShaderPass","shader","textureID","call","undefined","uniforms","material","clone","defines","vertexShader","fragmentShader","camera","scene","quad","frustumCulled","add","prototype","constructor","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","value","texture","renderToScreen","setRenderTarget","clear"],"mappings":";;AAAA,SACIA,IADJ,EAEIC,kBAFJ,EAGIC,mBAHJ,EAIIC,KAJJ,EAKIC,cALJ,EAMIC,aANJ,QAOO,iBAPP;AAQA,SAASC,IAAT,QAAqB,WAArB;AACA;;;;AAIA,IAAIC,UAAU,GAAG,SAAbA,UAAa,CAASC,MAAT,EAAiBC,SAAjB,EAA4B;AACzCH,EAAAA,IAAI,CAACI,IAAL,CAAU,IAAV;AAEA,OAAKD,SAAL,GAAiBA,SAAS,KAAKE,SAAd,GAA0BF,SAA1B,GAAsC,UAAvD;;AAEA,MAAID,MAAM,YAAYJ,cAAtB,EAAsC;AAClC,SAAKQ,QAAL,GAAgBJ,MAAM,CAACI,QAAvB;AAEA,SAAKC,QAAL,GAAgBL,MAAhB;AACH,GAJD,MAIO,IAAIA,MAAJ,EAAY;AACf,SAAKI,QAAL,GAAgBP,aAAa,CAACS,KAAd,CAAoBN,MAAM,CAACI,QAA3B,CAAhB;AAEA,SAAKC,QAAL,GAAgB,IAAIT,cAAJ,CAAmB;AAC/BW,MAAAA,OAAO,EAAE,eAAc,EAAd,EAAkBP,MAAM,CAACO,OAAzB,CADsB;AAE/BH,MAAAA,QAAQ,EAAE,KAAKA,QAFgB;AAG/BI,MAAAA,YAAY,EAAER,MAAM,CAACQ,YAHU;AAI/BC,MAAAA,cAAc,EAAET,MAAM,CAACS;AAJQ,KAAnB,CAAhB;AAMH;;AAED,OAAKC,MAAL,GAAc,IAAIjB,kBAAJ,CAAuB,CAAC,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiC,CAAC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,CAAd;AACA,OAAKkB,KAAL,GAAa,IAAIhB,KAAJ,EAAb;AAEA,OAAKiB,IAAL,GAAY,IAAIpB,IAAJ,CAAS,IAAIE,mBAAJ,CAAwB,CAAxB,EAA2B,CAA3B,CAAT,EAAwC,IAAxC,CAAZ;AACA,OAAKkB,IAAL,CAAUC,aAAV,GAA0B,KAA1B,CAxByC,CAwBR;;AACjC,OAAKF,KAAL,CAAWG,GAAX,CAAe,KAAKF,IAApB;AACH,CA1BD;;AA4BAb,UAAU,CAACgB,SAAX,GAAuB,eAAc,eAAcjB,IAAI,CAACiB,SAAnB,CAAd,EAA6C;AAChEC,EAAAA,WAAW,EAAEjB,UADmD;AAGhEkB,EAAAA,MAAM,EAAE,gBAASC,QAAT,EAAmBC,WAAnB,EAAgCC,UAAhC,EAA4CC,SAA5C,EAAuDC,UAAvD,EAAmE;AACvE,QAAI,KAAKlB,QAAL,CAAc,KAAKH,SAAnB,CAAJ,EAAmC;AAC/B,WAAKG,QAAL,CAAc,KAAKH,SAAnB,EAA8BsB,KAA9B,GAAsCH,UAAU,CAACI,OAAjD;AACH;;AAED,SAAKZ,IAAL,CAAUP,QAAV,GAAqB,KAAKA,QAA1B;;AAEA,QAAI,KAAKoB,cAAT,EAAyB;AACrBP,MAAAA,QAAQ,CAACQ,eAAT,CAAyB,IAAzB;AACAR,MAAAA,QAAQ,CAACD,MAAT,CAAgB,KAAKN,KAArB,EAA4B,KAAKD,MAAjC;AACH,KAHD,MAGO;AACHQ,MAAAA,QAAQ,CAACQ,eAAT,CAAyBP,WAAzB;AACA,UAAI,KAAKQ,KAAT,EAAgBT,QAAQ,CAACS,KAAT;AAChBT,MAAAA,QAAQ,CAACD,MAAT,CAAgB,KAAKN,KAArB,EAA4B,KAAKD,MAAjC;AACH;AACJ;AAlB+D,CAA7C,CAAvB;AAqBA,SAASX,UAAT","sourcesContent":["import {\n    Mesh,\n    OrthographicCamera,\n    PlaneBufferGeometry,\n    Scene,\n    ShaderMaterial,\n    UniformsUtils\n} from \"three/src/Three\";\nimport { Pass } from \"./Pass.js\";\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nvar ShaderPass = function(shader, textureID) {\n    Pass.call(this);\n\n    this.textureID = textureID !== undefined ? textureID : \"tDiffuse\";\n\n    if (shader instanceof ShaderMaterial) {\n        this.uniforms = shader.uniforms;\n\n        this.material = shader;\n    } else if (shader) {\n        this.uniforms = UniformsUtils.clone(shader.uniforms);\n\n        this.material = new ShaderMaterial({\n            defines: Object.assign({}, shader.defines),\n            uniforms: this.uniforms,\n            vertexShader: shader.vertexShader,\n            fragmentShader: shader.fragmentShader\n        });\n    }\n\n    this.camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    this.scene = new Scene();\n\n    this.quad = new Mesh(new PlaneBufferGeometry(2, 2), null);\n    this.quad.frustumCulled = false; // Avoid getting clipped\n    this.scene.add(this.quad);\n};\n\nShaderPass.prototype = Object.assign(Object.create(Pass.prototype), {\n    constructor: ShaderPass,\n\n    render: function(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n        if (this.uniforms[this.textureID]) {\n            this.uniforms[this.textureID].value = readBuffer.texture;\n        }\n\n        this.quad.material = this.material;\n\n        if (this.renderToScreen) {\n            renderer.setRenderTarget(null);\n            renderer.render(this.scene, this.camera);\n        } else {\n            renderer.setRenderTarget(writeBuffer);\n            if (this.clear) renderer.clear();\n            renderer.render(this.scene, this.camera);\n        }\n    }\n});\n\nexport { ShaderPass };\n"]},"metadata":{},"sourceType":"module"}