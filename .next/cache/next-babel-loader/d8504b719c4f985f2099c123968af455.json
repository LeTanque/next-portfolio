{"ast":null,"code":"var _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/Canvasical.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport * as THREE from 'three';\nimport { Canvas, extend as extendThree, useFrame, useLoader, useResource, useThree } from \"react-three-fiber\"; // Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\n\nimport { EffectComposer } from './resources/postprocessing/EffectComposer';\nimport { RenderPass } from './resources/postprocessing/RenderPass';\nimport { GlitchPass } from './resources/postprocessing/GlitchPass';\nextendThree({\n  EffectComposer,\n  RenderPass,\n  GlitchPass\n}); // import TextLoop from \"../TextLoop\";\n// const DEFAULT_LAYER = 0;\n// const OCCLUSION_LAYER = 1;\n// Creates a fullscreen colored plane\n\nconst Plane = () => {\n  const {\n    viewport\n  } = useThree();\n  const plane = useRef();\n  return __jsx(\"mesh\", {\n    ref: plane,\n    scale: [100, 100, 1],\n    receiveShadow: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, __jsx(\"planeGeometry\", {\n    attach: \"geometry\",\n    args: [1, 1],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }), __jsx(\"meshPhysicalMaterial\", {\n    attach: \"material\",\n    color: \"#000000\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }));\n}; // The canvas houses this function, the scene. Scene is where the elements come together.\n\n\nconst ObjectMeshTetra = () => {\n  const ref = useRef(); // const [geometryRef, geometry] = useResource();\n  // const [materialRef, material] = useResource();\n  // useFrame(() => {\n  //     ref.current.rotation.x = ref.current.rotation.y += 0.01\n  // });\n\n  useFrame(({\n    clock\n  }) => {\n    ref.current.position.x = Math.cos(clock.getElapsedTime()) * 1.1;\n    ref.current.rotation.x = ref.current.rotation.y += 0.001;\n    ref.current.rotation.x += 0.001;\n    ref.current.rotation.y += 0.005;\n    ref.current.rotation.z += 0.005;\n  });\n  console.log('ref in objectMeshTet --> ', ref);\n  return __jsx(React.Fragment, null, __jsx(\"mesh\", {\n    ref: ref,\n    userData: {\n      test: 'hello'\n    },\n    position: [0, 0, 2],\n    receiveShadow: true,\n    castShadow: true,\n    visible: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, __jsx(\"tetrahedronBufferGeometry\", {\n    attach: \"geometry\",\n    radius: 20,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), __jsx(\"meshPhysicalMaterial\", {\n    attach: \"material\",\n    color: \"#0077ff\",\n    roughness: 1,\n    clearcoat: 1,\n    clearcoatRoughness: 0.2,\n    dithering: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  })));\n};\n\nconst LightBar = () => {\n  // const lightBar = useRef();\n  return __jsx(React.Fragment, null, __jsx(\"mesh\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, __jsx(\"boxBufferGeometry\", {\n    attach: \"geometry\",\n    args: [0.5, 20, 1],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }), __jsx(\"meshBasicMaterial\", {\n    attach: \"material\",\n    color: \"lightblue\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  })));\n}; // This is the canvas. It's the lowest level element in the three/webGl chain\n\n\nconst Canvasical = () => {\n  // const {\n  //     gl,                           // WebGL renderer \n  //     scene,                        // Default scene\n  //     camera,                       // Default camera\n  //     size,                         // Bounds of the view (which stretches 100% and auto-adjusts)\n  // } = useThree();\n  return __jsx(React.Fragment, null, __jsx(Canvas, {\n    className: \"container block__three-container\" // style={{ backgroundColor: \"#212121\" }}\n    // style={{ background: 'linear-gradient(45deg, #000f20 40%, #110020 80%, #030303 100%)' }}\n    ,\n    camera: {\n      fov: 75,\n      position: [0, 0, 6],\n      zoom: 1,\n      focus: 10\n    },\n    shadowMap: true // children                      // Either a function child (which receives state) or regular children\n    // gl                            // Props that go into the default webGL-renderer\n    // camera                        // Props that go into the default camera\n    // raycaster                     // Props that go into the default raycaster\n    // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n    // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n    // gl2 = false                   // Enables webgl2\n    // concurrent = false            // Enables React concurrent mode\n    // resize = undefined            // Resize config, see react-use-measure's options\n    // orthographic = false          // Creates an orthographic camera if true\n    // noEvents = false              // Switch off raytracing and event support\n    // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n    // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n    // updateDefaultCamera = true    // Adjusts default camera on size changes\n    // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n    // onPointerMissed \n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, __jsx(Plane, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }), __jsx(\"ambientLight\", {\n    color: \"#ffffff\",\n    intensity: 0.1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }), __jsx(\"pointLight\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }), __jsx(\"spotLight\", {\n    color: \"#ffffff\",\n    intensity: 4,\n    distance: 200 // angle={1}\n    ,\n    angle: 1.05,\n    penumbra: 0,\n    decay: 2,\n    position: [11, 15, 15],\n    castShadow: true,\n    \"shadow-mapSize-width\": 2048,\n    \"shadow-mapSize-height\": 2048,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }), __jsx(ObjectMeshTetra, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  })));\n};\n\nexport default Canvasical;","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/Canvasical.jsx"],"names":["React","useCallback","useEffect","useRef","useState","THREE","Canvas","extend","extendThree","useFrame","useLoader","useResource","useThree","EffectComposer","RenderPass","GlitchPass","Plane","viewport","plane","ObjectMeshTetra","ref","clock","current","position","x","Math","cos","getElapsedTime","rotation","y","z","console","log","test","LightBar","Canvasical","fov","zoom","focus"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport * as THREE from 'three';\nimport {\n    Canvas,\n    extend as extendThree,\n    useFrame,\n    useLoader,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\n\n// Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\nimport { EffectComposer } from './resources/postprocessing/EffectComposer';\nimport { RenderPass } from './resources/postprocessing/RenderPass';\nimport { GlitchPass } from './resources/postprocessing/GlitchPass';\nextendThree({ EffectComposer, RenderPass, GlitchPass });\n\n// import TextLoop from \"../TextLoop\";\n\n\n\n// const DEFAULT_LAYER = 0;\n// const OCCLUSION_LAYER = 1;\n\n\n\n// Creates a fullscreen colored plane\nconst Plane = () => {\n    const { viewport } = useThree();\n    const plane = useRef();\n\n    return (\n        <mesh \n            ref={plane}\n            scale={[ 100, 100, 1 ]}\n            receiveShadow\n        >\n            <planeGeometry  attach=\"geometry\"  args={[1, 1]} />\n            <meshPhysicalMaterial  attach=\"material\"  color=\"#000000\"  />\n        </mesh>\n    )\n}\n\n\n\n\n\n\n\n\n\n\n// The canvas houses this function, the scene. Scene is where the elements come together.\nconst ObjectMeshTetra = () => {\n    const ref = useRef();\n    // const [geometryRef, geometry] = useResource();\n    // const [materialRef, material] = useResource();\n    \n    // useFrame(() => {\n    //     ref.current.rotation.x = ref.current.rotation.y += 0.01\n    // });\n    useFrame(({ clock }) => {\n        ref.current.position.x = Math.cos(clock.getElapsedTime()) * 1.1\n        ref.current.rotation.x = ref.current.rotation.y += 0.001\n        ref.current.rotation.x += 0.001\n        ref.current.rotation.y += 0.005\n        ref.current.rotation.z += 0.005\n    });\n    \n    console.log('ref in objectMeshTet --> ', ref);\n\n    return (\n        <>\n                <mesh \n                    ref={ref}\n                    userData={{ test: 'hello' }} \n                    position={[ 0, 0, 2 ]} \n                    receiveShadow\n                    castShadow\n                    visible \n                >\n                    {/* <torusKnotBufferGeometry \n                        attach=\"geometry\" \n                        args={[ 0.5, 0.15, 150, 32 ]} \n                    /> */}\n                    <tetrahedronBufferGeometry \n                        attach=\"geometry\"\n                        radius={20}\n                    />\n                    <meshPhysicalMaterial \n                        attach=\"material\" \n                        color=\"#0077ff\"\n                        roughness={1} \n                        clearcoat={1} \n                        clearcoatRoughness={0.2}\n                        dithering \n                    />\n                </mesh>\n        </>\n    )\n}\n\nconst LightBar = () => {\n    // const lightBar = useRef();\n\n    return (\n        <>\n            <mesh \n                // ref={lightBar} \n            >\n                <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n                <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n            </mesh>\n        </>\n    )\n}\n\n\n\n\n// This is the canvas. It's the lowest level element in the three/webGl chain\nconst Canvasical = () => {\n    // const {\n    //     gl,                           // WebGL renderer \n    //     scene,                        // Default scene\n    //     camera,                       // Default camera\n    //     size,                         // Bounds of the view (which stretches 100% and auto-adjusts)\n    // } = useThree();\n\n\n\n    return (\n        <>\n            <Canvas\n                className=\"container block__three-container\" \n                // style={{ backgroundColor: \"#212121\" }}\n                // style={{ background: 'linear-gradient(45deg, #000f20 40%, #110020 80%, #030303 100%)' }}\n                camera={{ \n                    fov: 75, \n                    position: [ 0, 0, 6 ],\n                    zoom: 1,\n                    focus: 10\n                }} \n                shadowMap\n                // children                      // Either a function child (which receives state) or regular children\n                // gl                            // Props that go into the default webGL-renderer\n                // camera                        // Props that go into the default camera\n                // raycaster                     // Props that go into the default raycaster\n                // shadowMap                     // Props that go into gl.shadowMap, can also be set true for PCFsoft\n                // vr = false                    // Switches renderer to VR mode, then uses gl.setAnimationLoop\n                // gl2 = false                   // Enables webgl2\n                // concurrent = false            // Enables React concurrent mode\n                // resize = undefined            // Resize config, see react-use-measure's options\n                // orthographic = false          // Creates an orthographic camera if true\n                // noEvents = false              // Switch off raytracing and event support\n                // pixelRatio = undefined        // You could provide window.devicePixelRatio if you like\n                // invalidateFrameloop = false   // When true it only renders on changes, when false it's a game loop\n                // updateDefaultCamera = true    // Adjusts default camera on size changes\n                // onCreated                     // Callback when vdom is ready (you can block first render via promise)\n                // onPointerMissed \n            >\n                <Plane />\n                <ambientLight\n                    color=\"#ffffff\"\n                    intensity={0.1}\n                />\n                <pointLight />\n                <spotLight\n                    color=\"#ffffff\"\n                    intensity={4}\n                    distance={200}\n                    // angle={1}\n                    angle={1.05}\n                    penumbra={0}\n                    decay={2}\n                    position={[ 11, 15, 15 ]} \n                    castShadow\n                    shadow-mapSize-width={2048} \n                    shadow-mapSize-height={2048}\n                />\n                \n                <ObjectMeshTetra  />\n\n                {/* <LightBar /> */}\n                \n            </Canvas> \n           \n            {/* <TextLoop  /> */}\n\n        </>\n    );\n}\n\nexport default Canvasical;\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}