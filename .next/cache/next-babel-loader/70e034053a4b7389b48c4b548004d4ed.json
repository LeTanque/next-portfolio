{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport { ClearMaskPass, MaskPass } from \"./MaskPass.js\";\nimport { ShaderPass } from \"./ShaderPass.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { LinearFilter, RGBAFormat, Vector2, WebGLRenderTarget } from \"three/src/Three\";\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nvar EffectComposer = function EffectComposer(renderer, renderTarget) {\n  this.renderer = renderer;\n\n  if (renderTarget === undefined) {\n    var parameters = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBAFormat,\n      stencilBuffer: false\n    };\n    var size = renderer.getDrawingBufferSize(new Vector2());\n    renderTarget = new WebGLRenderTarget(size.width, size.height, parameters);\n    renderTarget.texture.name = \"EffectComposer.rt1\";\n  }\n\n  this.renderTarget1 = renderTarget;\n  this.renderTarget2 = renderTarget.clone();\n  this.renderTarget2.texture.name = \"EffectComposer.rt2\";\n  this.writeBuffer = this.renderTarget1;\n  this.readBuffer = this.renderTarget2;\n  this.passes = []; // dependencies\n\n  if (CopyShader === undefined) {\n    console.error(\"THREE.EffectComposer relies on THREE.CopyShader\");\n  }\n\n  if (ShaderPass === undefined) {\n    console.error(\"THREE.EffectComposer relies on THREE.ShaderPass\");\n  }\n\n  this.copyPass = new ShaderPass(CopyShader);\n  this._previousFrameTime = _Date$now();\n};\n\n_Object$assign(EffectComposer.prototype, {\n  swapBuffers: function swapBuffers() {\n    var tmp = this.readBuffer;\n    this.readBuffer = this.writeBuffer;\n    this.writeBuffer = tmp;\n  },\n  addPass: function addPass(pass) {\n    this.passes.push(pass);\n    var size = this.renderer.getDrawingBufferSize(new Vector2());\n    pass.setSize(size.width, size.height);\n  },\n  insertPass: function insertPass(pass, index) {\n    this.passes.splice(index, 0, pass);\n  },\n  render: function render(deltaTime) {\n    // deltaTime value is in seconds\n    if (deltaTime === undefined) {\n      deltaTime = (_Date$now() - this._previousFrameTime) * 0.001;\n    }\n\n    this._previousFrameTime = _Date$now();\n    var currentRenderTarget = this.renderer.getRenderTarget();\n    var maskActive = false;\n    var pass,\n        i,\n        il = this.passes.length;\n\n    for (i = 0; i < il; i++) {\n      pass = this.passes[i];\n      if (pass.enabled === false) continue;\n      pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);\n\n      if (pass.needsSwap) {\n        if (maskActive) {\n          var context = this.renderer.context;\n          context.stencilFunc(context.NOTEQUAL, 1, 0xffffffff);\n          this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime);\n          context.stencilFunc(context.EQUAL, 1, 0xffffffff);\n        }\n\n        this.swapBuffers();\n      }\n\n      if (MaskPass !== undefined) {\n        if (pass instanceof MaskPass) {\n          maskActive = true;\n        } else if (pass instanceof ClearMaskPass) {\n          maskActive = false;\n        }\n      }\n    }\n\n    this.renderer.setRenderTarget(currentRenderTarget);\n  },\n  reset: function reset(renderTarget) {\n    if (renderTarget === undefined) {\n      var size = this.renderer.getDrawingBufferSize(new Vector2());\n      renderTarget = this.renderTarget1.clone();\n      renderTarget.setSize(size.width, size.height);\n    }\n\n    this.renderTarget1.dispose();\n    this.renderTarget2.dispose();\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n  },\n  setSize: function setSize(width, height) {\n    this.renderTarget1.setSize(width, height);\n    this.renderTarget2.setSize(width, height);\n\n    for (var i = 0; i < this.passes.length; i++) {\n      this.passes[i].setSize(width, height);\n    }\n  }\n});\n\nexport { EffectComposer };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/resources/postprocessing/EffectComposer.js"],"names":["ClearMaskPass","MaskPass","ShaderPass","CopyShader","LinearFilter","RGBAFormat","Vector2","WebGLRenderTarget","EffectComposer","renderer","renderTarget","undefined","parameters","minFilter","magFilter","format","stencilBuffer","size","getDrawingBufferSize","width","height","texture","name","renderTarget1","renderTarget2","clone","writeBuffer","readBuffer","passes","console","error","copyPass","_previousFrameTime","prototype","swapBuffers","tmp","addPass","pass","push","setSize","insertPass","index","splice","render","deltaTime","currentRenderTarget","getRenderTarget","maskActive","i","il","length","enabled","needsSwap","context","stencilFunc","NOTEQUAL","EQUAL","setRenderTarget","reset","dispose"],"mappings":"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","sourcesContent":["import { ClearMaskPass, MaskPass } from \"./MaskPass.js\";\nimport { ShaderPass } from \"./ShaderPass.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport {\n    LinearFilter,\n    RGBAFormat,\n    Vector2,\n    WebGLRenderTarget\n} from \"three/src/Three\";\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nvar EffectComposer = function(renderer, renderTarget) {\n    this.renderer = renderer;\n\n    if (renderTarget === undefined) {\n        var parameters = {\n            minFilter: LinearFilter,\n            magFilter: LinearFilter,\n            format: RGBAFormat,\n            stencilBuffer: false\n        };\n\n        var size = renderer.getDrawingBufferSize(new Vector2());\n        renderTarget = new WebGLRenderTarget(\n            size.width,\n            size.height,\n            parameters\n        );\n        renderTarget.texture.name = \"EffectComposer.rt1\";\n    }\n\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.renderTarget2.texture.name = \"EffectComposer.rt2\";\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n    this.passes = [];\n\n    // dependencies\n    if (CopyShader === undefined) {\n        console.error(\"THREE.EffectComposer relies on THREE.CopyShader\");\n    }\n    if (ShaderPass === undefined) {\n        console.error(\"THREE.EffectComposer relies on THREE.ShaderPass\");\n    }\n    this.copyPass = new ShaderPass(CopyShader);\n    this._previousFrameTime = Date.now();\n};\n\nObject.assign(EffectComposer.prototype, {\n    swapBuffers: function() {\n        var tmp = this.readBuffer;\n        this.readBuffer = this.writeBuffer;\n        this.writeBuffer = tmp;\n    },\n\n    addPass: function(pass) {\n        this.passes.push(pass);\n        var size = this.renderer.getDrawingBufferSize(new Vector2());\n        pass.setSize(size.width, size.height);\n    },\n\n    insertPass: function(pass, index) {\n        this.passes.splice(index, 0, pass);\n    },\n\n    render: function(deltaTime) {\n        // deltaTime value is in seconds\n        if (deltaTime === undefined) {\n            deltaTime = (Date.now() - this._previousFrameTime) * 0.001;\n        }\n        this._previousFrameTime = Date.now();\n        var currentRenderTarget = this.renderer.getRenderTarget();\n        var maskActive = false;\n        var pass,\n            i,\n            il = this.passes.length;\n\n        for (i = 0; i < il; i++) {\n            pass = this.passes[i];\n            if (pass.enabled === false) continue;\n\n            pass.render(\n                this.renderer,\n                this.writeBuffer,\n                this.readBuffer,\n                deltaTime,\n                maskActive\n            );\n            if (pass.needsSwap) {\n                if (maskActive) {\n                    var context = this.renderer.context;\n                    context.stencilFunc(context.NOTEQUAL, 1, 0xffffffff);\n                    this.copyPass.render(\n                        this.renderer,\n                        this.writeBuffer,\n                        this.readBuffer,\n                        deltaTime\n                    );\n                    context.stencilFunc(context.EQUAL, 1, 0xffffffff);\n                }\n                this.swapBuffers();\n            }\n            if (MaskPass !== undefined) {\n                if (pass instanceof MaskPass) {\n                    maskActive = true;\n                } else if (pass instanceof ClearMaskPass) {\n                    maskActive = false;\n                }\n            }\n        }\n        this.renderer.setRenderTarget(currentRenderTarget);\n    },\n\n    reset: function(renderTarget) {\n        if (renderTarget === undefined) {\n            var size = this.renderer.getDrawingBufferSize(new Vector2());\n            renderTarget = this.renderTarget1.clone();\n            renderTarget.setSize(size.width, size.height);\n        }\n        this.renderTarget1.dispose();\n        this.renderTarget2.dispose();\n        this.renderTarget1 = renderTarget;\n        this.renderTarget2 = renderTarget.clone();\n        this.writeBuffer = this.renderTarget1;\n        this.readBuffer = this.renderTarget2;\n    },\n    setSize: function(width, height) {\n        this.renderTarget1.setSize(width, height);\n        this.renderTarget2.setSize(width, height);\n        for (var i = 0; i < this.passes.length; i++) {\n            this.passes[i].setSize(width, height);\n        }\n    }\n});\n\nexport { EffectComposer };\n"]},"metadata":{},"sourceType":"module"}