{"ast":null,"code":"var _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef, useState, useMemo } from \"react\";\nimport * as THREE from 'three';\nimport { Canvas, extend as extendThree, useFrame, useLoader, useResource, useThree } from \"react-three-fiber\"; // Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\n\nimport { EffectComposer } from './resources/postprocessing/EffectComposer';\nimport { RenderPass } from './resources/postprocessing/RenderPass';\nimport { GlitchPass } from './resources/postprocessing/GlitchPass';\nextendThree({\n  EffectComposer,\n  RenderPass,\n  GlitchPass\n}); // import TextLoop from \"../TextLoop\";\n// const DEFAULT_LAYER = 0;\n// const OCCLUSION_LAYER = 1;\n// Cast the lighting\n\nconst Lighting = () => {\n  return __jsx(\"directionalLight\", {\n    color: \"#ffffff\",\n    intensity: 0.5,\n    position: [-2, 0, 30],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  });\n}; // The canvas houses this function, the scene. Scene is where the elements come together.\n\n\nconst SmokeParticle = () => {\n  // const { \n  //     scene,                        // Default scene\n  // } = useThree();\n  const url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n  const texture = useMemo(() => new THREE.TextureLoader().load(url), [url]); // let xFactor = 1;\n  // let yFactor = 1;\n  // let zFactor = 2;\n  // let rotationAngle = Math.random() * 360;\n  // let factor = 0.3;\n  // // let position = { x: Math.random() * 500-250, y: Math.random() * 500-250, z: 2 };\n  // // // let position = (Math.random()*500-250, Math.random()*500-250, 2);\n  // // let rotation = Math.random() * 360;\n  // console.log('ref --> ', ref);\n  // useFrame(({ clock }) => {\n  //     let delta = clock.getDelta();\n  //     // ref.current.rotation.z = ref.current.rotation.z * Math.random();\n  //     // ref.current.rotation.z += rotationAngle;\n  //     // smokeParticles[sp].rotation.z += delta * 0.2;\n  //     // ref.current.scale.z = 3;\n  //     ref.current.position.x = Math.sin(xFactor++) * factor;\n  //     ref.current.position.y = Math.cos(factor) * (yFactor++ * Math.random());\n  //     ref.current.position.z = 2;\n  //     ref.current.rotation.z = Math.random() * factor;\n  //     // ref.current.rotation.set( 0, 0, \n  //     //     delta * Math.cos(factor) \n  //     // );\n  //     // ref.current.position.set(\n  //     //     1,\n  //     //     (Math.cos(clock.getElapsedTime()) * 1.5),\n  //     //     // (ref.current.position.z += 0.01) * zFactor,\n  //     //     2,\n  //     //     // xFactor,\n  //     //     // yFactor,\n  //     //     // zFactor\n  //     // );\n  // })\n  // console.log('ref --> ', ref);\n  // if (ref && ref.current && ref.current.parent) {\n  //     ref.current.parent.scale.z = 1.22;\n  // }\n\n  return __jsx(React.Fragment, null, __jsx(\"planeGeometry\", {\n    attach: \"geometry\",\n    args: [200, 200],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }), __jsx(\"meshLambertMaterial\", {\n    attach: \"material\",\n    color: \"#ccbbee\",\n    transparent: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, __jsx(\"primitive\", {\n    attach: \"map\",\n    object: texture,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  })));\n};\n\nconst GenerateSmoke = ({\n  particleArray\n}) => {\n  // const { clock } = useThree();\n  const ref = useRef(); // let xFactor = 1;\n  // let yFactor = 1;\n  // let zFactor = 2;\n  // let rotationAngle = Math.random() * 360;\n  // let factor = 0.1;\n  // let zeroTo10 = ( Math.sin(2) * (10 * Math.random()) + 2 ) * eachParticle.x;\n\n  const getRandomArbitrary = (min, max) => {\n    return Math.random() * (max - min) + min;\n  };\n\n  useFrame(({\n    clock\n  }) => {\n    let delta = clock.getDelta();\n    ref.current.rotation.z = clock.elapsedTime - delta;\n    console.log('ref.current.rotation.z --> ', ref.current.rotation.z); // console.log('ref.current.rotation.z --> ', ref.current.rotation.z);\n    // console.log('2 / getRandomArbitrary(10, 10.3) --> ', 9 / getRandomArbitrary(10, 10.3));\n    // ref.current.position.x = Math.sin(xFactor++) * factor;\n    // ref.current.position.y = Math.cos(factor) * (yFactor++ * Math.random());\n    // ref.current.position.z = 2;\n    // ref.current.rotation.z = Math.random() * factor;\n  }); // console.log('ref & particleArray --> ', ref, particleArray);\n\n  return __jsx(React.Fragment, null, __jsx(\"mesh\", {\n    ref: ref // rotation={[ 0, 0, 0 ]}\n    ,\n    visible: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, __jsx(SmokeParticle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }))) // <>\n  //     {particleArray.map((eachParticle, index) => (\n  //         <React.Fragment key={index} >\n  //             <mesh \n  //                 ref={ref}\n  //                 position={[ eachParticle.x, eachParticle.y, eachParticle.z ]}\n  //                 visible \n  //             >\n  //                 {console.log('eachParticle --> ', eachParticle)}\n  //                 <SmokeParticle  />\n  //             </mesh>\n  //         </React.Fragment>\n  //     ))}\n  // </>\n  ;\n}; // This is the canvas. It's the lowest level element in the three/webGl chain\n\n\nconst CanvasicalSmoke = () => {\n  const particleCount = 3;\n  const particleArray = [{\n    id: 0,\n    x: 0,\n    y: 0,\n    z: 2\n  }];\n  useEffect(() => {\n    if (particleArray.length === particleCount) {\n      return null;\n    } else {\n      for (let i = 0; i <= particleCount; i++) {\n        particleArray.push({\n          id: particleArray[i].id + 1,\n          x: particleArray[i].x + 1,\n          y: particleArray[i].y + 1,\n          z: 2\n        });\n      }\n    }\n  }, [particleArray]);\n  return __jsx(React.Fragment, null, __jsx(Canvas, {\n    className: \"container block__three-container\",\n    camera: {\n      fov: 75,\n      aspect: 0.5,\n      near: 1,\n      far: 10000,\n      position: [0, 0, 300]\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, __jsx(Lighting, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }), __jsx(GenerateSmoke, {\n    particleArray: particleArray,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  })));\n};\n\nexport default CanvasicalSmoke; // // Creates a fullscreen colored plane\n// const Plane = () => {\n//     return (\n//         <mesh >\n//             <planeGeometry  attach=\"geometry\"  args={[ 32, 32, 32, 32 ]} />\n//             <meshPhysicalMaterial  attach=\"material\"  color=\"#ffffff\"  />\n//         </mesh>\n//     )\n// }\n// // A light bar\n// const LightBar = () => {\n//     // const lightBar = useRef();\n//     return (\n//         <>\n//             <mesh \n//                 // ref={lightBar} \n//             >\n//                 <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n//                 <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n//             </mesh>\n//         </>\n//     )\n// }","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx"],"names":["React","useCallback","useEffect","useRef","useState","useMemo","THREE","Canvas","extend","extendThree","useFrame","useLoader","useResource","useThree","EffectComposer","RenderPass","GlitchPass","Lighting","SmokeParticle","url","texture","TextureLoader","load","GenerateSmoke","particleArray","ref","getRandomArbitrary","min","max","Math","random","clock","delta","getDelta","current","rotation","z","elapsedTime","console","log","CanvasicalSmoke","particleCount","id","x","y","length","i","push","fov","aspect","near","far","position"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef, useState, useMemo } from \"react\";\nimport * as THREE from 'three';\nimport {\n    Canvas,\n    extend as extendThree,\n    useFrame,\n    useLoader,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\n\n// Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\nimport { EffectComposer } from './resources/postprocessing/EffectComposer';\nimport { RenderPass } from './resources/postprocessing/RenderPass';\nimport { GlitchPass } from './resources/postprocessing/GlitchPass';\nextendThree({ EffectComposer, RenderPass, GlitchPass });\n\n// import TextLoop from \"../TextLoop\";\n\n\n// const DEFAULT_LAYER = 0;\n// const OCCLUSION_LAYER = 1;\n\n\n\n// Cast the lighting\nconst Lighting = () => {\n    return (\n        <directionalLight\n            color=\"#ffffff\"\n            intensity={0.5}\n            position={[ -2, 0, 30 ]} \n        />\n    )\n}\n\n// The canvas houses this function, the scene. Scene is where the elements come together.\nconst SmokeParticle = () => {\n    // const { \n    //     scene,                        // Default scene\n    // } = useThree();\n\n    const url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n    const texture = useMemo(() => new THREE.TextureLoader().load(url), [url]);\n    \n    // let xFactor = 1;\n    // let yFactor = 1;\n    // let zFactor = 2;\n    // let rotationAngle = Math.random() * 360;\n    // let factor = 0.3;\n    \n    // // let position = { x: Math.random() * 500-250, y: Math.random() * 500-250, z: 2 };\n    // // // let position = (Math.random()*500-250, Math.random()*500-250, 2);\n    // // let rotation = Math.random() * 360;\n    \n    // console.log('ref --> ', ref);\n\n\n    // useFrame(({ clock }) => {\n    //     let delta = clock.getDelta();\n    //     // ref.current.rotation.z = ref.current.rotation.z * Math.random();\n    //     // ref.current.rotation.z += rotationAngle;\n    //     // smokeParticles[sp].rotation.z += delta * 0.2;\n    //     // ref.current.scale.z = 3;\n    //     ref.current.position.x = Math.sin(xFactor++) * factor;\n    //     ref.current.position.y = Math.cos(factor) * (yFactor++ * Math.random());\n    //     ref.current.position.z = 2;\n    //     ref.current.rotation.z = Math.random() * factor;\n    //     // ref.current.rotation.set( 0, 0, \n    //     //     delta * Math.cos(factor) \n    //     // );\n    //     // ref.current.position.set(\n    //     //     1,\n    //     //     (Math.cos(clock.getElapsedTime()) * 1.5),\n    //     //     // (ref.current.position.z += 0.01) * zFactor,\n    //     //     2,\n    //     //     // xFactor,\n    //     //     // yFactor,\n    //     //     // zFactor\n    //     // );\n    // })\n        \n    // console.log('ref --> ', ref);\n    // if (ref && ref.current && ref.current.parent) {\n    //     ref.current.parent.scale.z = 1.22;\n    // }\n\n    return (\n        <>\n            <planeGeometry \n                attach=\"geometry\"   \n                args={[200, 200]} \n            />\n\n            <meshLambertMaterial \n                attach=\"material\" \n                color=\"#ccbbee\"\n                transparent\n            >\n                <primitive attach=\"map\" object={texture} />\n            </ meshLambertMaterial>\n\n        </>\n    )\n}\n\n\nconst GenerateSmoke = ({ particleArray }) => {\n    // const { clock } = useThree();\n    const ref = useRef();\n    // let xFactor = 1;\n    // let yFactor = 1;\n    // let zFactor = 2;\n    // let rotationAngle = Math.random() * 360;\n    // let factor = 0.1;\n    // let zeroTo10 = ( Math.sin(2) * (10 * Math.random()) + 2 ) * eachParticle.x;\n    const getRandomArbitrary = (min, max) => {\n        return Math.random() * (max - min) + min;\n    }\n    useFrame(({ clock }) => {\n        let delta = clock.getDelta();\n        ref.current.rotation.z = clock.elapsedTime - delta;\n        console.log('ref.current.rotation.z --> ', ref.current.rotation.z);\n        // console.log('ref.current.rotation.z --> ', ref.current.rotation.z);\n        // console.log('2 / getRandomArbitrary(10, 10.3) --> ', 9 / getRandomArbitrary(10, 10.3));\n\n        // ref.current.position.x = Math.sin(xFactor++) * factor;\n        // ref.current.position.y = Math.cos(factor) * (yFactor++ * Math.random());\n        // ref.current.position.z = 2;\n        // ref.current.rotation.z = Math.random() * factor;\n    });\n\n    // console.log('ref & particleArray --> ', ref, particleArray);\n    \n\n    return (\n        <>\n            <mesh \n                ref={ref}\n                // rotation={[ 0, 0, 0 ]}\n                visible \n            >\n                <SmokeParticle  />\n            </mesh>\n        </>\n        // <>\n        //     {particleArray.map((eachParticle, index) => (\n        //         <React.Fragment key={index} >\n        //             <mesh \n        //                 ref={ref}\n                        \n        //                 position={[ eachParticle.x, eachParticle.y, eachParticle.z ]}\n        //                 visible \n        //             >\n        //                 {console.log('eachParticle --> ', eachParticle)}\n        //                 <SmokeParticle  />\n        //             </mesh>\n        //         </React.Fragment>\n        //     ))}\n        // </>\n    )\n}\n\n// This is the canvas. It's the lowest level element in the three/webGl chain\nconst CanvasicalSmoke = () => {\n    const particleCount = 3;\n    const particleArray = [{ id: 0, x: 0, y: 0, z: 2 }];\n\n    useEffect(() => {\n        if (particleArray.length === particleCount) {\n            return null;\n        } else {\n            for (let i=0; i <= particleCount; i++) {\n                particleArray.push({ \n                    id: particleArray[i].id + 1, \n                    x: particleArray[i].x + 1, \n                    y: particleArray[i].y + 1, \n                    z: 2  \n                })\n            }\n        }\n    }, [particleArray])\n\n    return (\n        <>\n            <Canvas\n                className=\"container block__three-container\" \n                camera={{ \n                    fov: 75, \n                    aspect: 0.5,\n                    near: 1,\n                    far: 10000,\n                    position: [ 0, 0, 300 ]\n                }} \n\n            >\n                <Lighting />\n                <GenerateSmoke  particleArray={particleArray} />\n            </Canvas> \n           \n            {/* <TextLoop  /> */}\n        </>\n    );\n}\n\nexport default CanvasicalSmoke;\n\n\n// // Creates a fullscreen colored plane\n// const Plane = () => {\n//     return (\n//         <mesh >\n//             <planeGeometry  attach=\"geometry\"  args={[ 32, 32, 32, 32 ]} />\n//             <meshPhysicalMaterial  attach=\"material\"  color=\"#ffffff\"  />\n//         </mesh>\n//     )\n// }\n\n\n// // A light bar\n// const LightBar = () => {\n//     // const lightBar = useRef();\n\n//     return (\n//         <>\n//             <mesh \n//                 // ref={lightBar} \n//             >\n//                 <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n//                 <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n//             </mesh>\n//         </>\n//     )\n// }\n"]},"metadata":{},"sourceType":"module"}