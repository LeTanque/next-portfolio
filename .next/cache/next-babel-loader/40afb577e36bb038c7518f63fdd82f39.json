{"ast":null,"code":"var _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/ThreeContainer.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef } from \"react\";\nimport { extend, Canvas, useFrame, useResource, useThree } from \"react-three-fiber\";\nimport * as resources from './resources/index';\nextend(resources);\nconsole.log('resources --> ', resources);\nimport TextLoop from \"../TextLoop\";\n\nconst Particle = ({\n  geometry,\n  material\n}) => {\n  let ref = useRef();\n  let t = Math.random() * 20;\n  let speed = 0.01 + Math.random() / 100000;\n  let factor = 20 + Math.random() * 2;\n  let xFactor = -50 + Math.random() * 200;\n  let yFactor = -50 + Math.random() * 200;\n  let zFactor = -30 + Math.random() * 150;\n  useFrame(() => {\n    t = t + speed; // t = (t + speed) / 2;\n\n    const s = Math.cos(t);\n    ref.current.scale.set(s * 5.95, s * 5.95, s * 5.95);\n    ref.current.rotation.set(s * 4, s * 4, s * 4);\n    ref.current.position.set(xFactor + Math.cos(t / 30 * factor) + Math.sin(t * 1) * factor / 7, yFactor + Math.sin(t / 20 * factor) + Math.cos(t * 2) * factor / 7, zFactor + Math.cos(t / 10 * factor) + Math.sin(t * 3) * factor / 15);\n  });\n  return __jsx(\"mesh\", {\n    ref: ref,\n    material: material,\n    geometry: geometry,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  });\n};\n\nconst Swarm = ({\n  mouse\n}) => {\n  const light = useRef();\n  const [geometryRef, geometry] = useResource();\n  const [materialRef, material] = useResource();\n  console.log('material --> ', material);\n  useFrame(() => light.current.position.set(mouse.current[0] / 20, -mouse.current[1] / 20, 0));\n  return __jsx(React.Fragment, null, __jsx(\"pointLight\", {\n    ref: light,\n    distance: 60,\n    intensity: 1,\n    color: \"#ee1111\",\n    decay: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), __jsx(\"spotLight\", {\n    intensity: 0.4,\n    position: [-15, 0, 55],\n    penumbra: 2,\n    decay: 2,\n    color: \"#111111\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), __jsx(\"mesh\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, __jsx(\"planeGeometry\", {\n    attach: \"geometry\",\n    args: [10000, 10000],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), __jsx(\"meshDepthMaterial\", {\n    attach: \"material\",\n    color: \"#ffffff\",\n    depthTest: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  })), __jsx(\"tetrahedronBufferGeometry\", {\n    ref: geometryRef,\n    args: [0.8, 0],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }), __jsx(\"meshPhysicalMaterial\", {\n    ref: materialRef,\n    fog: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }), geometry && new Array(500).fill().map((_, index) => __jsx(Particle, {\n    key: index,\n    material: material,\n    geometry: geometry,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  })));\n};\n\nconst Effect = () => {\n  const composer = useRef();\n  const {\n    scene,\n    gl,\n    size,\n    camera\n  } = useThree();\n  useEffect(() => void composer.current.setSize(size.width, size.height), [size]);\n  useFrame(({\n    gl\n  }) => void (gl.autoClear = true), 0);\n  return __jsx(\"effectComposer\", {\n    ref: composer,\n    args: [gl],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, __jsx(\"renderPass\", {\n    attachArray: \"passes\",\n    scene: scene,\n    camera: camera,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }), __jsx(\"waterPass\", {\n    attachArray: \"passes\",\n    factor: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }), __jsx(\"afterimagePass\", {\n    attachArray: \"passes\",\n    factor: 0.7,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }), __jsx(\"shaderPass\", {\n    attachArray: \"passes\",\n    args: [resources.WaterShader],\n    \"material-uniforms-resolution-value\": [1 / size.width, 1 / size.height],\n    renderToScreen: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }));\n};\n\nconst ThreeContainer = () => {\n  const mouse = useRef([0, 0]);\n  const onMouseMove = useCallback(({\n    clientX: x,\n    clientY: y\n  }) => mouse.current = [x - window.innerWidth / 2, y - window.innerHeight / 2], []);\n  return __jsx(\"div\", {\n    className: \"container block__three-container\",\n    onMouseMove: onMouseMove,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, __jsx(Canvas, {\n    camera: {\n      fov: 75,\n      position: [0, 0, 60]\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, __jsx(Swarm, {\n    mouse: mouse,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }), __jsx(Effect, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  })), __jsx(TextLoop, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }));\n};\n\nexport default ThreeContainer;","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/ThreeContainer.jsx"],"names":["React","useCallback","useEffect","useRef","extend","Canvas","useFrame","useResource","useThree","resources","console","log","TextLoop","Particle","geometry","material","ref","t","Math","random","speed","factor","xFactor","yFactor","zFactor","s","cos","current","scale","set","rotation","position","sin","Swarm","mouse","light","geometryRef","materialRef","Array","fill","map","_","index","Effect","composer","scene","gl","size","camera","setSize","width","height","autoClear","WaterShader","ThreeContainer","onMouseMove","clientX","x","clientY","y","window","innerWidth","innerHeight","fov"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef } from \"react\";\nimport {\n    extend,\n    Canvas,\n    useFrame,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\nimport * as resources from './resources/index';\nextend(resources);\nconsole.log('resources --> ', resources);\n\nimport TextLoop from \"../TextLoop\";\n\n\nconst Particle = ({ geometry, material }) => {\n    let ref = useRef();\n    let t = Math.random() * 20;\n    let speed = 0.01 + Math.random() / 100000;\n    let factor = 20 + Math.random() * 2;\n    let xFactor = -50 + Math.random() * 200;\n    let yFactor = -50 + Math.random() * 200;\n    let zFactor = -30 + Math.random() * 150;\n    useFrame(() => {\n        t = t + speed;\n        // t = (t + speed) / 2;\n        const s = Math.cos(t);\n        ref.current.scale.set(s * 5.95, s * 5.95, s * 5.95);\n        ref.current.rotation.set(s * 4, s * 4, s * 4);\n        ref.current.position.set(\n            xFactor +\n                Math.cos((t / 30) * factor) +\n                (Math.sin(t * 1) * factor) / 7,\n            yFactor +\n                Math.sin((t / 20) * factor) +\n                (Math.cos(t * 2) * factor) / 7,\n            zFactor +\n                Math.cos((t / 10) * factor) +\n                (Math.sin(t * 3) * factor) / 15\n        );\n    });\n    return <mesh ref={ref} material={material} geometry={geometry} />;\n}\n\nconst Swarm = ({ mouse }) => {\n    const light = useRef();\n    const [geometryRef, geometry] = useResource();\n    const [materialRef, material] = useResource();\n    console.log('material --> ', material);\n\n    useFrame(() =>\n        light.current.position.set(\n            mouse.current[0] / 20,\n            -mouse.current[1] / 20,\n            0\n        )\n    );\n\n    return (\n        <>\n            <pointLight\n                ref={light}\n                distance={60}\n                intensity={1}\n                color=\"#ee1111\"\n                decay={2}\n            />\n            <spotLight\n                intensity={0.4} \n                position={[-15, 0, 55]} \n                penumbra={2} \n                decay={2}\n                color=\"#111111\"\n            />\n            {/* <ambientLight\n                intensity={0.3} \n                position={[0, 0, 40]} \n                penumbra={2} \n                decay={2}\n                color=\"#111111\"\n            /> */}\n\n            <mesh>\n                <planeGeometry \n                    attach=\"geometry\" \n                    args={[10000, 10000]} \n                />\n\n                <meshDepthMaterial\n                    attach=\"material\"\n                    color=\"#ffffff\"\n                    depthTest={false}\n                />\n                \n                {/* <meshPhongMaterial\n                    attach=\"material\"\n                    color=\"#575757\"\n                    depthTest={false}\n                /> */}\n                {/* <spriteMaterial\n                    color=\"#aaaaaa\"\n                    fog={true}\n                /> */}\n            </mesh>\n\n            <tetrahedronBufferGeometry  ref={geometryRef}  args={[0.8, 0]}  />\n\n            \n            <meshPhysicalMaterial \n                ref={materialRef}\n                fog={true}\n            />\n            \n\n            {/* <meshNormalMaterial \n                ref={materialRef} \n                fog={true}\n                skinning={true}\n                transparent={true}\n                opacity={0.5}\n            /> */}\n\n            {/* <meshPhysicalMaterial ref={materialRef} /> */}\n\n            {geometry && new Array(500)\n                .fill()\n                .map((_, index) => (\n                    <Particle\n                        key={index}\n                        material={material}\n                        geometry={geometry}\n                    />\n                ))\n            }\n        </>\n    );\n}\n\nconst Effect = () => {\n    const composer = useRef();\n\n    const { scene, gl, size, camera } = useThree();\n\n    useEffect(() => void composer.current.setSize(size.width, size.height), [ size ]);\n\n    useFrame(\n        ({ gl }) => void ((gl.autoClear = true)),\n        0\n    );\n\n    return (\n        <effectComposer ref={composer} args={[gl]}>\n            <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\n            <waterPass attachArray=\"passes\" factor={2} />\n            <afterimagePass attachArray=\"passes\" factor={0.7} />\n            <shaderPass\n                attachArray=\"passes\"\n                args={[resources.WaterShader]}\n                material-uniforms-resolution-value={[\n                    1 / size.width,\n                    1 / size.height\n                ]}\n                renderToScreen\n            />\n        </effectComposer>\n    );\n}\n\nconst ThreeContainer = () => {\n    const mouse = useRef([0, 0]);\n    const onMouseMove = useCallback(\n        ({ clientX: x, clientY: y }) =>\n        (mouse.current = [\n            x - window.innerWidth / 2,\n            y - window.innerHeight / 2\n        ]),\n        []\n    );\n\n    return (\n        <div \n            className=\"container block__three-container\" \n            onMouseMove={onMouseMove} \n        >\n            \n            <Canvas camera={{ fov: 75, position: [0, 0, 60] }} >\n                \n                <Swarm mouse={mouse} />\n                <Effect />\n\n            </Canvas> \n           \n            <TextLoop  />\n\n        </div>\n    );\n}\n\nexport default ThreeContainer;\n"]},"metadata":{},"sourceType":"module"}