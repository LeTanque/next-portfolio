{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/SmokeContainer.jsx\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  position: absolute;\\n  overflow: auto;\\n  top: 0px;\\n  width: 100%;\\n  height: 100vh;\\n  font-size: 20em;\\n  font-weight: 800;\\n  line-height: 0.9em;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport * as THREE from 'three';\nimport React, { useState, useRef, useContext, useEffect, useCallback, useMemo } from 'react';\nimport { apply as extendSpring, useSpring, a, interpolate } from 'react-spring/three';\nimport { extend as extendThree, Canvas, useFrame, useThree } from 'react-three-fiber';\nimport styled from 'styled-components'; // import data from '../../resources/data'\n\nvar data = [\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png\"]; // Import and register postprocessing classes as three-native-elements\n\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { GlitchPass } from '../../resources/postprocessing/GlitchPass';\nextendSpring({\n  EffectComposer: EffectComposer,\n  RenderPass: RenderPass,\n  GlitchPass: GlitchPass\n});\nextendThree({\n  EffectComposer: EffectComposer,\n  RenderPass: RenderPass,\n  GlitchPass: GlitchPass\n});\n/** This component loads an image and projects it onto a plane */\n\nfunction Image(_ref) {\n  var url = _ref.url,\n      opacity = _ref.opacity,\n      scale = _ref.scale,\n      props = _objectWithoutProperties(_ref, [\"url\", \"opacity\", \"scale\"]);\n\n  var texture = useMemo(function () {\n    return new THREE.TextureLoader().load(url);\n  }, [url]);\n\n  var _useState = useState(false),\n      hovered = _useState[0],\n      setHover = _useState[1];\n\n  var hover = useCallback(function () {\n    return setHover(true);\n  }, []);\n  var unhover = useCallback(function () {\n    return setHover(false);\n  }, []);\n\n  var _useSpring = useSpring({\n    factor: hovered ? 1.1 : 1\n  }),\n      factor = _useSpring.factor;\n\n  return __jsx(a.mesh, _extends({}, props, {\n    onPointerOver: hover,\n    onPointerOut: unhover,\n    scale: factor.interpolate(function (f) {\n      return [scale * f, scale * f, 1];\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }), __jsx(\"planeBufferGeometry\", {\n    attach: \"geometry\",\n    args: [5, 5],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }), __jsx(a.meshLambertMaterial, {\n    attach: \"material\",\n    transparent: true,\n    opacity: opacity,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, __jsx(\"primitive\", {\n    attach: \"map\",\n    object: texture,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  })));\n}\n/** This renders text via canvas and projects it as a sprite */\n\n\nfunction Text(_ref2) {\n  var children = _ref2.children,\n      position = _ref2.position,\n      opacity = _ref2.opacity,\n      _ref2$color = _ref2.color,\n      color = _ref2$color === void 0 ? 'white' : _ref2$color,\n      _ref2$fontSize = _ref2.fontSize,\n      fontSize = _ref2$fontSize === void 0 ? 410 : _ref2$fontSize;\n\n  var _useThree = useThree(),\n      camera = _useThree.camera,\n      _useThree$size = _useThree.size,\n      width = _useThree$size.width,\n      height = _useThree$size.height,\n      _useThree$viewport = _useThree.viewport,\n      viewportWidth = _useThree$viewport.width,\n      viewportHeight = _useThree$viewport.height;\n\n  var scale = viewportWidth > viewportHeight ? viewportWidth : viewportHeight;\n  var canvas = useMemo(function () {\n    var canvas = document.createElement('canvas');\n    canvas.width = canvas.height = 2048;\n    var context = canvas.getContext('2d');\n    context.font = \"bold \".concat(fontSize, \"px -apple-system, BlinkMacSystemFont, avenir next, avenir, helvetica neue, helvetica, ubuntu, roboto, noto, segoe ui, arial, sans-serif\");\n    context.textAlign = 'center';\n    context.textBaseline = 'middle';\n    context.fillStyle = color;\n    context.fillText(children, 1024, 1024 - 410 / 2);\n    return canvas;\n  }, [children, width, height]);\n  return __jsx(a.sprite, {\n    scale: [scale, scale, 1],\n    position: position,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, __jsx(a.spriteMaterial, {\n    attach: \"material\",\n    transparent: true,\n    opacity: opacity,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, __jsx(\"canvasTexture\", {\n    attach: \"map\",\n    image: canvas,\n    premultiplyAlpha: true,\n    onUpdate: function onUpdate(s) {\n      return s.needsUpdate = true;\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  })));\n}\n/** This component creates a fullscreen colored plane */\n\n\nfunction Background(_ref3) {\n  var color = _ref3.color;\n\n  var _useThree2 = useThree(),\n      size = _useThree2.size,\n      viewport = _useThree2.viewport;\n\n  console.log(viewport);\n  return __jsx(\"mesh\", {\n    scale: [viewport.width, viewport.height, 1],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, __jsx(\"planeBufferGeometry\", {\n    attach: \"geometry\",\n    args: [1, 1],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), __jsx(a.meshBasicMaterial, {\n    attach: \"material\",\n    color: color,\n    depthTest: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }));\n}\n/** This component rotates a bunch of stars */\n\n\nfunction Stars(_ref4) {\n  var position = _ref4.position;\n  var group = useRef();\n  var theta = 0;\n  useFrame(function () {\n    var r = 5 * Math.sin(THREE.Math.degToRad(theta += 0.01));\n    var s = Math.cos(THREE.Math.degToRad(theta * 2));\n    group.current.rotation.set(r, r, r);\n    group.current.scale.set(s, s, s);\n  });\n\n  var _useMemo = useMemo(function () {\n    var geo = new THREE.SphereBufferGeometry(1, 10, 10);\n    var mat = new THREE.MeshBasicMaterial({\n      color: new THREE.Color('peachpuff')\n    });\n    var coords = new Array(1000).fill().map(function (i) {\n      return [Math.random() * 800 - 400, Math.random() * 800 - 400, Math.random() * 800 - 400];\n    });\n    return [geo, mat, coords];\n  }, []),\n      geo = _useMemo[0],\n      mat = _useMemo[1],\n      coords = _useMemo[2];\n\n  return __jsx(a.group, {\n    ref: group,\n    position: position,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, coords.map(function (_ref5, i) {\n    var _ref6 = _slicedToArray(_ref5, 3),\n        p1 = _ref6[0],\n        p2 = _ref6[1],\n        p3 = _ref6[2];\n\n    return __jsx(\"mesh\", {\n      key: i,\n      geometry: geo,\n      material: mat,\n      position: [p1, p2, p3],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    });\n  }));\n}\n/** This component creates a glitch effect */\n\n\nvar Effects = React.memo(function (_ref7) {\n  var factor = _ref7.factor;\n\n  var _useThree3 = useThree(),\n      gl = _useThree3.gl,\n      scene = _useThree3.scene,\n      camera = _useThree3.camera,\n      size = _useThree3.size;\n\n  var composer = useRef();\n  useEffect(function () {\n    return void composer.current.setSize(size.width, size.height);\n  }, [size]); // This takes over as the main render-loop (when 2nd arg is set to true)\n\n  useFrame(function () {\n    return composer.current.render();\n  }, 1);\n  return __jsx(\"effectComposer\", {\n    ref: composer,\n    args: [gl],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, __jsx(\"renderPass\", {\n    attachArray: \"passes\",\n    args: [scene, camera],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }), __jsx(a.glitchPass, {\n    attachArray: \"passes\",\n    renderToScreen: true,\n    factor: factor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }));\n});\n/** This component creates a bunch of parallaxed images */\n\nfunction Images(_ref8) {\n  var top = _ref8.top,\n      mouse = _ref8.mouse,\n      scrollMax = _ref8.scrollMax;\n  return data.map(function (_ref9, index) {\n    var _ref10 = _slicedToArray(_ref9, 6),\n        url = _ref10[0],\n        x = _ref10[1],\n        y = _ref10[2],\n        factor = _ref10[3],\n        z = _ref10[4],\n        scale = _ref10[5];\n\n    return __jsx(Image, {\n      key: index,\n      url: url,\n      scale: scale,\n      opacity: top.interpolate([0, 500], [0, 1]),\n      position: interpolate([top, mouse], function (top, mouse) {\n        return [-mouse[0] * factor / 50000 + x, mouse[1] * factor / 50000 + y * 1.15 + top * factor / scrollMax * 2, z + top / 2000];\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    });\n  });\n}\n/** This component maintains the scene */\n\n\nfunction Scene(_ref11) {\n  var top = _ref11.top,\n      mouse = _ref11.mouse;\n\n  var _useThree4 = useThree(),\n      size = _useThree4.size;\n\n  var scrollMax = size.height * 4.5;\n  return __jsx(React.Fragment, null, __jsx(a.spotLight, {\n    intensity: 1.2,\n    color: \"white\",\n    position: mouse.interpolate(function (x, y) {\n      return [x / 100, -y / 100, 6.5];\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }), __jsx(Effects, {\n    factor: top.interpolate([0, 150], [1, 0]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }), __jsx(Background, {\n    color: top.interpolate([0, scrollMax * 0.25, scrollMax * 0.8, scrollMax], ['#27282F', '#247BA0', '#70C1B3', '#f8f3f1']),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }), __jsx(Stars, {\n    position: top.interpolate(function (top) {\n      return [0, -1 + top / 20, 0];\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }), __jsx(Images, {\n    top: top,\n    mouse: mouse,\n    scrollMax: scrollMax,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }), __jsx(Text, {\n    opacity: top.interpolate([0, 200], [1, 0]),\n    position: top.interpolate(function (top) {\n      return [0, -1 + top / 200, 0];\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, \"lorem\"), __jsx(Text, {\n    position: top.interpolate(function (top) {\n      return [0, -20 + top * 10 / scrollMax * 2, 0];\n    }),\n    color: \"black\",\n    fontSize: 150,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, \"Ipsum\"));\n}\n/** Main component */\n\n\nexport default function Main() {\n  // This tiny spring right here controlls all(!) the animations, one for scroll, the other for mouse movement ...\n  var _useSpring2 = useSpring(function () {\n    return {\n      top: 0,\n      mouse: [0, 0]\n    };\n  }),\n      _useSpring3 = _slicedToArray(_useSpring2, 2),\n      _useSpring3$ = _useSpring3[0],\n      top = _useSpring3$.top,\n      mouse = _useSpring3$.mouse,\n      set = _useSpring3[1];\n\n  var onMouseMove = useCallback(function (_ref12) {\n    var x = _ref12.clientX,\n        y = _ref12.clientY;\n    return set({\n      mouse: [x - window.innerWidth / 2, y - window.innerHeight / 2]\n    });\n  }, []);\n  var onScroll = useCallback(function (e) {\n    return set({\n      top: e.target.scrollTop\n    });\n  }, []);\n\n  var _useState2 = useState({}),\n      events = _useState2[0],\n      setEvents = _useState2[1];\n\n  return __jsx(React.Fragment, null, __jsx(Canvas, {\n    className: \"canvas\",\n    onCreated: function onCreated(_ref13) {\n      var events = _ref13.events;\n      return setEvents(events);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, __jsx(Scene, {\n    top: top,\n    mouse: mouse,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  })), __jsx(Container, _extends({\n    onScroll: onScroll,\n    onMouseMove: onMouseMove\n  }, events, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    style: {\n      height: '525vh'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  })));\n}\nvar Container = styled.div(_templateObject());","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/SmokeContainer.jsx"],"names":["THREE","React","useState","useRef","useContext","useEffect","useCallback","useMemo","apply","extendSpring","useSpring","a","interpolate","extend","extendThree","Canvas","useFrame","useThree","styled","data","EffectComposer","RenderPass","GlitchPass","Image","url","opacity","scale","props","texture","TextureLoader","load","hovered","setHover","hover","unhover","factor","f","Text","children","position","color","fontSize","camera","size","width","height","viewport","viewportWidth","viewportHeight","canvas","document","createElement","context","getContext","font","textAlign","textBaseline","fillStyle","fillText","s","needsUpdate","Background","console","log","Stars","group","theta","r","Math","sin","degToRad","cos","current","rotation","set","geo","SphereBufferGeometry","mat","MeshBasicMaterial","Color","coords","Array","fill","map","i","random","p1","p2","p3","Effects","memo","gl","scene","composer","setSize","render","Images","top","mouse","scrollMax","index","x","y","z","Scene","Main","onMouseMove","clientX","clientY","window","innerWidth","innerHeight","onScroll","e","target","scrollTop","events","setEvents","Container","div"],"mappings":"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","sourcesContent":["import * as THREE from 'three'\nimport React, { useState, useRef, useContext, useEffect, useCallback, useMemo } from 'react'\nimport { apply as extendSpring, useSpring, a, interpolate } from 'react-spring/three'\nimport { extend as extendThree, Canvas, useFrame, useThree } from 'react-three-fiber'\nimport styled from 'styled-components'\n// import data from '../../resources/data'\nconst data = [\n    \"https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png\"\n]\n// Import and register postprocessing classes as three-native-elements\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\nimport { GlitchPass } from '../../resources/postprocessing/GlitchPass'\n\nextendSpring({ EffectComposer, RenderPass, GlitchPass })\nextendThree({ EffectComposer, RenderPass, GlitchPass })\n\n/** This component loads an image and projects it onto a plane */\nfunction Image({ url, opacity, scale, ...props }) {\n  const texture = useMemo(() => new THREE.TextureLoader().load(url), [url])\n  const [hovered, setHover] = useState(false)\n  const hover = useCallback(() => setHover(true), [])\n  const unhover = useCallback(() => setHover(false), [])\n  const { factor } = useSpring({ factor: hovered ? 1.1 : 1 })\n  return (\n    <a.mesh\n      {...props}\n      onPointerOver={hover}\n      onPointerOut={unhover}\n      scale={factor.interpolate(f => [scale * f, scale * f, 1])}>\n      <planeBufferGeometry attach=\"geometry\" args={[5, 5]} />\n      <a.meshLambertMaterial attach=\"material\" transparent opacity={opacity}>\n        <primitive attach=\"map\" object={texture} />\n      </a.meshLambertMaterial>\n    </a.mesh>\n  )\n}\n\n/** This renders text via canvas and projects it as a sprite */\nfunction Text({ children, position, opacity, color = 'white', fontSize = 410 }) {\n  const {\n    camera,\n    size: { width, height },\n    viewport: { width: viewportWidth, height: viewportHeight },\n  } = useThree()\n  const scale = viewportWidth > viewportHeight ? viewportWidth : viewportHeight\n  const canvas = useMemo(() => {\n    const canvas = document.createElement('canvas')\n    canvas.width = canvas.height = 2048\n    const context = canvas.getContext('2d')\n    context.font = `bold ${fontSize}px -apple-system, BlinkMacSystemFont, avenir next, avenir, helvetica neue, helvetica, ubuntu, roboto, noto, segoe ui, arial, sans-serif`\n    context.textAlign = 'center'\n    context.textBaseline = 'middle'\n    context.fillStyle = color\n    context.fillText(children, 1024, 1024 - 410 / 2)\n    return canvas\n  }, [children, width, height])\n  return (\n    <a.sprite scale={[scale, scale, 1]} position={position}>\n      <a.spriteMaterial attach=\"material\" transparent opacity={opacity}>\n        <canvasTexture attach=\"map\" image={canvas} premultiplyAlpha onUpdate={s => (s.needsUpdate = true)} />\n      </a.spriteMaterial>\n    </a.sprite>\n  )\n}\n\n/** This component creates a fullscreen colored plane */\nfunction Background({ color }) {\n  const { size, viewport } = useThree()\n  console.log(viewport)\n  return (\n    <mesh scale={[viewport.width, viewport.height, 1]}>\n      <planeBufferGeometry attach=\"geometry\" args={[1, 1]} />\n      <a.meshBasicMaterial attach=\"material\" color={color} depthTest={false} />\n    </mesh>\n  )\n}\n\n/** This component rotates a bunch of stars */\nfunction Stars({ position }) {\n  let group = useRef()\n  let theta = 0\n  useFrame(() => {\n    const r = 5 * Math.sin(THREE.Math.degToRad((theta += 0.01)))\n    const s = Math.cos(THREE.Math.degToRad(theta * 2))\n    group.current.rotation.set(r, r, r)\n    group.current.scale.set(s, s, s)\n  })\n  const [geo, mat, coords] = useMemo(() => {\n    const geo = new THREE.SphereBufferGeometry(1, 10, 10)\n    const mat = new THREE.MeshBasicMaterial({ color: new THREE.Color('peachpuff') })\n    const coords = new Array(1000)\n      .fill()\n      .map(i => [Math.random() * 800 - 400, Math.random() * 800 - 400, Math.random() * 800 - 400])\n    return [geo, mat, coords]\n  }, [])\n  return (\n    <a.group ref={group} position={position}>\n      {coords.map(([p1, p2, p3], i) => (\n        <mesh key={i} geometry={geo} material={mat} position={[p1, p2, p3]} />\n      ))}\n    </a.group>\n  )\n}\n\n/** This component creates a glitch effect */\nconst Effects = React.memo(({ factor }) => {\n  const { gl, scene, camera, size } = useThree()\n  const composer = useRef()\n  useEffect(() => void composer.current.setSize(size.width, size.height), [size])\n  // This takes over as the main render-loop (when 2nd arg is set to true)\n  useFrame(() => composer.current.render(), 1)\n  return (\n    <effectComposer ref={composer} args={[gl]}>\n      <renderPass attachArray=\"passes\" args={[scene, camera]} />\n      <a.glitchPass attachArray=\"passes\" renderToScreen factor={factor} />\n    </effectComposer>\n  )\n})\n\n/** This component creates a bunch of parallaxed images */\nfunction Images({ top, mouse, scrollMax }) {\n  return data.map(([url, x, y, factor, z, scale], index) => (\n    <Image\n      key={index}\n      url={url}\n      scale={scale}\n      opacity={top.interpolate([0, 500], [0, 1])}\n      position={interpolate([top, mouse], (top, mouse) => [\n        (-mouse[0] * factor) / 50000 + x,\n        (mouse[1] * factor) / 50000 + y * 1.15 + ((top * factor) / scrollMax) * 2,\n        z + top / 2000,\n      ])}\n    />\n  ))\n}\n\n/** This component maintains the scene */\nfunction Scene({ top, mouse }) {\n  const { size } = useThree()\n  const scrollMax = size.height * 4.5\n  return (\n    <>\n      <a.spotLight intensity={1.2} color=\"white\" position={mouse.interpolate((x, y) => [x / 100, -y / 100, 6.5])} />\n      <Effects factor={top.interpolate([0, 150], [1, 0])} />\n      <Background\n        color={top.interpolate(\n          [0, scrollMax * 0.25, scrollMax * 0.8, scrollMax],\n          ['#27282F', '#247BA0', '#70C1B3', '#f8f3f1']\n        )}\n      />\n      <Stars position={top.interpolate(top => [0, -1 + top / 20, 0])} />\n      <Images top={top} mouse={mouse} scrollMax={scrollMax} />\n      <Text opacity={top.interpolate([0, 200], [1, 0])} position={top.interpolate(top => [0, -1 + top / 200, 0])}>\n        lorem\n      </Text>\n      <Text position={top.interpolate(top => [0, -20 + ((top * 10) / scrollMax) * 2, 0])} color=\"black\" fontSize={150}>\n        Ipsum\n      </Text>\n    </>\n  )\n}\n\n/** Main component */\nexport default function Main() {\n  // This tiny spring right here controlls all(!) the animations, one for scroll, the other for mouse movement ...\n  const [{ top, mouse }, set] = useSpring(() => ({ top: 0, mouse: [0, 0] }))\n  const onMouseMove = useCallback(\n    ({ clientX: x, clientY: y }) => set({ mouse: [x - window.innerWidth / 2, y - window.innerHeight / 2] }),\n    []\n  )\n  const onScroll = useCallback(e => set({ top: e.target.scrollTop }), [])\n  const [events, setEvents] = useState({})\n  return (\n    <>\n      <Canvas className=\"canvas\" onCreated={({ events }) => setEvents(events)}>\n        <Scene top={top} mouse={mouse} />\n      </Canvas>\n      <Container onScroll={onScroll} onMouseMove={onMouseMove} {...events}>\n        <div style={{ height: '525vh' }} />\n      </Container>\n    </>\n  )\n}\n\nconst Container = styled.div`\n  position: absolute;\n  overflow: auto;\n  top: 0px;\n  width: 100%;\n  height: 100vh;\n  font-size: 20em;\n  font-weight: 800;\n  line-height: 0.9em;\n`"]},"metadata":{},"sourceType":"module"}