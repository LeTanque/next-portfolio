{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx\";\nvar __jsx = React.createElement;\nimport React, { // useCallback,\n// useEffect,\nuseRef // useState,\n, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { Canvas, extend as extendThree, useFrame // useLoader,\n, useResource, useThree } from \"react-three-fiber\"; // import { useSpring, a } from 'react-spring/three';\n// Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\n\nimport { EffectComposer } from \"./resources/postprocessing/EffectComposer\";\nimport { RenderPass } from \"./resources/postprocessing/RenderPass\";\nimport { GlitchPass } from \"./resources/postprocessing/GlitchPass\";\nextendThree({\n  EffectComposer: EffectComposer,\n  RenderPass: RenderPass,\n  GlitchPass: GlitchPass\n});\nimport TextLoop from \"../TextLoop\"; // Cast the lighting\n\nvar Lighting = function Lighting() {\n  var _useThree = useThree(),\n      mouse = _useThree.mouse;\n\n  var light = useRef();\n  useFrame(function () {\n    light.current.position.set(mouse.x / 20, -mouse.y / 20, 60);\n  });\n  console.log('mouse.x / 20 --> ', mouse.x);\n  console.log('light --> ', light);\n  return __jsx(React.Fragment, null, __jsx(\"directionalLight\", {\n    ref: light // position={[ -2, 0, 60 ]}  \n    ,\n    intensity: 1.1,\n    color: \"#eeeeee\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }));\n}; // // This renders text via canvas and projects it as a sprite\n// const Text = ({ opacity, color = 'white', fontSize = 410 }) => {\n//     return (\n//         <a.sprite scale={[ 1, 1, 1 ]} >\n//             <a.spriteMaterial attach=\"material\" transparent opacity={opacity}>\n//                 <canvasTexture attach=\"map\"   premultiplyAlpha   />\n//             </a.spriteMaterial>\n//         </a.sprite>\n//     )\n// }\n// The canvas houses this function, the scene. Scene is where the elements come together.\n\n\nvar SmokePuff = function SmokePuff(_ref) {\n  var geometry = _ref.geometry,\n      material = _ref.material;\n  var smokePuffRef = useRef(); // let tenToHundred = Math.random() * 100; // 10 - 99.99\n  // let speed = 0.01 + Math.random() / 200; // 0.1 - 0.19\n  // const cosWave = (Math.cos(tenToHundred) / 3) - 1.1;  // a cosign wave.  ~ 0.5 - 1.5\n\n  var factor = 1 + Math.random() * 2; // ~ 1-3\n\n  var xFactor = -100 + Math.random() * 200; // -100 - 100\n\n  var yFactor = -100 + Math.random() * 200; // -100 - 100\n\n  var zFactor = 10 + Math.random() * 10; //  10 - 20\n\n  var getRandomArbitrary = function getRandomArbitrary(min, max) {\n    return Math.random() * (max - min) + min;\n  };\n\n  var randomFactor = getRandomArbitrary(1.1, 2);\n  useFrame(function (_ref2) {\n    var clock = _ref2.clock;\n    // tenToHundred += speed; // tenToHundred = tenToHundred + speed, plus it sets a unique new version of tenToHundred.\n    // let delta = clock.getDelta();  // Change in clock. Something like 0.0001 - 0.0099\n    var slowRotation = clock.elapsedTime * 0.017 * randomFactor + xFactor; // starts at ~0.0001 + xFactor and goes slow\n\n    var slowGrowth = Math.tanh(clock.elapsedTime / 18) + 3;\n    smokePuffRef.current.scale.set(slowGrowth, slowGrowth, 2);\n    smokePuffRef.current.rotation.z = slowRotation;\n    smokePuffRef.current.position.set(xFactor * factor, yFactor * factor, zFactor);\n  });\n  return __jsx(\"mesh\", {\n    ref: smokePuffRef,\n    material: material,\n    geometry: geometry,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  });\n};\n\nvar GenerateSmoke = function GenerateSmoke() {\n  var _useResource = useResource(),\n      _useResource2 = _slicedToArray(_useResource, 2),\n      geometryRef = _useResource2[0],\n      geometry = _useResource2[1];\n\n  var _useResource3 = useResource(),\n      _useResource4 = _slicedToArray(_useResource3, 2),\n      materialRef = _useResource4[0],\n      material = _useResource4[1];\n\n  var url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n  var texture = useMemo(function () {\n    return new THREE.TextureLoader().load(url);\n  }, [url]);\n  return __jsx(React.Fragment, null, __jsx(\"planeGeometry\", {\n    ref: geometryRef,\n    attach: \"geometry\",\n    args: [200, 200],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }), __jsx(\"meshLambertMaterial\", {\n    ref: materialRef,\n    attach: \"material\",\n    color: \"#ffffff\",\n    transparent: true,\n    opacity: 0.1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, __jsx(\"primitive\", {\n    attach: \"map\",\n    object: texture,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  })), geometry && new Array(33).fill().map(function (_, index) {\n    return __jsx(SmokePuff, {\n      key: index,\n      material: material,\n      geometry: geometry,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    });\n  }));\n}; // This is the canvas. It's the lowest level element in the three/webGl chain\n\n\nvar CanvasicalSmoke = function CanvasicalSmoke() {\n  return __jsx(React.Fragment, null, __jsx(Canvas, {\n    className: \"container block__three-container\",\n    camera: {\n      fov: 75,\n      aspect: 0.5,\n      near: 1,\n      far: 10000,\n      position: [0, 0, 600]\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, __jsx(Lighting, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }), __jsx(GenerateSmoke, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  })), __jsx(TextLoop, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }));\n};\n\nexport default CanvasicalSmoke;","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx"],"names":["React","useRef","useMemo","THREE","Canvas","extend","extendThree","useFrame","useResource","useThree","EffectComposer","RenderPass","GlitchPass","TextLoop","Lighting","mouse","light","current","position","set","x","y","console","log","SmokePuff","geometry","material","smokePuffRef","factor","Math","random","xFactor","yFactor","zFactor","getRandomArbitrary","min","max","randomFactor","clock","slowRotation","elapsedTime","slowGrowth","tanh","scale","rotation","z","GenerateSmoke","geometryRef","materialRef","url","texture","TextureLoader","load","Array","fill","map","_","index","CanvasicalSmoke","fov","aspect","near","far"],"mappings":"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","sourcesContent":["import React, {\n    // useCallback,\n    // useEffect,\n    useRef,\n    // useState,\n    useMemo\n} from \"react\";\nimport * as THREE from \"three\";\nimport {\n    Canvas,\n    extend as extendThree,\n    useFrame,\n    // useLoader,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\n// import { useSpring, a } from 'react-spring/three';\n\n// Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\nimport { EffectComposer } from \"./resources/postprocessing/EffectComposer\";\nimport { RenderPass } from \"./resources/postprocessing/RenderPass\";\nimport { GlitchPass } from \"./resources/postprocessing/GlitchPass\";\nextendThree({ EffectComposer, RenderPass, GlitchPass });\n\nimport TextLoop from \"../TextLoop\";\n\n\n// Cast the lighting\nconst Lighting = () => {\n    const { mouse } = useThree();\n    const light = useRef();\n    \n    useFrame(() => {\n        light.current.position.set( mouse.x / 20, -mouse.y / 20, 60 )\n    });\n\n    console.log('mouse.x / 20 --> ', mouse.x);\n\n    console.log('light --> ', light);\n\n    return (\n        <>\n            {/* <pointLight \n                ref={light}  \n                color=\"#ff0000\" \n                position={[ -2, 0, 60 ]}  \n                distance={0}  \n                intensity={1.5} \n                decay={2}\n            /> */}\n            {/* <spotLight \n                ref={light}  \n                color=\"#ff0000\" \n                position={[ -2, 0, 60 ]}  \n                distance={0}  \n                angle={1.05}\n                intensity={1.5} \n                decay={2}\n            /> */}\n            \n            <directionalLight\n                ref={light} \n                // position={[ -2, 0, 60 ]}  \n                intensity={1.1}  \n                color=\"#eeeeee\" \n            /> \n           \n        </>\n    );\n};\n\n// // This renders text via canvas and projects it as a sprite\n// const Text = ({ opacity, color = 'white', fontSize = 410 }) => {\n//     return (\n//         <a.sprite scale={[ 1, 1, 1 ]} >\n//             <a.spriteMaterial attach=\"material\" transparent opacity={opacity}>\n//                 <canvasTexture attach=\"map\"   premultiplyAlpha   />\n//             </a.spriteMaterial>\n//         </a.sprite>\n//     )\n// }\n\n// The canvas houses this function, the scene. Scene is where the elements come together.\nconst SmokePuff = ({ geometry, material }) => {\n    let smokePuffRef = useRef();\n    // let tenToHundred = Math.random() * 100; // 10 - 99.99\n    // let speed = 0.01 + Math.random() / 200; // 0.1 - 0.19\n    // const cosWave = (Math.cos(tenToHundred) / 3) - 1.1;  // a cosign wave.  ~ 0.5 - 1.5\n    let factor = 1 + Math.random() * 2;  // ~ 1-3\n    let xFactor = -100 + Math.random() * 200;  // -100 - 100\n    let yFactor = -100 + Math.random() * 200;  // -100 - 100\n    let zFactor = 10 + Math.random() * 10;  //  10 - 20\n    \n    const getRandomArbitrary = (min, max) => Math.random() * (max - min) + min;\n    let randomFactor = getRandomArbitrary(1.1, 2);\n    \n    useFrame(({ clock }) => {\n        // tenToHundred += speed; // tenToHundred = tenToHundred + speed, plus it sets a unique new version of tenToHundred.\n        // let delta = clock.getDelta();  // Change in clock. Something like 0.0001 - 0.0099\n        let slowRotation = ((clock.elapsedTime * (0.017)) * randomFactor) + xFactor;  // starts at ~0.0001 + xFactor and goes slow\n        let slowGrowth = (Math.tanh(clock.elapsedTime / 18) + 3);\n\n        smokePuffRef.current.scale.set(slowGrowth, slowGrowth, 2);\n        smokePuffRef.current.rotation.z = slowRotation;\n        smokePuffRef.current.position.set(\n            xFactor * factor,\n            yFactor * factor,\n            zFactor\n        );\n    });\n\n    return <mesh  ref={smokePuffRef} material={material} geometry={geometry} />;\n}\n\nconst GenerateSmoke = () => {\n    const [ geometryRef, geometry ] = useResource();\n    const [ materialRef, material ] = useResource();\n    const url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n    const texture = useMemo(() => new THREE.TextureLoader().load(url), [url]);\n    \n    return (\n        <>\n            \n\n            <planeGeometry \n                ref={geometryRef} \n                attach=\"geometry\"   \n                args={[200, 200]}\n                \n            />\n            <meshLambertMaterial \n                ref={materialRef}\n                attach=\"material\" \n                color=\"#ffffff\"\n                transparent\n                opacity={0.1}\n            >\n                <primitive attach=\"map\" object={texture} />\n            </meshLambertMaterial>\n\n            {geometry && new Array(33).fill().map((_, index) => (\n                <SmokePuff\n                    key={index}\n                    material={material}\n                    geometry={geometry}\n\n                />\n            ))}\n        </>\n    );\n}\n\n// This is the canvas. It's the lowest level element in the three/webGl chain\nconst CanvasicalSmoke = () => {\n\n    return (\n        <>\n            <Canvas\n                className=\"container block__three-container\"\n                camera={{\n                    fov: 75,\n                    aspect: 0.5,\n                    near: 1,\n                    far: 10000,\n                    position: [0, 0, 600]\n                }}\n            >\n                <Lighting />\n                <GenerateSmoke />\n                {/* <Text opacity={0.9}  color=\"black\" fontSize={150} ></Text> */}\n            </Canvas>\n            <TextLoop  />\n        </>\n    );\n};\n\nexport default CanvasicalSmoke;\n\n\n"]},"metadata":{},"sourceType":"module"}