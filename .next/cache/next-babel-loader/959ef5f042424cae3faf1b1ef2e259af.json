{"ast":null,"code":"var _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/dnd-draglayer/CustomDragLayer.jsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { DragLayer } from \"react-dnd\";\nimport ItemTypes from \"./ItemTypes\";\nimport BoxDragPreview from \"./BoxDragPreview\";\nimport snapToGrid from \"./snapToGrid\";\n\nfunction getItemStyles(props) {\n  const {\n    initialOffset,\n    currentOffset\n  } = props;\n\n  if (!initialOffset || !currentOffset) {\n    return {\n      display: \"none\"\n    };\n  }\n\n  let {\n    x,\n    y\n  } = currentOffset;\n\n  if (props.snapToGrid) {\n    x -= initialOffset.x;\n    y -= initialOffset.y;\n    [x, y] = snapToGrid(x, y);\n    x += initialOffset.x;\n    y += initialOffset.y;\n  }\n\n  const transform = `translate(${x}px, ${y}px)`;\n  return {\n    transform,\n    WebkitTransform: transform\n  };\n}\n\nconst CustomDragLayer = props => {\n  const {\n    item,\n    itemType,\n    isDragging\n  } = props;\n\n  const renderItem = () => {\n    switch (itemType) {\n      case ItemTypes.BOX:\n        return __jsx(BoxDragPreview, {\n          title: item.title,\n          image: item.image,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        });\n\n      default:\n        return null;\n    }\n  };\n\n  if (!isDragging) {\n    return null;\n  }\n\n  return __jsx(\"section\", {\n    className: \"section__custom-drag-layer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    style: getItemStyles(props),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, renderItem()));\n};\n\nexport default DragLayer(monitor => ({\n  item: monitor.getItem(),\n  itemType: monitor.getItemType(),\n  initialOffset: monitor.getInitialSourceClientOffset(),\n  currentOffset: monitor.getSourceClientOffset(),\n  isDragging: monitor.isDragging()\n}))(CustomDragLayer);","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/dnd-draglayer/CustomDragLayer.jsx"],"names":["React","DragLayer","ItemTypes","BoxDragPreview","snapToGrid","getItemStyles","props","initialOffset","currentOffset","display","x","y","transform","WebkitTransform","CustomDragLayer","item","itemType","isDragging","renderItem","BOX","title","image","monitor","getItem","getItemType","getInitialSourceClientOffset","getSourceClientOffset"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC1B,QAAM;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,MAAmCF,KAAzC;;AACA,MAAI,CAACC,aAAD,IAAkB,CAACC,aAAvB,EAAsC;AAClC,WAAO;AACHC,MAAAA,OAAO,EAAE;AADN,KAAP;AAGH;;AACD,MAAI;AAAEC,IAAAA,CAAF;AAAKC,IAAAA;AAAL,MAAWH,aAAf;;AACA,MAAIF,KAAK,CAACF,UAAV,EAAsB;AAClBM,IAAAA,CAAC,IAAIH,aAAa,CAACG,CAAnB;AACAC,IAAAA,CAAC,IAAIJ,aAAa,CAACI,CAAnB;AACA,KAACD,CAAD,EAAIC,CAAJ,IAASP,UAAU,CAACM,CAAD,EAAIC,CAAJ,CAAnB;AACAD,IAAAA,CAAC,IAAIH,aAAa,CAACG,CAAnB;AACAC,IAAAA,CAAC,IAAIJ,aAAa,CAACI,CAAnB;AACH;;AACD,QAAMC,SAAS,GAAI,aAAYF,CAAE,OAAMC,CAAE,KAAzC;AACA,SAAO;AACHC,IAAAA,SADG;AAEHC,IAAAA,eAAe,EAAED;AAFd,GAAP;AAIH;;AAED,MAAME,eAAe,GAAGR,KAAK,IAAI;AAC7B,QAAM;AAAES,IAAAA,IAAF;AAAQC,IAAAA,QAAR;AAAkBC,IAAAA;AAAlB,MAAiCX,KAAvC;;AAEA,QAAMY,UAAU,GAAG,MAAM;AACrB,YAAQF,QAAR;AACI,WAAKd,SAAS,CAACiB,GAAf;AACI,eAAO,MAAC,cAAD;AAAgB,UAAA,KAAK,EAAEJ,IAAI,CAACK,KAA5B;AAAmC,UAAA,KAAK,EAAEL,IAAI,CAACM,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;;AACJ;AACI,eAAO,IAAP;AAJR;AAMH,GAPD;;AAQA,MAAI,CAACJ,UAAL,EAAiB;AACb,WAAO,IAAP;AACH;;AACD,SACI;AAAS,IAAA,SAAS,EAAC,4BAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,KAAK,EAAEZ,aAAa,CAACC,KAAD,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmCY,UAAU,EAA7C,CADJ,CADJ;AAKH,CAnBD;;AAqBA,eAAejB,SAAS,CAACqB,OAAO,KAAK;AACjCP,EAAAA,IAAI,EAAEO,OAAO,CAACC,OAAR,EAD2B;AAEjCP,EAAAA,QAAQ,EAAEM,OAAO,CAACE,WAAR,EAFuB;AAGjCjB,EAAAA,aAAa,EAAEe,OAAO,CAACG,4BAAR,EAHkB;AAIjCjB,EAAAA,aAAa,EAAEc,OAAO,CAACI,qBAAR,EAJkB;AAKjCT,EAAAA,UAAU,EAAEK,OAAO,CAACL,UAAR;AALqB,CAAL,CAAR,CAAT,CAMXH,eANW,CAAf","sourcesContent":["import React from \"react\";\nimport { DragLayer } from \"react-dnd\";\nimport ItemTypes from \"./ItemTypes\";\nimport BoxDragPreview from \"./BoxDragPreview\";\nimport snapToGrid from \"./snapToGrid\";\n\nfunction getItemStyles(props) {\n    const { initialOffset, currentOffset } = props;\n    if (!initialOffset || !currentOffset) {\n        return {\n            display: \"none\"\n        };\n    }\n    let { x, y } = currentOffset;\n    if (props.snapToGrid) {\n        x -= initialOffset.x;\n        y -= initialOffset.y;\n        [x, y] = snapToGrid(x, y);\n        x += initialOffset.x;\n        y += initialOffset.y;\n    }\n    const transform = `translate(${x}px, ${y}px)`;\n    return {\n        transform,\n        WebkitTransform: transform\n    };\n}\n\nconst CustomDragLayer = props => {\n    const { item, itemType, isDragging } = props;\n\n    const renderItem = () => {\n        switch (itemType) {\n            case ItemTypes.BOX:\n                return <BoxDragPreview title={item.title} image={item.image} />;\n            default:\n                return null;\n        }\n    }\n    if (!isDragging) {\n        return null;\n    }\n    return (\n        <section className=\"section__custom-drag-layer\">\n            <div style={getItemStyles(props)}>{renderItem()}</div>\n        </section>\n    );\n};\n\nexport default DragLayer(monitor => ({\n    item: monitor.getItem(),\n    itemType: monitor.getItemType(),\n    initialOffset: monitor.getInitialSourceClientOffset(),\n    currentOffset: monitor.getSourceClientOffset(),\n    isDragging: monitor.isDragging()\n}))(CustomDragLayer);\n"]},"metadata":{},"sourceType":"module"}