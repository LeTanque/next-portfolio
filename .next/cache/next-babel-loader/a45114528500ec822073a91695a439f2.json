{"ast":null,"code":"/**\n * @author Don McCurdy / https://www.donmccurdy.com\n */\nvar LoaderUtils = {\n  decodeText: function decodeText(array) {\n    if (typeof TextDecoder !== 'undefined') {\n      return new TextDecoder().decode(array);\n    } // Avoid the String.fromCharCode.apply(null, array) shortcut, which\n    // throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\n    var s = '';\n\n    for (var i = 0, il = array.length; i < il; i++) {\n      // Implicitly assumes little-endian.\n      s += String.fromCharCode(array[i]);\n    }\n\n    try {\n      // merges multi-byte utf-8 characters.\n      return decodeURIComponent(escape(s));\n    } catch (e) {\n      // see #16358\n      return s;\n    }\n  },\n  extractUrlBase: function extractUrlBase(url) {\n    var index = url.lastIndexOf('/');\n    if (index === -1) return './';\n    return url.substr(0, index + 1);\n  }\n};\nexport { LoaderUtils };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/loaders/LoaderUtils.js"],"names":["LoaderUtils","decodeText","array","TextDecoder","decode","s","i","il","length","String","fromCharCode","decodeURIComponent","escape","e","extractUrlBase","url","index","lastIndexOf","substr"],"mappings":"AAAA;;;AAIA,IAAIA,WAAW,GAAG;AAEjBC,EAAAA,UAAU,EAAE,oBAAWC,KAAX,EAAmB;AAE9B,QAAK,OAAOC,WAAP,KAAuB,WAA5B,EAA0C;AAEzC,aAAO,IAAIA,WAAJ,GAAkBC,MAAlB,CAA0BF,KAA1B,CAAP;AAEA,KAN6B,CAQ9B;AACA;;;AAEA,QAAIG,CAAC,GAAG,EAAR;;AAEA,SAAM,IAAIC,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGL,KAAK,CAACM,MAA5B,EAAoCF,CAAC,GAAGC,EAAxC,EAA4CD,CAAC,EAA7C,EAAmD;AAElD;AACAD,MAAAA,CAAC,IAAII,MAAM,CAACC,YAAP,CAAqBR,KAAK,CAAEI,CAAF,CAA1B,CAAL;AAEA;;AAED,QAAI;AAEH;AAEA,aAAOK,kBAAkB,CAAEC,MAAM,CAAEP,CAAF,CAAR,CAAzB;AAEA,KAND,CAME,OAAQQ,CAAR,EAAY;AAAE;AAEf,aAAOR,CAAP;AAEA;AAED,GAlCgB;AAoCjBS,EAAAA,cAAc,EAAE,wBAAWC,GAAX,EAAiB;AAEhC,QAAIC,KAAK,GAAGD,GAAG,CAACE,WAAJ,CAAiB,GAAjB,CAAZ;AAEA,QAAKD,KAAK,KAAK,CAAE,CAAjB,EAAqB,OAAO,IAAP;AAErB,WAAOD,GAAG,CAACG,MAAJ,CAAY,CAAZ,EAAeF,KAAK,GAAG,CAAvB,CAAP;AAEA;AA5CgB,CAAlB;AAgDA,SAAShB,WAAT","sourcesContent":["/**\n * @author Don McCurdy / https://www.donmccurdy.com\n */\n\nvar LoaderUtils = {\n\n\tdecodeText: function ( array ) {\n\n\t\tif ( typeof TextDecoder !== 'undefined' ) {\n\n\t\t\treturn new TextDecoder().decode( array );\n\n\t\t}\n\n\t\t// Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\t\tvar s = '';\n\n\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t// Implicitly assumes little-endian.\n\t\t\ts += String.fromCharCode( array[ i ] );\n\n\t\t}\n\n\t\ttry {\n\n\t\t\t// merges multi-byte utf-8 characters.\n\n\t\t\treturn decodeURIComponent( escape( s ) );\n\n\t\t} catch ( e ) { // see #16358\n\n\t\t\treturn s;\n\n\t\t}\n\n\t},\n\n\textractUrlBase: function ( url ) {\n\n\t\tvar index = url.lastIndexOf( '/' );\n\n\t\tif ( index === - 1 ) return './';\n\n\t\treturn url.substr( 0, index + 1 );\n\n\t}\n\n};\n\nexport { LoaderUtils };\n"]},"metadata":{},"sourceType":"module"}