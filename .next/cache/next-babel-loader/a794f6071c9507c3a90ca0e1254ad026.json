{"ast":null,"code":"var _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef, useState, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { Canvas, extend as extendThree, useFrame // useLoader,\n, useResource, useThree } from \"react-three-fiber\";\nimport { useSpring, a } from 'react-spring/three'; // Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\n\nimport { EffectComposer } from \"./resources/postprocessing/EffectComposer\";\nimport { RenderPass } from \"./resources/postprocessing/RenderPass\";\nimport { GlitchPass } from \"./resources/postprocessing/GlitchPass\";\nextendThree({\n  EffectComposer,\n  RenderPass,\n  GlitchPass\n}); // import TextLoop from \"../TextLoop\";\n// Cast the lighting\n\nconst Lighting = () => {\n  const {\n    mouse\n  } = useThree();\n  const light = useRef();\n  useFrame(() => {\n    light.current.position.set(mouse.x / 20, -mouse.y / 20, 0);\n  });\n  return __jsx(React.Fragment, null, __jsx(\"directionalLight\", {\n    position: [-2, 0, 30],\n    intensity: 0.5,\n    color: \"#ffffff\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), __jsx(\"pointLight\", {\n    ref: light,\n    distance: 50,\n    intensity: 1.5,\n    color: \"#ffffff\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }));\n}; // This renders text via canvas and projects it as a sprite\n\n\nconst Text = ({\n  children,\n  position,\n  opacity,\n  color = 'white',\n  fontSize = 410\n}) => {\n  const {\n    size: {\n      width,\n      height\n    },\n    viewport: {\n      width: viewportWidth,\n      height: viewportHeight\n    }\n  } = useThree();\n  const scale = viewportWidth > viewportHeight ? viewportWidth : viewportHeight;\n  const canvas = useMemo(() => {\n    const canvas = document.createElement('canvas');\n    canvas.width = canvas.height = 2048;\n    const context = canvas.getContext('2d');\n    context.font = `bold ${fontSize}px -apple-system, BlinkMacSystemFont, avenir next, avenir, helvetica neue, helvetica, ubuntu, roboto, noto, segoe ui, arial, sans-serif`;\n    context.textAlign = 'center';\n    context.textBaseline = 'middle';\n    context.fillStyle = color;\n    context.fillText(children, 1024, 1024 - 410 / 2);\n    return canvas;\n  }, [children, width, height]);\n  return __jsx(a.sprite, {\n    scale: [scale, scale, 1],\n    position: position,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, __jsx(a.spriteMaterial, {\n    attach: \"material\",\n    transparent: true,\n    opacity: opacity,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, __jsx(\"canvasTexture\", {\n    attach: \"map\",\n    image: canvas,\n    premultiplyAlpha: true,\n    onUpdate: s => s.needsUpdate = true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  })));\n}; // The canvas houses this function, the scene. Scene is where the elements come together.\n\n\nconst SmokePuff = ({\n  geometry,\n  material\n}) => {\n  let smokePuffRef = useRef(); // let tenToHundred = Math.random() * 100; // 10 - 99.99\n  // let speed = 0.01 + Math.random() / 200; // 0.1 - 0.19\n  // const cosWave = (Math.cos(tenToHundred) / 3) - 1.1;  // a cosign wave.  ~ 0.5 - 1.5\n\n  let factor = 1 + Math.random() * 2; // ~ 1-3\n\n  let xFactor = -100 + Math.random() * 200; // -100 - 100\n\n  let yFactor = -100 + Math.random() * 200; // -100 - 100\n\n  let zFactor = 10 + Math.random() * 10; //  10 - 20\n\n  const getRandomArbitrary = (min, max) => Math.random() * (max - min) + min;\n\n  let randomFactor = getRandomArbitrary(1.1, 2);\n  useFrame(({\n    clock\n  }) => {\n    // tenToHundred += speed; // tenToHundred = tenToHundred + speed, plus it sets a unique new version of tenToHundred.\n    // let delta = clock.getDelta();  // Change in clock. Something like 0.0001 - 0.0099\n    let slowRotation = clock.elapsedTime * 0.017 * randomFactor + xFactor; // starts at ~0.0001 + xFactor and goes slow\n\n    let slowGrowth = Math.tanh(clock.elapsedTime / 18) + 3;\n    smokePuffRef.current.scale.set(slowGrowth, slowGrowth, 2);\n    smokePuffRef.current.rotation.z = slowRotation;\n    smokePuffRef.current.position.set(xFactor * factor, yFactor * factor, zFactor);\n  });\n  return __jsx(\"mesh\", {\n    ref: smokePuffRef,\n    material: material,\n    geometry: geometry,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  });\n};\n\nconst GenerateSmoke = () => {\n  const [geometryRef, geometry] = useResource();\n  const [materialRef, material] = useResource();\n  const url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n  const texture = useMemo(() => new THREE.TextureLoader().load(url), [url]);\n  return __jsx(React.Fragment, null, __jsx(Lighting, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }), __jsx(\"planeGeometry\", {\n    ref: geometryRef,\n    attach: \"geometry\",\n    args: [200, 200],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }), __jsx(\"meshLambertMaterial\", {\n    ref: materialRef,\n    attach: \"material\",\n    color: \"#ccbbee\",\n    transparent: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, __jsx(\"primitive\", {\n    attach: \"map\",\n    object: texture,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  })), geometry && new Array(33).fill().map((_, index) => __jsx(SmokePuff, {\n    key: index,\n    material: material,\n    geometry: geometry,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  })));\n}; // This is the canvas. It's the lowest level element in the three/webGl chain\n\n\nconst CanvasicalSmoke = () => {\n  const {\n    size\n  } = useThree();\n  const [{\n    top,\n    mouse\n  }, set] = useSpring(() => ({\n    top: 0,\n    mouse: [0, 0]\n  }));\n  const scrollMax = size.height * 4.5;\n  return __jsx(React.Fragment, null, __jsx(Canvas, {\n    className: \"container block__three-container\",\n    camera: {\n      fov: 75,\n      aspect: 0.5,\n      near: 1,\n      far: 10000,\n      position: [0, 0, 600]\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, __jsx(GenerateSmoke, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }), __jsx(Text, {\n    opacity: top.interpolate([0, 200], [1, 0]),\n    position: top.interpolate(top => [0, -1 + top / 200, 0]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, \"lorem\"), __jsx(Text, {\n    position: top.interpolate(top => [0, -20 + top * 10 / scrollMax * 2, 0]),\n    color: \"black\",\n    fontSize: 150,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, \"Ipsum\")));\n};\n\nexport default CanvasicalSmoke; // // Creates a fullscreen colored plane\n// const Plane = () => {\n//     return (\n//         <mesh >\n//             <planeGeometry  attach=\"geometry\"  args={[ 32, 32, 32, 32 ]} />\n//             <meshPhysicalMaterial  attach=\"material\"  color=\"#ffffff\"  />\n//         </mesh>\n//     )\n// }\n// // A light bar\n// const LightBar = () => {\n//     // const lightBar = useRef();\n//     return (\n//         <>\n//             <mesh\n//                 // ref={lightBar}\n//             >\n//                 <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n//                 <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n//             </mesh>\n//         </>\n//     )\n// }","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx"],"names":["extend","extendThree","GlitchPass","Lighting","mouse","useThree","light","useRef","useFrame","Text","color","fontSize","size","height","viewport","width","viewportHeight","scale","viewportWidth","canvas","useMemo","document","context","s","SmokePuff","material","smokePuffRef","factor","Math","xFactor","yFactor","zFactor","getRandomArbitrary","max","randomFactor","clock","slowRotation","slowGrowth","GenerateSmoke","useResource","url","texture","THREE","geometry","CanvasicalSmoke","useSpring","top","scrollMax","fov","aspect","near","far","position"],"mappings":"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","sourcesContent":["import React, {\n    useCallback,\n    useEffect,\n    useRef,\n    useState,\n    useMemo\n} from \"react\";\nimport * as THREE from \"three\";\nimport {\n    Canvas,\n    extend as extendThree,\n    useFrame,\n    // useLoader,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\nimport { useSpring, a } from 'react-spring/three';\n\n// Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\nimport { EffectComposer } from \"./resources/postprocessing/EffectComposer\";\nimport { RenderPass } from \"./resources/postprocessing/RenderPass\";\nimport { GlitchPass } from \"./resources/postprocessing/GlitchPass\";\nextendThree({ EffectComposer, RenderPass, GlitchPass });\n\n// import TextLoop from \"../TextLoop\";\n\n\n// Cast the lighting\nconst Lighting = () => {\n    const { mouse } = useThree();\n    const light = useRef();\n    \n    useFrame(() => {\n        light.current.position.set( mouse.x / 20, -mouse.y / 20, 0 )\n    });\n\n    return (\n        <>\n            <directionalLight\n                position={[ -2, 0, 30 ]}  intensity={0.5}  color=\"#ffffff\" \n            />\n            <pointLight \n                ref={light} distance={50} intensity={1.5} color=\"#ffffff\" \n            />\n        </>\n    );\n};\n\n// This renders text via canvas and projects it as a sprite\nconst Text = ({ children, position, opacity, color = 'white', fontSize = 410 }) => {\n    const {\n        size: { width, height },\n        viewport: { width: viewportWidth, height: viewportHeight }\n    } = useThree()\n\n    const scale = viewportWidth > viewportHeight ? viewportWidth : viewportHeight\n    const canvas = useMemo(() => {\n        const canvas = document.createElement('canvas')\n        canvas.width = canvas.height = 2048\n        const context = canvas.getContext('2d')\n        context.font = `bold ${fontSize}px -apple-system, BlinkMacSystemFont, avenir next, avenir, helvetica neue, helvetica, ubuntu, roboto, noto, segoe ui, arial, sans-serif`\n        context.textAlign = 'center'\n        context.textBaseline = 'middle'\n        context.fillStyle = color\n        context.fillText(children, 1024, 1024 - 410 / 2)\n        return canvas\n    }, [children, width, height])\n\n    return (\n        <a.sprite scale={[scale, scale, 1]} position={position}>\n            <a.spriteMaterial attach=\"material\" transparent opacity={opacity}>\n                <canvasTexture attach=\"map\" image={canvas} premultiplyAlpha onUpdate={s => (s.needsUpdate = true)} />\n            </a.spriteMaterial>\n        </a.sprite>\n    )\n}\n\n// The canvas houses this function, the scene. Scene is where the elements come together.\nconst SmokePuff = ({ geometry, material }) => {\n    let smokePuffRef = useRef();\n    // let tenToHundred = Math.random() * 100; // 10 - 99.99\n    // let speed = 0.01 + Math.random() / 200; // 0.1 - 0.19\n    // const cosWave = (Math.cos(tenToHundred) / 3) - 1.1;  // a cosign wave.  ~ 0.5 - 1.5\n    let factor = 1 + Math.random() * 2;  // ~ 1-3\n    let xFactor = -100 + Math.random() * 200;  // -100 - 100\n    let yFactor = -100 + Math.random() * 200;  // -100 - 100\n    let zFactor = 10 + Math.random() * 10;  //  10 - 20\n    \n    const getRandomArbitrary = (min, max) => Math.random() * (max - min) + min;\n    let randomFactor = getRandomArbitrary(1.1, 2);\n    \n    useFrame(({ clock }) => {\n        // tenToHundred += speed; // tenToHundred = tenToHundred + speed, plus it sets a unique new version of tenToHundred.\n        // let delta = clock.getDelta();  // Change in clock. Something like 0.0001 - 0.0099\n        let slowRotation = ((clock.elapsedTime * (0.017)) * randomFactor) + xFactor;  // starts at ~0.0001 + xFactor and goes slow\n        let slowGrowth = (Math.tanh(clock.elapsedTime / 18) + 3);\n\n        smokePuffRef.current.scale.set(slowGrowth, slowGrowth, 2);\n        smokePuffRef.current.rotation.z = slowRotation;\n        smokePuffRef.current.position.set(\n            xFactor * factor,\n            yFactor * factor,\n            zFactor\n        );\n    });\n\n    return <mesh  ref={smokePuffRef} material={material} geometry={geometry}  />;\n}\n\nconst GenerateSmoke = () => {\n    const [geometryRef, geometry] = useResource();\n    const [materialRef, material] = useResource();\n    const url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n    const texture = useMemo(() => new THREE.TextureLoader().load(url), [url]);\n    \n    return (\n        <>\n            <Lighting />\n\n            <planeGeometry \n                ref={geometryRef} \n                attach=\"geometry\"   \n                args={[200, 200]} \n            />\n            <meshLambertMaterial \n                ref={materialRef}\n                attach=\"material\" \n                color=\"#ccbbee\"\n                transparent\n            >\n                <primitive attach=\"map\" object={texture} />\n            </meshLambertMaterial>\n\n            {geometry && new Array(33).fill().map((_, index) => (\n                <SmokePuff\n                    key={index}\n                    material={material}\n                    geometry={geometry}\n\n                />\n            ))}\n        </>\n    );\n}\n\n\n// This is the canvas. It's the lowest level element in the three/webGl chain\nconst CanvasicalSmoke = () => {\n    const { size } = useThree();\n    const [ { top, mouse }, set ] = useSpring(() => ({ top: 0, mouse: [0, 0] }));\n    const scrollMax = size.height * 4.5;\n\n    return (\n        <>\n            <Canvas\n                className=\"container block__three-container\"\n                camera={{\n                    fov: 75,\n                    aspect: 0.5,\n                    near: 1,\n                    far: 10000,\n                    position: [0, 0, 600]\n                }}\n            >\n                <GenerateSmoke />\n                <Text opacity={top.interpolate([0, 200], [1, 0])} position={top.interpolate(top => [0, -1 + top / 200, 0])}>\n                    lorem\n                </Text>\n                <Text position={top.interpolate(top => [0, -20 + ((top * 10) / scrollMax) * 2, 0])} color=\"black\" fontSize={150}>\n                    Ipsum\n                </Text>\n            </Canvas>\n            {/* <TextLoop  /> */}\n        </>\n    );\n};\n\nexport default CanvasicalSmoke;\n\n// // Creates a fullscreen colored plane\n// const Plane = () => {\n//     return (\n//         <mesh >\n//             <planeGeometry  attach=\"geometry\"  args={[ 32, 32, 32, 32 ]} />\n//             <meshPhysicalMaterial  attach=\"material\"  color=\"#ffffff\"  />\n//         </mesh>\n//     )\n// }\n\n// // A light bar\n// const LightBar = () => {\n//     // const lightBar = useRef();\n\n//     return (\n//         <>\n//             <mesh\n//                 // ref={lightBar}\n//             >\n//                 <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n//                 <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n//             </mesh>\n//         </>\n//     )\n// }\n"]},"metadata":{},"sourceType":"module"}