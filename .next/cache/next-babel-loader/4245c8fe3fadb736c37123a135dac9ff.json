{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/SmokeContainer.jsx\";\nvar __jsx = React.createElement;\nimport * as THREE from 'three';\nimport React, { useState, useRef, useContext, useEffect, useCallback, useMemo } from 'react';\nimport { apply as extendSpring, useSpring, a, interpolate } from 'react-spring/three';\nimport { extend as extendThree, Canvas, useFrame, useThree } from 'react-three-fiber';\nimport styled from 'styled-components';\nimport data from '../../resources/data'; // Import and register postprocessing classes as three-native-elements\n\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { GlitchPass } from '../../resources/postprocessing/GlitchPass';\nextendSpring({\n  EffectComposer,\n  RenderPass,\n  GlitchPass\n});\nextendThree({\n  EffectComposer,\n  RenderPass,\n  GlitchPass\n});\n/** This component loads an image and projects it onto a plane */\n\nfunction Image(_ref) {\n  let {\n    url,\n    opacity,\n    scale\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"url\", \"opacity\", \"scale\"]);\n\n  const texture = useMemo(() => new THREE.TextureLoader().load(url), [url]);\n  const {\n    0: hovered,\n    1: setHover\n  } = useState(false);\n  const hover = useCallback(() => setHover(true), []);\n  const unhover = useCallback(() => setHover(false), []);\n  const {\n    factor\n  } = useSpring({\n    factor: hovered ? 1.1 : 1\n  });\n  return __jsx(a.mesh, _extends({}, props, {\n    onPointerOver: hover,\n    onPointerOut: unhover,\n    scale: factor.interpolate(f => [scale * f, scale * f, 1]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }), __jsx(\"planeBufferGeometry\", {\n    attach: \"geometry\",\n    args: [5, 5],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }), __jsx(a.meshLambertMaterial, {\n    attach: \"material\",\n    transparent: true,\n    opacity: opacity,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, __jsx(\"primitive\", {\n    attach: \"map\",\n    object: texture,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  })));\n}\n/** This renders text via canvas and projects it as a sprite */\n\n\nfunction Text({\n  children,\n  position,\n  opacity,\n  color = 'white',\n  fontSize = 410\n}) {\n  const {\n    camera,\n    size: {\n      width,\n      height\n    },\n    viewport: {\n      width: viewportWidth,\n      height: viewportHeight\n    }\n  } = useThree();\n  const scale = viewportWidth > viewportHeight ? viewportWidth : viewportHeight;\n  const canvas = useMemo(() => {\n    const canvas = document.createElement('canvas');\n    canvas.width = canvas.height = 2048;\n    const context = canvas.getContext('2d');\n    context.font = `bold ${fontSize}px -apple-system, BlinkMacSystemFont, avenir next, avenir, helvetica neue, helvetica, ubuntu, roboto, noto, segoe ui, arial, sans-serif`;\n    context.textAlign = 'center';\n    context.textBaseline = 'middle';\n    context.fillStyle = color;\n    context.fillText(children, 1024, 1024 - 410 / 2);\n    return canvas;\n  }, [children, width, height]);\n  return __jsx(a.sprite, {\n    scale: [scale, scale, 1],\n    position: position,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, __jsx(a.spriteMaterial, {\n    attach: \"material\",\n    transparent: true,\n    opacity: opacity,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, __jsx(\"canvasTexture\", {\n    attach: \"map\",\n    image: canvas,\n    premultiplyAlpha: true,\n    onUpdate: s => s.needsUpdate = true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  })));\n}\n/** This component creates a fullscreen colored plane */\n\n\nfunction Background({\n  color\n}) {\n  const {\n    size,\n    viewport\n  } = useThree();\n  console.log(viewport);\n  return __jsx(\"mesh\", {\n    scale: [viewport.width, viewport.height, 1],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, __jsx(\"planeBufferGeometry\", {\n    attach: \"geometry\",\n    args: [1, 1],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), __jsx(a.meshBasicMaterial, {\n    attach: \"material\",\n    color: color,\n    depthTest: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }));\n}\n/** This component rotates a bunch of stars */\n\n\nfunction Stars({\n  position\n}) {\n  let group = useRef();\n  let theta = 0;\n  useFrame(() => {\n    const r = 5 * Math.sin(THREE.Math.degToRad(theta += 0.01));\n    const s = Math.cos(THREE.Math.degToRad(theta * 2));\n    group.current.rotation.set(r, r, r);\n    group.current.scale.set(s, s, s);\n  });\n  const {\n    0: geo,\n    1: mat,\n    2: coords\n  } = useMemo(() => {\n    const geo = new THREE.SphereBufferGeometry(1, 10, 10);\n    const mat = new THREE.MeshBasicMaterial({\n      color: new THREE.Color('peachpuff')\n    });\n    const coords = new Array(1000).fill().map(i => [Math.random() * 800 - 400, Math.random() * 800 - 400, Math.random() * 800 - 400]);\n    return [geo, mat, coords];\n  }, []);\n  return __jsx(a.group, {\n    ref: group,\n    position: position,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, coords.map(([p1, p2, p3], i) => __jsx(\"mesh\", {\n    key: i,\n    geometry: geo,\n    material: mat,\n    position: [p1, p2, p3],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  })));\n}\n/** This component creates a glitch effect */\n\n\nconst Effects = React.memo(({\n  factor\n}) => {\n  const {\n    gl,\n    scene,\n    camera,\n    size\n  } = useThree();\n  const composer = useRef();\n  useEffect(() => void composer.current.setSize(size.width, size.height), [size]); // This takes over as the main render-loop (when 2nd arg is set to true)\n\n  useFrame(() => composer.current.render(), 1);\n  return __jsx(\"effectComposer\", {\n    ref: composer,\n    args: [gl],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, __jsx(\"renderPass\", {\n    attachArray: \"passes\",\n    args: [scene, camera],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }), __jsx(a.glitchPass, {\n    attachArray: \"passes\",\n    renderToScreen: true,\n    factor: factor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }));\n});\n/** This component creates a bunch of parallaxed images */\n\nfunction Images({\n  top,\n  mouse,\n  scrollMax\n}) {\n  return data.map(([url, x, y, factor, z, scale], index) => __jsx(Image, {\n    key: index,\n    url: url,\n    scale: scale,\n    opacity: top.interpolate([0, 500], [0, 1]),\n    position: interpolate([top, mouse], (top, mouse) => [-mouse[0] * factor / 50000 + x, mouse[1] * factor / 50000 + y * 1.15 + top * factor / scrollMax * 2, z + top / 2000]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }));\n}\n/** This component maintains the scene */\n\n\nfunction Scene({\n  top,\n  mouse\n}) {\n  const {\n    size\n  } = useThree();\n  const scrollMax = size.height * 4.5;\n  return __jsx(React.Fragment, null, __jsx(a.spotLight, {\n    intensity: 1.2,\n    color: \"white\",\n    position: mouse.interpolate((x, y) => [x / 100, -y / 100, 6.5]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }), __jsx(Effects, {\n    factor: top.interpolate([0, 150], [1, 0]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }), __jsx(Background, {\n    color: top.interpolate([0, scrollMax * 0.25, scrollMax * 0.8, scrollMax], ['#27282F', '#247BA0', '#70C1B3', '#f8f3f1']),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }), __jsx(Stars, {\n    position: top.interpolate(top => [0, -1 + top / 20, 0]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }), __jsx(Images, {\n    top: top,\n    mouse: mouse,\n    scrollMax: scrollMax,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }), __jsx(Text, {\n    opacity: top.interpolate([0, 200], [1, 0]),\n    position: top.interpolate(top => [0, -1 + top / 200, 0]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, \"lorem\"), __jsx(Text, {\n    position: top.interpolate(top => [0, -20 + top * 10 / scrollMax * 2, 0]),\n    color: \"black\",\n    fontSize: 150,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, \"Ipsum\"));\n}\n/** Main component */\n\n\nexport default function Main() {\n  // This tiny spring right here controlls all(!) the animations, one for scroll, the other for mouse movement ...\n  const [{\n    top,\n    mouse\n  }, set] = useSpring(() => ({\n    top: 0,\n    mouse: [0, 0]\n  }));\n  const onMouseMove = useCallback(({\n    clientX: x,\n    clientY: y\n  }) => set({\n    mouse: [x - window.innerWidth / 2, y - window.innerHeight / 2]\n  }), []);\n  const onScroll = useCallback(e => set({\n    top: e.target.scrollTop\n  }), []);\n  const {\n    0: events,\n    1: setEvents\n  } = useState({});\n  return __jsx(React.Fragment, null, __jsx(Canvas, {\n    className: \"canvas\",\n    onCreated: ({\n      events\n    }) => setEvents(events),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, __jsx(Scene, {\n    top: top,\n    mouse: mouse,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  })), __jsx(Container, _extends({\n    onScroll: onScroll,\n    onMouseMove: onMouseMove\n  }, events, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    style: {\n      height: '525vh'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  })));\n}\nconst Container = styled.div`\n  position: absolute;\n  overflow: auto;\n  top: 0px;\n  width: 100%;\n  height: 100vh;\n  font-size: 20em;\n  font-weight: 800;\n  line-height: 0.9em;\n`;","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/SmokeContainer.jsx"],"names":["apply","extend","extendSpring","GlitchPass","extendThree","scale","props","texture","useMemo","THREE","setHover","useState","hover","useCallback","unhover","factor","useSpring","hovered","f","color","fontSize","size","height","viewport","width","viewportHeight","useThree","viewportWidth","canvas","document","context","s","console","position","group","useRef","theta","useFrame","r","Math","coords","geo","mat","i","Effects","composer","useEffect","scrollMax","top","interpolate","mouse","y","z","x","onMouseMove","clientX","clientY","set","window","onScroll","e","scrollTop","setEvents","events","Container","styled","div"],"mappings":"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","sourcesContent":["import * as THREE from 'three'\nimport React, { useState, useRef, useContext, useEffect, useCallback, useMemo } from 'react'\nimport { apply as extendSpring, useSpring, a, interpolate } from 'react-spring/three'\nimport { extend as extendThree, Canvas, useFrame, useThree } from 'react-three-fiber'\nimport styled from 'styled-components'\nimport data from '../../resources/data'\n\n// Import and register postprocessing classes as three-native-elements\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\nimport { GlitchPass } from '../../resources/postprocessing/GlitchPass'\n\nextendSpring({ EffectComposer, RenderPass, GlitchPass })\nextendThree({ EffectComposer, RenderPass, GlitchPass })\n\n/** This component loads an image and projects it onto a plane */\nfunction Image({ url, opacity, scale, ...props }) {\n  const texture = useMemo(() => new THREE.TextureLoader().load(url), [url])\n  const [hovered, setHover] = useState(false)\n  const hover = useCallback(() => setHover(true), [])\n  const unhover = useCallback(() => setHover(false), [])\n  const { factor } = useSpring({ factor: hovered ? 1.1 : 1 })\n  return (\n    <a.mesh\n      {...props}\n      onPointerOver={hover}\n      onPointerOut={unhover}\n      scale={factor.interpolate(f => [scale * f, scale * f, 1])}>\n      <planeBufferGeometry attach=\"geometry\" args={[5, 5]} />\n      <a.meshLambertMaterial attach=\"material\" transparent opacity={opacity}>\n        <primitive attach=\"map\" object={texture} />\n      </a.meshLambertMaterial>\n    </a.mesh>\n  )\n}\n\n/** This renders text via canvas and projects it as a sprite */\nfunction Text({ children, position, opacity, color = 'white', fontSize = 410 }) {\n  const {\n    camera,\n    size: { width, height },\n    viewport: { width: viewportWidth, height: viewportHeight },\n  } = useThree()\n  const scale = viewportWidth > viewportHeight ? viewportWidth : viewportHeight\n  const canvas = useMemo(() => {\n    const canvas = document.createElement('canvas')\n    canvas.width = canvas.height = 2048\n    const context = canvas.getContext('2d')\n    context.font = `bold ${fontSize}px -apple-system, BlinkMacSystemFont, avenir next, avenir, helvetica neue, helvetica, ubuntu, roboto, noto, segoe ui, arial, sans-serif`\n    context.textAlign = 'center'\n    context.textBaseline = 'middle'\n    context.fillStyle = color\n    context.fillText(children, 1024, 1024 - 410 / 2)\n    return canvas\n  }, [children, width, height])\n  return (\n    <a.sprite scale={[scale, scale, 1]} position={position}>\n      <a.spriteMaterial attach=\"material\" transparent opacity={opacity}>\n        <canvasTexture attach=\"map\" image={canvas} premultiplyAlpha onUpdate={s => (s.needsUpdate = true)} />\n      </a.spriteMaterial>\n    </a.sprite>\n  )\n}\n\n/** This component creates a fullscreen colored plane */\nfunction Background({ color }) {\n  const { size, viewport } = useThree()\n  console.log(viewport)\n  return (\n    <mesh scale={[viewport.width, viewport.height, 1]}>\n      <planeBufferGeometry attach=\"geometry\" args={[1, 1]} />\n      <a.meshBasicMaterial attach=\"material\" color={color} depthTest={false} />\n    </mesh>\n  )\n}\n\n/** This component rotates a bunch of stars */\nfunction Stars({ position }) {\n  let group = useRef()\n  let theta = 0\n  useFrame(() => {\n    const r = 5 * Math.sin(THREE.Math.degToRad((theta += 0.01)))\n    const s = Math.cos(THREE.Math.degToRad(theta * 2))\n    group.current.rotation.set(r, r, r)\n    group.current.scale.set(s, s, s)\n  })\n  const [geo, mat, coords] = useMemo(() => {\n    const geo = new THREE.SphereBufferGeometry(1, 10, 10)\n    const mat = new THREE.MeshBasicMaterial({ color: new THREE.Color('peachpuff') })\n    const coords = new Array(1000)\n      .fill()\n      .map(i => [Math.random() * 800 - 400, Math.random() * 800 - 400, Math.random() * 800 - 400])\n    return [geo, mat, coords]\n  }, [])\n  return (\n    <a.group ref={group} position={position}>\n      {coords.map(([p1, p2, p3], i) => (\n        <mesh key={i} geometry={geo} material={mat} position={[p1, p2, p3]} />\n      ))}\n    </a.group>\n  )\n}\n\n/** This component creates a glitch effect */\nconst Effects = React.memo(({ factor }) => {\n  const { gl, scene, camera, size } = useThree()\n  const composer = useRef()\n  useEffect(() => void composer.current.setSize(size.width, size.height), [size])\n  // This takes over as the main render-loop (when 2nd arg is set to true)\n  useFrame(() => composer.current.render(), 1)\n  return (\n    <effectComposer ref={composer} args={[gl]}>\n      <renderPass attachArray=\"passes\" args={[scene, camera]} />\n      <a.glitchPass attachArray=\"passes\" renderToScreen factor={factor} />\n    </effectComposer>\n  )\n})\n\n/** This component creates a bunch of parallaxed images */\nfunction Images({ top, mouse, scrollMax }) {\n  return data.map(([url, x, y, factor, z, scale], index) => (\n    <Image\n      key={index}\n      url={url}\n      scale={scale}\n      opacity={top.interpolate([0, 500], [0, 1])}\n      position={interpolate([top, mouse], (top, mouse) => [\n        (-mouse[0] * factor) / 50000 + x,\n        (mouse[1] * factor) / 50000 + y * 1.15 + ((top * factor) / scrollMax) * 2,\n        z + top / 2000,\n      ])}\n    />\n  ))\n}\n\n/** This component maintains the scene */\nfunction Scene({ top, mouse }) {\n  const { size } = useThree()\n  const scrollMax = size.height * 4.5\n  return (\n    <>\n      <a.spotLight intensity={1.2} color=\"white\" position={mouse.interpolate((x, y) => [x / 100, -y / 100, 6.5])} />\n      <Effects factor={top.interpolate([0, 150], [1, 0])} />\n      <Background\n        color={top.interpolate(\n          [0, scrollMax * 0.25, scrollMax * 0.8, scrollMax],\n          ['#27282F', '#247BA0', '#70C1B3', '#f8f3f1']\n        )}\n      />\n      <Stars position={top.interpolate(top => [0, -1 + top / 20, 0])} />\n      <Images top={top} mouse={mouse} scrollMax={scrollMax} />\n      <Text opacity={top.interpolate([0, 200], [1, 0])} position={top.interpolate(top => [0, -1 + top / 200, 0])}>\n        lorem\n      </Text>\n      <Text position={top.interpolate(top => [0, -20 + ((top * 10) / scrollMax) * 2, 0])} color=\"black\" fontSize={150}>\n        Ipsum\n      </Text>\n    </>\n  )\n}\n\n/** Main component */\nexport default function Main() {\n  // This tiny spring right here controlls all(!) the animations, one for scroll, the other for mouse movement ...\n  const [{ top, mouse }, set] = useSpring(() => ({ top: 0, mouse: [0, 0] }))\n  const onMouseMove = useCallback(\n    ({ clientX: x, clientY: y }) => set({ mouse: [x - window.innerWidth / 2, y - window.innerHeight / 2] }),\n    []\n  )\n  const onScroll = useCallback(e => set({ top: e.target.scrollTop }), [])\n  const [events, setEvents] = useState({})\n  return (\n    <>\n      <Canvas className=\"canvas\" onCreated={({ events }) => setEvents(events)}>\n        <Scene top={top} mouse={mouse} />\n      </Canvas>\n      <Container onScroll={onScroll} onMouseMove={onMouseMove} {...events}>\n        <div style={{ height: '525vh' }} />\n      </Container>\n    </>\n  )\n}\n\nconst Container = styled.div`\n  position: absolute;\n  overflow: auto;\n  top: 0px;\n  width: 100%;\n  height: 100vh;\n  font-size: 20em;\n  font-weight: 800;\n  line-height: 0.9em;\n`"]},"metadata":{},"sourceType":"module"}