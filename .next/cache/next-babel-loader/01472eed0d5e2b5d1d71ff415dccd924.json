{"ast":null,"code":"import _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / http://github.com/Mugen87\n * @author Hectate / http://www.github.com/Hectate\n */\nimport { LineSegments } from '../objects/LineSegments.js';\nimport { VertexColors } from '../constants.js';\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Color } from '../math/Color.js';\n\nfunction PolarGridHelper(radius, radials, circles, divisions, color1, color2) {\n  radius = radius || 10;\n  radials = radials || 16;\n  circles = circles || 8;\n  divisions = divisions || 64;\n  color1 = new Color(color1 !== undefined ? color1 : 0x444444);\n  color2 = new Color(color2 !== undefined ? color2 : 0x888888);\n  var vertices = [];\n  var colors = [];\n  var x, z;\n  var v, i, j, r, color; // create the radials\n\n  for (i = 0; i <= radials; i++) {\n    v = i / radials * (Math.PI * 2);\n    x = Math.sin(v) * radius;\n    z = Math.cos(v) * radius;\n    vertices.push(0, 0, 0);\n    vertices.push(x, 0, z);\n    color = i & 1 ? color1 : color2;\n    colors.push(color.r, color.g, color.b);\n    colors.push(color.r, color.g, color.b);\n  } // create the circles\n\n\n  for (i = 0; i <= circles; i++) {\n    color = i & 1 ? color1 : color2;\n    r = radius - radius / circles * i;\n\n    for (j = 0; j < divisions; j++) {\n      // first vertex\n      v = j / divisions * (Math.PI * 2);\n      x = Math.sin(v) * r;\n      z = Math.cos(v) * r;\n      vertices.push(x, 0, z);\n      colors.push(color.r, color.g, color.b); // second vertex\n\n      v = (j + 1) / divisions * (Math.PI * 2);\n      x = Math.sin(v) * r;\n      z = Math.cos(v) * r;\n      vertices.push(x, 0, z);\n      colors.push(color.r, color.g, color.b);\n    }\n  }\n\n  var geometry = new BufferGeometry();\n  geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n  geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n  var material = new LineBasicMaterial({\n    vertexColors: VertexColors\n  });\n  LineSegments.call(this, geometry, material);\n}\n\nPolarGridHelper.prototype = _Object$create(LineSegments.prototype);\nPolarGridHelper.prototype.constructor = PolarGridHelper;\nexport { PolarGridHelper };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/helpers/PolarGridHelper.js"],"names":["LineSegments","VertexColors","LineBasicMaterial","Float32BufferAttribute","BufferGeometry","Color","PolarGridHelper","radius","radials","circles","divisions","color1","color2","undefined","vertices","colors","x","z","v","i","j","r","color","Math","PI","sin","cos","push","g","b","geometry","setAttribute","material","vertexColors","call","prototype","constructor"],"mappings":"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","sourcesContent":["/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / http://github.com/Mugen87\n * @author Hectate / http://www.github.com/Hectate\n */\n\nimport { LineSegments } from '../objects/LineSegments.js';\nimport { VertexColors } from '../constants.js';\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Color } from '../math/Color.js';\n\nfunction PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {\n\n\tradius = radius || 10;\n\tradials = radials || 16;\n\tcircles = circles || 8;\n\tdivisions = divisions || 64;\n\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\tvar vertices = [];\n\tvar colors = [];\n\n\tvar x, z;\n\tvar v, i, j, r, color;\n\n\t// create the radials\n\n\tfor ( i = 0; i <= radials; i ++ ) {\n\n\t\tv = ( i / radials ) * ( Math.PI * 2 );\n\n\t\tx = Math.sin( v ) * radius;\n\t\tz = Math.cos( v ) * radius;\n\n\t\tvertices.push( 0, 0, 0 );\n\t\tvertices.push( x, 0, z );\n\n\t\tcolor = ( i & 1 ) ? color1 : color2;\n\n\t\tcolors.push( color.r, color.g, color.b );\n\t\tcolors.push( color.r, color.g, color.b );\n\n\t}\n\n\t// create the circles\n\n\tfor ( i = 0; i <= circles; i ++ ) {\n\n\t\tcolor = ( i & 1 ) ? color1 : color2;\n\n\t\tr = radius - ( radius / circles * i );\n\n\t\tfor ( j = 0; j < divisions; j ++ ) {\n\n\t\t\t// first vertex\n\n\t\t\tv = ( j / divisions ) * ( Math.PI * 2 );\n\n\t\t\tx = Math.sin( v ) * r;\n\t\t\tz = Math.cos( v ) * r;\n\n\t\t\tvertices.push( x, 0, z );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t// second vertex\n\n\t\t\tv = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\n\n\t\t\tx = Math.sin( v ) * r;\n\t\t\tz = Math.cos( v ) * r;\n\n\t\t\tvertices.push( x, 0, z );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t}\n\n\t}\n\n\tvar geometry = new BufferGeometry();\n\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\tLineSegments.call( this, geometry, material );\n\n}\n\nPolarGridHelper.prototype = Object.create( LineSegments.prototype );\nPolarGridHelper.prototype.constructor = PolarGridHelper;\n\nexport { PolarGridHelper };\n"]},"metadata":{},"sourceType":"module"}