{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/dnd-draglayer/DraggableBox.jsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { DragSource } from 'react-dnd';\nimport { getEmptyImage } from 'react-dnd-html5-backend';\nimport ItemTypes from './ItemTypes';\nimport Box from './Box';\n\nfunction getStyles(props) {\n  var left = props.left,\n      top = props.top,\n      isDragging = props.isDragging;\n  var transform = \"translate3d(\".concat(left, \"px, \").concat(top, \"px, 0)\");\n  return {\n    position: 'absolute',\n    transform: transform,\n    WebkitTransform: transform,\n    // IE fallback: hide the real node using CSS when dragging\n    // because IE will ignore our custom \"empty image\" drag preview.\n    opacity: isDragging ? 0 : 1,\n    height: isDragging ? 0 : ''\n  };\n}\n\nvar DraggableBox =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(DraggableBox, _React$PureComponent);\n\n  function DraggableBox() {\n    _classCallCheck(this, DraggableBox);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DraggableBox).apply(this, arguments));\n  }\n\n  _createClass(DraggableBox, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var connectDragPreview = this.props.connectDragPreview;\n\n      if (connectDragPreview) {\n        // Use empty image as a drag preview so browsers don't draw it\n        // and we can draw whatever we want on the custom drag layer instead.\n        connectDragPreview(getEmptyImage(), {\n          // IE fallback: specify that we'd rather screenshot the node\n          // when it already knows it's being dragged so we can hide it with CSS.\n          captureDraggingState: true\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          title = _this$props.title,\n          connectDragSource = _this$props.connectDragSource;\n      return connectDragSource(__jsx(\"div\", {\n        style: getStyles(this.props),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, __jsx(Box, {\n        title: title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return DraggableBox;\n}(React.PureComponent);\n\nexport default DragSource(ItemTypes.BOX, {\n  beginDrag: function beginDrag(props) {\n    var id = props.id,\n        title = props.title,\n        left = props.left,\n        top = props.top;\n    return {\n      id: id,\n      title: title,\n      left: left,\n      top: top\n    };\n  }\n}, function (connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    connectDragPreview: connect.dragPreview(),\n    isDragging: monitor.isDragging()\n  };\n})(DraggableBox);","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/dnd-draglayer/DraggableBox.jsx"],"names":["React","DragSource","getEmptyImage","ItemTypes","Box","getStyles","props","left","top","isDragging","transform","position","WebkitTransform","opacity","height","DraggableBox","connectDragPreview","captureDraggingState","title","connectDragSource","PureComponent","BOX","beginDrag","id","connect","monitor","dragSource","dragPreview"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,WAA3B;AACA,SAASC,aAAT,QAA8B,yBAA9B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,GAAP,MAAgB,OAAhB;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA,MAChBC,IADgB,GACUD,KADV,CAChBC,IADgB;AAAA,MACVC,GADU,GACUF,KADV,CACVE,GADU;AAAA,MACLC,UADK,GACUH,KADV,CACLG,UADK;AAExB,MAAMC,SAAS,yBAAkBH,IAAlB,iBAA6BC,GAA7B,WAAf;AACA,SAAO;AACLG,IAAAA,QAAQ,EAAE,UADL;AAELD,IAAAA,SAAS,EAATA,SAFK;AAGLE,IAAAA,eAAe,EAAEF,SAHZ;AAIL;AACA;AACAG,IAAAA,OAAO,EAAEJ,UAAU,GAAG,CAAH,GAAO,CANrB;AAOLK,IAAAA,MAAM,EAAEL,UAAU,GAAG,CAAH,GAAO;AAPpB,GAAP;AASD;;IAEKM,Y;;;;;;;;;;;;;wCACgB;AAAA,UACVC,kBADU,GACa,KAAKV,KADlB,CACVU,kBADU;;AAElB,UAAIA,kBAAJ,EAAwB;AACtB;AACA;AACAA,QAAAA,kBAAkB,CAACd,aAAa,EAAd,EAAkB;AAClC;AACA;AACAe,UAAAA,oBAAoB,EAAE;AAHY,SAAlB,CAAlB;AAKD;AACF;;;6BACQ;AAAA,wBAC8B,KAAKX,KADnC;AAAA,UACCY,KADD,eACCA,KADD;AAAA,UACQC,iBADR,eACQA,iBADR;AAEP,aAAOA,iBAAiB,CACtB;AAAK,QAAA,KAAK,EAAEd,SAAS,CAAC,KAAKC,KAAN,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,GAAD;AAAK,QAAA,KAAK,EAAEY,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADsB,CAAxB;AAKD;;;;EApBwBlB,KAAK,CAACoB,a;;AAuBjC,eAAenB,UAAU,CACvBE,SAAS,CAACkB,GADa,EAEvB;AACEC,EAAAA,SADF,qBACYhB,KADZ,EACmB;AAAA,QACPiB,EADO,GACkBjB,KADlB,CACPiB,EADO;AAAA,QACHL,KADG,GACkBZ,KADlB,CACHY,KADG;AAAA,QACIX,IADJ,GACkBD,KADlB,CACIC,IADJ;AAAA,QACUC,GADV,GACkBF,KADlB,CACUE,GADV;AAEf,WAAO;AAAEe,MAAAA,EAAE,EAAFA,EAAF;AAAML,MAAAA,KAAK,EAALA,KAAN;AAAaX,MAAAA,IAAI,EAAJA,IAAb;AAAmBC,MAAAA,GAAG,EAAHA;AAAnB,KAAP;AACD;AAJH,CAFuB,EAQvB,UAACgB,OAAD,EAAUC,OAAV;AAAA,SAAuB;AACrBN,IAAAA,iBAAiB,EAAEK,OAAO,CAACE,UAAR,EADE;AAErBV,IAAAA,kBAAkB,EAAEQ,OAAO,CAACG,WAAR,EAFC;AAGrBlB,IAAAA,UAAU,EAAEgB,OAAO,CAAChB,UAAR;AAHS,GAAvB;AAAA,CARuB,CAAV,CAabM,YAba,CAAf","sourcesContent":["import React from 'react'\nimport { DragSource } from 'react-dnd'\nimport { getEmptyImage } from 'react-dnd-html5-backend'\nimport ItemTypes from './ItemTypes';\nimport Box from './Box';\n\nfunction getStyles(props) {\n  const { left, top, isDragging } = props\n  const transform = `translate3d(${left}px, ${top}px, 0)`\n  return {\n    position: 'absolute',\n    transform,\n    WebkitTransform: transform,\n    // IE fallback: hide the real node using CSS when dragging\n    // because IE will ignore our custom \"empty image\" drag preview.\n    opacity: isDragging ? 0 : 1,\n    height: isDragging ? 0 : '',\n  }\n}\n\nclass DraggableBox extends React.PureComponent {\n  componentDidMount() {\n    const { connectDragPreview } = this.props\n    if (connectDragPreview) {\n      // Use empty image as a drag preview so browsers don't draw it\n      // and we can draw whatever we want on the custom drag layer instead.\n      connectDragPreview(getEmptyImage(), {\n        // IE fallback: specify that we'd rather screenshot the node\n        // when it already knows it's being dragged so we can hide it with CSS.\n        captureDraggingState: true,\n      })\n    }\n  }\n  render() {\n    const { title, connectDragSource } = this.props\n    return connectDragSource(\n      <div style={getStyles(this.props)}>\n        <Box title={title} />\n      </div>,\n    )\n  }\n}\n\nexport default DragSource(\n  ItemTypes.BOX,\n  {\n    beginDrag(props) {\n      const { id, title, left, top } = props\n      return { id, title, left, top }\n    },\n  },\n  (connect, monitor) => ({\n    connectDragSource: connect.dragSource(),\n    connectDragPreview: connect.dragPreview(),\n    isDragging: monitor.isDragging(),\n  }),\n)(DraggableBox)\n"]},"metadata":{},"sourceType":"module"}