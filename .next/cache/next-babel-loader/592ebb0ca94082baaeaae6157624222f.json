{"ast":null,"code":"import _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\nimport { Vector3 } from '../../math/Vector3.js';\nimport { Curve } from '../core/Curve.js';\n\nfunction LineCurve3(v1, v2) {\n  Curve.call(this);\n  this.type = 'LineCurve3';\n  this.v1 = v1 || new Vector3();\n  this.v2 = v2 || new Vector3();\n}\n\nLineCurve3.prototype = _Object$create(Curve.prototype);\nLineCurve3.prototype.constructor = LineCurve3;\nLineCurve3.prototype.isLineCurve3 = true;\n\nLineCurve3.prototype.getPoint = function (t, optionalTarget) {\n  var point = optionalTarget || new Vector3();\n\n  if (t === 1) {\n    point.copy(this.v2);\n  } else {\n    point.copy(this.v2).sub(this.v1);\n    point.multiplyScalar(t).add(this.v1);\n  }\n\n  return point;\n}; // Line curve is linear, so we can overwrite default getPointAt\n\n\nLineCurve3.prototype.getPointAt = function (u, optionalTarget) {\n  return this.getPoint(u, optionalTarget);\n};\n\nLineCurve3.prototype.copy = function (source) {\n  Curve.prototype.copy.call(this, source);\n  this.v1.copy(source.v1);\n  this.v2.copy(source.v2);\n  return this;\n};\n\nLineCurve3.prototype.toJSON = function () {\n  var data = Curve.prototype.toJSON.call(this);\n  data.v1 = this.v1.toArray();\n  data.v2 = this.v2.toArray();\n  return data;\n};\n\nLineCurve3.prototype.fromJSON = function (json) {\n  Curve.prototype.fromJSON.call(this, json);\n  this.v1.fromArray(json.v1);\n  this.v2.fromArray(json.v2);\n  return this;\n};\n\nexport { LineCurve3 };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/extras/curves/LineCurve3.js"],"names":["Vector3","Curve","LineCurve3","v1","v2","call","type","prototype","constructor","isLineCurve3","getPoint","t","optionalTarget","point","copy","sub","multiplyScalar","add","getPointAt","u","source","toJSON","data","toArray","fromJSON","json","fromArray"],"mappings":";AAAA,SAASA,OAAT,QAAwB,uBAAxB;AACA,SAASC,KAAT,QAAsB,kBAAtB;;AAGA,SAASC,UAAT,CAAqBC,EAArB,EAAyBC,EAAzB,EAA8B;AAE7BH,EAAAA,KAAK,CAACI,IAAN,CAAY,IAAZ;AAEA,OAAKC,IAAL,GAAY,YAAZ;AAEA,OAAKH,EAAL,GAAUA,EAAE,IAAI,IAAIH,OAAJ,EAAhB;AACA,OAAKI,EAAL,GAAUA,EAAE,IAAI,IAAIJ,OAAJ,EAAhB;AAEA;;AAEDE,UAAU,CAACK,SAAX,GAAuB,eAAeN,KAAK,CAACM,SAArB,CAAvB;AACAL,UAAU,CAACK,SAAX,CAAqBC,WAArB,GAAmCN,UAAnC;AAEAA,UAAU,CAACK,SAAX,CAAqBE,YAArB,GAAoC,IAApC;;AAEAP,UAAU,CAACK,SAAX,CAAqBG,QAArB,GAAgC,UAAWC,CAAX,EAAcC,cAAd,EAA+B;AAE9D,MAAIC,KAAK,GAAGD,cAAc,IAAI,IAAIZ,OAAJ,EAA9B;;AAEA,MAAKW,CAAC,KAAK,CAAX,EAAe;AAEdE,IAAAA,KAAK,CAACC,IAAN,CAAY,KAAKV,EAAjB;AAEA,GAJD,MAIO;AAENS,IAAAA,KAAK,CAACC,IAAN,CAAY,KAAKV,EAAjB,EAAsBW,GAAtB,CAA2B,KAAKZ,EAAhC;AACAU,IAAAA,KAAK,CAACG,cAAN,CAAsBL,CAAtB,EAA0BM,GAA1B,CAA+B,KAAKd,EAApC;AAEA;;AAED,SAAOU,KAAP;AAEA,CAjBD,C,CAmBA;;;AAEAX,UAAU,CAACK,SAAX,CAAqBW,UAArB,GAAkC,UAAWC,CAAX,EAAcP,cAAd,EAA+B;AAEhE,SAAO,KAAKF,QAAL,CAAeS,CAAf,EAAkBP,cAAlB,CAAP;AAEA,CAJD;;AAMAV,UAAU,CAACK,SAAX,CAAqBO,IAArB,GAA4B,UAAWM,MAAX,EAAoB;AAE/CnB,EAAAA,KAAK,CAACM,SAAN,CAAgBO,IAAhB,CAAqBT,IAArB,CAA2B,IAA3B,EAAiCe,MAAjC;AAEA,OAAKjB,EAAL,CAAQW,IAAR,CAAcM,MAAM,CAACjB,EAArB;AACA,OAAKC,EAAL,CAAQU,IAAR,CAAcM,MAAM,CAAChB,EAArB;AAEA,SAAO,IAAP;AAEA,CATD;;AAWAF,UAAU,CAACK,SAAX,CAAqBc,MAArB,GAA8B,YAAY;AAEzC,MAAIC,IAAI,GAAGrB,KAAK,CAACM,SAAN,CAAgBc,MAAhB,CAAuBhB,IAAvB,CAA6B,IAA7B,CAAX;AAEAiB,EAAAA,IAAI,CAACnB,EAAL,GAAU,KAAKA,EAAL,CAAQoB,OAAR,EAAV;AACAD,EAAAA,IAAI,CAAClB,EAAL,GAAU,KAAKA,EAAL,CAAQmB,OAAR,EAAV;AAEA,SAAOD,IAAP;AAEA,CATD;;AAWApB,UAAU,CAACK,SAAX,CAAqBiB,QAArB,GAAgC,UAAWC,IAAX,EAAkB;AAEjDxB,EAAAA,KAAK,CAACM,SAAN,CAAgBiB,QAAhB,CAAyBnB,IAAzB,CAA+B,IAA/B,EAAqCoB,IAArC;AAEA,OAAKtB,EAAL,CAAQuB,SAAR,CAAmBD,IAAI,CAACtB,EAAxB;AACA,OAAKC,EAAL,CAAQsB,SAAR,CAAmBD,IAAI,CAACrB,EAAxB;AAEA,SAAO,IAAP;AAEA,CATD;;AAYA,SAASF,UAAT","sourcesContent":["import { Vector3 } from '../../math/Vector3.js';\nimport { Curve } from '../core/Curve.js';\n\n\nfunction LineCurve3( v1, v2 ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'LineCurve3';\n\n\tthis.v1 = v1 || new Vector3();\n\tthis.v2 = v2 || new Vector3();\n\n}\n\nLineCurve3.prototype = Object.create( Curve.prototype );\nLineCurve3.prototype.constructor = LineCurve3;\n\nLineCurve3.prototype.isLineCurve3 = true;\n\nLineCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector3();\n\n\tif ( t === 1 ) {\n\n\t\tpoint.copy( this.v2 );\n\n\t} else {\n\n\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t}\n\n\treturn point;\n\n};\n\n// Line curve is linear, so we can overwrite default getPointAt\n\nLineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {\n\n\treturn this.getPoint( u, optionalTarget );\n\n};\n\nLineCurve3.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.v1.copy( source.v1 );\n\tthis.v2.copy( source.v2 );\n\n\treturn this;\n\n};\n\nLineCurve3.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.v1 = this.v1.toArray();\n\tdata.v2 = this.v2.toArray();\n\n\treturn data;\n\n};\n\nLineCurve3.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.v1.fromArray( json.v1 );\n\tthis.v2.fromArray( json.v2 );\n\n\treturn this;\n\n};\n\n\nexport { LineCurve3 };\n"]},"metadata":{},"sourceType":"module"}