{"ast":null,"code":"var _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/ThreeContainer.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef } from \"react\";\nimport { extend, Canvas, useFrame, useResource, useThree } from \"react-three-fiber\";\nimport * as resources from './resources/index';\nextend(resources);\nimport TextLoop from \"../TextLoop\";\n\nconst Particle = ({\n  geometry,\n  material\n}) => {\n  let ref = useRef();\n  let t = Math.random() * 100;\n  let speed = 0.01 + Math.random() / 200;\n  let factor = 20 + Math.random() * 100;\n  let xFactor = -50 + Math.random() * 100;\n  let yFactor = -50 + Math.random() * 100;\n  let zFactor = -30 + Math.random() * 60;\n  useFrame(() => {\n    t += speed;\n    const s = Math.cos(t);\n    ref.current.scale.set(s, s, s);\n    ref.current.rotation.set(s * 5, s * 5, s * 5);\n    ref.current.position.set(xFactor + Math.cos(t / 30 * factor) + Math.sin(t * 1) * factor / 10, yFactor + Math.sin(t / 20 * factor) + Math.cos(t * 2) * factor / 10, zFactor + Math.cos(t / 10 * factor) + Math.sin(t * 3) * factor / 20);\n  });\n  return __jsx(\"mesh\", {\n    ref: ref,\n    material: material,\n    geometry: geometry,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  });\n};\n\nconst Swarm = ({\n  mouse\n}) => {\n  const light = useRef();\n  const [geometryRef, geometry] = useResource();\n  const [materialRef, material] = useResource();\n  useFrame(() => light.current.position.set(mouse.current[0] / 20, -mouse.current[1] / 20, 0));\n  return __jsx(React.Fragment, null, __jsx(\"pointLight\", {\n    ref: light,\n    distance: 50,\n    intensity: 1.5,\n    color: \"white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), __jsx(\"spotLight\", {\n    intensity: 0.5,\n    position: [10, 10, 40],\n    penumbra: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), __jsx(\"mesh\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, __jsx(\"planeGeometry\", {\n    attach: \"geometry\",\n    args: [10000, 10000],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), __jsx(\"meshPhongMaterial\", {\n    attach: \"material\",\n    color: \"#575757\",\n    depthTest: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  })), __jsx(\"dodecahedronBufferGeometry\", {\n    ref: geometryRef,\n    args: [0.8, 0],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), __jsx(\"meshPhysicalMaterial\", {\n    ref: materialRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), geometry && new Array(2000).fill().map((_, index) => __jsx(Particle, {\n    key: index,\n    material: material,\n    geometry: geometry,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  })));\n};\n\nconst Effect = () => {\n  const composer = useRef();\n  console.log('composer --> ', composer);\n  const {\n    mouse,\n    scene,\n    gl,\n    size,\n    camera\n  } = useThree();\n  console.log('mouse in effect \\n--> ', mouse);\n  useEffect(() => void composer.current.setSize(size.width, size.height), [size]);\n  useFrame(({\n    gl\n  }) => void (gl.autoClear = true), 0);\n  return __jsx(\"effectComposer\", {\n    ref: composer,\n    args: [gl],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, __jsx(\"renderPass\", {\n    attachArray: \"passes\",\n    scene: scene,\n    camera: camera,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }), __jsx(\"waterPass\", {\n    attachArray: \"passes\",\n    factor: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }), __jsx(\"afterimagePass\", {\n    attachArray: \"passes\",\n    factor: 0.7,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }), __jsx(\"shaderPass\", {\n    attachArray: \"passes\",\n    args: [resources.FXAAShader],\n    \"material-uniforms-resolution-value\": [1 / size.width, 1 / size.height],\n    renderToScreen: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }));\n};\n\nconst ThreeContainer = () => {\n  // const mouse = useRef([0, 0]);\n  // const onMouseMove = useCallback(\n  //     ({ clientX: x, clientY: y }) =>\n  //     (mouse.current = [\n  //         x - window.innerWidth / 2,\n  //         y - window.innerHeight / 2\n  //     ]),\n  //     []\n  // );\n  return __jsx(\"div\", {\n    className: \"container block__three-container\" // onMouseMove={onMouseMove} \n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, __jsx(Canvas, {\n    camera: {\n      fov: 75,\n      position: [0, 0, 50]\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, __jsx(Effect, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  })), __jsx(TextLoop, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }));\n};\n\nexport default ThreeContainer;","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/ThreeContainer.jsx"],"names":["React","useCallback","useEffect","useRef","extend","Canvas","useFrame","useResource","useThree","resources","TextLoop","Particle","geometry","material","ref","t","Math","random","speed","factor","xFactor","yFactor","zFactor","s","cos","current","scale","set","rotation","position","sin","Swarm","mouse","light","geometryRef","materialRef","Array","fill","map","_","index","Effect","composer","console","log","scene","gl","size","camera","setSize","width","height","autoClear","FXAAShader","ThreeContainer","fov"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef } from \"react\";\nimport {\n    extend,\n    Canvas,\n    useFrame,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\nimport * as resources from './resources/index';\nextend(resources);\n\nimport TextLoop from \"../TextLoop\";\n\n\nconst Particle = ({ geometry, material }) => {\n    let ref = useRef();\n    let t = Math.random() * 100;\n    let speed = 0.01 + Math.random() / 200;\n    let factor = 20 + Math.random() * 100;\n    let xFactor = -50 + Math.random() * 100;\n    let yFactor = -50 + Math.random() * 100;\n    let zFactor = -30 + Math.random() * 60;\n    useFrame(() => {\n        t += speed;\n        const s = Math.cos(t);\n        ref.current.scale.set(s, s, s);\n        ref.current.rotation.set(s * 5, s * 5, s * 5);\n        ref.current.position.set(\n            xFactor +\n                Math.cos((t / 30) * factor) +\n                (Math.sin(t * 1) * factor) / 10,\n            yFactor +\n                Math.sin((t / 20) * factor) +\n                (Math.cos(t * 2) * factor) / 10,\n            zFactor +\n                Math.cos((t / 10) * factor) +\n                (Math.sin(t * 3) * factor) / 20\n        );\n    });\n    return <mesh ref={ref} material={material} geometry={geometry} />;\n}\n\nconst Swarm = ({ mouse }) => {\n    const light = useRef();\n    const [geometryRef, geometry] = useResource();\n    const [materialRef, material] = useResource();\n    useFrame(() =>\n        light.current.position.set(\n            mouse.current[0] / 20,\n            -mouse.current[1] / 20,\n            0\n        )\n    );\n    return (\n        <>\n            <pointLight\n                ref={light}\n                distance={50}\n                intensity={1.5}\n                color=\"white\"\n            />\n            <spotLight intensity={0.5} position={[10, 10, 40]} penumbra={1} />\n            <mesh>\n                <planeGeometry attach=\"geometry\" args={[10000, 10000]} />\n                <meshPhongMaterial\n                    attach=\"material\"\n                    color=\"#575757\"\n                    depthTest={false}\n                />\n            </mesh>\n            <dodecahedronBufferGeometry ref={geometryRef} args={[0.8, 0]} />\n            <meshPhysicalMaterial ref={materialRef} />\n            {geometry &&\n                new Array(2000)\n                    .fill()\n                    .map((_, index) => (\n                        <Particle\n                            key={index}\n                            material={material}\n                            geometry={geometry}\n                        />\n                    ))}\n        </>\n    );\n}\n\nconst Effect = () => {\n    const composer = useRef();\n    console.log('composer --> ', composer);\n    const { mouse, scene, gl, size, camera } = useThree();\n    console.log('mouse in effect \\n--> ', mouse);\n\n    useEffect(() => void composer.current.setSize(size.width, size.height), [ size ]);\n    \n    useFrame(\n        ({ gl }) => void ((gl.autoClear = true)),\n        0\n    );\n\n    return (\n        <effectComposer ref={composer} args={[gl]}>\n            <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\n            <waterPass attachArray=\"passes\" factor={2} />\n            <afterimagePass attachArray=\"passes\" factor={0.7} />\n            <shaderPass\n                attachArray=\"passes\"\n                args={[resources.FXAAShader]}\n                material-uniforms-resolution-value={[\n                    1 / size.width,\n                    1 / size.height\n                ]}\n                renderToScreen\n            />\n        </effectComposer>\n    );\n}\n\nconst ThreeContainer = () => {\n\n\n\n\n\n    // const mouse = useRef([0, 0]);\n    // const onMouseMove = useCallback(\n    //     ({ clientX: x, clientY: y }) =>\n    //     (mouse.current = [\n    //         x - window.innerWidth / 2,\n    //         y - window.innerHeight / 2\n    //     ]),\n    //     []\n    // );\n\n    return (\n        <div \n            className=\"container block__three-container\" \n            // onMouseMove={onMouseMove} \n        >\n            \n            <Canvas camera={{ fov: 75, position: [0, 0, 50] }} >\n\n                <Effect />\n\n            </Canvas> \n           \n            <TextLoop  />\n\n        </div>\n    );\n}\n\nexport default ThreeContainer;\n"]},"metadata":{},"sourceType":"module"}