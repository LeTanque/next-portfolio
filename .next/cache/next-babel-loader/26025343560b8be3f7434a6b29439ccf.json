{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport { Vector3 } from './Vector3.js';\nvar _points = [new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3()];\n\nvar _vector = new Vector3();\n\nvar _box = new Box3(); // triangle centered vertices\n\n\nvar _v0 = new Vector3();\n\nvar _v1 = new Vector3();\n\nvar _v2 = new Vector3(); // triangle edge vectors\n\n\nvar _f0 = new Vector3();\n\nvar _f1 = new Vector3();\n\nvar _f2 = new Vector3();\n\nvar _center = new Vector3();\n\nvar _extents = new Vector3();\n\nvar _triangleNormal = new Vector3();\n\nvar _testAxis = new Vector3();\n/**\n * @author bhouston / http://clara.io\n * @author WestLangley / http://github.com/WestLangley\n */\n\n\nfunction Box3(min, max) {\n  this.min = min !== undefined ? min : new Vector3(+Infinity, +Infinity, +Infinity);\n  this.max = max !== undefined ? max : new Vector3(-Infinity, -Infinity, -Infinity);\n}\n\n_Object$assign(Box3.prototype, {\n  isBox3: true,\n  set: function set(min, max) {\n    this.min.copy(min);\n    this.max.copy(max);\n    return this;\n  },\n  setFromArray: function setFromArray(array) {\n    var minX = +Infinity;\n    var minY = +Infinity;\n    var minZ = +Infinity;\n    var maxX = -Infinity;\n    var maxY = -Infinity;\n    var maxZ = -Infinity;\n\n    for (var i = 0, l = array.length; i < l; i += 3) {\n      var x = array[i];\n      var y = array[i + 1];\n      var z = array[i + 2];\n      if (x < minX) minX = x;\n      if (y < minY) minY = y;\n      if (z < minZ) minZ = z;\n      if (x > maxX) maxX = x;\n      if (y > maxY) maxY = y;\n      if (z > maxZ) maxZ = z;\n    }\n\n    this.min.set(minX, minY, minZ);\n    this.max.set(maxX, maxY, maxZ);\n    return this;\n  },\n  setFromBufferAttribute: function setFromBufferAttribute(attribute) {\n    var minX = +Infinity;\n    var minY = +Infinity;\n    var minZ = +Infinity;\n    var maxX = -Infinity;\n    var maxY = -Infinity;\n    var maxZ = -Infinity;\n\n    for (var i = 0, l = attribute.count; i < l; i++) {\n      var x = attribute.getX(i);\n      var y = attribute.getY(i);\n      var z = attribute.getZ(i);\n      if (x < minX) minX = x;\n      if (y < minY) minY = y;\n      if (z < minZ) minZ = z;\n      if (x > maxX) maxX = x;\n      if (y > maxY) maxY = y;\n      if (z > maxZ) maxZ = z;\n    }\n\n    this.min.set(minX, minY, minZ);\n    this.max.set(maxX, maxY, maxZ);\n    return this;\n  },\n  setFromPoints: function setFromPoints(points) {\n    this.makeEmpty();\n\n    for (var i = 0, il = points.length; i < il; i++) {\n      this.expandByPoint(points[i]);\n    }\n\n    return this;\n  },\n  setFromCenterAndSize: function setFromCenterAndSize(center, size) {\n    var halfSize = _vector.copy(size).multiplyScalar(0.5);\n\n    this.min.copy(center).sub(halfSize);\n    this.max.copy(center).add(halfSize);\n    return this;\n  },\n  setFromObject: function setFromObject(object) {\n    this.makeEmpty();\n    return this.expandByObject(object);\n  },\n  clone: function clone() {\n    return new this.constructor().copy(this);\n  },\n  copy: function copy(box) {\n    this.min.copy(box.min);\n    this.max.copy(box.max);\n    return this;\n  },\n  makeEmpty: function makeEmpty() {\n    this.min.x = this.min.y = this.min.z = +Infinity;\n    this.max.x = this.max.y = this.max.z = -Infinity;\n    return this;\n  },\n  isEmpty: function isEmpty() {\n    // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;\n  },\n  getCenter: function getCenter(target) {\n    if (target === undefined) {\n      console.warn('THREE.Box3: .getCenter() target is now required');\n      target = new Vector3();\n    }\n\n    return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n  },\n  getSize: function getSize(target) {\n    if (target === undefined) {\n      console.warn('THREE.Box3: .getSize() target is now required');\n      target = new Vector3();\n    }\n\n    return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);\n  },\n  expandByPoint: function expandByPoint(point) {\n    this.min.min(point);\n    this.max.max(point);\n    return this;\n  },\n  expandByVector: function expandByVector(vector) {\n    this.min.sub(vector);\n    this.max.add(vector);\n    return this;\n  },\n  expandByScalar: function expandByScalar(scalar) {\n    this.min.addScalar(-scalar);\n    this.max.addScalar(scalar);\n    return this;\n  },\n  expandByObject: function expandByObject(object) {\n    // Computes the world-axis-aligned bounding box of an object (including its children),\n    // accounting for both the object's, and children's, world transforms\n    object.updateWorldMatrix(false, false);\n    var geometry = object.geometry;\n\n    if (geometry !== undefined) {\n      if (geometry.boundingBox === null) {\n        geometry.computeBoundingBox();\n      }\n\n      _box.copy(geometry.boundingBox);\n\n      _box.applyMatrix4(object.matrixWorld);\n\n      this.expandByPoint(_box.min);\n      this.expandByPoint(_box.max);\n    }\n\n    var children = object.children;\n\n    for (var i = 0, l = children.length; i < l; i++) {\n      this.expandByObject(children[i]);\n    }\n\n    return this;\n  },\n  containsPoint: function containsPoint(point) {\n    return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true;\n  },\n  containsBox: function containsBox(box) {\n    return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;\n  },\n  getParameter: function getParameter(point, target) {\n    // This can potentially have a divide by zero if the box\n    // has a size dimension of 0.\n    if (target === undefined) {\n      console.warn('THREE.Box3: .getParameter() target is now required');\n      target = new Vector3();\n    }\n\n    return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));\n  },\n  intersectsBox: function intersectsBox(box) {\n    // using 6 splitting planes to rule out intersections.\n    return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n  },\n  intersectsSphere: function intersectsSphere(sphere) {\n    // Find the point on the AABB closest to the sphere center.\n    this.clampPoint(sphere.center, _vector); // If that point is inside the sphere, the AABB and sphere intersect.\n\n    return _vector.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n  },\n  intersectsPlane: function intersectsPlane(plane) {\n    // We compute the minimum and maximum dot product values. If those values\n    // are on the same side (back or front) of the plane, then there is no intersection.\n    var min, max;\n\n    if (plane.normal.x > 0) {\n      min = plane.normal.x * this.min.x;\n      max = plane.normal.x * this.max.x;\n    } else {\n      min = plane.normal.x * this.max.x;\n      max = plane.normal.x * this.min.x;\n    }\n\n    if (plane.normal.y > 0) {\n      min += plane.normal.y * this.min.y;\n      max += plane.normal.y * this.max.y;\n    } else {\n      min += plane.normal.y * this.max.y;\n      max += plane.normal.y * this.min.y;\n    }\n\n    if (plane.normal.z > 0) {\n      min += plane.normal.z * this.min.z;\n      max += plane.normal.z * this.max.z;\n    } else {\n      min += plane.normal.z * this.max.z;\n      max += plane.normal.z * this.min.z;\n    }\n\n    return min <= -plane.constant && max >= -plane.constant;\n  },\n  intersectsTriangle: function intersectsTriangle(triangle) {\n    if (this.isEmpty()) {\n      return false;\n    } // compute box center and extents\n\n\n    this.getCenter(_center);\n\n    _extents.subVectors(this.max, _center); // translate triangle to aabb origin\n\n\n    _v0.subVectors(triangle.a, _center);\n\n    _v1.subVectors(triangle.b, _center);\n\n    _v2.subVectors(triangle.c, _center); // compute edge vectors for triangle\n\n\n    _f0.subVectors(_v1, _v0);\n\n    _f1.subVectors(_v2, _v1);\n\n    _f2.subVectors(_v0, _v2); // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n    // make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n    // axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\n\n    var axes = [0, -_f0.z, _f0.y, 0, -_f1.z, _f1.y, 0, -_f2.z, _f2.y, _f0.z, 0, -_f0.x, _f1.z, 0, -_f1.x, _f2.z, 0, -_f2.x, -_f0.y, _f0.x, 0, -_f1.y, _f1.x, 0, -_f2.y, _f2.x, 0];\n\n    if (!satForAxes(axes, _v0, _v1, _v2, _extents)) {\n      return false;\n    } // test 3 face normals from the aabb\n\n\n    axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n    if (!satForAxes(axes, _v0, _v1, _v2, _extents)) {\n      return false;\n    } // finally testing the face normal of the triangle\n    // use already existing triangle edge vectors here\n\n\n    _triangleNormal.crossVectors(_f0, _f1);\n\n    axes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];\n    return satForAxes(axes, _v0, _v1, _v2, _extents);\n  },\n  clampPoint: function clampPoint(point, target) {\n    if (target === undefined) {\n      console.warn('THREE.Box3: .clampPoint() target is now required');\n      target = new Vector3();\n    }\n\n    return target.copy(point).clamp(this.min, this.max);\n  },\n  distanceToPoint: function distanceToPoint(point) {\n    var clampedPoint = _vector.copy(point).clamp(this.min, this.max);\n\n    return clampedPoint.sub(point).length();\n  },\n  getBoundingSphere: function getBoundingSphere(target) {\n    if (target === undefined) {\n      console.error('THREE.Box3: .getBoundingSphere() target is now required'); //target = new Sphere(); // removed to avoid cyclic dependency\n    }\n\n    this.getCenter(target.center);\n    target.radius = this.getSize(_vector).length() * 0.5;\n    return target;\n  },\n  intersect: function intersect(box) {\n    this.min.max(box.min);\n    this.max.min(box.max); // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\n    if (this.isEmpty()) this.makeEmpty();\n    return this;\n  },\n  union: function union(box) {\n    this.min.min(box.min);\n    this.max.max(box.max);\n    return this;\n  },\n  applyMatrix4: function applyMatrix4(matrix) {\n    // transform of empty box is an empty box.\n    if (this.isEmpty()) return this; // NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\n    _points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000\n\n\n    _points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001\n\n\n    _points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010\n\n\n    _points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011\n\n\n    _points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100\n\n\n    _points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101\n\n\n    _points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110\n\n\n    _points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111\n\n\n    this.setFromPoints(_points);\n    return this;\n  },\n  translate: function translate(offset) {\n    this.min.add(offset);\n    this.max.add(offset);\n    return this;\n  },\n  equals: function equals(box) {\n    return box.min.equals(this.min) && box.max.equals(this.max);\n  }\n});\n\nfunction satForAxes(axes, v0, v1, v2, extents) {\n  var i, j;\n\n  for (i = 0, j = axes.length - 3; i <= j; i += 3) {\n    _testAxis.fromArray(axes, i); // project the aabb onto the seperating axis\n\n\n    var r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z); // project all 3 vertices of the triangle onto the seperating axis\n\n    var p0 = v0.dot(_testAxis);\n    var p1 = v1.dot(_testAxis);\n    var p2 = v2.dot(_testAxis); // actual test, basically see if either of the most extreme of the triangle points intersects r\n\n    if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {\n      // points of the projected triangle are outside the projected half-length of the aabb\n      // the axis is seperating and we can exit\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport { Box3 };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/node_modules/three/src/math/Box3.js"],"names":["Vector3","_points","_vector","_box","Box3","_v0","_v1","_v2","_f0","_f1","_f2","_center","_extents","_triangleNormal","_testAxis","min","max","undefined","Infinity","prototype","isBox3","set","copy","setFromArray","array","minX","minY","minZ","maxX","maxY","maxZ","i","l","length","x","y","z","setFromBufferAttribute","attribute","count","getX","getY","getZ","setFromPoints","points","makeEmpty","il","expandByPoint","setFromCenterAndSize","center","size","halfSize","multiplyScalar","sub","add","setFromObject","object","expandByObject","clone","constructor","box","isEmpty","getCenter","target","console","warn","addVectors","getSize","subVectors","point","expandByVector","vector","expandByScalar","scalar","addScalar","updateWorldMatrix","geometry","boundingBox","computeBoundingBox","applyMatrix4","matrixWorld","children","containsPoint","containsBox","getParameter","intersectsBox","intersectsSphere","sphere","clampPoint","distanceToSquared","radius","intersectsPlane","plane","normal","constant","intersectsTriangle","triangle","a","b","c","axes","satForAxes","crossVectors","clamp","distanceToPoint","clampedPoint","getBoundingSphere","error","intersect","union","matrix","translate","offset","equals","v0","v1","v2","extents","j","fromArray","r","Math","abs","p0","dot","p1","p2"],"mappings":"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","sourcesContent":["import { Vector3 } from './Vector3.js';\n\nvar _points = [\n\tnew Vector3(),\n\tnew Vector3(),\n\tnew Vector3(),\n\tnew Vector3(),\n\tnew Vector3(),\n\tnew Vector3(),\n\tnew Vector3(),\n\tnew Vector3()\n];\n\nvar _vector = new Vector3();\n\nvar _box = new Box3();\n\n// triangle centered vertices\n\nvar _v0 = new Vector3();\nvar _v1 = new Vector3();\nvar _v2 = new Vector3();\n\n// triangle edge vectors\n\nvar _f0 = new Vector3();\nvar _f1 = new Vector3();\nvar _f2 = new Vector3();\n\nvar _center = new Vector3();\nvar _extents = new Vector3();\nvar _triangleNormal = new Vector3();\nvar _testAxis = new Vector3();\n\n/**\n * @author bhouston / http://clara.io\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction Box3( min, max ) {\n\n\tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\n\tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\n\n}\n\n\nObject.assign( Box3.prototype, {\n\n\tisBox3: true,\n\n\tset: function ( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromArray: function ( array ) {\n\n\t\tvar minX = + Infinity;\n\t\tvar minY = + Infinity;\n\t\tvar minZ = + Infinity;\n\n\t\tvar maxX = - Infinity;\n\t\tvar maxY = - Infinity;\n\t\tvar maxZ = - Infinity;\n\n\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\tvar x = array[ i ];\n\t\t\tvar y = array[ i + 1 ];\n\t\t\tvar z = array[ i + 2 ];\n\n\t\t\tif ( x < minX ) minX = x;\n\t\t\tif ( y < minY ) minY = y;\n\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\tif ( x > maxX ) maxX = x;\n\t\t\tif ( y > maxY ) maxY = y;\n\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t}\n\n\t\tthis.min.set( minX, minY, minZ );\n\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromBufferAttribute: function ( attribute ) {\n\n\t\tvar minX = + Infinity;\n\t\tvar minY = + Infinity;\n\t\tvar minZ = + Infinity;\n\n\t\tvar maxX = - Infinity;\n\t\tvar maxY = - Infinity;\n\t\tvar maxZ = - Infinity;\n\n\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\tvar x = attribute.getX( i );\n\t\t\tvar y = attribute.getY( i );\n\t\t\tvar z = attribute.getZ( i );\n\n\t\t\tif ( x < minX ) minX = x;\n\t\t\tif ( y < minY ) minY = y;\n\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\tif ( x > maxX ) maxX = x;\n\t\t\tif ( y > maxY ) maxY = y;\n\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t}\n\n\t\tthis.min.set( minX, minY, minZ );\n\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPoints: function ( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetFromCenterAndSize: function ( center, size ) {\n\n\t\tvar halfSize = _vector.copy( size ).multiplyScalar( 0.5 );\n\n\t\tthis.min.copy( center ).sub( halfSize );\n\t\tthis.max.copy( center ).add( halfSize );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromObject: function ( object ) {\n\n\t\tthis.makeEmpty();\n\n\t\treturn this.expandByObject( object );\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tmakeEmpty: function () {\n\n\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\treturn this;\n\n\t},\n\n\tisEmpty: function () {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t},\n\n\tgetCenter: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .getCenter() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t},\n\n\tgetSize: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .getSize() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t},\n\n\texpandByPoint: function ( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t},\n\n\texpandByVector: function ( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t},\n\n\texpandByScalar: function ( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t},\n\n\texpandByObject: function ( object ) {\n\n\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t// accounting for both the object's, and children's, world transforms\n\n\t\tobject.updateWorldMatrix( false, false );\n\n\t\tvar geometry = object.geometry;\n\n\t\tif ( geometry !== undefined ) {\n\n\t\t\tif ( geometry.boundingBox === null ) {\n\n\t\t\t\tgeometry.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\t_box.copy( geometry.boundingBox );\n\t\t\t_box.applyMatrix4( object.matrixWorld );\n\n\t\t\tthis.expandByPoint( _box.min );\n\t\t\tthis.expandByPoint( _box.max );\n\n\t\t}\n\n\t\tvar children = object.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tthis.expandByObject( children[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\n\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\n\n\t},\n\n\tcontainsBox: function ( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\n\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\n\n\t},\n\n\tgetParameter: function ( point, target ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .getParameter() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t);\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\t// using 6 splitting planes to rule out intersections.\n\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\n\t},\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\t// Find the point on the AABB closest to the sphere center.\n\t\tthis.clampPoint( sphere.center, _vector );\n\n\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\treturn _vector.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t},\n\n\tintersectsPlane: function ( plane ) {\n\n\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\tvar min, max;\n\n\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t} else {\n\n\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t}\n\n\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t}\n\n\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t}\n\n\t\treturn ( min <= - plane.constant && max >= - plane.constant );\n\n\t},\n\n\tintersectsTriangle: function ( triangle ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// compute box center and extents\n\t\tthis.getCenter( _center );\n\t\t_extents.subVectors( this.max, _center );\n\n\t\t// translate triangle to aabb origin\n\t\t_v0.subVectors( triangle.a, _center );\n\t\t_v1.subVectors( triangle.b, _center );\n\t\t_v2.subVectors( triangle.c, _center );\n\n\t\t// compute edge vectors for triangle\n\t\t_f0.subVectors( _v1, _v0 );\n\t\t_f1.subVectors( _v2, _v1 );\n\t\t_f2.subVectors( _v0, _v2 );\n\n\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\t\tvar axes = [\n\t\t\t0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,\n\t\t\t_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,\n\t\t\t- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0\n\t\t];\n\t\tif ( ! satForAxes( axes, _v0, _v1, _v2, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// test 3 face normals from the aabb\n\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\n\t\tif ( ! satForAxes( axes, _v0, _v1, _v2, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// finally testing the face normal of the triangle\n\t\t// use already existing triangle edge vectors here\n\t\t_triangleNormal.crossVectors( _f0, _f1 );\n\t\taxes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];\n\n\t\treturn satForAxes( axes, _v0, _v1, _v2, _extents );\n\n\t},\n\n\tclampPoint: function ( point, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .clampPoint() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t},\n\n\tdistanceToPoint: function ( point ) {\n\n\t\tvar clampedPoint = _vector.copy( point ).clamp( this.min, this.max );\n\n\t\treturn clampedPoint.sub( point ).length();\n\n\t},\n\n\tgetBoundingSphere: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.error( 'THREE.Box3: .getBoundingSphere() target is now required' );\n\t\t\t//target = new Sphere(); // removed to avoid cyclic dependency\n\n\t\t}\n\n\t\tthis.getCenter( target.center );\n\n\t\ttarget.radius = this.getSize( _vector ).length() * 0.5;\n\n\t\treturn target;\n\n\t},\n\n\tintersect: function ( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\tif ( this.isEmpty() ) this.makeEmpty();\n\n\t\treturn this;\n\n\t},\n\n\tunion: function ( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tapplyMatrix4: function ( matrix ) {\n\n\t\t// transform of empty box is an empty box.\n\t\tif ( this.isEmpty() ) return this;\n\n\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\n\n\t\tthis.setFromPoints( _points );\n\n\t\treturn this;\n\n\t},\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n} );\n\nfunction satForAxes( axes, v0, v1, v2, extents ) {\n\n\tvar i, j;\n\n\tfor ( i = 0, j = axes.length - 3; i <= j; i += 3 ) {\n\n\t\t_testAxis.fromArray( axes, i );\n\t\t// project the aabb onto the seperating axis\n\t\tvar r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );\n\t\t// project all 3 vertices of the triangle onto the seperating axis\n\t\tvar p0 = v0.dot( _testAxis );\n\t\tvar p1 = v1.dot( _testAxis );\n\t\tvar p2 = v2.dot( _testAxis );\n\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\n\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\n\n\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t// the axis is seperating and we can exit\n\t\t\treturn false;\n\n\t\t}\n\n\t}\n\n\treturn true;\n\n}\n\nexport { Box3 };\n"]},"metadata":{},"sourceType":"module"}