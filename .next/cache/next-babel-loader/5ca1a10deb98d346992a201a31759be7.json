{"ast":null,"code":"import { Vector2 } from 'three/src/Three';\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author davidedc / http://www.sketchpatch.net/\n *\n * NVIDIA FXAA by Timothy Lottes\n * http://timothylottes.blogspot.com/2011/06/fxaa3-source-released.html\n * - WebGL port by @supereggbert\n * http://www.glge.org/demos/fxaa/\n */\n\nvar FXAAShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    resolution: {\n      value: new Vector2(1 / 1024, 1 / 512)\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', 'vUv = uv;', 'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['precision highp float;', '', 'uniform sampler2D tDiffuse;', '', 'uniform vec2 resolution;', '', 'varying vec2 vUv;', '', '#define FXAA_PC 1', '#define FXAA_GLSL_100 1', '#define FXAA_QUALITY_PRESET 12', '', '#define FXAA_GREEN_AS_LUMA 1', '', '/*--------------------------------------------------------------------------*/', '#ifndef FXAA_PC_CONSOLE', '    //', '    // The console algorithm for PC is included', '    // for developers targeting really low spec machines.', '    // Likely better to just run FXAA_PC, and use a really low preset.', '    //', '    #define FXAA_PC_CONSOLE 0', '#endif', '/*--------------------------------------------------------------------------*/', '#ifndef FXAA_GLSL_120', '    #define FXAA_GLSL_120 0', '#endif', '/*--------------------------------------------------------------------------*/', '#ifndef FXAA_GLSL_130', '    #define FXAA_GLSL_130 0', '#endif', '/*--------------------------------------------------------------------------*/', '#ifndef FXAA_HLSL_3', '    #define FXAA_HLSL_3 0', '#endif', '/*--------------------------------------------------------------------------*/', '#ifndef FXAA_HLSL_4', '    #define FXAA_HLSL_4 0', '#endif', '/*--------------------------------------------------------------------------*/', '#ifndef FXAA_HLSL_5', '    #define FXAA_HLSL_5 0', '#endif', '/*==========================================================================*/', '#ifndef FXAA_GREEN_AS_LUMA', '    //', '    // For those using non-linear color,', '    // and either not able to get luma in alpha, or not wanting to,', '    // this enables FXAA to run using green as a proxy for luma.', '    // So with this enabled, no need to pack luma in alpha.', '    //', '    // This will turn off AA on anything which lacks some amount of green.', '    // Pure red and blue or combination of only R and B, will get no AA.', '    //', '    // Might want to lower the settings for both,', '    //    fxaaConsoleEdgeThresholdMin', '    //    fxaaQualityEdgeThresholdMin', '    // In order to insure AA does not get turned off on colors', '    // which contain a minor amount of green.', '    //', '    // 1 = On.', '    // 0 = Off.', '    //', '    #define FXAA_GREEN_AS_LUMA 0', '#endif', '/*--------------------------------------------------------------------------*/', '#ifndef FXAA_EARLY_EXIT', '    //', \"    // Controls algorithm's early exit path.\", '    // On PS3 turning this ON adds 2 cycles to the shader.', '    // On 360 turning this OFF adds 10ths of a millisecond to the shader.', '    // Turning this off on console will result in a more blurry image.', '    // So this defaults to on.', '    //', '    // 1 = On.', '    // 0 = Off.', '    //', '    #define FXAA_EARLY_EXIT 1', '#endif', '/*--------------------------------------------------------------------------*/', '#ifndef FXAA_DISCARD', '    //', '    // Only valid for PC OpenGL currently.', '    // Probably will not work when FXAA_GREEN_AS_LUMA = 1.', '    //', \"    // 1 = Use discard on pixels which don't need AA.\", '    //     For APIs which enable concurrent TEX+ROP from same surface.', \"    // 0 = Return unchanged color on pixels which don't need AA.\", '    //', '    #define FXAA_DISCARD 0', '#endif', '/*--------------------------------------------------------------------------*/', '#ifndef FXAA_FAST_PIXEL_OFFSET', '    //', '    // Used for GLSL 120 only.', '    //', '    // 1 = GL API supports fast pixel offsets', '    // 0 = do not use fast pixel offsets', '    //', '    #ifdef GL_EXT_gpu_shader4', '        #define FXAA_FAST_PIXEL_OFFSET 1', '    #endif', '    #ifdef GL_NV_gpu_shader5', '        #define FXAA_FAST_PIXEL_OFFSET 1', '    #endif', '    #ifdef GL_ARB_gpu_shader5', '        #define FXAA_FAST_PIXEL_OFFSET 1', '    #endif', '    #ifndef FXAA_FAST_PIXEL_OFFSET', '        #define FXAA_FAST_PIXEL_OFFSET 0', '    #endif', '#endif', '/*--------------------------------------------------------------------------*/', '#ifndef FXAA_GATHER4_ALPHA', '    //', '    // 1 = API supports gather4 on alpha channel.', '    // 0 = API does not support gather4 on alpha channel.', '    //', '    #if (FXAA_HLSL_5 == 1)', '        #define FXAA_GATHER4_ALPHA 1', '    #endif', '    #ifdef GL_ARB_gpu_shader5', '        #define FXAA_GATHER4_ALPHA 1', '    #endif', '    #ifdef GL_NV_gpu_shader5', '        #define FXAA_GATHER4_ALPHA 1', '    #endif', '    #ifndef FXAA_GATHER4_ALPHA', '        #define FXAA_GATHER4_ALPHA 0', '    #endif', '#endif', '', '', '/*============================================================================', '                        FXAA QUALITY - TUNING KNOBS', '------------------------------------------------------------------------------', 'NOTE the other tuning knobs are now in the shader function inputs!', '============================================================================*/', '#ifndef FXAA_QUALITY_PRESET', '    //', '    // Choose the quality preset.', '    // This needs to be compiled into the shader as it effects code.', '    // Best option to include multiple presets is to', '    // in each shader define the preset, then include this file.', '    //', '    // OPTIONS', '    // -----------------------------------------------------------------------', '    // 10 to 15 - default medium dither (10=fastest, 15=highest quality)', '    // 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)', '    // 39       - no dither, very expensive', '    //', '    // NOTES', '    // -----------------------------------------------------------------------', '    // 12 = slightly faster then FXAA 3.9 and higher edge quality (default)', '    // 13 = about same speed as FXAA 3.9 and better than 12', '    // 23 = closest to FXAA 3.9 visually and performance wise', '    //  _ = the lowest digit is directly related to performance', '    // _  = the highest digit is directly related to style', '    //', '    #define FXAA_QUALITY_PRESET 12', '#endif', '', '', '/*============================================================================', '', '                           FXAA QUALITY - PRESETS', '', '============================================================================*/', '', '/*============================================================================', '                     FXAA QUALITY - MEDIUM DITHER PRESETS', '============================================================================*/', '#if (FXAA_QUALITY_PRESET == 10)', '    #define FXAA_QUALITY_PS 3', '    #define FXAA_QUALITY_P0 1.5', '    #define FXAA_QUALITY_P1 3.0', '    #define FXAA_QUALITY_P2 12.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 11)', '    #define FXAA_QUALITY_PS 4', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 3.0', '    #define FXAA_QUALITY_P3 12.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 12)', '    #define FXAA_QUALITY_PS 5', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 4.0', '    #define FXAA_QUALITY_P4 12.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 13)', '    #define FXAA_QUALITY_PS 6', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 2.0', '    #define FXAA_QUALITY_P4 4.0', '    #define FXAA_QUALITY_P5 12.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 14)', '    #define FXAA_QUALITY_PS 7', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 2.0', '    #define FXAA_QUALITY_P4 2.0', '    #define FXAA_QUALITY_P5 4.0', '    #define FXAA_QUALITY_P6 12.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 15)', '    #define FXAA_QUALITY_PS 8', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 2.0', '    #define FXAA_QUALITY_P4 2.0', '    #define FXAA_QUALITY_P5 2.0', '    #define FXAA_QUALITY_P6 4.0', '    #define FXAA_QUALITY_P7 12.0', '#endif', '', '/*============================================================================', '                     FXAA QUALITY - LOW DITHER PRESETS', '============================================================================*/', '#if (FXAA_QUALITY_PRESET == 20)', '    #define FXAA_QUALITY_PS 3', '    #define FXAA_QUALITY_P0 1.5', '    #define FXAA_QUALITY_P1 2.0', '    #define FXAA_QUALITY_P2 8.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 21)', '    #define FXAA_QUALITY_PS 4', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 8.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 22)', '    #define FXAA_QUALITY_PS 5', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 2.0', '    #define FXAA_QUALITY_P4 8.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 23)', '    #define FXAA_QUALITY_PS 6', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 2.0', '    #define FXAA_QUALITY_P4 2.0', '    #define FXAA_QUALITY_P5 8.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 24)', '    #define FXAA_QUALITY_PS 7', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 2.0', '    #define FXAA_QUALITY_P4 2.0', '    #define FXAA_QUALITY_P5 3.0', '    #define FXAA_QUALITY_P6 8.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 25)', '    #define FXAA_QUALITY_PS 8', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 2.0', '    #define FXAA_QUALITY_P4 2.0', '    #define FXAA_QUALITY_P5 2.0', '    #define FXAA_QUALITY_P6 4.0', '    #define FXAA_QUALITY_P7 8.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 26)', '    #define FXAA_QUALITY_PS 9', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 2.0', '    #define FXAA_QUALITY_P4 2.0', '    #define FXAA_QUALITY_P5 2.0', '    #define FXAA_QUALITY_P6 2.0', '    #define FXAA_QUALITY_P7 4.0', '    #define FXAA_QUALITY_P8 8.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 27)', '    #define FXAA_QUALITY_PS 10', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 2.0', '    #define FXAA_QUALITY_P4 2.0', '    #define FXAA_QUALITY_P5 2.0', '    #define FXAA_QUALITY_P6 2.0', '    #define FXAA_QUALITY_P7 2.0', '    #define FXAA_QUALITY_P8 4.0', '    #define FXAA_QUALITY_P9 8.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 28)', '    #define FXAA_QUALITY_PS 11', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 2.0', '    #define FXAA_QUALITY_P4 2.0', '    #define FXAA_QUALITY_P5 2.0', '    #define FXAA_QUALITY_P6 2.0', '    #define FXAA_QUALITY_P7 2.0', '    #define FXAA_QUALITY_P8 2.0', '    #define FXAA_QUALITY_P9 4.0', '    #define FXAA_QUALITY_P10 8.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 29)', '    #define FXAA_QUALITY_PS 12', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 2.0', '    #define FXAA_QUALITY_P4 2.0', '    #define FXAA_QUALITY_P5 2.0', '    #define FXAA_QUALITY_P6 2.0', '    #define FXAA_QUALITY_P7 2.0', '    #define FXAA_QUALITY_P8 2.0', '    #define FXAA_QUALITY_P9 2.0', '    #define FXAA_QUALITY_P10 4.0', '    #define FXAA_QUALITY_P11 8.0', '#endif', '', '/*============================================================================', '                     FXAA QUALITY - EXTREME QUALITY', '============================================================================*/', '#if (FXAA_QUALITY_PRESET == 39)', '    #define FXAA_QUALITY_PS 12', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.0', '    #define FXAA_QUALITY_P2 1.0', '    #define FXAA_QUALITY_P3 1.0', '    #define FXAA_QUALITY_P4 1.0', '    #define FXAA_QUALITY_P5 1.5', '    #define FXAA_QUALITY_P6 2.0', '    #define FXAA_QUALITY_P7 2.0', '    #define FXAA_QUALITY_P8 2.0', '    #define FXAA_QUALITY_P9 2.0', '    #define FXAA_QUALITY_P10 4.0', '    #define FXAA_QUALITY_P11 8.0', '#endif', '', '', '', '/*============================================================================', '', '                                API PORTING', '', '============================================================================*/', '#if (FXAA_GLSL_100 == 1) || (FXAA_GLSL_120 == 1) || (FXAA_GLSL_130 == 1)', '    #define FxaaBool bool', '    #define FxaaDiscard discard', '    #define FxaaFloat float', '    #define FxaaFloat2 vec2', '    #define FxaaFloat3 vec3', '    #define FxaaFloat4 vec4', '    #define FxaaHalf float', '    #define FxaaHalf2 vec2', '    #define FxaaHalf3 vec3', '    #define FxaaHalf4 vec4', '    #define FxaaInt2 ivec2', '    #define FxaaSat(x) clamp(x, 0.0, 1.0)', '    #define FxaaTex sampler2D', '#else', '    #define FxaaBool bool', '    #define FxaaDiscard clip(-1)', '    #define FxaaFloat float', '    #define FxaaFloat2 float2', '    #define FxaaFloat3 float3', '    #define FxaaFloat4 float4', '    #define FxaaHalf half', '    #define FxaaHalf2 half2', '    #define FxaaHalf3 half3', '    #define FxaaHalf4 half4', '    #define FxaaSat(x) saturate(x)', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_GLSL_100 == 1)', '  #define FxaaTexTop(t, p) texture2D(t, p, 0.0)', '  #define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r), 0.0)', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_GLSL_120 == 1)', '    // Requires,', '    //  #version 120', '    // And at least,', '    //  #extension GL_EXT_gpu_shader4 : enable', '    //  (or set FXAA_FAST_PIXEL_OFFSET 1 to work like DX9)', '    #define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)', '    #if (FXAA_FAST_PIXEL_OFFSET == 1)', '        #define FxaaTexOff(t, p, o, r) texture2DLodOffset(t, p, 0.0, o)', '    #else', '        #define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)', '    #endif', '    #if (FXAA_GATHER4_ALPHA == 1)', '        // use #extension GL_ARB_gpu_shader5 : enable', '        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)', '        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)', '        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)', '        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)', '    #endif', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_GLSL_130 == 1)', '    // Requires \"#version 130\" or better', '    #define FxaaTexTop(t, p) textureLod(t, p, 0.0)', '    #define FxaaTexOff(t, p, o, r) textureLodOffset(t, p, 0.0, o)', '    #if (FXAA_GATHER4_ALPHA == 1)', '        // use #extension GL_ARB_gpu_shader5 : enable', '        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)', '        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)', '        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)', '        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)', '    #endif', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_HLSL_3 == 1)', '    #define FxaaInt2 float2', '    #define FxaaTex sampler2D', '    #define FxaaTexTop(t, p) tex2Dlod(t, float4(p, 0.0, 0.0))', '    #define FxaaTexOff(t, p, o, r) tex2Dlod(t, float4(p + (o * r), 0, 0))', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_HLSL_4 == 1)', '    #define FxaaInt2 int2', '    struct FxaaTex { SamplerState smpl; Texture2D tex; };', '    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)', '    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_HLSL_5 == 1)', '    #define FxaaInt2 int2', '    struct FxaaTex { SamplerState smpl; Texture2D tex; };', '    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)', '    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)', '    #define FxaaTexAlpha4(t, p) t.tex.GatherAlpha(t.smpl, p)', '    #define FxaaTexOffAlpha4(t, p, o) t.tex.GatherAlpha(t.smpl, p, o)', '    #define FxaaTexGreen4(t, p) t.tex.GatherGreen(t.smpl, p)', '    #define FxaaTexOffGreen4(t, p, o) t.tex.GatherGreen(t.smpl, p, o)', '#endif', '', '', '/*============================================================================', '                   GREEN AS LUMA OPTION SUPPORT FUNCTION', '============================================================================*/', '#if (FXAA_GREEN_AS_LUMA == 0)', '    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.w; }', '#else', '    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }', '#endif', '', '', '', '', '/*============================================================================', '', '                             FXAA3 QUALITY - PC', '', '============================================================================*/', '#if (FXAA_PC == 1)', '/*--------------------------------------------------------------------------*/', 'FxaaFloat4 FxaaPixelShader(', '    //', '    // Use noperspective interpolation here (turn off perspective interpolation).', '    // {xy} = center of pixel', '    FxaaFloat2 pos,', '    //', '    // Used only for FXAA Console, and not used on the 360 version.', '    // Use noperspective interpolation here (turn off perspective interpolation).', '    // {xy_} = upper left of pixel', '    // {_zw} = lower right of pixel', '    FxaaFloat4 fxaaConsolePosPos,', '    //', '    // Input color texture.', '    // {rgb_} = color in linear or perceptual color space', '    // if (FXAA_GREEN_AS_LUMA == 0)', '    //     {__a} = luma in perceptual color space (not linear)', '    FxaaTex tex,', '    //', '    // Only used on the optimized 360 version of FXAA Console.', '    // For everything but 360, just use the same input here as for \"tex\".', '    // For 360, same texture, just alias with a 2nd sampler.', '    // This sampler needs to have an exponent bias of -1.', '    FxaaTex fxaaConsole360TexExpBiasNegOne,', '    //', '    // Only used on the optimized 360 version of FXAA Console.', '    // For everything but 360, just use the same input here as for \"tex\".', '    // For 360, same texture, just alias with a 3nd sampler.', '    // This sampler needs to have an exponent bias of -2.', '    FxaaTex fxaaConsole360TexExpBiasNegTwo,', '    //', '    // Only used on FXAA Quality.', '    // This must be from a constant/uniform.', '    // {x_} = 1.0/screenWidthInPixels', '    // {_y} = 1.0/screenHeightInPixels', '    FxaaFloat2 fxaaQualityRcpFrame,', '    //', '    // Only used on FXAA Console.', '    // This must be from a constant/uniform.', '    // This effects sub-pixel AA quality and inversely sharpness.', '    //   Where N ranges between,', '    //     N = 0.50 (default)', '    //     N = 0.33 (sharper)', '    // {x__} = -N/screenWidthInPixels', '    // {_y_} = -N/screenHeightInPixels', '    // {_z_} =  N/screenWidthInPixels', '    // {__w} =  N/screenHeightInPixels', '    FxaaFloat4 fxaaConsoleRcpFrameOpt,', '    //', '    // Only used on FXAA Console.', '    // Not used on 360, but used on PS3 and PC.', '    // This must be from a constant/uniform.', '    // {x__} = -2.0/screenWidthInPixels', '    // {_y_} = -2.0/screenHeightInPixels', '    // {_z_} =  2.0/screenWidthInPixels', '    // {__w} =  2.0/screenHeightInPixels', '    FxaaFloat4 fxaaConsoleRcpFrameOpt2,', '    //', '    // Only used on FXAA Console.', '    // Only used on 360 in place of fxaaConsoleRcpFrameOpt2.', '    // This must be from a constant/uniform.', '    // {x__} =  8.0/screenWidthInPixels', '    // {_y_} =  8.0/screenHeightInPixels', '    // {_z_} = -4.0/screenWidthInPixels', '    // {__w} = -4.0/screenHeightInPixels', '    FxaaFloat4 fxaaConsole360RcpFrameOpt2,', '    //', '    // Only used on FXAA Quality.', '    // This used to be the FXAA_QUALITY_SUBPIX define.', '    // It is here now to allow easier tuning.', '    // Choose the amount of sub-pixel aliasing removal.', '    // This can effect sharpness.', '    //   1.00 - upper limit (softer)', '    //   0.75 - default amount of filtering', '    //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)', '    //   0.25 - almost off', '    //   0.00 - completely off', '    FxaaFloat fxaaQualitySubpix,', '    //', '    // Only used on FXAA Quality.', '    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.', '    // It is here now to allow easier tuning.', '    // The minimum amount of local contrast required to apply algorithm.', '    //   0.333 - too little (faster)', '    //   0.250 - low quality', '    //   0.166 - default', '    //   0.125 - high quality', '    //   0.063 - overkill (slower)', '    FxaaFloat fxaaQualityEdgeThreshold,', '    //', '    // Only used on FXAA Quality.', '    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.', '    // It is here now to allow easier tuning.', '    // Trims the algorithm from processing darks.', '    //   0.0833 - upper limit (default, the start of visible unfiltered edges)', '    //   0.0625 - high quality (faster)', '    //   0.0312 - visible limit (slower)', '    // Special notes when using FXAA_GREEN_AS_LUMA,', '    //   Likely want to set this to zero.', '    //   As colors that are mostly not-green', '    //   will appear very dark in the green channel!', '    //   Tune by looking at mostly non-green content,', '    //   then start at zero and increase until aliasing is a problem.', '    FxaaFloat fxaaQualityEdgeThresholdMin,', '    //', '    // Only used on FXAA Console.', '    // This used to be the FXAA_CONSOLE_EDGE_SHARPNESS define.', '    // It is here now to allow easier tuning.', '    // This does not effect PS3, as this needs to be compiled in.', '    //   Use FXAA_CONSOLE_PS3_EDGE_SHARPNESS for PS3.', '    //   Due to the PS3 being ALU bound,', '    //   there are only three safe values here: 2 and 4 and 8.', '    //   These options use the shaders ability to a free *|/ by 2|4|8.', '    // For all other platforms can be a non-power of two.', '    //   8.0 is sharper (default!!!)', '    //   4.0 is softer', '    //   2.0 is really soft (good only for vector graphics inputs)', '    FxaaFloat fxaaConsoleEdgeSharpness,', '    //', '    // Only used on FXAA Console.', '    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD define.', '    // It is here now to allow easier tuning.', '    // This does not effect PS3, as this needs to be compiled in.', '    //   Use FXAA_CONSOLE_PS3_EDGE_THRESHOLD for PS3.', '    //   Due to the PS3 being ALU bound,', '    //   there are only two safe values here: 1/4 and 1/8.', '    //   These options use the shaders ability to a free *|/ by 2|4|8.', '    // The console setting has a different mapping than the quality setting.', '    // Other platforms can use other values.', '    //   0.125 leaves less aliasing, but is softer (default!!!)', '    //   0.25 leaves more aliasing, and is sharper', '    FxaaFloat fxaaConsoleEdgeThreshold,', '    //', '    // Only used on FXAA Console.', '    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD_MIN define.', '    // It is here now to allow easier tuning.', '    // Trims the algorithm from processing darks.', '    // The console setting has a different mapping than the quality setting.', '    // This only applies when FXAA_EARLY_EXIT is 1.', '    // This does not apply to PS3,', '    // PS3 was simplified to avoid more shader instructions.', '    //   0.06 - faster but more aliasing in darks', '    //   0.05 - default', '    //   0.04 - slower and less aliasing in darks', '    // Special notes when using FXAA_GREEN_AS_LUMA,', '    //   Likely want to set this to zero.', '    //   As colors that are mostly not-green', '    //   will appear very dark in the green channel!', '    //   Tune by looking at mostly non-green content,', '    //   then start at zero and increase until aliasing is a problem.', '    FxaaFloat fxaaConsoleEdgeThresholdMin,', '    //', '    // Extra constants for 360 FXAA Console only.', '    // Use zeros or anything else for other platforms.', '    // These must be in physical constant registers and NOT immediates.', '    // Immediates will result in compiler un-optimizing.', '    // {xyzw} = float4(1.0, -1.0, 0.25, -0.25)', '    FxaaFloat4 fxaaConsole360ConstDir', ') {', '/*--------------------------------------------------------------------------*/', '    FxaaFloat2 posM;', '    posM.x = pos.x;', '    posM.y = pos.y;', '    #if (FXAA_GATHER4_ALPHA == 1)', '        #if (FXAA_DISCARD == 0)', '            FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);', '            #if (FXAA_GREEN_AS_LUMA == 0)', '                #define lumaM rgbyM.w', '            #else', '                #define lumaM rgbyM.y', '            #endif', '        #endif', '        #if (FXAA_GREEN_AS_LUMA == 0)', '            FxaaFloat4 luma4A = FxaaTexAlpha4(tex, posM);', '            FxaaFloat4 luma4B = FxaaTexOffAlpha4(tex, posM, FxaaInt2(-1, -1));', '        #else', '            FxaaFloat4 luma4A = FxaaTexGreen4(tex, posM);', '            FxaaFloat4 luma4B = FxaaTexOffGreen4(tex, posM, FxaaInt2(-1, -1));', '        #endif', '        #if (FXAA_DISCARD == 1)', '            #define lumaM luma4A.w', '        #endif', '        #define lumaE luma4A.z', '        #define lumaS luma4A.x', '        #define lumaSE luma4A.y', '        #define lumaNW luma4B.w', '        #define lumaN luma4B.z', '        #define lumaW luma4B.x', '    #else', '        FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);', '        #if (FXAA_GREEN_AS_LUMA == 0)', '            #define lumaM rgbyM.w', '        #else', '            #define lumaM rgbyM.y', '        #endif', '        #if (FXAA_GLSL_100 == 1)', '          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0, 1.0), fxaaQualityRcpFrame.xy));', '          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 0.0), fxaaQualityRcpFrame.xy));', '          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0,-1.0), fxaaQualityRcpFrame.xy));', '          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 0.0), fxaaQualityRcpFrame.xy));', '        #else', '          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));', '          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));', '          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));', '          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));', '        #endif', '    #endif', '/*--------------------------------------------------------------------------*/', '    FxaaFloat maxSM = max(lumaS, lumaM);', '    FxaaFloat minSM = min(lumaS, lumaM);', '    FxaaFloat maxESM = max(lumaE, maxSM);', '    FxaaFloat minESM = min(lumaE, minSM);', '    FxaaFloat maxWN = max(lumaN, lumaW);', '    FxaaFloat minWN = min(lumaN, lumaW);', '    FxaaFloat rangeMax = max(maxWN, maxESM);', '    FxaaFloat rangeMin = min(minWN, minESM);', '    FxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;', '    FxaaFloat range = rangeMax - rangeMin;', '    FxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);', '    FxaaBool earlyExit = range < rangeMaxClamped;', '/*--------------------------------------------------------------------------*/', '    if(earlyExit)', '        #if (FXAA_DISCARD == 1)', '            FxaaDiscard;', '        #else', '            return rgbyM;', '        #endif', '/*--------------------------------------------------------------------------*/', '    #if (FXAA_GATHER4_ALPHA == 0)', '        #if (FXAA_GLSL_100 == 1)', '          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0,-1.0), fxaaQualityRcpFrame.xy));', '          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 1.0), fxaaQualityRcpFrame.xy));', '          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0,-1.0), fxaaQualityRcpFrame.xy));', '          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 1.0), fxaaQualityRcpFrame.xy));', '        #else', '          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));', '          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));', '          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));', '          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));', '        #endif', '    #else', '        FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(1, -1), fxaaQualityRcpFrame.xy));', '        FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));', '    #endif', '/*--------------------------------------------------------------------------*/', '    FxaaFloat lumaNS = lumaN + lumaS;', '    FxaaFloat lumaWE = lumaW + lumaE;', '    FxaaFloat subpixRcpRange = 1.0/range;', '    FxaaFloat subpixNSWE = lumaNS + lumaWE;', '    FxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;', '    FxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;', '/*--------------------------------------------------------------------------*/', '    FxaaFloat lumaNESE = lumaNE + lumaSE;', '    FxaaFloat lumaNWNE = lumaNW + lumaNE;', '    FxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;', '    FxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;', '/*--------------------------------------------------------------------------*/', '    FxaaFloat lumaNWSW = lumaNW + lumaSW;', '    FxaaFloat lumaSWSE = lumaSW + lumaSE;', '    FxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);', '    FxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);', '    FxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;', '    FxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;', '    FxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;', '    FxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;', '/*--------------------------------------------------------------------------*/', '    FxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;', '    FxaaFloat lengthSign = fxaaQualityRcpFrame.x;', '    FxaaBool horzSpan = edgeHorz >= edgeVert;', '    FxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;', '/*--------------------------------------------------------------------------*/', '    if(!horzSpan) lumaN = lumaW;', '    if(!horzSpan) lumaS = lumaE;', '    if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;', '    FxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;', '/*--------------------------------------------------------------------------*/', '    FxaaFloat gradientN = lumaN - lumaM;', '    FxaaFloat gradientS = lumaS - lumaM;', '    FxaaFloat lumaNN = lumaN + lumaM;', '    FxaaFloat lumaSS = lumaS + lumaM;', '    FxaaBool pairN = abs(gradientN) >= abs(gradientS);', '    FxaaFloat gradient = max(abs(gradientN), abs(gradientS));', '    if(pairN) lengthSign = -lengthSign;', '    FxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);', '/*--------------------------------------------------------------------------*/', '    FxaaFloat2 posB;', '    posB.x = posM.x;', '    posB.y = posM.y;', '    FxaaFloat2 offNP;', '    offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;', '    offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;', '    if(!horzSpan) posB.x += lengthSign * 0.5;', '    if( horzSpan) posB.y += lengthSign * 0.5;', '/*--------------------------------------------------------------------------*/', '    FxaaFloat2 posN;', '    posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;', '    posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;', '    FxaaFloat2 posP;', '    posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;', '    posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;', '    FxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;', '    FxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));', '    FxaaFloat subpixE = subpixC * subpixC;', '    FxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));', '/*--------------------------------------------------------------------------*/', '    if(!pairN) lumaNN = lumaSS;', '    FxaaFloat gradientScaled = gradient * 1.0/4.0;', '    FxaaFloat lumaMM = lumaM - lumaNN * 0.5;', '    FxaaFloat subpixF = subpixD * subpixE;', '    FxaaBool lumaMLTZero = lumaMM < 0.0;', '/*--------------------------------------------------------------------------*/', '    lumaEndN -= lumaNN * 0.5;', '    lumaEndP -= lumaNN * 0.5;', '    FxaaBool doneN = abs(lumaEndN) >= gradientScaled;', '    FxaaBool doneP = abs(lumaEndP) >= gradientScaled;', '    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;', '    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;', '    FxaaBool doneNP = (!doneN) || (!doneP);', '    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;', '    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;', '/*--------------------------------------------------------------------------*/', '    if(doneNP) {', '        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));', '        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));', '        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;', '        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;', '        doneN = abs(lumaEndN) >= gradientScaled;', '        doneP = abs(lumaEndP) >= gradientScaled;', '        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;', '        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;', '        doneNP = (!doneN) || (!doneP);', '        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;', '        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;', '/*--------------------------------------------------------------------------*/', '        #if (FXAA_QUALITY_PS > 3)', '        if(doneNP) {', '            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));', '            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));', '            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;', '            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;', '            doneN = abs(lumaEndN) >= gradientScaled;', '            doneP = abs(lumaEndP) >= gradientScaled;', '            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;', '            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;', '            doneNP = (!doneN) || (!doneP);', '            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;', '            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;', '/*--------------------------------------------------------------------------*/', '            #if (FXAA_QUALITY_PS > 4)', '            if(doneNP) {', '                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));', '                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));', '                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;', '                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;', '                doneN = abs(lumaEndN) >= gradientScaled;', '                doneP = abs(lumaEndP) >= gradientScaled;', '                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;', '                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;', '                doneNP = (!doneN) || (!doneP);', '                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;', '                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;', '/*--------------------------------------------------------------------------*/', '                #if (FXAA_QUALITY_PS > 5)', '                if(doneNP) {', '                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));', '                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));', '                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;', '                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;', '                    doneN = abs(lumaEndN) >= gradientScaled;', '                    doneP = abs(lumaEndP) >= gradientScaled;', '                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;', '                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;', '                    doneNP = (!doneN) || (!doneP);', '                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;', '                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;', '/*--------------------------------------------------------------------------*/', '                    #if (FXAA_QUALITY_PS > 6)', '                    if(doneNP) {', '                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));', '                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));', '                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;', '                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;', '                        doneN = abs(lumaEndN) >= gradientScaled;', '                        doneP = abs(lumaEndP) >= gradientScaled;', '                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;', '                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;', '                        doneNP = (!doneN) || (!doneP);', '                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;', '                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;', '/*--------------------------------------------------------------------------*/', '                        #if (FXAA_QUALITY_PS > 7)', '                        if(doneNP) {', '                            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));', '                            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));', '                            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;', '                            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;', '                            doneN = abs(lumaEndN) >= gradientScaled;', '                            doneP = abs(lumaEndP) >= gradientScaled;', '                            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;', '                            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;', '                            doneNP = (!doneN) || (!doneP);', '                            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;', '                            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;', '/*--------------------------------------------------------------------------*/', '    #if (FXAA_QUALITY_PS > 8)', '    if(doneNP) {', '        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));', '        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));', '        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;', '        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;', '        doneN = abs(lumaEndN) >= gradientScaled;', '        doneP = abs(lumaEndP) >= gradientScaled;', '        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;', '        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;', '        doneNP = (!doneN) || (!doneP);', '        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;', '        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;', '/*--------------------------------------------------------------------------*/', '        #if (FXAA_QUALITY_PS > 9)', '        if(doneNP) {', '            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));', '            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));', '            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;', '            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;', '            doneN = abs(lumaEndN) >= gradientScaled;', '            doneP = abs(lumaEndP) >= gradientScaled;', '            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;', '            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;', '            doneNP = (!doneN) || (!doneP);', '            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;', '            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;', '/*--------------------------------------------------------------------------*/', '            #if (FXAA_QUALITY_PS > 10)', '            if(doneNP) {', '                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));', '                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));', '                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;', '                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;', '                doneN = abs(lumaEndN) >= gradientScaled;', '                doneP = abs(lumaEndP) >= gradientScaled;', '                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;', '                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;', '                doneNP = (!doneN) || (!doneP);', '                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;', '                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;', '/*--------------------------------------------------------------------------*/', '                #if (FXAA_QUALITY_PS > 11)', '                if(doneNP) {', '                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));', '                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));', '                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;', '                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;', '                    doneN = abs(lumaEndN) >= gradientScaled;', '                    doneP = abs(lumaEndP) >= gradientScaled;', '                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;', '                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;', '                    doneNP = (!doneN) || (!doneP);', '                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;', '                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;', '/*--------------------------------------------------------------------------*/', '                    #if (FXAA_QUALITY_PS > 12)', '                    if(doneNP) {', '                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));', '                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));', '                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;', '                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;', '                        doneN = abs(lumaEndN) >= gradientScaled;', '                        doneP = abs(lumaEndP) >= gradientScaled;', '                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;', '                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;', '                        doneNP = (!doneN) || (!doneP);', '                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;', '                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;', '/*--------------------------------------------------------------------------*/', '                    }', '                    #endif', '/*--------------------------------------------------------------------------*/', '                }', '                #endif', '/*--------------------------------------------------------------------------*/', '            }', '            #endif', '/*--------------------------------------------------------------------------*/', '        }', '        #endif', '/*--------------------------------------------------------------------------*/', '    }', '    #endif', '/*--------------------------------------------------------------------------*/', '                        }', '                        #endif', '/*--------------------------------------------------------------------------*/', '                    }', '                    #endif', '/*--------------------------------------------------------------------------*/', '                }', '                #endif', '/*--------------------------------------------------------------------------*/', '            }', '            #endif', '/*--------------------------------------------------------------------------*/', '        }', '        #endif', '/*--------------------------------------------------------------------------*/', '    }', '/*--------------------------------------------------------------------------*/', '    FxaaFloat dstN = posM.x - posN.x;', '    FxaaFloat dstP = posP.x - posM.x;', '    if(!horzSpan) dstN = posM.y - posN.y;', '    if(!horzSpan) dstP = posP.y - posM.y;', '/*--------------------------------------------------------------------------*/', '    FxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;', '    FxaaFloat spanLength = (dstP + dstN);', '    FxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;', '    FxaaFloat spanLengthRcp = 1.0/spanLength;', '/*--------------------------------------------------------------------------*/', '    FxaaBool directionN = dstN < dstP;', '    FxaaFloat dst = min(dstN, dstP);', '    FxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;', '    FxaaFloat subpixG = subpixF * subpixF;', '    FxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;', '    FxaaFloat subpixH = subpixG * fxaaQualitySubpix;', '/*--------------------------------------------------------------------------*/', '    FxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;', '    FxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);', '    if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;', '    if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;', '    #if (FXAA_DISCARD == 1)', '        return FxaaTexTop(tex, posM);', '    #else', '        return FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);', '    #endif', '}', '/*==========================================================================*/', '#endif', '', 'void main() {', '  gl_FragColor = FxaaPixelShader(', '    vUv,', '    vec4(0.0),', '    tDiffuse,', '    tDiffuse,', '    tDiffuse,', '    resolution,', '    vec4(0.0),', '    vec4(0.0),', '    vec4(0.0),', '    0.75,', '    0.166,', '    0.0833,', '    0.0,', '    0.0,', '    0.0,', '    vec4(0.0)', '  );', '', '  // TODO avoid querying texture twice for same texel', '  gl_FragColor.a = texture2D(tDiffuse, vUv).a;', '}'].join('\\n')\n};\nexport { FXAAShader };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/resources/shaders/FXAAShader.js"],"names":["Vector2","FXAAShader","uniforms","tDiffuse","value","resolution","vertexShader","join","fragmentShader"],"mappings":"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","sourcesContent":["import { Vector2 } from 'three/src/Three'\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author davidedc / http://www.sketchpatch.net/\n *\n * NVIDIA FXAA by Timothy Lottes\n * http://timothylottes.blogspot.com/2011/06/fxaa3-source-released.html\n * - WebGL port by @supereggbert\n * http://www.glge.org/demos/fxaa/\n */\n\nvar FXAAShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    resolution: { value: new Vector2(1 / 1024, 1 / 512) },\n  },\n\n  vertexShader: [\n    'varying vec2 vUv;',\n\n    'void main() {',\n\n    'vUv = uv;',\n    'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\n    '}',\n  ].join('\\n'),\n\n  fragmentShader: [\n    'precision highp float;',\n    '',\n    'uniform sampler2D tDiffuse;',\n    '',\n    'uniform vec2 resolution;',\n    '',\n    'varying vec2 vUv;',\n    '',\n    '#define FXAA_PC 1',\n    '#define FXAA_GLSL_100 1',\n    '#define FXAA_QUALITY_PRESET 12',\n    '',\n    '#define FXAA_GREEN_AS_LUMA 1',\n    '',\n    '/*--------------------------------------------------------------------------*/',\n    '#ifndef FXAA_PC_CONSOLE',\n    '    //',\n    '    // The console algorithm for PC is included',\n    '    // for developers targeting really low spec machines.',\n    '    // Likely better to just run FXAA_PC, and use a really low preset.',\n    '    //',\n    '    #define FXAA_PC_CONSOLE 0',\n    '#endif',\n    '/*--------------------------------------------------------------------------*/',\n    '#ifndef FXAA_GLSL_120',\n    '    #define FXAA_GLSL_120 0',\n    '#endif',\n    '/*--------------------------------------------------------------------------*/',\n    '#ifndef FXAA_GLSL_130',\n    '    #define FXAA_GLSL_130 0',\n    '#endif',\n    '/*--------------------------------------------------------------------------*/',\n    '#ifndef FXAA_HLSL_3',\n    '    #define FXAA_HLSL_3 0',\n    '#endif',\n    '/*--------------------------------------------------------------------------*/',\n    '#ifndef FXAA_HLSL_4',\n    '    #define FXAA_HLSL_4 0',\n    '#endif',\n    '/*--------------------------------------------------------------------------*/',\n    '#ifndef FXAA_HLSL_5',\n    '    #define FXAA_HLSL_5 0',\n    '#endif',\n    '/*==========================================================================*/',\n    '#ifndef FXAA_GREEN_AS_LUMA',\n    '    //',\n    '    // For those using non-linear color,',\n    '    // and either not able to get luma in alpha, or not wanting to,',\n    '    // this enables FXAA to run using green as a proxy for luma.',\n    '    // So with this enabled, no need to pack luma in alpha.',\n    '    //',\n    '    // This will turn off AA on anything which lacks some amount of green.',\n    '    // Pure red and blue or combination of only R and B, will get no AA.',\n    '    //',\n    '    // Might want to lower the settings for both,',\n    '    //    fxaaConsoleEdgeThresholdMin',\n    '    //    fxaaQualityEdgeThresholdMin',\n    '    // In order to insure AA does not get turned off on colors',\n    '    // which contain a minor amount of green.',\n    '    //',\n    '    // 1 = On.',\n    '    // 0 = Off.',\n    '    //',\n    '    #define FXAA_GREEN_AS_LUMA 0',\n    '#endif',\n    '/*--------------------------------------------------------------------------*/',\n    '#ifndef FXAA_EARLY_EXIT',\n    '    //',\n    \"    // Controls algorithm's early exit path.\",\n    '    // On PS3 turning this ON adds 2 cycles to the shader.',\n    '    // On 360 turning this OFF adds 10ths of a millisecond to the shader.',\n    '    // Turning this off on console will result in a more blurry image.',\n    '    // So this defaults to on.',\n    '    //',\n    '    // 1 = On.',\n    '    // 0 = Off.',\n    '    //',\n    '    #define FXAA_EARLY_EXIT 1',\n    '#endif',\n    '/*--------------------------------------------------------------------------*/',\n    '#ifndef FXAA_DISCARD',\n    '    //',\n    '    // Only valid for PC OpenGL currently.',\n    '    // Probably will not work when FXAA_GREEN_AS_LUMA = 1.',\n    '    //',\n    \"    // 1 = Use discard on pixels which don't need AA.\",\n    '    //     For APIs which enable concurrent TEX+ROP from same surface.',\n    \"    // 0 = Return unchanged color on pixels which don't need AA.\",\n    '    //',\n    '    #define FXAA_DISCARD 0',\n    '#endif',\n    '/*--------------------------------------------------------------------------*/',\n    '#ifndef FXAA_FAST_PIXEL_OFFSET',\n    '    //',\n    '    // Used for GLSL 120 only.',\n    '    //',\n    '    // 1 = GL API supports fast pixel offsets',\n    '    // 0 = do not use fast pixel offsets',\n    '    //',\n    '    #ifdef GL_EXT_gpu_shader4',\n    '        #define FXAA_FAST_PIXEL_OFFSET 1',\n    '    #endif',\n    '    #ifdef GL_NV_gpu_shader5',\n    '        #define FXAA_FAST_PIXEL_OFFSET 1',\n    '    #endif',\n    '    #ifdef GL_ARB_gpu_shader5',\n    '        #define FXAA_FAST_PIXEL_OFFSET 1',\n    '    #endif',\n    '    #ifndef FXAA_FAST_PIXEL_OFFSET',\n    '        #define FXAA_FAST_PIXEL_OFFSET 0',\n    '    #endif',\n    '#endif',\n    '/*--------------------------------------------------------------------------*/',\n    '#ifndef FXAA_GATHER4_ALPHA',\n    '    //',\n    '    // 1 = API supports gather4 on alpha channel.',\n    '    // 0 = API does not support gather4 on alpha channel.',\n    '    //',\n    '    #if (FXAA_HLSL_5 == 1)',\n    '        #define FXAA_GATHER4_ALPHA 1',\n    '    #endif',\n    '    #ifdef GL_ARB_gpu_shader5',\n    '        #define FXAA_GATHER4_ALPHA 1',\n    '    #endif',\n    '    #ifdef GL_NV_gpu_shader5',\n    '        #define FXAA_GATHER4_ALPHA 1',\n    '    #endif',\n    '    #ifndef FXAA_GATHER4_ALPHA',\n    '        #define FXAA_GATHER4_ALPHA 0',\n    '    #endif',\n    '#endif',\n    '',\n    '',\n    '/*============================================================================',\n    '                        FXAA QUALITY - TUNING KNOBS',\n    '------------------------------------------------------------------------------',\n    'NOTE the other tuning knobs are now in the shader function inputs!',\n    '============================================================================*/',\n    '#ifndef FXAA_QUALITY_PRESET',\n    '    //',\n    '    // Choose the quality preset.',\n    '    // This needs to be compiled into the shader as it effects code.',\n    '    // Best option to include multiple presets is to',\n    '    // in each shader define the preset, then include this file.',\n    '    //',\n    '    // OPTIONS',\n    '    // -----------------------------------------------------------------------',\n    '    // 10 to 15 - default medium dither (10=fastest, 15=highest quality)',\n    '    // 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)',\n    '    // 39       - no dither, very expensive',\n    '    //',\n    '    // NOTES',\n    '    // -----------------------------------------------------------------------',\n    '    // 12 = slightly faster then FXAA 3.9 and higher edge quality (default)',\n    '    // 13 = about same speed as FXAA 3.9 and better than 12',\n    '    // 23 = closest to FXAA 3.9 visually and performance wise',\n    '    //  _ = the lowest digit is directly related to performance',\n    '    // _  = the highest digit is directly related to style',\n    '    //',\n    '    #define FXAA_QUALITY_PRESET 12',\n    '#endif',\n    '',\n    '',\n    '/*============================================================================',\n    '',\n    '                           FXAA QUALITY - PRESETS',\n    '',\n    '============================================================================*/',\n    '',\n    '/*============================================================================',\n    '                     FXAA QUALITY - MEDIUM DITHER PRESETS',\n    '============================================================================*/',\n    '#if (FXAA_QUALITY_PRESET == 10)',\n    '    #define FXAA_QUALITY_PS 3',\n    '    #define FXAA_QUALITY_P0 1.5',\n    '    #define FXAA_QUALITY_P1 3.0',\n    '    #define FXAA_QUALITY_P2 12.0',\n    '#endif',\n    '/*--------------------------------------------------------------------------*/',\n    '#if (FXAA_QUALITY_PRESET == 11)',\n    '    #define FXAA_QUALITY_PS 4',\n    '    #define FXAA_QUALITY_P0 1.0',\n    '    #define FXAA_QUALITY_P1 1.5',\n    '    #define FXAA_QUALITY_P2 3.0',\n    '    #define FXAA_QUALITY_P3 12.0',\n    '#endif',\n    '/*--------------------------------------------------------------------------*/',\n    '#if (FXAA_QUALITY_PRESET == 12)',\n    '    #define FXAA_QUALITY_PS 5',\n    '    #define FXAA_QUALITY_P0 1.0',\n    '    #define FXAA_QUALITY_P1 1.5',\n    '    #define FXAA_QUALITY_P2 2.0',\n    '    #define FXAA_QUALITY_P3 4.0',\n    '    #define FXAA_QUALITY_P4 12.0',\n    '#endif',\n    '/*--------------------------------------------------------------------------*/',\n    '#if (FXAA_QUALITY_PRESET == 13)',\n    '    #define FXAA_QUALITY_PS 6',\n    '    #define FXAA_QUALITY_P0 1.0',\n    '    #define FXAA_QUALITY_P1 1.5',\n    '    #define FXAA_QUALITY_P2 2.0',\n    '    #define FXAA_QUALITY_P3 2.0',\n    '    #define FXAA_QUALITY_P4 4.0',\n    '    #define FXAA_QUALITY_P5 12.0',\n    '#endif',\n    '/*--------------------------------------------------------------------------*/',\n    '#if (FXAA_QUALITY_PRESET == 14)',\n    '    #define FXAA_QUALITY_PS 7',\n    '    #define FXAA_QUALITY_P0 1.0',\n    '    #define FXAA_QUALITY_P1 1.5',\n    '    #define FXAA_QUALITY_P2 2.0',\n    '    #define FXAA_QUALITY_P3 2.0',\n    '    #define FXAA_QUALITY_P4 2.0',\n    '    #define FXAA_QUALITY_P5 4.0',\n    '    #define FXAA_QUALITY_P6 12.0',\n    '#endif',\n    '/*--------------------------------------------------------------------------*/',\n    '#if (FXAA_QUALITY_PRESET == 15)',\n    '    #define FXAA_QUALITY_PS 8',\n    '    #define FXAA_QUALITY_P0 1.0',\n    '    #define FXAA_QUALITY_P1 1.5',\n    '    #define FXAA_QUALITY_P2 2.0',\n    '    #define FXAA_QUALITY_P3 2.0',\n    '    #define FXAA_QUALITY_P4 2.0',\n    '    #define FXAA_QUALITY_P5 2.0',\n    '    #define FXAA_QUALITY_P6 4.0',\n    '    #define FXAA_QUALITY_P7 12.0',\n    '#endif',\n    '',\n    '/*============================================================================',\n    '                     FXAA QUALITY - LOW DITHER PRESETS',\n    '============================================================================*/',\n    '#if (FXAA_QUALITY_PRESET == 20)',\n    '    #define FXAA_QUALITY_PS 3',\n    '    #define FXAA_QUALITY_P0 1.5',\n    '    #define FXAA_QUALITY_P1 2.0',\n    '    #define FXAA_QUALITY_P2 8.0',\n    '#endif',\n    '/*--------------------------------------------------------------------------*/',\n    '#if (FXAA_QUALITY_PRESET == 21)',\n    '    #define FXAA_QUALITY_PS 4',\n    '    #define FXAA_QUALITY_P0 1.0',\n    '    #define FXAA_QUALITY_P1 1.5',\n    '    #define FXAA_QUALITY_P2 2.0',\n    '    #define FXAA_QUALITY_P3 8.0',\n    '#endif',\n    '/*--------------------------------------------------------------------------*/',\n    '#if (FXAA_QUALITY_PRESET == 22)',\n    '    #define FXAA_QUALITY_PS 5',\n    '    #define FXAA_QUALITY_P0 1.0',\n    '    #define FXAA_QUALITY_P1 1.5',\n    '    #define FXAA_QUALITY_P2 2.0',\n    '    #define FXAA_QUALITY_P3 2.0',\n    '    #define FXAA_QUALITY_P4 8.0',\n    '#endif',\n    '/*--------------------------------------------------------------------------*/',\n    '#if (FXAA_QUALITY_PRESET == 23)',\n    '    #define FXAA_QUALITY_PS 6',\n    '    #define FXAA_QUALITY_P0 1.0',\n    '    #define FXAA_QUALITY_P1 1.5',\n    '    #define FXAA_QUALITY_P2 2.0',\n    '    #define FXAA_QUALITY_P3 2.0',\n    '    #define FXAA_QUALITY_P4 2.0',\n    '    #define FXAA_QUALITY_P5 8.0',\n    '#endif',\n    '/*--------------------------------------------------------------------------*/',\n    '#if (FXAA_QUALITY_PRESET == 24)',\n    '    #define FXAA_QUALITY_PS 7',\n    '    #define FXAA_QUALITY_P0 1.0',\n    '    #define FXAA_QUALITY_P1 1.5',\n    '    #define FXAA_QUALITY_P2 2.0',\n    '    #define FXAA_QUALITY_P3 2.0',\n    '    #define FXAA_QUALITY_P4 2.0',\n    '    #define FXAA_QUALITY_P5 3.0',\n    '    #define FXAA_QUALITY_P6 8.0',\n    '#endif',\n    '/*--------------------------------------------------------------------------*/',\n    '#if (FXAA_QUALITY_PRESET == 25)',\n    '    #define FXAA_QUALITY_PS 8',\n    '    #define FXAA_QUALITY_P0 1.0',\n    '    #define FXAA_QUALITY_P1 1.5',\n    '    #define FXAA_QUALITY_P2 2.0',\n    '    #define FXAA_QUALITY_P3 2.0',\n    '    #define FXAA_QUALITY_P4 2.0',\n    '    #define FXAA_QUALITY_P5 2.0',\n    '    #define FXAA_QUALITY_P6 4.0',\n    '    #define FXAA_QUALITY_P7 8.0',\n    '#endif',\n    '/*--------------------------------------------------------------------------*/',\n    '#if (FXAA_QUALITY_PRESET == 26)',\n    '    #define FXAA_QUALITY_PS 9',\n    '    #define FXAA_QUALITY_P0 1.0',\n    '    #define FXAA_QUALITY_P1 1.5',\n    '    #define FXAA_QUALITY_P2 2.0',\n    '    #define FXAA_QUALITY_P3 2.0',\n    '    #define FXAA_QUALITY_P4 2.0',\n    '    #define FXAA_QUALITY_P5 2.0',\n    '    #define FXAA_QUALITY_P6 2.0',\n    '    #define FXAA_QUALITY_P7 4.0',\n    '    #define FXAA_QUALITY_P8 8.0',\n    '#endif',\n    '/*--------------------------------------------------------------------------*/',\n    '#if (FXAA_QUALITY_PRESET == 27)',\n    '    #define FXAA_QUALITY_PS 10',\n    '    #define FXAA_QUALITY_P0 1.0',\n    '    #define FXAA_QUALITY_P1 1.5',\n    '    #define FXAA_QUALITY_P2 2.0',\n    '    #define FXAA_QUALITY_P3 2.0',\n    '    #define FXAA_QUALITY_P4 2.0',\n    '    #define FXAA_QUALITY_P5 2.0',\n    '    #define FXAA_QUALITY_P6 2.0',\n    '    #define FXAA_QUALITY_P7 2.0',\n    '    #define FXAA_QUALITY_P8 4.0',\n    '    #define FXAA_QUALITY_P9 8.0',\n    '#endif',\n    '/*--------------------------------------------------------------------------*/',\n    '#if (FXAA_QUALITY_PRESET == 28)',\n    '    #define FXAA_QUALITY_PS 11',\n    '    #define FXAA_QUALITY_P0 1.0',\n    '    #define FXAA_QUALITY_P1 1.5',\n    '    #define FXAA_QUALITY_P2 2.0',\n    '    #define FXAA_QUALITY_P3 2.0',\n    '    #define FXAA_QUALITY_P4 2.0',\n    '    #define FXAA_QUALITY_P5 2.0',\n    '    #define FXAA_QUALITY_P6 2.0',\n    '    #define FXAA_QUALITY_P7 2.0',\n    '    #define FXAA_QUALITY_P8 2.0',\n    '    #define FXAA_QUALITY_P9 4.0',\n    '    #define FXAA_QUALITY_P10 8.0',\n    '#endif',\n    '/*--------------------------------------------------------------------------*/',\n    '#if (FXAA_QUALITY_PRESET == 29)',\n    '    #define FXAA_QUALITY_PS 12',\n    '    #define FXAA_QUALITY_P0 1.0',\n    '    #define FXAA_QUALITY_P1 1.5',\n    '    #define FXAA_QUALITY_P2 2.0',\n    '    #define FXAA_QUALITY_P3 2.0',\n    '    #define FXAA_QUALITY_P4 2.0',\n    '    #define FXAA_QUALITY_P5 2.0',\n    '    #define FXAA_QUALITY_P6 2.0',\n    '    #define FXAA_QUALITY_P7 2.0',\n    '    #define FXAA_QUALITY_P8 2.0',\n    '    #define FXAA_QUALITY_P9 2.0',\n    '    #define FXAA_QUALITY_P10 4.0',\n    '    #define FXAA_QUALITY_P11 8.0',\n    '#endif',\n    '',\n    '/*============================================================================',\n    '                     FXAA QUALITY - EXTREME QUALITY',\n    '============================================================================*/',\n    '#if (FXAA_QUALITY_PRESET == 39)',\n    '    #define FXAA_QUALITY_PS 12',\n    '    #define FXAA_QUALITY_P0 1.0',\n    '    #define FXAA_QUALITY_P1 1.0',\n    '    #define FXAA_QUALITY_P2 1.0',\n    '    #define FXAA_QUALITY_P3 1.0',\n    '    #define FXAA_QUALITY_P4 1.0',\n    '    #define FXAA_QUALITY_P5 1.5',\n    '    #define FXAA_QUALITY_P6 2.0',\n    '    #define FXAA_QUALITY_P7 2.0',\n    '    #define FXAA_QUALITY_P8 2.0',\n    '    #define FXAA_QUALITY_P9 2.0',\n    '    #define FXAA_QUALITY_P10 4.0',\n    '    #define FXAA_QUALITY_P11 8.0',\n    '#endif',\n    '',\n    '',\n    '',\n    '/*============================================================================',\n    '',\n    '                                API PORTING',\n    '',\n    '============================================================================*/',\n    '#if (FXAA_GLSL_100 == 1) || (FXAA_GLSL_120 == 1) || (FXAA_GLSL_130 == 1)',\n    '    #define FxaaBool bool',\n    '    #define FxaaDiscard discard',\n    '    #define FxaaFloat float',\n    '    #define FxaaFloat2 vec2',\n    '    #define FxaaFloat3 vec3',\n    '    #define FxaaFloat4 vec4',\n    '    #define FxaaHalf float',\n    '    #define FxaaHalf2 vec2',\n    '    #define FxaaHalf3 vec3',\n    '    #define FxaaHalf4 vec4',\n    '    #define FxaaInt2 ivec2',\n    '    #define FxaaSat(x) clamp(x, 0.0, 1.0)',\n    '    #define FxaaTex sampler2D',\n    '#else',\n    '    #define FxaaBool bool',\n    '    #define FxaaDiscard clip(-1)',\n    '    #define FxaaFloat float',\n    '    #define FxaaFloat2 float2',\n    '    #define FxaaFloat3 float3',\n    '    #define FxaaFloat4 float4',\n    '    #define FxaaHalf half',\n    '    #define FxaaHalf2 half2',\n    '    #define FxaaHalf3 half3',\n    '    #define FxaaHalf4 half4',\n    '    #define FxaaSat(x) saturate(x)',\n    '#endif',\n    '/*--------------------------------------------------------------------------*/',\n    '#if (FXAA_GLSL_100 == 1)',\n    '  #define FxaaTexTop(t, p) texture2D(t, p, 0.0)',\n    '  #define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r), 0.0)',\n    '#endif',\n    '/*--------------------------------------------------------------------------*/',\n    '#if (FXAA_GLSL_120 == 1)',\n    '    // Requires,',\n    '    //  #version 120',\n    '    // And at least,',\n    '    //  #extension GL_EXT_gpu_shader4 : enable',\n    '    //  (or set FXAA_FAST_PIXEL_OFFSET 1 to work like DX9)',\n    '    #define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)',\n    '    #if (FXAA_FAST_PIXEL_OFFSET == 1)',\n    '        #define FxaaTexOff(t, p, o, r) texture2DLodOffset(t, p, 0.0, o)',\n    '    #else',\n    '        #define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)',\n    '    #endif',\n    '    #if (FXAA_GATHER4_ALPHA == 1)',\n    '        // use #extension GL_ARB_gpu_shader5 : enable',\n    '        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)',\n    '        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)',\n    '        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)',\n    '        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)',\n    '    #endif',\n    '#endif',\n    '/*--------------------------------------------------------------------------*/',\n    '#if (FXAA_GLSL_130 == 1)',\n    '    // Requires \"#version 130\" or better',\n    '    #define FxaaTexTop(t, p) textureLod(t, p, 0.0)',\n    '    #define FxaaTexOff(t, p, o, r) textureLodOffset(t, p, 0.0, o)',\n    '    #if (FXAA_GATHER4_ALPHA == 1)',\n    '        // use #extension GL_ARB_gpu_shader5 : enable',\n    '        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)',\n    '        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)',\n    '        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)',\n    '        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)',\n    '    #endif',\n    '#endif',\n    '/*--------------------------------------------------------------------------*/',\n    '#if (FXAA_HLSL_3 == 1)',\n    '    #define FxaaInt2 float2',\n    '    #define FxaaTex sampler2D',\n    '    #define FxaaTexTop(t, p) tex2Dlod(t, float4(p, 0.0, 0.0))',\n    '    #define FxaaTexOff(t, p, o, r) tex2Dlod(t, float4(p + (o * r), 0, 0))',\n    '#endif',\n    '/*--------------------------------------------------------------------------*/',\n    '#if (FXAA_HLSL_4 == 1)',\n    '    #define FxaaInt2 int2',\n    '    struct FxaaTex { SamplerState smpl; Texture2D tex; };',\n    '    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)',\n    '    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)',\n    '#endif',\n    '/*--------------------------------------------------------------------------*/',\n    '#if (FXAA_HLSL_5 == 1)',\n    '    #define FxaaInt2 int2',\n    '    struct FxaaTex { SamplerState smpl; Texture2D tex; };',\n    '    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)',\n    '    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)',\n    '    #define FxaaTexAlpha4(t, p) t.tex.GatherAlpha(t.smpl, p)',\n    '    #define FxaaTexOffAlpha4(t, p, o) t.tex.GatherAlpha(t.smpl, p, o)',\n    '    #define FxaaTexGreen4(t, p) t.tex.GatherGreen(t.smpl, p)',\n    '    #define FxaaTexOffGreen4(t, p, o) t.tex.GatherGreen(t.smpl, p, o)',\n    '#endif',\n    '',\n    '',\n    '/*============================================================================',\n    '                   GREEN AS LUMA OPTION SUPPORT FUNCTION',\n    '============================================================================*/',\n    '#if (FXAA_GREEN_AS_LUMA == 0)',\n    '    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.w; }',\n    '#else',\n    '    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }',\n    '#endif',\n    '',\n    '',\n    '',\n    '',\n    '/*============================================================================',\n    '',\n    '                             FXAA3 QUALITY - PC',\n    '',\n    '============================================================================*/',\n    '#if (FXAA_PC == 1)',\n    '/*--------------------------------------------------------------------------*/',\n    'FxaaFloat4 FxaaPixelShader(',\n    '    //',\n    '    // Use noperspective interpolation here (turn off perspective interpolation).',\n    '    // {xy} = center of pixel',\n    '    FxaaFloat2 pos,',\n    '    //',\n    '    // Used only for FXAA Console, and not used on the 360 version.',\n    '    // Use noperspective interpolation here (turn off perspective interpolation).',\n    '    // {xy_} = upper left of pixel',\n    '    // {_zw} = lower right of pixel',\n    '    FxaaFloat4 fxaaConsolePosPos,',\n    '    //',\n    '    // Input color texture.',\n    '    // {rgb_} = color in linear or perceptual color space',\n    '    // if (FXAA_GREEN_AS_LUMA == 0)',\n    '    //     {__a} = luma in perceptual color space (not linear)',\n    '    FxaaTex tex,',\n    '    //',\n    '    // Only used on the optimized 360 version of FXAA Console.',\n    '    // For everything but 360, just use the same input here as for \"tex\".',\n    '    // For 360, same texture, just alias with a 2nd sampler.',\n    '    // This sampler needs to have an exponent bias of -1.',\n    '    FxaaTex fxaaConsole360TexExpBiasNegOne,',\n    '    //',\n    '    // Only used on the optimized 360 version of FXAA Console.',\n    '    // For everything but 360, just use the same input here as for \"tex\".',\n    '    // For 360, same texture, just alias with a 3nd sampler.',\n    '    // This sampler needs to have an exponent bias of -2.',\n    '    FxaaTex fxaaConsole360TexExpBiasNegTwo,',\n    '    //',\n    '    // Only used on FXAA Quality.',\n    '    // This must be from a constant/uniform.',\n    '    // {x_} = 1.0/screenWidthInPixels',\n    '    // {_y} = 1.0/screenHeightInPixels',\n    '    FxaaFloat2 fxaaQualityRcpFrame,',\n    '    //',\n    '    // Only used on FXAA Console.',\n    '    // This must be from a constant/uniform.',\n    '    // This effects sub-pixel AA quality and inversely sharpness.',\n    '    //   Where N ranges between,',\n    '    //     N = 0.50 (default)',\n    '    //     N = 0.33 (sharper)',\n    '    // {x__} = -N/screenWidthInPixels',\n    '    // {_y_} = -N/screenHeightInPixels',\n    '    // {_z_} =  N/screenWidthInPixels',\n    '    // {__w} =  N/screenHeightInPixels',\n    '    FxaaFloat4 fxaaConsoleRcpFrameOpt,',\n    '    //',\n    '    // Only used on FXAA Console.',\n    '    // Not used on 360, but used on PS3 and PC.',\n    '    // This must be from a constant/uniform.',\n    '    // {x__} = -2.0/screenWidthInPixels',\n    '    // {_y_} = -2.0/screenHeightInPixels',\n    '    // {_z_} =  2.0/screenWidthInPixels',\n    '    // {__w} =  2.0/screenHeightInPixels',\n    '    FxaaFloat4 fxaaConsoleRcpFrameOpt2,',\n    '    //',\n    '    // Only used on FXAA Console.',\n    '    // Only used on 360 in place of fxaaConsoleRcpFrameOpt2.',\n    '    // This must be from a constant/uniform.',\n    '    // {x__} =  8.0/screenWidthInPixels',\n    '    // {_y_} =  8.0/screenHeightInPixels',\n    '    // {_z_} = -4.0/screenWidthInPixels',\n    '    // {__w} = -4.0/screenHeightInPixels',\n    '    FxaaFloat4 fxaaConsole360RcpFrameOpt2,',\n    '    //',\n    '    // Only used on FXAA Quality.',\n    '    // This used to be the FXAA_QUALITY_SUBPIX define.',\n    '    // It is here now to allow easier tuning.',\n    '    // Choose the amount of sub-pixel aliasing removal.',\n    '    // This can effect sharpness.',\n    '    //   1.00 - upper limit (softer)',\n    '    //   0.75 - default amount of filtering',\n    '    //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)',\n    '    //   0.25 - almost off',\n    '    //   0.00 - completely off',\n    '    FxaaFloat fxaaQualitySubpix,',\n    '    //',\n    '    // Only used on FXAA Quality.',\n    '    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.',\n    '    // It is here now to allow easier tuning.',\n    '    // The minimum amount of local contrast required to apply algorithm.',\n    '    //   0.333 - too little (faster)',\n    '    //   0.250 - low quality',\n    '    //   0.166 - default',\n    '    //   0.125 - high quality',\n    '    //   0.063 - overkill (slower)',\n    '    FxaaFloat fxaaQualityEdgeThreshold,',\n    '    //',\n    '    // Only used on FXAA Quality.',\n    '    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.',\n    '    // It is here now to allow easier tuning.',\n    '    // Trims the algorithm from processing darks.',\n    '    //   0.0833 - upper limit (default, the start of visible unfiltered edges)',\n    '    //   0.0625 - high quality (faster)',\n    '    //   0.0312 - visible limit (slower)',\n    '    // Special notes when using FXAA_GREEN_AS_LUMA,',\n    '    //   Likely want to set this to zero.',\n    '    //   As colors that are mostly not-green',\n    '    //   will appear very dark in the green channel!',\n    '    //   Tune by looking at mostly non-green content,',\n    '    //   then start at zero and increase until aliasing is a problem.',\n    '    FxaaFloat fxaaQualityEdgeThresholdMin,',\n    '    //',\n    '    // Only used on FXAA Console.',\n    '    // This used to be the FXAA_CONSOLE_EDGE_SHARPNESS define.',\n    '    // It is here now to allow easier tuning.',\n    '    // This does not effect PS3, as this needs to be compiled in.',\n    '    //   Use FXAA_CONSOLE_PS3_EDGE_SHARPNESS for PS3.',\n    '    //   Due to the PS3 being ALU bound,',\n    '    //   there are only three safe values here: 2 and 4 and 8.',\n    '    //   These options use the shaders ability to a free *|/ by 2|4|8.',\n    '    // For all other platforms can be a non-power of two.',\n    '    //   8.0 is sharper (default!!!)',\n    '    //   4.0 is softer',\n    '    //   2.0 is really soft (good only for vector graphics inputs)',\n    '    FxaaFloat fxaaConsoleEdgeSharpness,',\n    '    //',\n    '    // Only used on FXAA Console.',\n    '    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD define.',\n    '    // It is here now to allow easier tuning.',\n    '    // This does not effect PS3, as this needs to be compiled in.',\n    '    //   Use FXAA_CONSOLE_PS3_EDGE_THRESHOLD for PS3.',\n    '    //   Due to the PS3 being ALU bound,',\n    '    //   there are only two safe values here: 1/4 and 1/8.',\n    '    //   These options use the shaders ability to a free *|/ by 2|4|8.',\n    '    // The console setting has a different mapping than the quality setting.',\n    '    // Other platforms can use other values.',\n    '    //   0.125 leaves less aliasing, but is softer (default!!!)',\n    '    //   0.25 leaves more aliasing, and is sharper',\n    '    FxaaFloat fxaaConsoleEdgeThreshold,',\n    '    //',\n    '    // Only used on FXAA Console.',\n    '    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD_MIN define.',\n    '    // It is here now to allow easier tuning.',\n    '    // Trims the algorithm from processing darks.',\n    '    // The console setting has a different mapping than the quality setting.',\n    '    // This only applies when FXAA_EARLY_EXIT is 1.',\n    '    // This does not apply to PS3,',\n    '    // PS3 was simplified to avoid more shader instructions.',\n    '    //   0.06 - faster but more aliasing in darks',\n    '    //   0.05 - default',\n    '    //   0.04 - slower and less aliasing in darks',\n    '    // Special notes when using FXAA_GREEN_AS_LUMA,',\n    '    //   Likely want to set this to zero.',\n    '    //   As colors that are mostly not-green',\n    '    //   will appear very dark in the green channel!',\n    '    //   Tune by looking at mostly non-green content,',\n    '    //   then start at zero and increase until aliasing is a problem.',\n    '    FxaaFloat fxaaConsoleEdgeThresholdMin,',\n    '    //',\n    '    // Extra constants for 360 FXAA Console only.',\n    '    // Use zeros or anything else for other platforms.',\n    '    // These must be in physical constant registers and NOT immediates.',\n    '    // Immediates will result in compiler un-optimizing.',\n    '    // {xyzw} = float4(1.0, -1.0, 0.25, -0.25)',\n    '    FxaaFloat4 fxaaConsole360ConstDir',\n    ') {',\n    '/*--------------------------------------------------------------------------*/',\n    '    FxaaFloat2 posM;',\n    '    posM.x = pos.x;',\n    '    posM.y = pos.y;',\n    '    #if (FXAA_GATHER4_ALPHA == 1)',\n    '        #if (FXAA_DISCARD == 0)',\n    '            FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);',\n    '            #if (FXAA_GREEN_AS_LUMA == 0)',\n    '                #define lumaM rgbyM.w',\n    '            #else',\n    '                #define lumaM rgbyM.y',\n    '            #endif',\n    '        #endif',\n    '        #if (FXAA_GREEN_AS_LUMA == 0)',\n    '            FxaaFloat4 luma4A = FxaaTexAlpha4(tex, posM);',\n    '            FxaaFloat4 luma4B = FxaaTexOffAlpha4(tex, posM, FxaaInt2(-1, -1));',\n    '        #else',\n    '            FxaaFloat4 luma4A = FxaaTexGreen4(tex, posM);',\n    '            FxaaFloat4 luma4B = FxaaTexOffGreen4(tex, posM, FxaaInt2(-1, -1));',\n    '        #endif',\n    '        #if (FXAA_DISCARD == 1)',\n    '            #define lumaM luma4A.w',\n    '        #endif',\n    '        #define lumaE luma4A.z',\n    '        #define lumaS luma4A.x',\n    '        #define lumaSE luma4A.y',\n    '        #define lumaNW luma4B.w',\n    '        #define lumaN luma4B.z',\n    '        #define lumaW luma4B.x',\n    '    #else',\n    '        FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);',\n    '        #if (FXAA_GREEN_AS_LUMA == 0)',\n    '            #define lumaM rgbyM.w',\n    '        #else',\n    '            #define lumaM rgbyM.y',\n    '        #endif',\n    '        #if (FXAA_GLSL_100 == 1)',\n    '          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0, 1.0), fxaaQualityRcpFrame.xy));',\n    '          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 0.0), fxaaQualityRcpFrame.xy));',\n    '          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0,-1.0), fxaaQualityRcpFrame.xy));',\n    '          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 0.0), fxaaQualityRcpFrame.xy));',\n    '        #else',\n    '          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));',\n    '          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));',\n    '          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));',\n    '          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));',\n    '        #endif',\n    '    #endif',\n    '/*--------------------------------------------------------------------------*/',\n    '    FxaaFloat maxSM = max(lumaS, lumaM);',\n    '    FxaaFloat minSM = min(lumaS, lumaM);',\n    '    FxaaFloat maxESM = max(lumaE, maxSM);',\n    '    FxaaFloat minESM = min(lumaE, minSM);',\n    '    FxaaFloat maxWN = max(lumaN, lumaW);',\n    '    FxaaFloat minWN = min(lumaN, lumaW);',\n    '    FxaaFloat rangeMax = max(maxWN, maxESM);',\n    '    FxaaFloat rangeMin = min(minWN, minESM);',\n    '    FxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;',\n    '    FxaaFloat range = rangeMax - rangeMin;',\n    '    FxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);',\n    '    FxaaBool earlyExit = range < rangeMaxClamped;',\n    '/*--------------------------------------------------------------------------*/',\n    '    if(earlyExit)',\n    '        #if (FXAA_DISCARD == 1)',\n    '            FxaaDiscard;',\n    '        #else',\n    '            return rgbyM;',\n    '        #endif',\n    '/*--------------------------------------------------------------------------*/',\n    '    #if (FXAA_GATHER4_ALPHA == 0)',\n    '        #if (FXAA_GLSL_100 == 1)',\n    '          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0,-1.0), fxaaQualityRcpFrame.xy));',\n    '          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 1.0), fxaaQualityRcpFrame.xy));',\n    '          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0,-1.0), fxaaQualityRcpFrame.xy));',\n    '          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 1.0), fxaaQualityRcpFrame.xy));',\n    '        #else',\n    '          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));',\n    '          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));',\n    '          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));',\n    '          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));',\n    '        #endif',\n    '    #else',\n    '        FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(1, -1), fxaaQualityRcpFrame.xy));',\n    '        FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));',\n    '    #endif',\n    '/*--------------------------------------------------------------------------*/',\n    '    FxaaFloat lumaNS = lumaN + lumaS;',\n    '    FxaaFloat lumaWE = lumaW + lumaE;',\n    '    FxaaFloat subpixRcpRange = 1.0/range;',\n    '    FxaaFloat subpixNSWE = lumaNS + lumaWE;',\n    '    FxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;',\n    '    FxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;',\n    '/*--------------------------------------------------------------------------*/',\n    '    FxaaFloat lumaNESE = lumaNE + lumaSE;',\n    '    FxaaFloat lumaNWNE = lumaNW + lumaNE;',\n    '    FxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;',\n    '    FxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;',\n    '/*--------------------------------------------------------------------------*/',\n    '    FxaaFloat lumaNWSW = lumaNW + lumaSW;',\n    '    FxaaFloat lumaSWSE = lumaSW + lumaSE;',\n    '    FxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);',\n    '    FxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);',\n    '    FxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;',\n    '    FxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;',\n    '    FxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;',\n    '    FxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;',\n    '/*--------------------------------------------------------------------------*/',\n    '    FxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;',\n    '    FxaaFloat lengthSign = fxaaQualityRcpFrame.x;',\n    '    FxaaBool horzSpan = edgeHorz >= edgeVert;',\n    '    FxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;',\n    '/*--------------------------------------------------------------------------*/',\n    '    if(!horzSpan) lumaN = lumaW;',\n    '    if(!horzSpan) lumaS = lumaE;',\n    '    if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;',\n    '    FxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;',\n    '/*--------------------------------------------------------------------------*/',\n    '    FxaaFloat gradientN = lumaN - lumaM;',\n    '    FxaaFloat gradientS = lumaS - lumaM;',\n    '    FxaaFloat lumaNN = lumaN + lumaM;',\n    '    FxaaFloat lumaSS = lumaS + lumaM;',\n    '    FxaaBool pairN = abs(gradientN) >= abs(gradientS);',\n    '    FxaaFloat gradient = max(abs(gradientN), abs(gradientS));',\n    '    if(pairN) lengthSign = -lengthSign;',\n    '    FxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);',\n    '/*--------------------------------------------------------------------------*/',\n    '    FxaaFloat2 posB;',\n    '    posB.x = posM.x;',\n    '    posB.y = posM.y;',\n    '    FxaaFloat2 offNP;',\n    '    offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;',\n    '    offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;',\n    '    if(!horzSpan) posB.x += lengthSign * 0.5;',\n    '    if( horzSpan) posB.y += lengthSign * 0.5;',\n    '/*--------------------------------------------------------------------------*/',\n    '    FxaaFloat2 posN;',\n    '    posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;',\n    '    posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;',\n    '    FxaaFloat2 posP;',\n    '    posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;',\n    '    posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;',\n    '    FxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;',\n    '    FxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));',\n    '    FxaaFloat subpixE = subpixC * subpixC;',\n    '    FxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));',\n    '/*--------------------------------------------------------------------------*/',\n    '    if(!pairN) lumaNN = lumaSS;',\n    '    FxaaFloat gradientScaled = gradient * 1.0/4.0;',\n    '    FxaaFloat lumaMM = lumaM - lumaNN * 0.5;',\n    '    FxaaFloat subpixF = subpixD * subpixE;',\n    '    FxaaBool lumaMLTZero = lumaMM < 0.0;',\n    '/*--------------------------------------------------------------------------*/',\n    '    lumaEndN -= lumaNN * 0.5;',\n    '    lumaEndP -= lumaNN * 0.5;',\n    '    FxaaBool doneN = abs(lumaEndN) >= gradientScaled;',\n    '    FxaaBool doneP = abs(lumaEndP) >= gradientScaled;',\n    '    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;',\n    '    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;',\n    '    FxaaBool doneNP = (!doneN) || (!doneP);',\n    '    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;',\n    '    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;',\n    '/*--------------------------------------------------------------------------*/',\n    '    if(doneNP) {',\n    '        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n    '        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n    '        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n    '        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n    '        doneN = abs(lumaEndN) >= gradientScaled;',\n    '        doneP = abs(lumaEndP) >= gradientScaled;',\n    '        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;',\n    '        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;',\n    '        doneNP = (!doneN) || (!doneP);',\n    '        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;',\n    '        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;',\n    '/*--------------------------------------------------------------------------*/',\n    '        #if (FXAA_QUALITY_PS > 3)',\n    '        if(doneNP) {',\n    '            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n    '            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n    '            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n    '            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n    '            doneN = abs(lumaEndN) >= gradientScaled;',\n    '            doneP = abs(lumaEndP) >= gradientScaled;',\n    '            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;',\n    '            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;',\n    '            doneNP = (!doneN) || (!doneP);',\n    '            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;',\n    '            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;',\n    '/*--------------------------------------------------------------------------*/',\n    '            #if (FXAA_QUALITY_PS > 4)',\n    '            if(doneNP) {',\n    '                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n    '                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n    '                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n    '                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n    '                doneN = abs(lumaEndN) >= gradientScaled;',\n    '                doneP = abs(lumaEndP) >= gradientScaled;',\n    '                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;',\n    '                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;',\n    '                doneNP = (!doneN) || (!doneP);',\n    '                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;',\n    '                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;',\n    '/*--------------------------------------------------------------------------*/',\n    '                #if (FXAA_QUALITY_PS > 5)',\n    '                if(doneNP) {',\n    '                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n    '                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n    '                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n    '                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n    '                    doneN = abs(lumaEndN) >= gradientScaled;',\n    '                    doneP = abs(lumaEndP) >= gradientScaled;',\n    '                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;',\n    '                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;',\n    '                    doneNP = (!doneN) || (!doneP);',\n    '                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;',\n    '                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;',\n    '/*--------------------------------------------------------------------------*/',\n    '                    #if (FXAA_QUALITY_PS > 6)',\n    '                    if(doneNP) {',\n    '                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n    '                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n    '                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n    '                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n    '                        doneN = abs(lumaEndN) >= gradientScaled;',\n    '                        doneP = abs(lumaEndP) >= gradientScaled;',\n    '                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;',\n    '                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;',\n    '                        doneNP = (!doneN) || (!doneP);',\n    '                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;',\n    '                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;',\n    '/*--------------------------------------------------------------------------*/',\n    '                        #if (FXAA_QUALITY_PS > 7)',\n    '                        if(doneNP) {',\n    '                            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n    '                            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n    '                            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n    '                            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n    '                            doneN = abs(lumaEndN) >= gradientScaled;',\n    '                            doneP = abs(lumaEndP) >= gradientScaled;',\n    '                            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;',\n    '                            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;',\n    '                            doneNP = (!doneN) || (!doneP);',\n    '                            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;',\n    '                            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;',\n    '/*--------------------------------------------------------------------------*/',\n    '    #if (FXAA_QUALITY_PS > 8)',\n    '    if(doneNP) {',\n    '        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n    '        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n    '        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n    '        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n    '        doneN = abs(lumaEndN) >= gradientScaled;',\n    '        doneP = abs(lumaEndP) >= gradientScaled;',\n    '        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;',\n    '        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;',\n    '        doneNP = (!doneN) || (!doneP);',\n    '        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;',\n    '        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;',\n    '/*--------------------------------------------------------------------------*/',\n    '        #if (FXAA_QUALITY_PS > 9)',\n    '        if(doneNP) {',\n    '            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n    '            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n    '            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n    '            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n    '            doneN = abs(lumaEndN) >= gradientScaled;',\n    '            doneP = abs(lumaEndP) >= gradientScaled;',\n    '            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;',\n    '            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;',\n    '            doneNP = (!doneN) || (!doneP);',\n    '            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;',\n    '            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;',\n    '/*--------------------------------------------------------------------------*/',\n    '            #if (FXAA_QUALITY_PS > 10)',\n    '            if(doneNP) {',\n    '                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n    '                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n    '                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n    '                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n    '                doneN = abs(lumaEndN) >= gradientScaled;',\n    '                doneP = abs(lumaEndP) >= gradientScaled;',\n    '                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;',\n    '                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;',\n    '                doneNP = (!doneN) || (!doneP);',\n    '                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;',\n    '                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;',\n    '/*--------------------------------------------------------------------------*/',\n    '                #if (FXAA_QUALITY_PS > 11)',\n    '                if(doneNP) {',\n    '                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n    '                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n    '                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n    '                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n    '                    doneN = abs(lumaEndN) >= gradientScaled;',\n    '                    doneP = abs(lumaEndP) >= gradientScaled;',\n    '                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;',\n    '                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;',\n    '                    doneNP = (!doneN) || (!doneP);',\n    '                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;',\n    '                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;',\n    '/*--------------------------------------------------------------------------*/',\n    '                    #if (FXAA_QUALITY_PS > 12)',\n    '                    if(doneNP) {',\n    '                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n    '                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n    '                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n    '                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n    '                        doneN = abs(lumaEndN) >= gradientScaled;',\n    '                        doneP = abs(lumaEndP) >= gradientScaled;',\n    '                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;',\n    '                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;',\n    '                        doneNP = (!doneN) || (!doneP);',\n    '                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;',\n    '                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;',\n    '/*--------------------------------------------------------------------------*/',\n    '                    }',\n    '                    #endif',\n    '/*--------------------------------------------------------------------------*/',\n    '                }',\n    '                #endif',\n    '/*--------------------------------------------------------------------------*/',\n    '            }',\n    '            #endif',\n    '/*--------------------------------------------------------------------------*/',\n    '        }',\n    '        #endif',\n    '/*--------------------------------------------------------------------------*/',\n    '    }',\n    '    #endif',\n    '/*--------------------------------------------------------------------------*/',\n    '                        }',\n    '                        #endif',\n    '/*--------------------------------------------------------------------------*/',\n    '                    }',\n    '                    #endif',\n    '/*--------------------------------------------------------------------------*/',\n    '                }',\n    '                #endif',\n    '/*--------------------------------------------------------------------------*/',\n    '            }',\n    '            #endif',\n    '/*--------------------------------------------------------------------------*/',\n    '        }',\n    '        #endif',\n    '/*--------------------------------------------------------------------------*/',\n    '    }',\n    '/*--------------------------------------------------------------------------*/',\n    '    FxaaFloat dstN = posM.x - posN.x;',\n    '    FxaaFloat dstP = posP.x - posM.x;',\n    '    if(!horzSpan) dstN = posM.y - posN.y;',\n    '    if(!horzSpan) dstP = posP.y - posM.y;',\n    '/*--------------------------------------------------------------------------*/',\n    '    FxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;',\n    '    FxaaFloat spanLength = (dstP + dstN);',\n    '    FxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;',\n    '    FxaaFloat spanLengthRcp = 1.0/spanLength;',\n    '/*--------------------------------------------------------------------------*/',\n    '    FxaaBool directionN = dstN < dstP;',\n    '    FxaaFloat dst = min(dstN, dstP);',\n    '    FxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;',\n    '    FxaaFloat subpixG = subpixF * subpixF;',\n    '    FxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;',\n    '    FxaaFloat subpixH = subpixG * fxaaQualitySubpix;',\n    '/*--------------------------------------------------------------------------*/',\n    '    FxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;',\n    '    FxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);',\n    '    if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;',\n    '    if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;',\n    '    #if (FXAA_DISCARD == 1)',\n    '        return FxaaTexTop(tex, posM);',\n    '    #else',\n    '        return FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);',\n    '    #endif',\n    '}',\n    '/*==========================================================================*/',\n    '#endif',\n    '',\n    'void main() {',\n    '  gl_FragColor = FxaaPixelShader(',\n    '    vUv,',\n    '    vec4(0.0),',\n    '    tDiffuse,',\n    '    tDiffuse,',\n    '    tDiffuse,',\n    '    resolution,',\n    '    vec4(0.0),',\n    '    vec4(0.0),',\n    '    vec4(0.0),',\n    '    0.75,',\n    '    0.166,',\n    '    0.0833,',\n    '    0.0,',\n    '    0.0,',\n    '    0.0,',\n    '    vec4(0.0)',\n    '  );',\n    '',\n    '  // TODO avoid querying texture twice for same texel',\n    '  gl_FragColor.a = texture2D(tDiffuse, vUv).a;',\n    '}',\n  ].join('\\n'),\n}\n\nexport { FXAAShader }\n"]},"metadata":{},"sourceType":"module"}