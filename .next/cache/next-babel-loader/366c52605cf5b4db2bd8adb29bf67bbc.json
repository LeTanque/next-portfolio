{"ast":null,"code":"var _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/dnd-draglayer/DraggableBox.jsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { DragSource } from \"react-dnd\";\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\nimport ItemTypes from \"./ItemTypes\";\nimport Box from \"./Box\";\n\nfunction getStyles(props) {\n  const {\n    left,\n    top,\n    isDragging\n  } = props;\n  const transform = `translate3d(${left}px, ${top}px, 0)`;\n  return {\n    position: \"absolute\",\n    transform,\n    WebkitTransform: transform,\n    // IE fallback: hide the real node using CSS when dragging\n    // because IE will ignore our custom \"empty image\" drag preview.\n    opacity: isDragging ? 0 : 1,\n    height: isDragging ? 0 : \"\"\n  };\n}\n\nclass DraggableBox extends React.PureComponent {\n  componentDidMount() {\n    const {\n      connectDragPreview\n    } = this.props;\n\n    if (connectDragPreview) {\n      // Use empty image as a drag preview so browsers don't draw it\n      // and we can draw whatever we want on the custom drag layer instead.\n      connectDragPreview(getEmptyImage(), {\n        // IE fallback: specify that we'd rather screenshot the node\n        // when it already knows it's being dragged so we can hide it with CSS.\n        captureDraggingState: true\n      });\n    }\n  }\n\n  render() {\n    const {\n      slug,\n      rotation,\n      image,\n      title,\n      connectDragSource\n    } = this.props;\n    return connectDragSource(__jsx(\"div\", {\n      style: getStyles(this.props),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, __jsx(Box, {\n      title: title,\n      image: image,\n      rotation: rotation,\n      slug: slug,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default DragSource(ItemTypes.BOX, {\n  beginDrag(props) {\n    const {\n      id,\n      title,\n      image,\n      left,\n      top\n    } = props;\n    return {\n      id,\n      title,\n      image,\n      left,\n      top\n    };\n  }\n\n}, (connect, monitor) => ({\n  connectDragSource: connect.dragSource(),\n  connectDragPreview: connect.dragPreview(),\n  isDragging: monitor.isDragging()\n}))(DraggableBox);","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/dnd-draglayer/DraggableBox.jsx"],"names":["React","DragSource","getEmptyImage","ItemTypes","Box","getStyles","props","left","top","isDragging","transform","position","WebkitTransform","opacity","height","DraggableBox","PureComponent","componentDidMount","connectDragPreview","captureDraggingState","render","slug","rotation","image","title","connectDragSource","BOX","beginDrag","id","connect","monitor","dragSource","dragPreview"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,WAA3B;AACA,SAASC,aAAT,QAA8B,yBAA9B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,GAAP,MAAgB,OAAhB;;AAGA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACtB,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,GAAR;AAAaC,IAAAA;AAAb,MAA4BH,KAAlC;AACA,QAAMI,SAAS,GAAI,eAAcH,IAAK,OAAMC,GAAI,QAAhD;AACA,SAAO;AACHG,IAAAA,QAAQ,EAAE,UADP;AAEHD,IAAAA,SAFG;AAGHE,IAAAA,eAAe,EAAEF,SAHd;AAIH;AACA;AACAG,IAAAA,OAAO,EAAEJ,UAAU,GAAG,CAAH,GAAO,CANvB;AAOHK,IAAAA,MAAM,EAAEL,UAAU,GAAG,CAAH,GAAO;AAPtB,GAAP;AASH;;AAED,MAAMM,YAAN,SAA2Bf,KAAK,CAACgB,aAAjC,CAA+C;AAC3CC,EAAAA,iBAAiB,GAAG;AAChB,UAAM;AAAEC,MAAAA;AAAF,QAAyB,KAAKZ,KAApC;;AAEA,QAAIY,kBAAJ,EAAwB;AACpB;AACA;AACAA,MAAAA,kBAAkB,CAAChB,aAAa,EAAd,EAAkB;AAChC;AACA;AACAiB,QAAAA,oBAAoB,EAAE;AAHU,OAAlB,CAAlB;AAKH;AACJ;;AACDC,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,QAAR;AAAkBC,MAAAA,KAAlB;AAAyBC,MAAAA,KAAzB;AAAgCC,MAAAA;AAAhC,QAAsD,KAAKnB,KAAjE;AACA,WAAOmB,iBAAiB,CACpB;AAAK,MAAA,KAAK,EAAEpB,SAAS,CAAC,KAAKC,KAAN,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,GAAD;AAAK,MAAA,KAAK,EAAEkB,KAAZ;AAAmB,MAAA,KAAK,EAAED,KAA1B;AAAiC,MAAA,QAAQ,EAAED,QAA3C;AAAqD,MAAA,IAAI,EAAED,IAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADoB,CAAxB;AAKH;;AArB0C;;AAwB/C,eAAepB,UAAU,CACrBE,SAAS,CAACuB,GADW,EAErB;AACIC,EAAAA,SAAS,CAACrB,KAAD,EAAQ;AACb,UAAM;AAAEsB,MAAAA,EAAF;AAAMJ,MAAAA,KAAN;AAAaD,MAAAA,KAAb;AAAoBhB,MAAAA,IAApB;AAA0BC,MAAAA;AAA1B,QAAkCF,KAAxC;AACA,WAAO;AAAEsB,MAAAA,EAAF;AAAMJ,MAAAA,KAAN;AAAaD,MAAAA,KAAb;AAAoBhB,MAAAA,IAApB;AAA0BC,MAAAA;AAA1B,KAAP;AACH;;AAJL,CAFqB,EAQrB,CAACqB,OAAD,EAAUC,OAAV,MAAuB;AACnBL,EAAAA,iBAAiB,EAAEI,OAAO,CAACE,UAAR,EADA;AAEnBb,EAAAA,kBAAkB,EAAEW,OAAO,CAACG,WAAR,EAFD;AAGnBvB,EAAAA,UAAU,EAAEqB,OAAO,CAACrB,UAAR;AAHO,CAAvB,CARqB,CAAV,CAabM,YAba,CAAf","sourcesContent":["import React from \"react\";\nimport { DragSource } from \"react-dnd\";\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\nimport ItemTypes from \"./ItemTypes\";\nimport Box from \"./Box\";\n\n\nfunction getStyles(props) {\n    const { left, top, isDragging } = props;\n    const transform = `translate3d(${left}px, ${top}px, 0)`;\n    return {\n        position: \"absolute\",\n        transform,\n        WebkitTransform: transform,\n        // IE fallback: hide the real node using CSS when dragging\n        // because IE will ignore our custom \"empty image\" drag preview.\n        opacity: isDragging ? 0 : 1,\n        height: isDragging ? 0 : \"\"\n    };\n}\n\nclass DraggableBox extends React.PureComponent {\n    componentDidMount() {\n        const { connectDragPreview } = this.props;\n\n        if (connectDragPreview) {\n            // Use empty image as a drag preview so browsers don't draw it\n            // and we can draw whatever we want on the custom drag layer instead.\n            connectDragPreview(getEmptyImage(), {\n                // IE fallback: specify that we'd rather screenshot the node\n                // when it already knows it's being dragged so we can hide it with CSS.\n                captureDraggingState: true\n            });\n        }\n    }\n    render() {\n        const { slug, rotation, image, title, connectDragSource } = this.props;\n        return connectDragSource(\n            <div style={getStyles(this.props)}>\n                <Box title={title} image={image} rotation={rotation} slug={slug} />\n            </div>\n        );\n    }\n}\n\nexport default DragSource(\n    ItemTypes.BOX,\n    {\n        beginDrag(props) {\n            const { id, title, image, left, top } = props;\n            return { id, title, image, left, top };\n        }\n    },\n    (connect, monitor) => ({\n        connectDragSource: connect.dragSource(),\n        connectDragPreview: connect.dragPreview(),\n        isDragging: monitor.isDragging()\n    })\n)(DraggableBox);\n"]},"metadata":{},"sourceType":"module"}