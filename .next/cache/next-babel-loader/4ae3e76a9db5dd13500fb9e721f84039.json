{"ast":null,"code":"import _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport { DataTexture, FloatType, Math as _Math, Mesh, OrthographicCamera, PlaneBufferGeometry, RGBFormat, Scene, ShaderMaterial, UniformsUtils } from \"three/src/Three\";\nimport { DigitalGlitch } from \"../shaders/DigitalGlitch.js\";\nimport { Pass } from \"./Pass.js\";\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nvar GlitchPass = function (dt_size) {\n  Pass.call(this);\n  if (DigitalGlitch === undefined) console.error(\"THREE.GlitchPass relies on THREE.DigitalGlitch\");\n  var shader = DigitalGlitch;\n  this.uniforms = UniformsUtils.clone(shader.uniforms);\n  if (dt_size === undefined) dt_size = 64;\n  this.uniforms[\"tDisp\"].value = this.generateHeightmap(dt_size);\n  this.material = new ShaderMaterial({\n    uniforms: this.uniforms,\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader\n  });\n  this.camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  this.scene = new Scene();\n  this.quad = new Mesh(new PlaneBufferGeometry(2, 2), null);\n  this.quad.frustumCulled = false; // Avoid getting clipped\n\n  this.scene.add(this.quad);\n  this.factor = 0;\n};\n\nGlitchPass.prototype = _Object$assign(_Object$create(Pass.prototype), {\n  constructor: GlitchPass,\n  render: function (renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    const factor = Math.max(0, this.factor);\n    this.uniforms[\"tDiffuse\"].value = readBuffer.texture;\n    this.uniforms[\"seed\"].value = Math.random() * factor; //default seeding\n\n    this.uniforms[\"byp\"].value = 0;\n\n    if (factor) {\n      this.uniforms[\"amount\"].value = Math.random() / 90 * factor;\n      this.uniforms[\"angle\"].value = _Math.randFloat(-Math.PI, Math.PI) * factor;\n      this.uniforms[\"distortion_x\"].value = _Math.randFloat(0, 1) * factor;\n      this.uniforms[\"distortion_y\"].value = _Math.randFloat(0, 1) * factor;\n      this.uniforms[\"seed_x\"].value = _Math.randFloat(-0.3, 0.3) * factor;\n      this.uniforms[\"seed_y\"].value = _Math.randFloat(-0.3, 0.3) * factor;\n    } else this.uniforms[\"byp\"].value = 1;\n\n    this.quad.material = this.material;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      renderer.render(this.scene, this.camera);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      renderer.render(this.scene, this.camera);\n    }\n  },\n  generateHeightmap: function (dt_size) {\n    var data_arr = new Float32Array(dt_size * dt_size * 3);\n    var length = dt_size * dt_size;\n\n    for (var i = 0; i < length; i++) {\n      var val = _Math.randFloat(0, 1);\n\n      data_arr[i * 3 + 0] = val;\n      data_arr[i * 3 + 1] = val;\n      data_arr[i * 3 + 2] = val;\n    }\n\n    var texture = new DataTexture(data_arr, dt_size, dt_size, RGBFormat, FloatType);\n    texture.needsUpdate = true;\n    return texture;\n  }\n});\nexport { GlitchPass };","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/resources/postprocessing/GlitchPass.js"],"names":["Math","GlitchPass","Pass","DigitalGlitch","console","shader","UniformsUtils","dt_size","uniforms","vertexShader","fragmentShader","constructor","render","factor","readBuffer","_Math","renderer","generateHeightmap","data_arr","length","i","val","texture"],"mappings":"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","sourcesContent":["import {\n    DataTexture,\n    FloatType,\n    Math as _Math,\n    Mesh,\n    OrthographicCamera,\n    PlaneBufferGeometry,\n    RGBFormat,\n    Scene,\n    ShaderMaterial,\n    UniformsUtils\n} from \"three/src/Three\";\nimport { DigitalGlitch } from \"../shaders/DigitalGlitch.js\";\nimport { Pass } from \"./Pass.js\";\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nvar GlitchPass = function(dt_size) {\n    Pass.call(this);\n    if (DigitalGlitch === undefined)\n        console.error(\"THREE.GlitchPass relies on THREE.DigitalGlitch\");\n    var shader = DigitalGlitch;\n    this.uniforms = UniformsUtils.clone(shader.uniforms);\n    if (dt_size === undefined) dt_size = 64;\n    this.uniforms[\"tDisp\"].value = this.generateHeightmap(dt_size);\n    this.material = new ShaderMaterial({\n        uniforms: this.uniforms,\n        vertexShader: shader.vertexShader,\n        fragmentShader: shader.fragmentShader\n    });\n    this.camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    this.scene = new Scene();\n    this.quad = new Mesh(new PlaneBufferGeometry(2, 2), null);\n    this.quad.frustumCulled = false; // Avoid getting clipped\n    this.scene.add(this.quad);\n    this.factor = 0;\n};\n\nGlitchPass.prototype = Object.assign(Object.create(Pass.prototype), {\n    constructor: GlitchPass,\n\n    render: function(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n        const factor = Math.max(0, this.factor);\n        this.uniforms[\"tDiffuse\"].value = readBuffer.texture;\n        this.uniforms[\"seed\"].value = Math.random() * factor; //default seeding\n        this.uniforms[\"byp\"].value = 0;\n        if (factor) {\n            this.uniforms[\"amount\"].value = (Math.random() / 90) * factor;\n            this.uniforms[\"angle\"].value =\n                _Math.randFloat(-Math.PI, Math.PI) * factor;\n            this.uniforms[\"distortion_x\"].value =\n                _Math.randFloat(0, 1) * factor;\n            this.uniforms[\"distortion_y\"].value =\n                _Math.randFloat(0, 1) * factor;\n            this.uniforms[\"seed_x\"].value = _Math.randFloat(-0.3, 0.3) * factor;\n            this.uniforms[\"seed_y\"].value = _Math.randFloat(-0.3, 0.3) * factor;\n        } else this.uniforms[\"byp\"].value = 1;\n        this.quad.material = this.material;\n        if (this.renderToScreen) {\n            renderer.setRenderTarget(null);\n            renderer.render(this.scene, this.camera);\n        } else {\n            renderer.setRenderTarget(writeBuffer);\n            if (this.clear) renderer.clear();\n            renderer.render(this.scene, this.camera);\n        }\n    },\n\n    generateHeightmap: function(dt_size) {\n        var data_arr = new Float32Array(dt_size * dt_size * 3);\n        var length = dt_size * dt_size;\n\n        for (var i = 0; i < length; i++) {\n            var val = _Math.randFloat(0, 1);\n            data_arr[i * 3 + 0] = val;\n            data_arr[i * 3 + 1] = val;\n            data_arr[i * 3 + 2] = val;\n        }\n\n        var texture = new DataTexture(\n            data_arr,\n            dt_size,\n            dt_size,\n            RGBFormat,\n            FloatType\n        );\n        texture.needsUpdate = true;\n        return texture;\n    }\n});\n\nexport { GlitchPass };\n"]},"metadata":{},"sourceType":"module"}