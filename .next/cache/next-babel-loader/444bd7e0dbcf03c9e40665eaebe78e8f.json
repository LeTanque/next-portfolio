{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef, useState, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { Canvas, extend as extendThree, useFrame, useLoader, useResource, useThree } from \"react-three-fiber\"; // Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\n\nimport { EffectComposer } from \"./resources/postprocessing/EffectComposer\";\nimport { RenderPass } from \"./resources/postprocessing/RenderPass\";\nimport { GlitchPass } from \"./resources/postprocessing/GlitchPass\";\nextendThree({\n  EffectComposer: EffectComposer,\n  RenderPass: RenderPass,\n  GlitchPass: GlitchPass\n}); // import TextLoop from \"../TextLoop\";\n// Cast the lighting\n\nvar Lighting = function Lighting() {\n  var _useThree = useThree(),\n      mouse = _useThree.mouse;\n\n  var light = useRef();\n  useFrame(function () {\n    light.current.position.set(mouse.x / 20, -mouse.y / 20, 0);\n  });\n  return __jsx(React.Fragment, null, __jsx(\"directionalLight\", {\n    position: [-2, 0, 30],\n    intensity: 0.5,\n    color: \"#ffffff\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }), __jsx(\"pointLight\", {\n    ref: light,\n    distance: 50,\n    intensity: 1.5,\n    color: \"#ffffff\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }));\n}; // The canvas houses this function, the scene. Scene is where the elements come together.\n\n\nfunction SmokePuff(_ref) {\n  var geometry = _ref.geometry,\n      material = _ref.material,\n      particleArray = _ref.particleArray;\n  var smokePuffRef = useRef();\n  var tenToHundred = Math.random() * 100; // 10 - 99.99\n\n  var speed = 0.01 + Math.random() / 200; // 0.1 - 0.19\n\n  var factor = 20 + Math.random() * 100; // ~ 20-30\n\n  var xFactor = -50 + Math.random() * 100; // -50 - 50\n\n  var yFactor = -50 + Math.random() * 100; // -50 - 50\n\n  var zFactor = 10 + Math.random() * 10; //  10 - 20\n\n  var cosWave = Math.cos(tenToHundred) / 3 + 1.2; // a cosign wave.  ~ 0.5 - 1.5\n\n  var getRandomArbitrary = function getRandomArbitrary(min, max) {\n    return Math.random() * (max - min) + min;\n  };\n\n  var randomFactor = getRandomArbitrary(2, 3);\n  useFrame(function (_ref2) {\n    var clock = _ref2.clock;\n    tenToHundred += speed; // tenToHundred = tenToHundred + speed, plus it sets a unique new version of tenToHundred.\n\n    var delta = clock.getDelta(); // Change in clock. Something like 0.0001 - 0.0099\n\n    var slowAndSteady = clock.elapsedTime * (delta + 0.017) * randomFactor + xFactor; // starts at ~0.0001 + xFactor and slowly increases\n\n    smokePuffRef.current.scale.set(cosWave, cosWave, 2);\n    smokePuffRef.current.rotation.z = slowAndSteady;\n    smokePuffRef.current.position.set(xFactor + Math.cos(tenToHundred / 30 * factor) + Math.sin(tenToHundred * 1) * factor / 10, yFactor + Math.sin(tenToHundred / 20 * factor) + Math.cos(tenToHundred * 2) * factor / 10, zFactor // zFactor + Math.cos((tenToHundred/ 10) * factor) + (Math.sin(tenToHundred* 3) * factor) / 20\n    );\n  });\n  console.log('smokePuffRef --> ', smokePuffRef);\n  return __jsx(\"mesh\", {\n    ref: smokePuffRef,\n    material: material,\n    geometry: geometry,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  });\n}\n\nvar GenerateSmoke = function GenerateSmoke(_ref3) {\n  var particleArray = _ref3.particleArray;\n\n  var _useResource = useResource(),\n      _useResource2 = _slicedToArray(_useResource, 2),\n      geometryRef = _useResource2[0],\n      geometry = _useResource2[1];\n\n  var _useResource3 = useResource(),\n      _useResource4 = _slicedToArray(_useResource3, 2),\n      materialRef = _useResource4[0],\n      material = _useResource4[1];\n\n  var url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n  var texture = useMemo(function () {\n    return new THREE.TextureLoader().load(url);\n  }, [url]);\n  return __jsx(React.Fragment, null, __jsx(Lighting, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }), __jsx(\"planeGeometry\", {\n    ref: geometryRef,\n    attach: \"geometry\",\n    args: [200, 200],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }), __jsx(\"meshLambertMaterial\", {\n    ref: materialRef,\n    attach: \"material\",\n    color: \"#ccbbee\",\n    transparent: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, __jsx(\"primitive\", {\n    attach: \"map\",\n    object: texture,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  })), geometry && new Array(3).fill().map(function (_, index) {\n    return __jsx(SmokePuff, {\n      key: index,\n      material: material,\n      geometry: geometry,\n      particleArray: particleArray,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    });\n  }));\n}; // This is the canvas. It's the lowest level element in the three/webGl chain\n\n\nvar CanvasicalSmoke = function CanvasicalSmoke() {\n  var particleCount = 3;\n  var particleArray = [{\n    id: 0,\n    x: 0,\n    y: 0,\n    z: 2\n  }];\n  useEffect(function () {\n    if (particleArray.length === particleCount) {\n      return null;\n    } else {\n      for (var i = 0; i <= particleCount; i++) {\n        particleArray.push({\n          id: particleArray[i].id + 1,\n          x: particleArray[i].x + 1,\n          y: particleArray[i].y + 1,\n          z: 2\n        });\n      }\n    }\n  }, [particleArray]);\n  return __jsx(React.Fragment, null, __jsx(Canvas, {\n    className: \"container block__three-container\",\n    camera: {\n      fov: 75,\n      aspect: 0.5,\n      near: 1,\n      far: 10000,\n      position: [0, 0, 300]\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, __jsx(GenerateSmoke, {\n    particleArray: particleArray,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  })));\n};\n\nexport default CanvasicalSmoke; // // Creates a fullscreen colored plane\n// const Plane = () => {\n//     return (\n//         <mesh >\n//             <planeGeometry  attach=\"geometry\"  args={[ 32, 32, 32, 32 ]} />\n//             <meshPhysicalMaterial  attach=\"material\"  color=\"#ffffff\"  />\n//         </mesh>\n//     )\n// }\n// // A light bar\n// const LightBar = () => {\n//     // const lightBar = useRef();\n//     return (\n//         <>\n//             <mesh\n//                 // ref={lightBar}\n//             >\n//                 <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n//                 <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n//             </mesh>\n//         </>\n//     )\n// }","map":{"version":3,"sources":["/Users/tank/git/Portfolio/next-portfolio/components/threejs-render/CanvasicalSmoke.jsx"],"names":["extend","extendThree","EffectComposer","RenderPass","GlitchPass","Lighting","mouse","useThree","light","useRef","useFrame","geometry","material","particleArray","smokePuffRef","tenToHundred","Math","speed","factor","xFactor","yFactor","zFactor","cosWave","getRandomArbitrary","max","randomFactor","clock","delta","slowAndSteady","console","GenerateSmoke","geometryRef","useResource","materialRef","url","texture","useMemo","THREE","CanvasicalSmoke","particleCount","id","x","y","z","useEffect","i","fov","aspect","near","far","position"],"mappings":"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","sourcesContent":["import React, {\n    useCallback,\n    useEffect,\n    useRef,\n    useState,\n    useMemo\n} from \"react\";\nimport * as THREE from \"three\";\nimport {\n    Canvas,\n    extend as extendThree,\n    useFrame,\n    useLoader,\n    useResource,\n    useThree\n} from \"react-three-fiber\";\n\n// Import and register postprocessing classes as three-native-elements for react-three-fiber\n// They'll be available as native elements <effectComposer /> from then on ...\nimport { EffectComposer } from \"./resources/postprocessing/EffectComposer\";\nimport { RenderPass } from \"./resources/postprocessing/RenderPass\";\nimport { GlitchPass } from \"./resources/postprocessing/GlitchPass\";\nextendThree({ EffectComposer, RenderPass, GlitchPass });\n\n// import TextLoop from \"../TextLoop\";\n\n\n// Cast the lighting\nconst Lighting = () => {\n    const { mouse } = useThree();\n    const light = useRef();\n    \n    useFrame(() => {\n        light.current.position.set( mouse.x / 20, -mouse.y / 20, 0 )\n    });\n\n    return (\n        <>\n            <directionalLight\n                position={[ -2, 0, 30 ]}  intensity={0.5}  color=\"#ffffff\" \n            />\n            <pointLight \n                ref={light} distance={50} intensity={1.5} color=\"#ffffff\" \n            />\n        </>\n    );\n};\n\n// The canvas houses this function, the scene. Scene is where the elements come together.\nfunction SmokePuff({ geometry, material, particleArray }) {\n    let smokePuffRef = useRef();\n    let tenToHundred = Math.random() * 100; // 10 - 99.99\n    let speed = 0.01 + Math.random() / 200; // 0.1 - 0.19\n    let factor = 20 + Math.random() * 100;  // ~ 20-30\n    let xFactor = -50 + Math.random() * 100;  // -50 - 50\n    let yFactor = -50 + Math.random() * 100;  // -50 - 50\n    let zFactor = 10 + Math.random() * 10;  //  10 - 20\n    const cosWave = (Math.cos(tenToHundred) / 3) + 1.2;  // a cosign wave.  ~ 0.5 - 1.5\n\n    const getRandomArbitrary = (min, max) => Math.random() * (max - min) + min;\n    let randomFactor = getRandomArbitrary(2, 3);\n    \n    useFrame(({ clock }) => {\n        tenToHundred += speed; // tenToHundred = tenToHundred + speed, plus it sets a unique new version of tenToHundred.\n        let delta = clock.getDelta();  // Change in clock. Something like 0.0001 - 0.0099\n        \n        let slowAndSteady = ((clock.elapsedTime * (delta + 0.017)) * randomFactor) + xFactor;  // starts at ~0.0001 + xFactor and slowly increases\n\n        smokePuffRef.current.scale.set(cosWave, cosWave, 2);\n        smokePuffRef.current.rotation.z = slowAndSteady;\n        smokePuffRef.current.position.set(\n            xFactor + Math.cos((tenToHundred/ 30) * factor) + (Math.sin(tenToHundred* 1) * factor) / 10,\n            yFactor + Math.sin((tenToHundred/ 20) * factor) + (Math.cos(tenToHundred* 2) * factor) / 10,\n            zFactor\n            // zFactor + Math.cos((tenToHundred/ 10) * factor) + (Math.sin(tenToHundred* 3) * factor) / 20\n        );\n    });\n\n    console.log('smokePuffRef --> ', smokePuffRef);\n\n    return <mesh  ref={smokePuffRef} material={material} geometry={geometry}  />;\n}\n\nconst GenerateSmoke = ({ particleArray }) => {\n    const [geometryRef, geometry] = useResource();\n    const [materialRef, material] = useResource();\n    const url = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png';\n    const texture = useMemo(() => new THREE.TextureLoader().load(url), [url]);\n    \n    return (\n        <>\n            <Lighting />\n\n            <planeGeometry \n                ref={geometryRef} \n                attach=\"geometry\"   \n                args={[200, 200]} \n            />\n            <meshLambertMaterial \n                ref={materialRef}\n                attach=\"material\" \n                color=\"#ccbbee\"\n                transparent\n            >\n                <primitive attach=\"map\" object={texture} />\n            </meshLambertMaterial>\n\n            {geometry && new Array(3).fill().map((_, index) => (\n                <SmokePuff\n                    key={index}\n                    material={material}\n                    geometry={geometry}\n                    particleArray={particleArray}\n                />\n            ))}\n        </>\n    );\n}\n\n\n// This is the canvas. It's the lowest level element in the three/webGl chain\nconst CanvasicalSmoke = () => {\n    const particleCount = 3;\n    const particleArray = [{ id: 0, x: 0, y: 0, z: 2 }];\n\n    useEffect(() => {\n        if (particleArray.length === particleCount) {\n            return null;\n        } else {\n            for (let i = 0; i <= particleCount; i++) {\n                particleArray.push({\n                    id: particleArray[i].id + 1,\n                    x: particleArray[i].x + 1,\n                    y: particleArray[i].y + 1,\n                    z: 2\n                });\n            }\n        }\n    }, [particleArray]);\n\n    return (\n        <>\n            <Canvas\n                className=\"container block__three-container\"\n                camera={{\n                    fov: 75,\n                    aspect: 0.5,\n                    near: 1,\n                    far: 10000,\n                    position: [0, 0, 300]\n                }}\n            >\n                <GenerateSmoke particleArray={particleArray} />\n            </Canvas>\n\n            {/* <TextLoop  /> */}\n        </>\n    );\n};\n\nexport default CanvasicalSmoke;\n\n// // Creates a fullscreen colored plane\n// const Plane = () => {\n//     return (\n//         <mesh >\n//             <planeGeometry  attach=\"geometry\"  args={[ 32, 32, 32, 32 ]} />\n//             <meshPhysicalMaterial  attach=\"material\"  color=\"#ffffff\"  />\n//         </mesh>\n//     )\n// }\n\n// // A light bar\n// const LightBar = () => {\n//     // const lightBar = useRef();\n\n//     return (\n//         <>\n//             <mesh\n//                 // ref={lightBar}\n//             >\n//                 <boxBufferGeometry attach=\"geometry\" args={[ 0.5, 20, 1 ]} />\n//                 <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n//             </mesh>\n//         </>\n//     )\n// }\n"]},"metadata":{},"sourceType":"module"}